/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
		Group			: Application – Products
		Product / Project	: WorkFlow 6.0
		Module			: Transaction Server
		File Name		: OFCabCreation.sql
		Author			: Harmeet Kaur
		Date written(DD/MM/YYYY): 
		Description		: Script for cabinet creation (Omniflow).
____________________________________________________________________________________________________
			CHANGE HISTORY
____________________________________________________________________________________________________
Date		Change By	Change Description (Bug No. (If Any))
(DD/MM/YYYY)
____________________________________________________________________________________________________
01/03/2005	Ruhi Hira		Create_ProcessViews modified.
29/09/2005	Ruhi Hira		SrNo-1.
29/09/2005	Momshad Khan	SrNo-2.
20/12/2005	Mandeep Kaur    SrNo-3.
03/01/2006	Ruhi Hira		WFS_6.1.2_008, WFS_6.1.2_009.
10/01/2006	Mandeep kaur	SrNo-5.
12/01/2006	Mandeep Kaur	WFS_6.1.2_025
13/01/2006	Mandeep Kaur	WFS_6.1.2_031
19/01/2006	Harmeet Kaur	WFS_6.1.2_037
20/01/2006	Harmeet Kaur	WFS_6.1.2_042
20/01/2006	Ashish Mangla	WFS_6.1.2_043
13/04/2006	Ashish Mangla	Removed Rollback Tran
09/05/2006	Ruhi Hira		Bug no. WFS_6.2_005.
28/08/2006	Ruhi Hira		Bugzilla Id 95.
06/12/2006	Ruhi Hira		SrNo-6.
05/02/2007	Varun Bhansaly	Bugzilla Id 442
08/02/2007	Varun Bhansaly	Bugzilla Id 74
12/04/2007  Varun Bhansaly	New Parameter ActionCalFlag added to ActionOperationTable
24/04/2007	Varun Bhansaly	Type for ActionId=77 will be 'C' in WFActionStatusTable
04/05/2007	Varun Bhansaly	1. Bugzilla Id 458 (Archive - Support for archiving documents on diff app server / domain/ instance)
							2. Calendar Name should not be Unique
10/05/2007	Varun Bhansaly	MultiLingual Support (2 tables added)
14/05/2007	Varun Bhansaly	Bugzilla Id 442 (Important Indexes missing in Omniflow 6x cabinet creation script)
							New Tables for Report as well as New Indexes On the new Tables
15/05/2007	Varun Bhansaly	Bugzilla Id 690 (Delete On collect - configuration)
15/05/2007	Varun Bhansaly	Bugzilla Id 357 (Auditing of actions related to calendar)
18/05/2007	Varun Bhansaly	Bugzilla Id 819 (Scripts to be verified in cab creation)
22/05/2007	Ruhi Hira		Bugzilla Id 732 (Procedures removed).
22/05/2007	Varun Bhansaly	Bugzilla Id 819 (Table WFParamMappingBuffer1 renamed to WFParamMappingBuffer)
08/06/2007	Ruhi Hira		Bugzilla Bug 637 (referto)
08/06/2007 	Ruhi Hira		WFS_5_161 (Multilingual Support -> Extra Column Added in WFSessionView)
21/06/2007  Varun Bhansaly	Change Cabinet Version from 7.0.1 to 7.0.2
21/06/2007  Varun Bhansaly	datatype of Column description of Table InterfaceDescLanguageTable changed
19/07/2007  Varun Bhansaly	SuccessLogTable & FailureLogTable to be created from OFCabCreation
18/09/2007	Varun Bhansaly	EXTMETHODPARAMMAPPINGTABLE, DataStructureId changed from NOT NULL to NULL
26/10/2007	Varun Bhansaly	SrNo-7, WFCommentsTable
26/10/2007	Varun Bhansaly	SrNo-8, WFQuickSearchTable
26/10/2007	Varun Bhansaly	SrNo-9, WFDurationTable
26/10/2007	Varun Bhansaly	SrNo-10, WFFilterTable
26/10/2007	Varun Bhansaly	SrNo-11, Added column QueueFilter to QueueDefTable
26/10/2007	Varun Bhansaly	Bugzilla Id 1027 (All DDL Statements should be done through CabCreation Script only)
26/10/2007	Varun Bhansaly	Bugzilla Id 1677 [Cab Creation] Index missing on VarAliasTable
26/10/2007	Varun Bhansaly	Bugzilla Id 1645 Password not encrypted in ArchiveTable and ExtDBConfTable 
26/10/2007	Varun Bhansaly	Bugzilla Id 1676 [Cab Creation] Unique constraint missing on VarMappingTable 
26/10/2007	Varun Bhansaly	Bugzilla Id 1687 [Cab Creation + Upgrade] WFDataStructureTable : Primary key violation
26/10/2007	Varun Bhansaly	Bugzilla Id 1645 Password not encrypted in ArchiveTable and ExtDBConfTable
15/11/2007	Varun Bhansaly	Removed Bugzilla Id 1676 :: TBD Later
23/11/2007  Shilpi S        Bugzilla Bug Id 1718
03/12/2007	Varun Bhansaly	SrNo-12, Export Utility
13/12/2007  Varun Bhansaly	Bugzilla Id 1800 ([CabCreation] New parameter type 12 [boolean] to be considered)
19/12/2007	Varun Bhansaly	SrNo-13, OD 6.0 UTF-8 encoding issue
29/12/2007	Ashish Mangla	Bugzilla Bug 3108 (Column name corrected)
07/01/2008	Varun Bhansaly	New Column VariableLength added to VarMappingTable
09/01/2008	Ashish Mangla	Bugzilla Bug 1788
25/01/2008	Varun Bhansaly	Bugzilla Id 1719 ([CabCreation + Upgrade] Indexes required on ExceptionTable & ExceptionHistoryTable)
25/01/2008	Varun Bhansaly	Entry in WFCabVersionTable for HOTFIX_6.2_037
28/01/2008 	Varun Bhansaly	Entry in WFCabVersionTable for MULTIPLE_EXCEPTION_AND_MINUTE_SUPPORT
28/01/2008	Varun Bhansaly	Bugzilla Id 1687, ([Cab Creation + Upgrade] WFDataStructureTable : Primary key violation)
31/01/2008	Ruhi Hira		Bugzilla Bug 3682, New columns in ExtMethodParamDefTable and WFDataStructureTable.
31/01/2008	Varun Bhansaly	Bugzlla Id 3775
06/02/2008	Varun Bhansaly	Bugzilla Id 3682, (Enhancements in Web Services)
11/02/2008	Varun Bhansaly	ArchiveTable - AppServerPort size changed to 5
12/02/2008	Varun Bhansaly	ArchiveTable - PortId size changed to 5
24/04/2008	Ashish Mangla	Bugzilla Bug 4062 (Arithmetic Overflow)
23/04/2008	Ishu Saraf		SrNo-14, Added table WFTypeDescTable, WFTypeDefTable, WFUDTVarMappingTable, WFVarRelationTable
23/04/2008	Ishu Saraf		SrNo-14, Added column VariableId, Precison, Unbounded to VarMappingTable
										Primary Key updated in VarMappingTable
23/04/2008	Ishu Saraf		SrNo-14, Added column VariableId to ActivityAssociationTable
										Primary Key updated in ActivityAssociationTable
23/04/2008	Ishu Saraf		SrNo-14, Added column VariableId_1, VarFieldId_1, VariableId_2, VarFieldId_2  to RuleConditionTable				
23/04/2008	Ishu Saraf		SrNo-14, Added column VariableId_1, VarFieldId_1, VariableId_2, VarFieldId_2, VariableId_3, VarFieldId_3, FunctionType  to RuleOperationTable
23/04/2008	Ishu Saraf		SrNo-14, Added column VariableId, VarFieldId to ExtMethodParamMappingTable
23/04/2008	Ishu Saraf		SrNo-14, Added column FunctionType to WFWebServiceTable
23/04/2008	Ishu Saraf		SrNo-14, Added column Width, Height to ActivityTable
05/05/2008	Ishu Saraf		SrNo-14, Added column Unbounded to EXTMethodParamDefTable
05/05/2008	Ishu Saraf		SrNo-14, Added column Unbounded to WFDataStructureTable
09/05/2008	Ishu Saraf		SrNo-14, Added table WFDataObjectTable and WFGroupBoxTable
14/05/2008	Ishu Saraf		SrNo-14, Added table WFAdminLogTable, WFCurrentRouteLogTable, WFHistoryRouteLogTable
14/05/2008	Ishu Saraf		SRNo-14, Altering constraint of ExtMethodDefTable,it can have values E/ W/ S
20/05/2008	Ashish Mangla	Bugzilla Bug 5044 (UserDiversionTable, keep user name also in the table)
21/05/2008	Varun Bhansaly	Primary Key Constraint modified in WFDataObjectTable & WFGroupBoxTable
02/06/2008	Varun Bhansaly	SrNo-14, ExtMethodDefTable - New WF Type 15, 16
							SrNo-14, ExtMethodParamDefTable - New WF Type 15, 16
04/06/2008	Varun Bhansaly	SrNo-14, Bugzilla BugId 5066 Primary Key for ActivityAssociationTable changed back to (ProcessdefId, ActivityId, DefinitionType, DefinitionId)
							SrNo-14, ActivityAssociationTable
12/06/2008	Ishu Saraf		SrNo-14, Index Created on ActivityAssociationTable
12/06/2008	Ishu Saraf		SrNo-14, Default value added to columns Height & width of ActivityTAble
14/06/2008	Ishu Saraf		Entry in WFCabVersionTable for 7.2_RuleConditionTable
							Entry in WFCabVersionTable for 7.2_RuleOperationTable
							Entry in WFCabVersionTable for 7.2_ExtMethodParamMappingTable
							Entry in WFCabVersionTable for 7.2_VarMappingTable
							Entry in WFCabVersionTable for 7.2_UserDiversionTable
09/07/2008	Ishu Saraf		Bugzilla Bug Id 5062
21/07/2008	Ishu Saraf		Null is changed to Not Null and Not Null is changed to Null for some columns
21/08/2008	Ishu Saraf		SrNo-14, Added column VariableId_1, VarFieldId_1, VariableId_2, VarFieldId_2  to ActionConditionTable, DataSetTriggerTable, ScanActionsTable
21/08/2008	Ishu Saraf		SrNo-14, Added column VariableId_1, VarFieldId_1, VariableId_2, VarFieldId_2, VariableId_3, VarFieldId_3 to ActionOperationTable
21/08/2008	Ishu Saraf		SrNo-14, Added column VariableId, VarFieldId to WFDataMapTable, DataEntryTriggerTable, ArchiveDataMapTable, WFJMSSubscribeTable, ToDoListDefTable
21/08/2008	Ishu Saraf		SrNo-14, Added column VariableIdTo, VarFieldIdTo, VariableIdFrom, VarFieldIdFrom, VariableIdCc, VarFieldIdCc to MailTriggerTable
21/08/2008	Ishu Saraf		SrNo-14, Added column VariableIdTo, VarFieldIdTo, VariableIdFrom, VarFieldIdFrom, VariableIdCc, VarFieldIdCc, VariableIdFax, VarFieldIdFax to PrintFaxEmailTable
21/08/2008	Ishu Saraf		SrNo-14, Added column VariableId, VarFieldId, DisplayName to ImportedProcessDefTable
21/08/2008	Ishu Saraf		SrNo-14, Added column ImportedVariableId, ImportedVarFieldId, MappedVariableId, MappedVarFieldId, DisplayName to InitiateWorkItemDefTable
21/08/2008	Ishu Saraf		Entry in WFCabVersionTable for 7.2_ActionConditionTable
							Entry in WFCabVersionTable for 7.2_MailTriggerTable
							Entry in WFCabVersionTable for 7.2_DataSetTriggerTable
							Entry in WFCabVersionTable for 7.2_PrintFaxEmailTable
							Entry in WFCabVersionTable for 7.2_ScanActionsTable
							Entry in WFCabVersionTable for 7.2_ToDoListDefTable
							Entry in WFCabVersionTable for 7.2_ImportedProcessDefTable
							Entry in WFCabVersionTable for 7.2_InitiateWorkitemDefTable
01/09/2008	Ishu Saraf		Added column BlockId to ActivityTable
01/09/2008	Ishu Saraf		Added column VarPrecision to ExtDBFieldDefinitionTable
06/10/2008	Ishu Saraf		Added Table WFAutoGenInfoTable, WFSearchVariableTable
08/10/2008	Ishu Saraf		Added Table WFProxyInfo
30/10/2008	Ishu Saraf		Added column associatedUrl in ActivityTable
31/10/2008	Ishu Saraf		Added column BlockName in WFGroupBoxTable
05/11/2008	Ishu Saraf		Added column ArgList in TemplateDefinitionTable and remove from GenerateResponseTable
18/11/2008	Ishu Saraf		Added Table WFAuthorizationTable, WFAuthorizeQueueDefTable, WFAuthorizeQueueStreamTable, WFAuthorizeQueueUserTable, WFAuthorizeProcessDefTable, WFCorrelationTable
19/11/2008	Ishu Saraf		Changing name of WFCorrelationTable to WFSoapReqCorrelationTable
22/11/2008	Ishu Saraf		Added column VariableId_Years, VarFieldId_Years, VariableId_Months, VarFieldId_Months, VariableId_Days, VarFieldId_Days, VariableId_Hours, VarFieldId_Hours, VariableId_Minutes, VarFieldId_Minutes, VariableId_Seconds, VarFieldId_Seconds in WFDurationTable
22/11/2008	Ishu Saraf		Entry in WFCabVersionTable for 7.2_WFDurationTable
27/11/2008	Ishu Saraf		Addded column ReplyPath, AssociatedActivityId  to WFWebServiceTable 
27/11/2008	Ishu Saraf		Added Table WFWSAsyncResponseTable 
28/11/2008	Ishu Saraf		Unique constraint and Index added to WFWSAsyncResponseTable 
06/12/2008	Ishu Saraf		Added column allowSOAPRequest to ActivityTable
06/12/2008	Ishu Saraf		Added column QueueFilter to WFAuthorizeQueueDefTable
08/12/2008	Ishu Saraf		Added column AssociatedActivityId to ActivityTable
15/12/2008	Ishu Saraf		Change version no from 7.2 to 8.0 in WFCabVersionTable
15/12/2008	Ishu Saraf		Added WFScopeDefTable, WFEventDefTable, WFActivityScopeAssocTable
15/12/2008	Ishu Saraf		Added column EventId to ActivityTable
24/12/2008	Ishu Saraf		Size of ProxyPassword column in WFProxy is changed from 64 to 512
31/12/2008	Ashish Mangla		Bugzilla Bug 7538 (Reflect changes of 5.0 for Collection criteria)
05/01/2009	Ishu Saraf		Bugzilla BugId 7588 (Increase size of ColumnName from 64 to 255)
08/01/2009	Ishu Saraf		Bugzilla BugId 7574 (New columns added to WFSoapReqCorrelationTable)
16/01/2009	Ishu Saraf		Change datatype of column delaytime in SummaryTable
27/03/2009	Ruhi Hira		SrNo-15, New tables added for SAP integration.
15/03/2009	Ananta Handoo		New table WFSAPAdapterAssocTable added for SAP Integration.
17/06/2009	Ashish Mangla		(WFS_8.0_007)New columns added in WFWebServiceTable for XML mapping in web services
17/06/2009	Ishu Saraf		New tables added for OFME - WFPDATable, WFPDA_FormTable, WFPDAControlValueTable
23/06/2009	Ananta Handoo		WFSAPGUIDefTable Modified by Ananta Handoo.Three fields added TCodeType, VariableId, VarFieldId
28/07/2009	Saurabh Sinha		WFS_8.0_018 Unicode[Chinese in this case] characters are not set in WFMailQueueTable. As a result mail sent contains ??? in place of unicode characters.Support for uncode characters provided in mail content.
24/08/2009	Shilpi S		HotFix_8.0_045, two new columns VariableId and VarFieldId are added for variable doctype name support in PFE. 
31/08/2009	Ashish Mangla		WFS_8.0_025 (Arglist length should increased to 2000 from 512 for generate Response)
31/08/2009  Shilpi S        WFS_8.0_026 , workitem specific calendar  
08/09/2009	Saurabh Kamal		New tables added as WFExtInterfaceConditionTable and WFExtInterfaceOperationTable for Rules on External Interfaces
08/09/2009	Vikas Saraswat		WFS_8.0_031	Option  provided to view the workitem of a queue as read-only based on the rights of the queue for non-associated user instead of Query workstep rights.
05/10/2009	Vikas Saraswat		WFS_8.0_038	Support of Auto Refresh Interval for a Queue.
15/12/2009	Saurabh Kamal		WFS_8.0_061 ProcessDefId column added in VarAliasTable for Alias support on MyQueue
16/02/2010  Saurabh Kamal       Omniflow 8.1[OTMS] New Tables added
22/02/2010  Saurabh Kamal       Omniflow 8.1 New Table added for BPEL and changes made in WFSwimlaneTable and ProcessDefCommentTable
12/03/2010	Saurabh Kamal		Added new table WFWebServiceInfoTable for webservice authentication.
30/03/2010	Abhishek Gupta		Added new table WFSystemServicesTable for utility registration information.
27/04/2010	Saurabh Kamal		Bugzilla Bug 12587,Alias Rule column added in WFTMSSetVariableMappingTable
04/05/2010  Abhishek Gupta  	New tables added for color display support on web.(Requirement)
15/07/2010	Abhishek Gupta		Coulmns added for zip support in mail.
20/10/2010  Ashish Mangla       WFS_8.0_115 Liberty (Data class & Search Functionality)
09/11/2010  Saurabh Kamal       Size of AssociatedFieldName and New Value changed in WFCURRENTROUTELOGTABLE and WFHISTORYROUTELOGTABLE
19/04/2011	Amit Goyal			Changed the datatype of userindex from smallint to int
25/04/2011	Amit Goyal				Primary Key needs to be defined for ADO.Net. Tables modified: 
									TemplateDefinitionTable
									TemplateMultilanguageTable
									ActionDefTable
									WFFORM_Table
									ProcessINITable
									WFFORMFragmentTable
									PrintFaxEmailTable
									ToDoPickListTable
									InterfacedescLanguageTable_
26/04/11	Amit Goyal			ProcessDefId changed to identity in ProcessDefTable				
27/04/11	Amit Goyal			Data type changed from IMAGE to NTEXT for the following tables :
									ActivityTable
									TEMPLATEDEFINITIONTABLE
									ACTIONDEFTABLE
									PROCESSINITABLE
									PRINTFAXEMAILTABLE
									WFFORM_TABLE
									TemplateMultiLanguageTable
									WFFormFragmentTable
									WFBPELDefTable
29/04/11	Amit Goyal			Tables added : WFAuditRuleTable , WFAuditTrackTable
13/05/11	Saurabh Kamal		More Index added on Omniflow Tables
02/06/11	Saurabh Kamal			Entry made into QueueDefTable for SystemPFEQueue and SystemArchiveQueue
15/06/11	Saurabh Kamal			Bug 31898 - User not getting deleted from PMWQueueUserTable whenever it is deleted from pdbUser
26/06/12	Shweta Singhal			Bug 32808 - SwimlaneId missing in WFDataObjectTable
17/07/2012	Abhishek Gupta			Bug 32883	CallerProcessDefId changed to ImportedProcessDefId for ImportedProcessDefTable.[Changes for CallerProcessDefId reverted].
01/08/2012	Abhishek Gupta			Bug 33699 - unable to deploy any process[TRIGGERTYPEDEFTABLE column ClassName size increased.
01/08/2012	Abhishek Gupta			Bug 33751 - FormViewerApp column added to ProcessDefTable.
03/09/2012	Abhishek Gupta			Bug 34599 - after registering the process select the registered process invalid column name "format" message is appearing
17/10/2012	Shweta Singhal			Bug 34322- Pop up support in case of reminder without relogin
17/02/2012	Bhavneet Kaur		Bug 30514: VariableId1 column added in VarAliasTable
13/03/2012	Preeti Awasthi		Bug 30633: 1. Support of Macro in File path
										   2. Support of exporting all documents for mapped document Type
21/03/2012  Akash Bartaria		Bug : Bug 30801 Multiple SAP server support with OF patch 3
30/03/2012  Neeraj Kumar           Replicated -WFS_8.0_148 Data should retrieve from arrary tables in order of its insertion.
03/04/2012	Bhavneet Kaur		Bug 30559 Provide Refresh in Archive rather than Disconnect
07/05/2012  Akash Bartaria      Bugzilla – Bug 31570| Multiple SAP server support - Multiple ConfigurationID within one Process 
12/06/2012	Abhishek Gupta		Bug 32579 - BCC support in e-mail generated through Omniflow.
20/06/2012  Bhavneet Kaur     	Bug 31160: Supprort of defining format of Template to be gererated(Pdf/Doc).
12/09/2012  Bhavneet Kaur   	Bug 34473- Support of adding multiple documents in mulitple folder in case of sharepoint archive workstep
12/09/2012	Preeti Awasthi		Bug 34839 - User should get pop-up for reminder without relogin
10/01/2013	Shweta Singhal		New columns are added in WFAdminLogTable table for Right Management Auditing and Bug 37345 changes
26/02/2013	Deepti Bachiyani	Bug 38365 - Security Flag added in WFSAPConectTable and WFWebServiceInfoTable
08/03/2013	Shweta Singhal		FolderIndexes are changed in RouteFolderDefTable to support Sharepoint as DMS
13/03/2013  Neeraj Sharma       Bug 38685 An entry for each failed records need to be generated in
								WFFailedServicesTable if any error occurs while processing records from the CSV/TXT file.
20/03/2013	Shweta Singhal		Bug 38695, Column Status is added in WFDocBuffer
20/05/2013	Shweta Singhal		Columns added in WFForm_table, WFFormFragmentTable and ActivityTable to support collabration of PMWeb
19/06/2013	Sajid Khan			Bug 39903 - Summary table queries and indexes to be modified 
26/04/2013	Shweta Singhal		Changes done for Process Variant Support
29/08/2013  Kahkeshan           Bug 39079 - EscalateToWithTrigger Feature requirement
13/03/2013	Shweta Singhal		Tables added for variant field and form association
27/11/2013	Sajid Khan			ProfileUserGroupView modified for Role association with RMS. and WFRoleView created.
23/12/2013	Shweta Singhal		Code Optimization changes.
23/12/2013	Sajid Khan			Message Agent Optimization.
23/12/2013	Sajid Khan			DefaultQueue Column added to WFLaneQueueTable to support default queue creation for all the worksteps.
01/01/2014	Kahkeshan			QueueTable View Definition Changed as per Code Optimization Changes. 
23/01/2014	Shweta Singhal		Index on WFInstrumentTable created
28/01/2014	Shweta Singhal		WFAutoGenInfoTable schema changed for Performance Optimization
30/01/2014	Sajid Khan			OmniFlow Moile Support.
31/01/2014	Sajid Khan			User Expertise Rating.
10/02/2014  Anwar Danish		New tables added for BRMS workstep
10/02/2014	Kahkeshan		    New Column LastModifiedOn added in QueueDefTable
27/03/2014	Sajid Khan			Default rights to badmin user on System Queues. 
04/04/2014	Mohnish Chopra		Creating Table WFSYSTEMPROPERTIESTABLE	and inserting default entries
								and	Creating index on column validtill WFInstrumentTable
04-04-2014	Sajid Khan			Bug 44094 - Context menu of Project Tree is not coming on SQL & Oracle both
11/04/2014  Kanika Manik        Bug 44251] While click on Authorized Queue, an error is generating on both cabinet SQL & Oracle.
14-03-2014	Sajid Khan			Type of System Queues should be different than "S" as "S" is for Permanent type of queues[A - QueueType for System Defined Queues].
18-04-2014  Kanika Manik        Bug 44583 - No rights associated with object "Omni Transport Management", due to this issue unable to transport request ID 
30-04-2014  Sajid Khan			WF_DelProcVariantTrigger commneted as Deleteion from these tables will be delted from API itself while deleting a Variant.
03-05-2014	Sajid Khan			Bug 44499 - INT to BIGINT changes for Audit Tables.
27-05-2014  Kanika Manik        PRD Bug 42494 - BCC support at each email sending modules
29-05-2014	Sajid Khan			Bug 45879 - Removal of Trigger on PDBConnection from Server end.
30/05/2014	Anwar Danish		PRD Bug 39921 merged - Change in the Size of attachmentISIndex and attachmentNames Columns of WFMailQueueTable and WFMailQueueHistoryTable
10/06/2014  Kanika Manik        PRD Bug 43028 - Support for encrypting the password before inserting the same into WFExportInfoTable through WFSetExportCabinetInfo API and fetch the decrypted value of same field from WFExportInfoTable through WFGetExportCabinetInfo API
16/06/2014  Kahkeshan		Columns added in WFAttributeMessageTable as required in Archival
16/06/2014  Anwar Danish	PRG Bug 38828 merged
16/06/2014	Mohnish Chopra  Columns added in WFLinksTable
18/06/2014	Mohnish Chopra	Adding Index IDX1_WFATTRIBUTEMESSAGETABLE on WFATTRIBUTEMESSAGETABLE for Archival
09-07-2014	Sajid Khan		09-07-2014	Sajid Khan		Bug 47229 - API Suport of WFGetObjectPrpety and WFSetObjectProperty__
12-08-2014	Sajid Khan		WFMultiLinguaTable addded - Bug 41790.
26-08-2014	Sajid Khan		Bug 46295 - [Weblogic] Code review issue - possible changes for code [require one round of testing].
25-09-2014	Mohnish Chopra	Bug 50264 - OTMS has been replaced with ITMS so fullform should also be corrected. Removed Omni from Omni Transport Management . 
29-10-2014  Mohnish Chopra  Bug 51480 - Register Template : Error defining multilingual template
03-11-2014	Hitesh Singla	Bug 51606 - export cabinet n purge criteria options should be removed 
12 Nov 2015	Sajid Khan		Hold WorkStep Enhancement.
16/11/2015	Mohnish Chopra	Changes for Detailed View in Case Basket .Adding table WFCaseDataVariableTable
22/12/2015  Kirti Wadhwa    Changes are made in WFTaskStatusTable to handle Bug 57652 - while diversion, 
                            tasks should also be diverted along with the workitems  Added new column Q_DivertedByUserId.
27/01/2016  Kirti Wadhwa    Added new tables for CCM Requirements.         
03/03/2016	Mohnish Chopra	Changes for Prdp Bug 56950 - Threshold Routing Count is introduced for the workitem to limit the indefinite routing of the workitem                   
10/03/2017     Sajid Khan             Bug 67568 - Deletion of Audit Logs after audit trail archieve.  
18/4/2017       Kumar Kimil     Bug-64498 MailTo column size need to be increased in WFMailQueueTable&WFMailQueueHistoryTable     
19/4/2017       Kumar Kimil     Bug 64096 - Support to send the notification by Email when workitem is suspended abnormally due to some error  
19/04/2017		Sajid Khan		CreateWebService column added to ProcessDefTable on the basis of which a webservice would be created or not  .      
28-02-2017		Sajid Khan		Merging Bug 59122 - In OFServices registered utilities should only be accessible to that app server from which it is registered    
05-05-2017		Sajid Khan		Merging  Bug 55753 - Provided option to add Comments while ad-hoc routing of Work Item in process manager 
05-05-2017		Sajid Khan		Merging  Bug 58399 - Need an option to view refer, reassign and ad-hoc routing comments in workitem properties
06-05-2017		Mohnish Chopra	Prdp Bug 59010 - Mailing Agent Enhancement : 1) Option to filter mail items 2) Optimization in WFGetMailQueueItem API 3) Purge mechanism for old mail items
06/05/2017		Mohnish Chopra  PRDP Bug (59917, 56692)- Support for Bulk PS
09-05-2017		Sajid Khan		Merging Bug 65678 - Queue Varaible Extension
23/05/2017     Kumar Kimil      Transfer Data for IBPS(Transaction Tables including Case Management)
04/07/2017	Shubhankur Manuja	Added new comment type in WFCOMMENTSTABLE for storing comments entered by user at the time of rejecting the task
06/07/2017		Ambuj Tripathi  Added changes for the case management (WFReassignTask API) in WFCommentsTable and WFTastStatusTable
18/07/2017        Kumar Kimil     Multiple Precondition enhancement
01/08/2017     Kumar Kimil        Multiple Precondition enhancement(Review Changes) 
14/08/2017		Ambuj Tripathi  Added changes for the Task Expiry and task escalation in Case Management
21/08/2017      Kumar Kimil    Process Task Changes(Synchronous and Asynchronous)
21/08/2017		Ambuj Tripathi  Added changes for the Task escalation in WFEscInProcessTable table
22/08/2017      Ambuj Tripathi	Added columns in WFTaskstatushistorytable
30/08/2017		Sajid Khan		PRDP Bug 69029 - Need to send escalation mail after every defined time
31/08/2017		Sajid Khan		WF_UTIL_UNREGISTER Trigger created.
25/08/2017		Ambuj Tripathi  Added Table WFTaskUserAssocTable for UserGroup feature in case Management
29/08/2017		Ambuj Tripathi  Added Table changes in WFTaskstatustable for task approval feature.
22/09/2017      Kumar Kimil     TransferData changes for Ibps3.2
27/09/2017      Ambuj Tripathi  Changes for Bug#71671 in WFEventDetailsTable
04/10/2017      Ambuj Tripathi  Changes done for UT Bug fixes
04/10/2017      Ambuj Tripathi  Changes done for Bug 72218 - EAp 6.2+SQl:- Task Preferences functionality not working.
09/10/2017      Ambuj Tripathi  Bug 72452 - Removed the primary key from WFTaskUserAssocTable
16/09/2017		Ambuj Tripathi	Case registeration Name changes requirement- Columns added in processdeftable and wfinstrumenttable
30/10/2017		Ambuj Tripathi	Bug#72966 Added the revoke comment type in WFCommentsTable and WFCommentsHistoryTable.
17/11/2017      Kumar Kimil     Bug 73520 - weblogic+oracle: Queue name is not getting changed when maker checker request is approved
22/11/2017        Kumar Kimil     Multiple Precondition enhancement
08/12/2017		Mohnish Chopra	Prdp Bug 71731 - Audit log generation for change/set user preferences
12/12/2017		Sajid Khan		Bug 73913	Rest Ful webservices implementation in iBPS
21/12/2017		Ambuj Tripathi	Added index on the WFInstrumentTable for optimizing the query for getting workitems on myqueue.
11/01/2018		Mohd Faizan		Bug 74212 - Inactive user is not showing in Rights Management while it showing in Omnidocs admin
21/12/2017		Ambuj Tripathi	Modified index on the WFInstrumentTable for optimizing the query for getting workitems on myqueue.
05/02/2018        Kumar Kimil     Bug 75720 - Arabic:-Incorrect validation message displayed on importing document on case workitem
16/02/2018      Kumar Kimil     Bug 76143 - Not able to deploy process if do not provide any Prefix, Getting "Requested operation failed."
20/04/2018      Ambuj Tripathi     Bug 77151 - Not able to Deploy process getting error "Requested operation failed"
//14/05/2018	Ambuj Tripathi		PRD Bug 77201 - EAP6.4+SQL: Generate response template should be generated in pdf or doc based on defined format type in process definition
22/05/2018	Ambuj Tripathi		Reverting PRD Bug 77201 changes
30/05/2018	Ambuj Tripathi	Creating index on URN (used in search APIs)
___________________________________________________________________________________________________________________________________________*/

/****** SQL SCRIPT ******  ToBeAdded WFLockWorkitem when definitions are available for Oracle-add in drop.sql in sequence*/

/**** CREATE TABLE ****/

go
create table WFCabVersionTable (
	cabVersion		NVARCHAR(255) NOT NULL,
	cabVersionId	INT IDENTITY (1,1) PRIMARY KEY,
	creationDate	DATETIME,
	lastModified	DATETIME,
	Remarks			NVARCHAR(255) NOT NULL,
	Status			NVARCHAR(1)
)

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'8.0',GETDATE(), GETDATE(), N'OFCabCreation.sql', N'Y')

go
																
INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'HOTFIX_6.2_037',GETDATE(), GETDATE(), N'reportUpdate', N'Y')

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'MULTIPLE_EXCEPTION_AND_MINUTE_SUPPORT', GETDATE(), GETDATE(), N'UPGRADE FOR MULTIPLE EXCEPTION AND TIMESTAMP', N'Y')

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'Bugzilla_Id_3682', GETDATE(), GETDATE(), N'Enhancements in Web Services', N'Y')

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_ExtMethodParamMappingTable', GETDATE(), GETDATE(), N'BPEL Compliant OmniFlow', N'Y') /* avoid recreation of table if exists in case of addition of column variableid and varfieldid */

go
																																															
INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_RuleConditionTable', GETDATE(), GETDATE(), N'BPEL Compliant OmniFlow', N'Y') /* avoid recreation of table if exists in case of addition of column variableid and varfieldid */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_RuleOperationTable', GETDATE(), GETDATE(), N'BPEL Compliant OmniFlow', N'Y') /* avoid recreation of table if exists in case of addition of column variableid and varfieldid */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_VarMappingTable', GETDATE(), GETDATE(), N'BPEL Compliant OmniFlow', N'Y') /* avoid recreation of table if exists in case of addition of column variableid varprecision and unbounded */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_UserDiversionTable', GETDATE(), GETDATE(), N'BPEL Compliant OmniFlow', N'Y') /* avoid recreation of table if exists in case of addition of column userdiversionname and assignedusername */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_ActionConditionTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column VariableId_1, VarFieldId_1, VariableId_2, VarFieldId_2 */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_MailTriggerTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column VariableIdTo, VarFieldIdTo, VariableIdFrom, VarFieldIdFrom, VariableIdCc, VarFieldIdCc */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_DataSetTriggerTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column VariableId_1, VarFieldId_1, VariableId_2, VarFieldId_2 */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_PrintFaxEmailTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column VariableIdTo, VarFieldIdTo, VariableIdFrom, VarFieldIdFrom, VariableIdCc, VarFieldIdCc, VariableIdFax, VarFieldIdFax */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_ScanActionsTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column VariableId_1, VarFieldId_1, VariableId_2, VarFieldId_2 */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_ToDoListDefTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column  VariableId, VarFieldId */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_ImportedProcessDefTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column  VariableId, VarFieldId, DisplayName */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_InitiateWorkitemDefTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y') /* avoid recreation of table if exists in case of addition of column ImportedVariableId, ImportedVarFieldId, MappedVariableId, MappedVarFieldId, DisplayName */

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_WFDurationTable', GETDATE(), GETDATE(), N'Complex Data Type Support', N'Y')

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_CalendarName_VarMapping', GETDATE(), GETDATE(), N'OmniFlow 7.2', N'Y')

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_TurnAroundDateTime_VarMapping', GETDATE(), GETDATE(), N'OmniFlow 7.2', N'Y')

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_ProcessDefTable', GETDATE(), GETDATE(), N'7.2_ProcessDefTable', N'Y')

go

INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'7.2_SystemCatalog', GETDATE(), GETDATE(), N'7.2_SystemCatalog', N'Y')

go
INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'iBPS_3.0_SP1', GETDATE(), GETDATE(), N'iBPS_3.0_SP1', N'Y')
go
INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) VALUES (N'iBPS_3.2_GA', GETDATE(), GETDATE(), N'iBPS_3.2_GA', N'Y')
go
/* SrNo-6, Calendar Implementation - Ruhi Hira */
/******   PROCESSDEFTABLE    ******/

CREATE TABLE PROCESSDEFTABLE (
	ProcessDefId		INT		IDENTITY(1,1),
	VersionNo		SMALLINT	NOT NULL ,
	ProcessName		NVARCHAR(30)	NOT NULL ,
	ProcessState		NVARCHAR(10)	NULL ,
	RegPrefix		NVARCHAR(20)	NULL ,
	RegSuffix		NVARCHAR(20)	NULL ,
	RegStartingNo		INT		NULL,
	ProcessTurnAroundTime	INT		NULL,
	RegSeqLength		INT		NULL,
	CreatedOn		DATETIME	NULL, 
	LastModifiedOn		DATETIME	NULL,
	WSFont			NVARCHAR(255)	NULL,
	WSColor			INT		NULL,
	CommentsFont		NVARCHAR(255)	NULL,
	CommentsColor		INT		NULL,
	Backcolor		INT		NULL,
	TATCalFlag		NVarChar(1)	NULL,
	Description 	NTEXT	NULL,
	CreatedBy		NVARCHAR(255)	NULL,
	LastModifiedBy	NVARCHAR(255)	NULL,
	ProcessShared	NCHAR(1)		NULL,
	ProjectId		INT				NULL,
	Cost			Numeric(15,2)	NULL,
	Duration		NVARCHAR(255)	NULL,
	FormViewerApp	NCHAR(1)		NOT NULL DEFAULT N'J',
	ProcessType 	NVARCHAR(1) 	NOT NULL DEFAULT N'S',
	OWNEREMAILID    NVARCHAR(255),
	ThresholdRoutingCount INT,
	CreateWebService		NVARCHAR(2),
	DisplayName     NVARCHAR(20)    NULL,
	PRIMARY KEY ( ProcessDefId, VersionNo)
)

go
/*****    WFFailedServicesTable    ******/

CREATE TABLE WFFailedServicesTable(
	processDefId int NULL,
	ServiceName varchar(200) NULL,
	ServiceType varchar(30) NULL,
	ServiceId varchar(200) NULL,
	ActionDateTime datetime NULL,
	ObjectName varchar(100) NULL,
	ErrorCode int NULL,
	ErrorMessage varchar(500) NULL,
	Data_1 int NULL,
	Data_2 int NULL
)

go

/******   INTERFACEDEFTABLE    ******/

CREATE TABLE INTERFACEDEFTABLE (
	InterfaceId		INT		PRIMARY KEY,
	InterfaceName		NVARCHAR(255)	NOT NULL, 
	ClientInvocation	NVARCHAR(255)	NULL, 
	ButtonName		NVARCHAR(50)	NULL, 
	MenuName		NVARCHAR(50)	NULL, 
	ExecuteClass		NVARCHAR(255)	NULL,
	ExecuteClassWeb		NVARCHAR(255)	NULL 
)

go

/******   PROCESS_INTERFACETABLE    ******/

CREATE TABLE PROCESS_INTERFACETABLE (
	ProcessDefId		INT		NOT NULL,
	InterfaceId		INT		NOT NULL,
	InterfaceName		NVARCHAR(255)	NOT NULL, 
	ClientInvocation	NVARCHAR(255)	NULL, 
	MenuName		NVARCHAR(50)	NULL, 
	ExecuteClass		NVARCHAR(255)	NULL, 
	ExecuteClassWeb		NVARCHAR(255)	NULL 
	PRIMARY KEY ( ProcessDefId , INTerfaceId )
)

go

/* SrNo-6, Calendar Implementation - Ruhi Hira */
/******   ACTIVITYTABLE    ******/

CREATE TABLE ACTIVITYTABLE (
	ProcessDefId		INT		NOT NULL,
	ActivityId 		INT 		NOT NULL ,
	ActivityType 		SMALLINT	NOT NULL ,
	ActivityName		NVARCHAR(30)	NOT NULL ,
	Description		NTEXT		NULL ,
	xLeft 			SMALLINT	NOT NULL ,
	yTop 			SMALLINT	NOT NULL ,
	NeverExpireFlag		NVARCHAR(1)	NOT NULL ,
	Expiry 			NVARCHAR(255)	NULL ,
	ExpiryActivity 		NVARCHAR(30)	NULL ,
	TargetActivity 		INT		NULL ,
	AllowReassignment	NVARCHAR(1)	NULL ,
	CollectNoOfInstances 	INT		NULL ,
	PrimaryActivity		NVARCHAR(30)	NULL ,
	ExpireOnPrimaryFlag	NVARCHAR(1)	NULL ,
	TriggerID 		SMALLINT	NULL ,
	HoldExecutable 		NVARCHAR(255)	NULL ,
	HoldTillVariable	NVARCHAR(255)	NULL ,
	ExtObjID 		INT		NULL ,
	MainClientInterface 	NVARCHAR(255)	NULL ,
	ServerInterface		NVARCHAR(1)	CHECK ( ServerINTerface in (N'Y' , N'N' , N'E')),
	WebClientInterface 	NVARCHAR(255)	NULL ,
	ActivityIcon 		NTEXT		NULL ,
	ActivityTurnAroundTime 	INT		NULL,
	AppExecutionFlag 	NVARCHAR(1)	NULL,
	AppExecutionValue  	INT		NULL,
 	ExpiryOperator		INT		NULL, 
	TATCalFlag		NVarChar(1)	NULL,
	ExpCalFlag		NVarChar(1)	NULL,
	DeleteOnCollect NVarchar(1)	NULL,
	Width			INT NOT NULL DEFAULT 100,
	Height			INT NOT NULL DEFAULT 50,
	BlockId			INT NOT NULL DEFAULT 0,
	associatedUrl		NVARCHAR(255),
	allowSOAPRequest	NVarChar(1) NOT NULL DEFAULT N'N' CHECK (allowSOAPRequest IN (N'Y' , N'N')),
	AssociatedActivityId	INT,
	EventId					INT NULL,
	ActivitySubType			INT NULL,
	Color					INT NULL,
	Cost					Numeric(15,2)	NULL ,
	Duration				NVarchar(255)	NULL,
	SwimLaneId				INT NULL,
	DummyStrColumn1 		NVarchar(255)	NULL,
	CustomValidation		NTEXT,
	MobileEnabled			Nvarchar(2),
	GenerateCaseDoc			Nvarchar(1) NOT NULL DEFAULT N'N',
	DoctypeId 				INT NOT NULL DEFAULT -1,
	PRIMARY KEY ( ProcessDefId, ActivityID)
)

go

/******   RULECONDITIONTABLE    ******/

CREATE TABLE RULECONDITIONTABLE (
	ProcessDefId 	    	INT		NOT NULL,
	ActivityId          	INT		NOT NULL ,
	RuleType            	NVARCHAR(1)   	NOT NULL ,
	RuleOrderId         	SMALLINT      	NOT NULL ,
	RuleId              	SMALLINT      	NOT NULL ,
	ConditionOrderId    	SMALLINT 	NOT NULL ,
	Param1			NVARCHAR(255) 	NOT NULL ,
	Type1               	NVARCHAR(1) 	NOT NULL ,
	ExtObjID1	    	INT		NULL,
	VariableId_1			INT					NULL,
	VarFieldId_1			INT					NULL,
	Param2			NVARCHAR(255) 	NOT NULL ,
	Type2               	NVARCHAR(1) 	NOT NULL ,
	ExtObjID2	    	INT		NULL,
	VariableId_2			INT                 NULL,
	VarFieldId_2			INT                 NULL,
	Operator            	SMALLINT 	NOT NULL ,
	LogicalOp           	SMALLINT 	NOT NULL 
)
go

/* SrNo-6, Calendar Implementation - Ruhi Hira */
/****** RULEOPERATIONTABLE  *****/

CREATE TABLE RULEOPERATIONTABLE (
	ProcessDefId 	 	INT		NOT NULL, 
	ActivityId       	INT       	NOT NULL, 
	RuleType               	NVARCHAR(1)    	NOT NULL, 
	RuleId                  SMALLINT       	NOT NULL, 
	OperationType       	SMALLINT       	NOT NULL, 
	Param1			NVARCHAR(255)   	NOT NULL, 
	Type1                   NVARCHAR(1)    	NOT NULL, 
	ExtObjID1	 	INT		NULL,
	VariableId_1			INT					NULL,
	VarFieldId_1			INT                 NULL,
	Param2			NVARCHAR(255)  	NOT NULL, 
	Type2                   NVARCHAR(1)    	NOT NULL, 
	ExtObjID2	  	INT		NULL, 
	VariableId_2			INT					NULL,
	VarFieldId_2			INT                 NULL,
	Param3                  NVARCHAR(255)   NULL, 
	Type3                   NVARCHAR(1)     NULL, 
	ExtObjID3	   	INT	   	NULL,
	VariableId_3			INT					NULL,
	VarFieldId_3			INT                 NULL,
	Operator                SMALLINT 	NOT NULL, 
	OperationOrderId     	SMALLINT       	NOT NULL, 
	CommentFlag          	NVARCHAR(1)    	NULL, 
	RuleCalFlag				NVARCHAR(1)	NULL,
	FunctionType			NVARCHAR(1)			NOT NULL	DEFAULT N'L' CHECK (FunctionType IN (N'G' , N'L')),
	PRIMARY KEY (ProcessDefId, ActivityId, RuleType, RuleId, OperationOrderId)
)

go

/******   PROCESSDEFCOMMENTTABLE    ******/

CREATE TABLE PROCESSDEFCOMMENTTABLE (
	ProcessDefId 		INT		NOT NULL,
	LeftPos 		INT		NOT NULL ,
	TopPos 			INT		NOT NULL ,
	Width 			INT		NOT NULL ,
	Height 			INT		NOT NULL ,
	Type 			NVARCHAR(1)	NOT NULL ,
	Comments		NVARCHAR(255)	NOT NULL ,
	SourceId  		INT		NULL,
	Targetid 		INT		NULL,
	RuleId   		INT		NULL,
    CommentFont             NVARCHAR(255) NOT NULL, 
    CommentForeColor        INT         NOT NULL,
    CommentBackColor        INT         NOT NULL,
    CommentBorderStyle      INT         NOT NULL,
	AnnotationId			INT			NULL,
	SwimLaneId				INT			NULL	
)

go

/******   WORKSTAGELINKTABLE    ******/

CREATE TABLE WORKSTAGELINKTABLE (
	ProcessDefId 		INT 		NOT NULL,
	SourceId 		INT 		NOT NULL ,
	TargetId 		INT 		NOT NULL ,
	Color 			INT			NULL,
	Type 			NVARCHAR(1)	NULL,
	ConnectionId	INT			NULL	
)

go

/****** VARMAPPINGTABLE   *****/

CREATE TABLE VARMAPPINGTABLE (
	ProcessDefId 		INT 			NOT NULL ,
	VariableId			INT 			NOT NULL ,
	SystemDefinedName	NVARCHAR(50) 	NOT NULL ,
	UserDefinedName		NVARCHAR(50)	    NULL ,
	VariableType 		SMALLINT 		NOT NULL ,
	VariableScope 		NVARCHAR(1) 	NOT NULL ,
	ExtObjId 			INT					NULL ,
	DefaultValue		NVARCHAR(255)		NULL ,
	VariableLength  	INT					NULL,
	VarPrecision		INT					NULL,
	Unbounded			NVARCHAR(1) 	NOT NULL DEFAULT N'N' CHECK (Unbounded IN (N'Y' , N'N')),
	ProcessVariantId 	INT 			NOT NULL DEFAULT 0,
	IsEncrypted         NVARCHAR(1)   NULL DEFAULT N'N',
	IsMasked           	NVARCHAR(1)	  NULL DEFAULT N'N',
	MaskingPattern      NVARCHAR(10)  NULL DEFAULT N'X', 
	CONSTRAINT CK_VarMappin_VarScope 
		CHECK (VariableScope = N'M' or (VariableScope = N'I' or (VariableScope = N'U' or (VariableScope = N'S')))),
	CONSTRAINT PK_VarMappingTABLE	PRIMARY KEY CLUSTERED
	(
		ProcessDefID,					    
		VariableId,
		ProcessVariantId
	)
)

go

/******   ACTIVITYASSOCIATIONTABLE    ******/

CREATE TABLE ACTIVITYASSOCIATIONTABLE (
	ProcessDefId 		INT 		NOT NULL,
	ActivityId 		INT 		NOT NULL ,
	DefinitionType 		NVARCHAR(1) 	NOT NULL ,
	DefinitionId 		SMALLINT 	NOT NULL ,
	AccessFlag		NVARCHAR (3)	NULL ,
	FieldName      		NVARCHAR(255)	NULL,
	Attribute      		NVARCHAR(1)	NULL,
	ExtObjID       		INT		NULL,
	VariableId		INT 		NOT NULL ,
	ProcessVariantId 	INT 			NOT NULL DEFAULT 0 ,
	PRIMARY KEY (ProcessdefId, ActivityId, DefinitionType, DefinitionId, ProcessVariantId),
	CONSTRAINT CK_Assoc_TABLEr 
		CHECK (DefinitionType = N'I' or (DefinitionType = N'Q' or (DefinitionType = N'N' or (DefinitionType = N'S' or (DefinitionType = N'P' or (DefinitionType = N'T' ))))))
)

go

/******   TRIGGERDEFTABLE    ******/

CREATE TABLE TRIGGERDEFTABLE ( 
	ProcessDefId 		INT 		NOT NULL,
	TriggerID 		SMALLINT 	NOT NULL,
	TriggerName 		NVARCHAR(50) 	NOT NULL,
	TriggerType		NVARCHAR(1)	NOT NULL,
	TriggerTypeName		NVARCHAR(50)	NULL,	
	Description		NVARCHAR(255)	NULL, 
	AssociatedTAId		INT		NULL
	PRIMARY KEY (Processdefid , TriggerID )
)

go

/******   TRIGGERTYPEDEFTABLE    ******/

CREATE TABLE TRIGGERTYPEDEFTABLE ( 
	ProcessDefId 		INT 		NOT NULL,
	TypeName		NVARCHAR(50)	NOT NULL,
	ClassName		NVARCHAR(255)	NOT NULL,
	ExecutableClass		NVARCHAR(255)	NULL,
	HttpPath		NVARCHAR(255)	NULL
	PRIMARY KEY (Processdefid , TypeName)
)

go

/******   MAILTRIGGERTABLE  -  WFS_8.0_018  ******/

CREATE TABLE MAILTRIGGERTABLE ( 
	ProcessDefId 		INT 			NOT NULL,
	TriggerID 			SMALLINT 		NOT NULL,
	Subject 			NVARCHAR(255) 		NULL,
	FromUser			NVARCHAR(255)		NULL,
	FromUserType		NVARCHAR(1)			NULL,
	ExtObjIDFromUser 	INT 				NULL,
	VariableIdFrom		INT					NULL,
	VarFieldIdFrom		INT					NULL,
	ToUser				NVARCHAR(255)	NOT NULL,
	ToType				NVARCHAR(1)		NOT NULL,
	ExtObjIDTo			INT					NULL,
	VariableIdTo		INT					NULL,
	VarFieldIdTo		INT					NULL,
	CCUser				NVARCHAR(255)		NULL,
	CCType				NVARCHAR(1)			NULL,
	ExtObjIDCC			INT					NULL,	
	VariableIdCc		INT					NULL,
	VarFieldIdCc		INT					NULL,
	Message				NTEXT				NULL,
	BCCUser				NVARCHAR(255)		NULL,
	BCCType 			NVARCHAR(1)			NULL Default 'C',
	ExtObjIDBCC 		int					NULL,	
	VariableIdBCc 		int					NULL,
	VarFieldIdBCc 		int					NULL,
	MailPriority NVARCHAR(255)    DEFAULT NULL,
	MailPriorityType NVARCHAR(1)  NOT NULL DEFAULT 'C',
	ExtObjIdMailPriority int      NOT NULL DEFAULT 0, 
	VariableIdMailPriority int    NOT NULL DEFAULT 0, 
	VarFieldIdMailPriority int    NOT NULL DEFAULT 0	
	PRIMARY KEY (Processdefid , TriggerID)
)

go

/******   EXECUTETRIGGERTABLE    ******/

CREATE TABLE EXECUTETRIGGERTABLE ( 
	ProcessDefId 		INT 		NOT NULL,
	TriggerID 		SMALLINT 	NOT NULL,
	FunctionName 		NVARCHAR(255) 	NOT NULL,
	ArgList			NVARCHAR(255)	NULL,	
	HttpPath		NVARCHAR(255)	NULL	
	PRIMARY KEY (Processdefid , TriggerID)
)

go

/******   LAUNCHAPPTRIGGERTABLE    ******/

CREATE TABLE LAUNCHAPPTRIGGERTABLE ( 
	ProcessDefId 		INT 		NOT NULL,
	TriggerID 		SMALLINT 	NOT NULL,
	ApplicationName 	NVARCHAR(255) 	NOT NULL,
	ArgList			NVARCHAR(255)	NULL
	PRIMARY KEY (Processdefid , TriggerID)
)

go

/******   DATAENTRYTRIGGERTABLE    ******/

CREATE TABLE DATAENTRYTRIGGERTABLE ( 
	ProcessDefId 		INT 			NOT NULL,
	TriggerID 			SMALLINT 		NOT NULL,
	VariableName		NVARCHAR(255) 	NOT NULL,
	Type				NVARCHAR(1)		NOT NULL,
	ExtObjID			INT					NULL,
	VariableId			INT					NULL,
	VarFieldId			INT					NULL
	PRIMARY KEY (Processdefid , TriggerID,VariableName)
)

go

/******   DATASETTRIGGERTABLE    ******/

CREATE TABLE DATASETTRIGGERTABLE ( 
	ProcessDefId 	INT 			NOT NULL,
	TriggerID 		SMALLINT 		NOT NULL,
	Param1			NVARCHAR(255) 	NOT NULL,
	Type1			NVARCHAR(1)		NOT NULL,
	ExtObjID1		INT					NULL,
	VariableId_1	INT					NULL,
	VarFieldId_1	INT					NULL,
	Param2			NVARCHAR(255) 	NOT NULL,
	Type2			NVARCHAR(1)		NOT NULL,
	ExtObjID2		INT					NULL,
	VariableId_2	INT					NULL,
	VarFieldId_2	INT					NULL
)

go

/******   STREAMDEFTABLE   ******/

CREATE TABLE STREAMDEFTABLE (
	ProcessDefId 		INT 		NOT NULL,
	StreamId 		INT 		NOT NULL ,
	ActivityId 		INT 		NOT NULL ,
	StreamName		NVARCHAR(30) 	NOT NULL ,
	SortType 		NVARCHAR(1) 	NOT NULL ,
	SortOn			NVARCHAR(50) 	NOT NULL ,
	StreamCondition		NVARCHAR(255) 	NOT NULL ,
	CONSTRAINT u_sdTABLE PRIMARY KEY CLUSTERED 
	(
		ProcessDefId, ActivityId, StreamId
	) 
)

go

/******   EXTDBCONFTABLE   ******/

CREATE TABLE EXTDBCONFTABLE (
	ProcessDefId 		INT 		NOT NULL,
	DatabaseName 		NVARCHAR(255)	NULL,
	DatabaseType		NVARCHAR(20)	NULL,
	UserId 			NVARCHAR(255)	NULL, 
	PWD 			NVARCHAR(255)	NULL, 
	TABLEName 		NVARCHAR(255)	NULL, 
	ExtObjID 		INT 		NOT NULL,
	HostName  		NVARCHAR(255)	NULL,
	Service	 		NVARCHAR(255)	NULL,
	Port			INT		NULL,
	SecurityFlag		NVARCHAR(1) CHECK (SecurityFlag IN (N'Y', N'N')),
	SortingColumn		NVARCHAR(255)	NULL,
	ProcessVariantId 	INT		NOT NULL DEFAULT 0,
	PRIMARY KEY ( ProcessDefId , ExtObjID , ProcessVariantId)
) 



go

/******   RECORDMAPPINGTABLE   ******/

CREATE TABLE RECORDMAPPINGTABLE ( 
	ProcessDefId 		INT 		NOT NULL	PRIMARY KEY,
	Rec1 			NVARCHAR(255)	NULL,
	Rec2 			NVARCHAR(255)	NULL,
	Rec3 			NVARCHAR(255)	NULL,
	Rec4 			NVARCHAR(255)	NULL,
	Rec5 			NVARCHAR(255)	NULL 
)

go

/******   STATESDEFTABLE   ******/

CREATE TABLE STATESDEFTABLE ( 
	ProcessDefId 		INT 		NOT NULL,
	StateId			INTEGER 	NOT NULL,
	StateName 		NVARCHAR(255) 	NOT NULL 
	PRIMARY KEY (ProcessDefId , StateId ) 
)

go

/*****   QUEUEHISTORYTABLE   ******/

CREATE TABLE QUEUEHISTORYTABLE (
	ProcessDefId 		INT 		NOT NULL ,
	ProcessName 		NVARCHAR(30)	NULL,
	ProcessVersion 		SMALLINT	NULL,
	ProcessInstanceId	NVARCHAR(63)  	NOT NULL ,
	ProcessInstanceName	NVARCHAR(63)	NULL ,
	ActivityId 		INT 		NOT NULL ,
	ActivityName		NVARCHAR(30)	NULL ,
	ParentWorkItemId 	INT		NULL ,
	WorkItemId 		INT 		NOT NULL ,
	ProcessInstanceState 	INT 		NOT NULL ,
	WorkItemState 		INT 		NOT NULL ,
	Statename 		NVARCHAR(50)	NULL,
	QueueName		NVARCHAR (63)	NULL ,
	QueueType 		NVARCHAR(1)	NULL ,
	AssignedUser		NVARCHAR (63)	NULL ,
	AssignmentType 		NVARCHAR(1)	NULL ,
	InstrumentStatus 	NVARCHAR(1)	NULL ,
	CheckListCompleteFlag 	NVARCHAR(1)	NULL ,
	IntroductionDateTime	DATETIME	NULL ,
	CreatedDatetime		DATETIME	NULL ,
	Introducedby		NVARCHAR (63)	NULL ,
	CreatedByName		NVARCHAR (63)	NULL ,
	EntryDATETIME		DATETIME 	NOT NULL ,
	LockStatus 		NVARCHAR(1)	NULL ,
	HoldStatus 		SMALLINT	NULL ,
	PriorityLevel 		SMALLINT 	NOT NULL ,
	LockedByName		NVARCHAR (63)	NULL ,
	LockedTime		DATETIME	NULL ,
	ValidTill		DATETIME	NULL ,
	SaveStage		NVARCHAR(30)	NULL ,
	PreviousStage		NVARCHAR(30)	NULL ,
	ExpectedWorkItemDelayTime DATETIME	NULL,
	ExpectedProcessDelayTime DATETIME	NULL,
	Status 			NVARCHAR(50)	NULL ,
	VAR_INT1 		SMALLINT	NULL ,
	VAR_INT2 		SMALLINT	NULL ,
	VAR_INT3 		SMALLINT	NULL ,
	VAR_INT4 		SMALLINT	NULL ,
	VAR_INT5 		SMALLINT	NULL ,
	VAR_INT6 		SMALLINT	NULL ,
	VAR_INT7 		SMALLINT	NULL ,
	VAR_INT8 		SMALLINT	NULL ,
	VAR_FLOAT1		Numeric(15,2)	NULL ,
	VAR_FLOAT2		Numeric(15,2)	NULL ,
	VAR_DATE1		DATETIME	NULL ,
	VAR_DATE2		DATETIME	NULL ,
	VAR_DATE3		DATETIME	NULL ,
	VAR_DATE4		DATETIME	NULL ,
	VAR_LONG1 		INT		NULL ,
	VAR_LONG2 		INT		NULL ,
	VAR_LONG3 		INT		NULL ,
	VAR_LONG4 		INT		NULL ,
	VAR_STR1		NVARCHAR(255)	NULL ,
	VAR_STR2		NVARCHAR(255)	NULL ,
	VAR_STR3		NVARCHAR(255)	NULL ,
	VAR_STR4		NVARCHAR(255)	NULL ,
	VAR_STR5		NVARCHAR(255)	NULL ,
	VAR_STR6		NVARCHAR(255)	NULL ,
	VAR_STR7		NVARCHAR(255)	NULL ,
	VAR_STR8		NVARCHAR(255)	NULL ,
	VAR_REC_1		NVARCHAR(255)	NULL ,
	VAR_REC_2		NVARCHAR(255)	NULL ,
	VAR_REC_3		NVARCHAR(255)	NULL ,
	VAR_REC_4		NVARCHAR(255)	NULL ,
	VAR_REC_5		NVARCHAR(255)	NULL ,
	Q_StreamId 		INT		NULL ,
	Q_QueueId 		INT		NULL ,
	Q_UserID 		INT	NULL ,
	LastProcessedBy 	INT	NULL,
	ProcessedBy		NVARCHAR (63)	NULL ,
	ReferredTo 		INT	NULL ,
	ReferredToName		NVARCHAR (63)	NULL ,
	ReferredBy 		INT	NULL ,
	ReferredByName		NVARCHAR (63)	NULL ,
	CollectFlag 		NVARCHAR(1)	NULL ,
	CompletionDatetime	DATETIME	NULL ,
	CalendarName       NVARCHAR(255) NULL,
	ExportStatus	NVARCHAR(1) DEFAULT 'N',
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	ActivityType		SmallInt NULL,
	lastModifiedTime 	DATETIME,
	VAR_DATE5		DATETIME	NULL ,
	VAR_DATE6		DATETIME	NULL ,
	VAR_LONG5 		INT		NULL ,
	VAR_LONG6 		INT		NULL ,
	VAR_STR9		NVARCHAR(512)	NULL ,
	VAR_STR10		NVARCHAR(512)	NULL ,
	VAR_STR11		NVARCHAR(512)	NULL ,
	VAR_STR12		NVARCHAR(512)	NULL ,
	VAR_STR13		NVARCHAR(512)	NULL ,
	VAR_STR14		NVARCHAR(512)	NULL ,
	VAR_STR15		NVARCHAR(512)	NULL ,
	VAR_STR16		NVARCHAR(512)	NULL ,
	VAR_STR17		NVARCHAR(512)	NULL ,
	VAR_STR18		NVARCHAR(512)	NULL ,
	VAR_STR19		NVARCHAR(512)	NULL ,
	VAR_STR20		NVARCHAR(512)	NULL ,
	ChildProcessInstanceId		NVARCHAR(63)	NULL,
    ChildWorkitemId				INT,
	FilterValue					INT		NULL,
	Guid 						BIGINT ,
	NotifyStatus				NVARCHAR(1),
	Q_DivertedByUserId   		INT NULL,
	RoutingStatus				NVARCHAR(1),
	NoOfCollectedInstances		INT DEFAULT 0,
	Introducedbyid				INT		NULL ,
	IntroducedAt				NVARCHAR(30)	 NULL ,
	CreatedBy		INT NULL,
	IsPrimaryCollected			NVARCHAR(1)	NULL CHECK (IsPrimaryCollected IN (N'Y', N'N')),
	URN							NVARCHAR(63)   NULL
	PRIMARY KEY ( ProcessInstanceId , WorkItemId )
	) 

go

/******   ROUTEPARENTTABLE    ******/

CREATE TABLE ROUTEPARENTTABLE (
	ProcessDefId  		INT 		NOT NULL,
	ParentProcessDefId 	INT 		NOT NULL
	PRIMARY KEY (Processdefid , ParentProcessDefId)
)

go



/******   WFCURRENTROUTELOGTABLE    ******/

CREATE TABLE WFCURRENTROUTELOGTABLE (
	LogId 			BIGINT		IDENTITY (1,1) 		NOT NULL	PRIMARY KEY,
	ProcessDefId  		INT 		NOT NULL,
	ActivityId 		INT		NULL ,
	ProcessInstanceId	NVARCHAR(63)	NULL ,
	WorkItemId 		INT		NULL ,
	UserId 			INT	NULL ,
	ActionId 		INT 		NOT NULL ,
	ActionDatetime		DATETIME 	NOT NULL CONSTRAINT DF_WFCRLT_ActDT DEFAULT (CONVERT(DATETIME,getdate(),109)),
	AssociatedFieldId 	INT		NULL , 
	AssociatedFieldName	NVARCHAR (4000) NULL , 
	ActivityName		NVARCHAR(30)	NULL , 
	UserName		NVARCHAR (63)	NULL , 
	NewValue		NVARCHAR (2000)	NULL , 
	AssociatedDateTime	DATETIME 	NULL , 
	QueueId			INT		NULL,
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	TaskId	INT Default 0,
	SubTaskId INT Default 0,
	URN				NVARCHAR(63) NULL
)

go

/******   WFHISTORYROUTELOGTABLE    ******/

CREATE TABLE WFHISTORYROUTELOGTABLE (
	LogId 			BIGINT  		NOT NULL PRIMARY KEY,
	ProcessDefId  		INT 		NOT NULL,
	ActivityId 		INT		NULL ,
	ProcessInstanceId	NVARCHAR(63)	NULL ,
	WorkItemId 		INT		NULL ,
	UserId 			INT	NULL ,
	ActionId 		INT 		NOT NULL ,
	ActionDatetime		DATETIME 	NOT NULL CONSTRAINT DF_WFHRLT_ActDT DEFAULT (CONVERT(DATETIME,getdate(),109)),
	AssociatedFieldId 	INT		NULL ,
	AssociatedFieldName	NVARCHAR (4000) NULL ,
	ActivityName		NVARCHAR(30)	NULL ,
	UserName		NVARCHAR(63)	NULL , 
	NewValue		NVARCHAR (2000)	NULL ,
	AssociatedDateTime	DATETIME 	NULL , 
	QueueId			INT		NULL,
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	TaskId	INT Default 0,
	SubTaskId INT Default 0,
	URN				NVARCHAR(63)   NULL
)

go

/******   GENERATERESPONSETABLE  ******/

CREATE TABLE GENERATERESPONSETABLE  (
	ProcessDefId            INTEGER         NOT NULL,
	TriggerID               SMALLINT        NOT NULL,
	FileName                NVARCHAR(255)   NOT NULL,
	ApplicationName        	NVARCHAR(255)   NOT NULL, 
	GenDocType             	NVARCHAR(255)   NULL
	PRIMARY KEY (Processdefid , TriggerID)
)

go

/******  EXCEPTIONTRIGGERTABLE  ******/

CREATE TABLE EXCEPTIONTRIGGERTABLE (
             ProcessDefId       INTEGER		NOT NULL,
             TriggerID          SMALLINT	NOT NULL,
             ExceptionName      NVARCHAR(255)	NOT NULL,
             Attribute          NVARCHAR(255)   NOT NULL,
             RaiseViewComment   NVARCHAR(255)   NULL,
             ExceptionId        INTEGER         NOT NULL 
	     PRIMARY KEY (Processdefid , TriggerID)
)

go

/****** TEMPLATEDEFINITIONTABLE  ******/

CREATE TABLE TEMPLATEDEFINITIONTABLE (
	ProcessDefId		INTEGER		NOT NULL,
	TemplateId		INTEGER		NOT NULL,
	TemplateFileName	NVARCHAR(255)	NOT NULL,
	TemplateBuffer		NTEXT		NULL,
	isEncrypted		NVARCHAR(1),
	ArgList			NVARCHAR(2000)	NULL,
	format			NVARCHAR(255) NULL,
	CONSTRAINT Pk_TEMPLATEDEFINITIONTABLE PRIMARY KEY (ProcessdefId,TemplateId)
 )

go

/****** EXTDBFIELDDEFINITIONTABLE  ******/

CREATE TABLE EXTDBFIELDDEFINITIONTABLE (
	ProcessDefId    INTEGER         NOT NULL,
	FieldName		NVARCHAR(50)  	NOT NULL,
	FieldType    	NVARCHAR(255)  	NOT NULL,
	FieldLength		INTEGER				NULL, 
	DefaultValue	NVARCHAR(255)		NULL,
	Attribute 		NVARCHAR(255)		NULL,
	VarPrecision	INT					NULL,
	ExtObjId		INT				NOT NULL,
	PRIMARY KEY	(ProcessDefId,ExtObjId,FieldName)
)

go

/******   QUEUESTREAMTABLE	******/

CREATE TABLE QUEUESTREAMTABLE(
	ProcessDefID 		INT ,
	ActivityID 		INT ,
	StreamId 		INT ,
	QueueId 		INT 
	CONSTRAINT QST_PRIM PRIMARY KEY(ProcessDefID ,ActivityID ,StreamId)
)

go

/******   QUEUEDEFTABLE ******/

CREATE TABLE QUEUEDEFTABLE (
	QueueID			INT		IDENTITY (1,1) PRIMARY KEY,
	QueueName		NVARCHAR(63) 	NOT NULL ,
	QueueType		NVARCHAR(1) 	NOT NULL ,
	Comments		NVARCHAR(255)	NULL ,
	AllowReassignment 	NVARCHAR(1) ,
	FilterOption		INT		NULL,
	FilterValue		NVARCHAR(63)	NULL,
	OrderBy			INT		NULL,
	QueueFilter		NVARCHAR(2000)	NULL,
	RefreshInterval		INT		NULL, 
    SortOrder       NVARCHAR(1) NULL,
	ProcessName		NVARCHAR(30)	NULL,
	LastModifiedOn	DATETIME NULL,
	CONSTRAINT uk_QueueDefTable	UNIQUE (QueueName)
) 

go

Insert into QueueDefTable (QueueName, QueueType, Comments, OrderBy, SortOrder)
values ('SystemArchiveQueue', 'A', 'System generated common Archive Queue', 10, 'A')
go
Insert into QueueDefTable (QueueName, QueueType, Comments, OrderBy, SortOrder)
values ('SystemPFEQueue', 'A', 'System generated common PFE Queue', 10, 'A')
go
Insert into QueueDefTable (QueueName, QueueType, Comments, OrderBy, SortOrder)
values ('SystemSharepointQueue', 'A', 'System generated common Sharepoint Queue', 10, 'A')
go
Insert into QueueDefTable (QueueName, QueueType, Comments, OrderBy, SortOrder)
values ('SystemWSQueue', 'A', 'System generated common WebService Queue', 10, 'A')
go
Insert into QueueDefTable (QueueName, QueueType, Comments, OrderBy, SortOrder)
values ('SystemSAPQueue', 'A', 'System generated common SAP Queue', 10, 'A')
go
Insert into QueueDefTable (QueueName, QueueType, Comments, OrderBy, SortOrder)
values ('SystemBRMSQueue', 'A', 'System generated common BRMS Queue', 10, 'A')
go

/******   QUEUEUSERTABLE ******/

CREATE TABLE QUEUEUSERTABLE (
	QueueId 		INT 		NOT NULL ,
	Userid 			INT 	NOT NULL ,
	AssociationType 	SMALLINT 	NOT NULL ,
	AssignedTillDATETIME	DATETIME	NULL, 
	QueryFilter		NVarchar(2000)	NULL,
	QueryPreview		NVARCHAR(1)	NULL DEFAULT 'Y',
	RevisionNo		INT
	PRIMARY KEY (QueueID , UserId , AssociationType )
)  

go

/******   PSREGISTERATIONTABLE   ******/
/* SrNo-1, data column changed from text to NVarchar(2000) */

CREATE TABLE PSREGISTERATIONTABLE (
	PSId 			INT		IDENTITY (10000000, 1) 	NOT NULL ,
	PSName			NVARCHAR(63) 	NOT NULL,
	Type			CHAR(1) 	NOT NULL DEFAULT 'P' CHECK (Type = 'C' OR Type = 'P' ),
	SessionId 		INT		NULL ,
	Processdefid 		INT		NULL,
	data			NVARCHAR(2000)	NULL,
	BulkPS         NVARCHAR(1)
	PRIMARY KEY (PSName , Type)
)

go

/******   USERDIVERSIONTABLE    ******/

CREATE TABLE USERDIVERSIONTABLE ( 
	Diverteduserindex 	INT NOT NULL, 
	DivertedUserName	NVARCHAR(64), 
	AssignedUserindex 	INT NOT NULL,
	AssignedUserName	NVARCHAR(64),	
	fromdate		DATETIME, 
	todate			DATETIME, 
	currentworkitemsflag 	NVARCHAR(1) CHECK ( currentworkitemsflag  in (N'Y',N'N'))
	CONSTRAINT Pk_userdiversion PRIMARY KEY (Diverteduserindex, AssignedUserindex,fromdate) 
)

go

/******   USERWORKAUDITTABLE    ******/

CREATE TABLE USERWORKAUDITTABLE ( 
	Userindex		INT NOT NULL, 
	Auditoruserindex 	INT NOT NULL, 
	Percentageaudit 	INT ,
	AuditActivityId		INT, 
	WorkItemCount		NVARCHAR(100),
	ProcessDefId		INT
	CONSTRAINT   pk_userwrkaudit PRIMARY KEY(userIndex,auditoruserindex,AuditActivityId,ProcessDefId)
)

go

/******   PREFERREDQUEUETABLE    ******/

CREATE TABLE PREFERREDQUEUETABLE ( 
	userindex 		INT NOT NULL,
	queueindex 		INT 
	CONSTRAINT   pk_quserindex PRIMARY KEY(userIndex,queueIndex) 
)

go

/******   USERPREFERENCESTABLE  WFS_8.0_018   ******/

CREATE TABLE USERPREFERENCESTABLE  (
	Userid 			INT NOT NULL,
	ObjectId 		INT,
	ObjectName 		NVARCHAR(255),
	ObjectType 		NVARCHAR(30),
	NotifyByEmail 		NVARCHAR(1),
	Data			ntext	
	CONSTRAINT Pk_User_pref PRIMARY KEY (	Userid ,		ObjectId ,		ObjectType 	),
	CONSTRAINT Uk_User_pref UNIQUE (	Userid ,		Objectname ,		ObjectType 	)
)

go

/******   WFLINKSTABLE     ******/

CREATE TABLE WFLINKSTABLE (
	ChildProcessInstanceID 	NVARCHAR(63) 	NOT NULL,
	ParentProcessInstanceID NVARCHAR(63) 	NOT NULL,
	IsParentArchived  NCHAR(1) DEFAULT 'N',
	IsChildArchived	NCHAR(1) DEFAULT 'N',	
	TaskId integer not  null default 0,
	PRIMARY KEY (ChildProcessInstanceID,ParentProcessInstanceID)
) 

go

/******   VARALIASTABLE     ******/

CREATE TABLE VARALIASTABLE (
 	Id			INT		Identity(1,1),	
	Alias   		NVARCHAR(63) 	NOT NULL ,
 	ToReturn  		NVARCHAR(1)  	NOT NULL CHECK (ToReturn in (N'Y', N'N')),
 	Param1  		NVARCHAR(50)  	NOT NULL ,
 	Type1  			SMALLINT   	NULL ,
 	Param2 			NVARCHAR(255)  	NULL ,
 	Type2 			NVARCHAR(1)   	NULL CHECK (Type2 in (N'V', N'C')),
 	Operator 		SMALLINT   	NULL, 
	QueueId			INT		NOT NULL,
	ProcessDefId	INT		NOT NULL DEFAULT 0,
    AliasRule       NVARCHAR(2000)      NULL,
	VariableId1		INT		NOT NULL DEFAULT 0,
	DisplayFlag		NVARCHAR(1) NOT NULL,
	SortFlag		NVARCHAR(1) NOT NULL,
	SearchFlag		NVARCHAR(1) NOT NULL,
	CONSTRAINT CK_DisplayFlag CHECK (DisplayFlag IN (N'Y', N'N')),
	CONSTRAINT CK_SortFlag CHECK (SortFlag IN (N'Y', N'N')),
	CONSTRAINT CK_SearchFlag CHECK (SearchFlag IN (N'Y', N'N')),
	PRIMARY KEY (QueueId, Alias, ProcessDefId)
) 

go

/******  INITIATEWORKITEMDEFTABLE     ******/

CREATE TABLE INITIATEWORKITEMDEFTABLE ( 
	ProcessDefID 		INT				NOT NULL ,
	ActivityId			INT				NOT NULL  ,
	ImportedProcessName NVARCHAR(30)	NOT NULL  ,
	ImportedFieldName 	NVARCHAR(63)	NOT NULL ,
	ImportedVariableId	INT					NULL,
	ImportedVarFieldId	INT					NULL,
	MappedFieldName		NVARCHAR(63)	NOT NULL ,
	MappedVariableId	INT					NULL,
	MappedVarFieldId	INT					NULL,
	FieldType			NVARCHAR(1)		NOT NULL,
	MapType				NVARCHAR(1)			NULL,
	DisplayName			NVARCHAR(2000)		NULL,
	ImportedProcessDefId	INT				NULL
) 

go

/******  IMPORTEDPROCESSDEFTABLE     ******/

CREATE TABLE IMPORTEDPROCESSDEFTABLE (
	ProcessDefID 			INT 			NOT NULL,
	ActivityId				INT				NOT NULL ,
	ImportedProcessName 	NVARCHAR(30)	NOT NULL ,
	ImportedFieldName 		NVARCHAR(63)	NOT NULL ,
	FieldDataType			INT					NULL ,	
	FieldType				NVARCHAR(1)		NOT NULL,
	VariableId				INT					NULL,
	VarFieldId				INT					NULL,
	DisplayName				NVARCHAR(2000)		NULL,
	ImportedProcessDefId	INT					NULL,
	ProcessType				NVARCHAR(1)			NULL   DEFAULT (N'R')	
) 

go

/******	  WFREMINDERTABLE    ******/

CREATE TABLE WFREMINDERTABLE (
 	RemIndex 		INT		IDENTITY (1, 1) NOT NULL PRIMARY KEY,
 	ToIndex 		INT 	NOT NULL ,
 	ToType 			NVARCHAR(1) 	NOT NULL	DEFAULT (N'U'),
 	ProcessInstanceId 	NVARCHAR(63) 	NOT NULL ,
	WorkitemId 		INT 		NULL ,
 	RemDATETIME 		DATETIME 	NOT NULL ,
 	RemComment 		NVARCHAR (255)  NULL ,
 	SetByUser 		INT 	NOT NULL ,
 	InformMode 		NVARCHAR(1) 	NULL		DEFAULT (N'P'),
 	ReminderType 		NVARCHAR(1) 	NULL		DEFAULT (N'U'),
 	MailFlag 		NVARCHAR(1) 	NULL		DEFAULT (N'N'),
 	FaxFlag 		NVARCHAR(1) 	NULL		DEFAULT (N'N'),
 	TaskId          INT   NOT NULL DEFAULT 0,
 	SubTaskId          INT   NOT NULL DEFAULT 0
) 

go

CREATE TABLE WFMultiLingualTable(
	EntityId 	    INT		NOT NULL,
	EntityType      INT		NOT NULL,
	Locale          NVARCHAR(100)   	NOT NULL ,	
	EntityName      NVARCHAR(255)      	NOT NULL , 	
	ProcessDefId	INT		NOT NULL,
	ParentId		INT		NOT NULL,
	FieldName		Nvarchar(255) ,
	PRIMARY KEY (EntityId, EntityType, Locale, ProcessDefId, ParentId)
)
go
/***********	USERQUEUETABLE	****************/

CREATE TABLE USERQUEUETABLE
(
	UserID 			INT	NOT NULL,
	QueueID 		INT 		NOT NULL
	ConstraINT PK_UQTbl PRIMARY KEY  CLUSTERED 
	(
	UserID , QueueID 
	)	
)

go

/***********	WFMAILQUEUETABLE	WFS_8.0_018 ****************/

CREATE TABLE WFMAILQUEUETABLE(
	TaskId 			BIGINT			PRIMARY KEY IDENTITY(1,1),
	mailFrom 		NVARCHAR(255),
	mailTo 			NVARCHAR(2000), 
	mailCC 			NVARCHAR(512), 
	mailBCC 		NVARCHAR(512),
	mailSubject 	NVARCHAR(255),
	mailMessage		NText,
	mailContentType		NVARCHAR(64),
	attachmentISINDEX 	NVARCHAR(1000),    
	attachmentNames		NVARCHAR(1000), 
	attachmentExts		NVARCHAR(128),	
	mailPriority		INTEGER, 
	mailStatus		NVARCHAR(1),
	statusComments		NVARCHAR(512),
	lockedBy		NVARCHAR(255),
	successTime		DATETIME,
	LastLockTime		DATETIME,
	insertedBy		NVARCHAR(255),
	mailActionType		NVARCHAR(20),
	insertedTime		DATETIME,
	processDefId		INTEGER,
	processInstanceId	NVARCHAR(63),
	workitemId		INTEGER,
	activityId		INTEGER,
	noOfTrials		INTEGER		default 0,
	zipFlag 			nvarchar(1)		NULL,
	zipName 			nvarchar(255)	NULL,
	maxZipSize 			int				NULL,
	alternateMessage 	ntext			NULL	
)

go

/***********	WFMAILQUEUEHISTORYTABLE	 WFS_8.0_018	****************/

CREATE TABLE WFMAILQUEUEHISTORYTABLE(
	TaskId 			BIGINT		PRIMARY KEY,
	mailFrom 		NVARCHAR(255),
	mailTo 			NVARCHAR(2000), 
	mailCC 			NVARCHAR(512), 
	mailBCC 		NVARCHAR(512),	
	mailSubject 		NVARCHAR(255),
	mailMessage		NText,
	mailContentType		NVARCHAR(64),
	attachmentISINDEX 	NVARCHAR(1000), 
	attachmentNames		NVARCHAR(1000), 
	attachmentExts		NVARCHAR(128),	
	mailPriority		INTEGER, 
	mailStatus		NVARCHAR(1),
	statusComments		NVARCHAR(512),
	lockedBy		NVARCHAR(255),
	successTime		DATETIME,
	LastLockTime		DATETIME,
	insertedBy		NVARCHAR(255),
	mailActionType		NVARCHAR(20),
	insertedTime		DATETIME,
	processDefId		INTEGER,
	processInstanceId	NVARCHAR(63),
	workitemId		INTEGER,
	activityId		INTEGER,
	noOfTrials		INTEGER		default 0
)

go

/***********	ACTIONDEFTABLE	****************/

CREATE TABLE ACTIONDEFTABLE (
	ProcessDefId            INT             NOT NULL,
	ActionId                INT             NOT NULL,
	ActionName              NVARCHAR(50)    NOT NULL,
	ViewAs                  NVARCHAR(50)    NULL,
	IconBuffer              NTEXT           NULL,
	ActivityId              INT             NOT NULL,
	isEncrypted				NVARCHAR(1),
	CONSTRAINT PK_ACTIONDEFTABLE PRIMARY KEY(ProcessDefId,ActionId,ActivityId)
)

go

/***********	ACTIONCONDITIONTABLE	****************/

CREATE TABLE ACTIONCONDITIONTABLE (
	ProcessDefId            INT										NOT NULL,
	ActivityId              INT				CONSTRAINT rct_sid      NOT NULL,
	RuleType				NVARCHAR(1)		CONSTRAINT rct_rtype    NOT NULL,
	RuleOrderId				INT				CONSTRAINT rct_iroid    NOT NULL,
	RuleId					INT				CONSTRAINT rct_rid      NOT NULL,
	ConditionOrderId		INT				CONSTRAINT rct_coid     NOT NULL,
	Param1					NVARCHAR(255)	CONSTRAINT rct_p1		NOT NULL,
	Type1					NVARCHAR(1)		CONSTRAINT rct_type1	NOT NULL,
	ExtObjID1				INT											NULL,
	VariableId_1			INT											NULL,
	VarFieldId_1			INT											NULL,
	Param2					NVARCHAR(255)   CONSTRAINT rct_p2		NOT NULL,
	Type2					NVARCHAR(1)     CONSTRAINT rct_type2	NOT NULL,
	ExtObjID2				INT											NULL,
	VariableId_2			INT											NULL,
	VarFieldId_2			INT											NULL,
	Operator				INT             CONSTRAINT rct_oprt     NOT NULL,
	LogicalOp				INT             CONSTRAINT rct_oprt     NOT NULL
)

go

/***********	ACTIONOPERATIONTABLE	****************/

CREATE TABLE ACTIONOPERATIONTABLE (
	ProcessDefId		INT										NOT NULL,
	ActivityId			INT				CONSTRAINT rat_sid		NOT NULL,
	RuleType			NVARCHAR(1)     CONSTRAINT rat_rtype    NOT NULL,
	RuleId				INT             CONSTRAINT rat_rid      NOT NULL,
	OperationType		INT             CONSTRAINT rat_rid      NOT NULL,
	Param1				NVARCHAR(255)    CONSTRAINT rat_p1			NULL,
	Type1				NVARCHAR(1)     CONSTRAINT rat_type1    NOT NULL,
	Param2				NVARCHAR(255)   CONSTRAINT rat_p2			NULL,
	Type2				NVARCHAR(1)     CONSTRAINT rat_type2    NOT NULL,
	Param3				NVARCHAR(255)								NULL,
	Type3				NVARCHAR(1)									NULL,
	Operator			INT											NULL,
	OperationOrderId	INT             CONSTRAINT rat_aoid     NOT NULL,
	CommentFlag			NVARCHAR(1)     CONSTRAINT rat_cflag    NOT NULL,
	ExtObjID1			INT											NULL,
	ExtObjID2			INT											NULL,
	ExtObjID3			INT											NULL,
	ActionCalFlag		NVarCHAR(1)									NULL,
	VariableId_1		INT											NULL,
	VarFieldId_1		INT											NULL,
	VariableId_2		INT											NULL,
	VarFieldId_2		INT											NULL,
	VariableId_3		INT											NULL,
	VarFieldId_3		INT											NULL
)

go

/***********	ACTIVITYINTERFACEASSOCTABLE	****************/

CREATE TABLE ACTIVITYINTERFACEASSOCTABLE (
	ProcessDefId            INT		NOT NULL,
	ActivityId              INT             NOT NULL,
	ActivityName            NVARCHAR(30)    NOT NULL,
	InterfaceElementId      INT             NOT NULL,
	InterfaceType           NVARCHAR(1)     NOT NULL,
	Attribute               NVARCHAR(2)     NULL,
	TriggerName             NVARCHAR(255)   NULL,
	ProcessVariantId 		INT 			NOT NULL DEFAULT 0
)

go

/***********	ARCHIVETABLE	****************/

CREATE TABLE ARCHIVETABLE (
	ProcessDefId            INTEGER         NOT NULL,
	ActivityID              INTEGER         NOT NULL,
	CabinetName             NVARCHAR(255)   NOT NULL,
	IPAddress               NVARCHAR(15)    NOT NULL,
	PortId                  NVARCHAR(5)     NOT NULL,
	ArchiveAs               NVARCHAR(255)   NOT NULL,
	UserId                  NVARCHAR(50)    NOT NULL,
	Passwd                  NVARCHAR(256)   NULL,
	ArchiveDataClassId      INTEGER         NULL,
	AppServerIP				NVARCHAR(15)	NULL,
	AppServerPort			NVARCHAR(5)		NULL,
	AppServerType			NVARCHAR(255)	NULL,
	ArchiveDataClassName 	NVARCHAR(255)	NULL,
	SecurityFlag			NVARCHAR(1)		CHECK (SecurityFlag IN (N'Y', N'N')),
	DeleteAudit			    NVARCHAR(1)    default 'N' 
)

go

/***********	ARCHIVEDATAMAPTABLE	****************/

CREATE TABLE ARCHIVEDATAMAPTABLE (
	ProcessDefId            INTEGER			NOT NULL,
	ArchiveID               INTEGER			NOT NULL,
	DocTypeID               INTEGER			NOT NULL,
	DataFieldId             INTEGER			NOT NULL,
	DataFieldName           NVARCHAR(50)	NOT NULL,
	AssocVar                NVARCHAR(255)		NULL,
	ExtObjID                INTEGER				NULL,
	VariableId				INT					NULL,
	VarFieldId				INT					NULL,
	DataFieldType 			INTEGER				NULL
	
)

go

/***********	ARCHIVEDOCTYPETABLE	****************/

CREATE TABLE ARCHIVEDOCTYPETABLE (
	ProcessDefId            INTEGER		NOT NULL,
	ArchiveID               INTEGER		NOT NULL,
	DocTypeID               INTEGER		NOT NULL,
	AssocClassName          NVARCHAR(255)	NULL,
	AssocClassID            INTEGER		NULL
)

go

/***********	SCANACTIONSTABLE	****************/

CREATE TABLE SCANACTIONSTABLE (
	ProcessDefId		INT             NOT NULL,
	DocTypeId			INT             NOT NULL,
	ActivityId			INT             NOT NULL,
	Param1				NVARCHAR(255)    NOT NULL,
	Type1				NVARCHAR(1)     NOT NULL,
	ExtObjId1			INT             NOT NULL,
	VariableId_1		INT					NULL,
	VarFieldId_1		INT					NULL,
	Param2				NVARCHAR(255)   NOT NULL,
	Type2				NVARCHAR(1)     NOT NULL,
	ExtObjId2			INT             NOT NULL,
	VariableId_2		INT					NULL,
	VarFieldId_2		INT					NULL
)

go

/***********	CHECKOUTPROCESSESTABLE	****************/

CREATE TABLE CHECKOUTPROCESSESTABLE ( 
	ProcessDefId            INTEGER			NOT NULL,
	ProcessName             NVARCHAR(30)	NOT NULL, 
	CheckOutIPAddress       VARCHAR(50)		NOT NULL, 
	CheckOutPath            NVARCHAR(255)   NOT NULL,
	ProcessStatus			NVARCHAR(1)		NULL,
	ActivityId				INTEGER			NULL,
	SwimlaneId				INTEGER			NULL,
	UserId					INTEGER			NULL
)

go

/***********	TODOLISTDEFTABLE	****************/

CREATE TABLE TODOLISTDEFTABLE (
	ProcessDefId		INTEGER			NOT NULL,
	ToDoId				INTEGER			NOT NULL,
	ToDoName			NVARCHAR(255)	NOT NULL,
	Description			NVARCHAR(255)	NOT NULL,
	Mandatory			NVARCHAR(1)		NOT NULL,
	ViewType			NVARCHAR(1)			NULL,
	AssociatedField		NVARCHAR(255)		NULL,
	ExtObjID			INTEGER				NULL,
	VariableId			INT					NULL,
	VarFieldId			INT					NULL,
	TriggerName			NVARCHAR(50)		NULL,
	PRIMARY KEY (ProcessDefId, ToDoId)
)

go

/***********	TODOPICKLISTTABLE	****************/

CREATE TABLE TODOPICKLISTTABLE (
	ProcessDefId		INTEGER		NOT NULL,
	ToDoId			INTEGER		NOT NULL,
	PickListValue		NVARCHAR(50)	NOT NULL,
	CONSTRAINT PK_TODOPICKLISTTABLE PRIMARY KEY(ProcessDefId,ToDoId,PickListValue)
)

go

/***********	TODOSTATUSTABLE	****************/

CREATE TABLE TODOSTATUSTABLE (
	ProcessDefId		INTEGER         NOT NULL,
	ProcessInstanceId	NVARCHAR(63)     NOT NULL,
	ToDoValue		NVARCHAR(255)    NULL
)

go

/***********	TODOSTATUSHISTORYTABLE	****************/

CREATE TABLE TODOSTATUSHISTORYTABLE (
	ProcessDefId		INTEGER         NOT NULL,
	ProcessInstanceId	NVARCHAR(63)    NOT NULL,
	ToDoValue		NVARCHAR(255)   NULL
)

go

/***********	EXCEPTIONDEFTABLE	****************/

CREATE TABLE EXCEPTIONDEFTABLE (
	ProcessDefId            INT             NOT NULL,
	ExceptionId             INT             NOT NULL,
	ExceptionName           NVARCHAR(50)    NOT NULL,
	Description             NVARCHAR(255)   NOT NULL,
	PRIMARY KEY (ProcessDefId, ExceptionId)
)

go

/***********	EXCEPTIONTABLE	****************/

CREATE TABLE EXCEPTIONTABLE (
	ProcessDefId            INTEGER         NOT NULL,
	ExcpSeqId               INTEGER         NOT NULL,
	WorkitemId              INTEGER         NOT NULL,
	Activityid              INTEGER         NOT NULL,
	ActivityName            NVARCHAR(30)    NOT NULL,
	ProcessInstanceId       NVARCHAR(63)    NOT NULL,
	UserId                  INT        NOT NULL,
	UserName                NVARCHAR(63)    NOT NULL,
	ActionId                INTEGER         NOT NULL,
	ActionDatetime          DATETIME        NOT NULL  CONSTRAINT DF_EXCPTAB DEFAULT getdate(),
	ExceptionId             INTEGER         NOT NULL,
	ExceptionName           NVARCHAR(50)    NOT NULL,
	FinalizationStatus      NVARCHAR(1)     NOT NULL CONSTRAINT DF_EXCPFS DEFAULT (N'T'),
	ExceptionComments       NVARCHAR(512)   NULL
)

go

/***********	EXCEPTIONHISTORYTABLE	****************/

CREATE TABLE EXCEPTIONHISTORYTABLE (
	ProcessDefId            INTEGER         NOT NULL,
	ExcpSeqId               INTEGER         NOT NULL,
	WorkitemId              INTEGER         NOT NULL,
	Activityid              INTEGER         NOT NULL,
	ActivityName		NVARCHAR(30)	NOT NULL,
	ProcessInstanceId       NVARCHAR(63)    NOT NULL,
	UserId                  INT        NOT NULL,
	UserName                NVARCHAR(63)    NOT NULL,
	ActionId                INTEGER         NOT NULL,
	ActionDatetime          DATETIME        NOT NULL  CONSTRAINT DF_EXCPHISTTAB DEFAULT (CONVERT(DATETIME,getdate(),109)),
	ExceptionId             INTEGER         NOT NULL,
	ExceptionName           NVARCHAR(50)    NOT NULL,
	FinalizationStatus      NVARCHAR(1)     NOT NULL CONSTRAINT DF_EXCPHTFS DEFAULT (N'T'),
	ExceptionComments       NVARCHAR(512)   NULL
)

go

/***********	DOCUMENTTYPEDEFTABLE	****************/

CREATE TABLE DOCUMENTTYPEDEFTABLE (
	ProcessDefId	INT             NOT NULL,
	DocId			INT             NOT NULL,
	DocName			NVARCHAR(50)    NOT NULL,
	DCName 			NVARCHAR(250)	NULL,
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	DocType			NVARCHAR(1)		NOT NULL DEFAULT 'D',
	PRIMARY KEY (ProcessDefId, DocId, ProcessVariantId)
)

go

/***********	PROCESSINITABLE	****************/

CREATE TABLE PROCESSINITABLE (
	ProcessDefId	INT		NOT NULL ,
	ProcessINI		NTEXT		NULL,
	CONSTRAINT PK_ProcessINITable PRIMARY KEY(ProcessDefId)
)

go

/***********	ROUTEFOLDERDEFTABLE	****************/

CREATE TABLE ROUTEFOLDERDEFTABLE (
	ProcessDefId            INTEGER         NOT NULL PRIMARY KEY,
	CabinetName             NVARCHAR(50)    NOT NULL,
	RouteFolderId           NVARCHAR(255)   NOT NULL,
	ScratchFolderId         NVARCHAR(255)   NOT NULL,
	CompletedFolderId       NVARCHAR(255)   NOT NULL,
	WorkFlowFolderId        NVARCHAR(255)   NOT NULL,
	DiscardFolderId         NVARCHAR(255)   NOT NULL 
)

go

/***********	PRINTFAXEMAILTABLE	WFS_8.0_018 ****************/

CREATE TABLE PRINTFAXEMAILTABLE (
	ProcessDefId            INT				NOT NULL,
	PFEInterfaceId          INT				NOT NULL,
	InstrumentData          NVARCHAR(1)			NULL,
	FitToPage               NVARCHAR(1)			NULL,
	Annotations             NVARCHAR(1)			NULL,
	FaxNo                   NVARCHAR(255)		NULL,
	FaxNoType               NVARCHAR(1)			NULL,
	ExtFaxNoId              INT					NULL,
	VariableIdFax			INT					NULL,
	VarFieldIdFax			INT					NULL,
	CoverSheet              NVARCHAR(50)		NULL,
	CoverSheetBuffer        NTEXT				NULL,
	ToUser                  NVARCHAR(255)		NULL,
	FromUser                NVARCHAR(255)		NULL,
	ToMailId                NVARCHAR(255)		NULL,
	ToMailIdType            NVARCHAR(1)			NULL,
	ExtToMailId             INT					NULL,
	VariableIdTo			INT					NULL,
	VarFieldIdTo			INT					NULL,
	CCMailId                NVARCHAR(255)		NULL,
	CCMailIdType            NVARCHAR(1)			NULL,
	ExtCCMailId             INT					NULL,
	VariableIdCc			INT					NULL,
	VarFieldIdCc			INT					NULL,
	SenderMailId            NVARCHAR(255)		NULL,
	SenderMailIdType        NVARCHAR(1)			NULL,
	ExtSenderMailId         INT					NULL,
	VariableIdFrom			INT					NULL,
	VarFieldIdFrom			INT					NULL,
	Message                 NText				NULL,
	Subject                 NVARCHAR(255)		NULL,
	BCCMailId				NVARCHAR(255)		NULL,
	BCCMailIdType			NVARCHAR(1)			NULL,
	ExtBCCMailId			INT					NULL,
	VariableIdBCC			INT					NULL,
	VarFieldIdBCC			INT					NULL,
	MailPriority NVARCHAR(255) 		DEFAULT NULL, 
	MailPriorityType NVARCHAR(1) 	DEFAULT NULL, 
	ExtObjIdMailPriority 	int 	NOT NULL DEFAULT 0, 
	VariableIdMailPriority 	int 	NOT NULL DEFAULT 0,
	VarFieldIdMailPriority 	int 	NOT NULL DEFAULT 0
	CONSTRAINT PK_PRINTFAXEMAILTABLE PRIMARY KEY(ProcessDefId,PFEInterfaceId)
)

go

/***********	PRINTFAXEMAILDOCTYPETABLE	****************/

CREATE TABLE PRINTFAXEMAILDOCTYPETABLE (
	ProcessDefId		INT             NOT NULL,
	ElementId		INT             NOT NULL,
	PFEType			NVARCHAR(1)     NOT NULL,
	DocTypeId		INT             NOT NULL,
	CreateDoc		NVARCHAR(1)     NOT NULL,
	VariableId              INT,
	VarFieldId              INT 
)

go

/***********	WFFORM_TABLE	****************/

CREATE TABLE WFFORM_TABLE (
	ProcessDefId            INT             NOT NULL,
	FormId                  INT             NOT NULL,
	FormName                NVARCHAR(50)    NOT NULL,
	FormBuffer              NTEXT           NULL,
	isEncrypted				NVARCHAR(1),
	LastModifiedOn			DATETIME,
	DeviceType				NVARCHAR(1) NOT NULL DEFAULT 'D',
	FormHeight				INT NOT NULL DEFAULT 100,
	FormWidth				INT NOT NULL DEFAULT 100,
	ProcessVariantId        INT          NOT NULL DEFAULT 0,
	ExistingFormId 			INT				NULL,
	FormType				 nvarchar(1) default 'P' not null ,
	CONSTRAINT PK_WFFORM_TABLE PRIMARY KEY(ProcessDefID,FormId,DeviceType)
)

go

/***********	SUMMARYTABLE	****************/

CREATE TABLE SUMMARYTABLE
(
	processdefid		INT,
	activityid			INT,
	activityname		NVARCHAR(30),
	queueid				INT,
	userid				INT,
	username			NVARCHAR(255),
	totalwicount		INT,
	ActionDatetime		DATETIME,
	actionid			INT,
	totalduration		BIGINT,
	reporttype			NVARCHAR(1),
	totalprocessingtime	BIGINT,
	delaytime			BIGINT,
	wkindelay			INT,
	AssociatedFieldId	INT,
	AssociatedFieldName	NVARCHAR(2000),
	ProcessVariantId        INT          NOT NULL DEFAULT 0
)

go

/***********	WFMESSAGETABLE	****************/

CREATE TABLE WFMESSAGETABLE (
	messageId 			BIGINT		identity (1, 1) PRIMARY KEY, 
	message				NVARCHAR(4000) 	NOT NULL, 
	lockedBy			NVARCHAR(63), 
	status 				NVARCHAR(1)	CHECK (status in (N'N', N'F')),
	ActionDateTime		DATETIME	
)

go

/***********	WFATTRIBUTEMESSAGETABLE	****************/

CREATE TABLE WFATTRIBUTEMESSAGETABLE (
	ProcessDefId		INTEGER		NOT NULL,	
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	ProcessInstanceID	NVARCHAR(63)  NOT NULL ,
	WorkItemId 			INT 		NOT NULL ,
	messageId 			BIGINT		identity (1, 1) PRIMARY KEY, 
	message				NTEXT	 	NOT NULL, 
	lockedBy			NVARCHAR(63), 
	status 				NVARCHAR(1)	CHECK (status in (N'N', N'F')),
	ActionDateTime		DATETIME	
)
go
CREATE TABLE WFATTRIBUTEMESSAGEHISTORYTABLE (
	ProcessDefId		INTEGER		NOT NULL,	
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	ProcessInstanceID	NVARCHAR(63)  NOT NULL ,
	WorkItemId 			INT 		NOT NULL ,
	MESSAGEID		INTEGER NOT NULL, 
	message				NTEXT	 	NOT NULL, 
	lockedBy			NVARCHAR(63), 
	status 				NVARCHAR(1)	CHECK (status in (N'N', N'F')),
	ActionDateTime		DATETIME,
	CONSTRAINT PK_WFATTRIBUTEMESSAGETABLEHist PRIMARY KEY (MESSAGEID )	
)
go
/***********	CONSTANTDEFTABLE	****************/

CREATE TABLE CONSTANTDEFTABLE (
	ProcessDefId		INTEGER		NOT NULL,	
	ConstantName		NVARCHAR(64)	NOT NULL,
	ConstantValue		NVARCHAR(255)	,
	LastModifiedOn		DATETIME	NOT NULL,
	PRIMARY KEY (ProcessDefId , ConstantName)
)

go

/***********	EXTMETHODDEFTABLE	****************/
/*Modified on 21-03-2012 by Akash Bartaria. One field added ConfigurationID */
CREATE TABLE EXTMETHODDEFTABLE (
	ProcessDefId		INTEGER		NOT NULL ,
	ExtMethodIndex		INTEGER		NOT NULL ,	
	ExtAppName		NVARCHAR(64)	NOT NULL , 
	ExtAppType		NVARCHAR(1)	NOT NULL CHECK (ExtAppType in (N'E', N'W', N'S', N'Z',N'B',N'R')) , 
	ExtMethodName		NVARCHAR(64)	NOT NULL , 
	SearchMethod		NVARCHAR(255)	NULL , 
	SearchCriteria		INTEGER 	 	NULL ,
	ReturnType		SMALLINT	CHECK (ReturnType in (0, 3, 4, 6, 8, 10, 11, 12, 14, 15, 16)) ,
	MappingFile		NVarChar(1),
    ConfigurationID     INT     NULL,	
	PRIMARY KEY (ProcessDefId , ExtMethodIndex)
)

go

/************* EXTMETHODPARAMDEFTABLE **************/
/* SrNo-3, New fields added New feature web service method invocation - Mandep Kaur/ Ruhi Hira */
/* Bugzilla bug # 358, DataStructureId Not Null constraint removed - Ruhi Hira */

/*Rest Implementation Changes
                    A—                      (unbounded value will always be ‘Y’ or ‘N’)
                          B --                (unbounded value will always be ‘M’ – Non array child  or ‘P’—array child)
                                B1           (unbounded value will always be ‘M’ – Non array child  or ‘P’—array child)
                                B2           (unbounded value will always be ‘M’ – Non array child  or ‘P’—array child)
                     B--                       (unbounded value will always be ‘Z’ – Nested structure created as Array or ‘X’— Nested structure created as 	Non Array )
                          B1                 (unbounded value will always be ‘Z’ – Nested structure child created as Array or ‘X’— Nested structure child  created  as Non Array )
                          B2                 (unbounded value will always be ‘Z’ – Nested structure child  created as Array or ‘X’— Nested structure child  created as Non Array )
 
*/
CREATE TABLE EXTMETHODPARAMDEFTABLE (
	ProcessDefId		INTEGER		NOT NULL, 
	ExtMethodParamIndex	INTEGER		NOT NULL,
	ExtMethodIndex		INTEGER		NOT NULL,
	ParameterName		NVARCHAR(64),
	ParameterType		SMALLINT	CHECK (ParameterType in (0, 3, 4, 6, 8, 10, 11, 12, 14, 15, 16)),
	ParameterOrder		SMALLINT,
	DataStructureId		INTEGER	,
	ParameterScope		NVARCHAR(1),
	Unbounded		NVARCHAR(1) 		NOT NULL DEFAULT N'N' CHECK (Unbounded IN (N'Y' , N'N',N'X',N'Z',N'M',N'P')),
	PRIMARY KEY (ProcessDefId, ExtMethodIndex, ExtMethodParamIndex)
)

go

/*********** EXTMETHODPARAMMAPPINGTABLE ************/

CREATE TABLE EXTMETHODPARAMMAPPINGTABLE (
	ProcessDefId		INTEGER		NOT NULL, 
	ActivityId		INTEGER		NOT NULL,
	RuleId			INTEGER		NOT NULL,
	RuleOperationOrderId	SMALLINT	NOT NULL,
	ExtMethodIndex		INTEGER		NOT NULL,
	MapType			NVARCHAR(1)	CHECK (MapType in (N'F', N'R')),
	ExtMethodParamIndex	INTEGER		NOT NULL,
	MappedField		NVARCHAR(255),
	MappedFieldType		NVARCHAR(1)	CHECK (MappedFieldType	in (N'Q', N'F', N'C', N'S', N'I', N'M', N'U')),
	VariableId		INT,
	VarFieldId		INT,
	DataStructureId		INTEGER
)

go

/***********	WFMessageInProcessTable	****************/

Create Table WFMessageInProcessTable (
	messageId			BIGINT, 
	message				NVARCHAR(4000), 
	lockedBy			NVARCHAR(63), 
	status				NVARCHAR(1),
	ActionDateTime		DATETIME
)

go

/***********	WFFailedMessageTable	****************/

Create Table WFFailedMessageTable (
	messageId			BIGINT, 
	message				NVARCHAR(4000), 
	lockedBy			NVARCHAR(63), 
	status				NVARCHAR(1),
	failureTime			DATETIME,
	ActionDateTime		DATETIME
)

go

/***********	WFEscalationTable	****************/

Create Table WFEscalationTable (
	EscalationId		Int	Identity,
	ProcessInstanceId	NVarchar(64),
	WorkitemId		Int,
	ProcessDefId		Int,
	ActivityId		Int,
	EscalationMode		NVarchar(20)	NOT NULL,
	ConcernedAuthInfo	NVarchar(256)	NOT NULL,
	Comments		NVarchar(512)	NOT NULL,
	Message			NText		NOT NULL,
	ScheduleTime		DateTime	NOT NULL,
	FromId              NVarchar(256) NOT NULL DEFAULT('OmniFlowSystem_do_not_reply@newgen.co.in'),
	CCId                NVARCHAR(MAX),
	BCCId               NVARCHAR(256) DEFAULT NULL,
	Frequency			int,
	FrequencyDuration 	int,
	TaskId				Int NULL,
	EscalationType		NVARCHAR(1) DEFAULT('F'),
	ResendDurationMinutes	INT
)

go

/***********	WFEscInProcessTable	****************/

Create Table WFEscInProcessTable (
	EscalationId		Int	Primary Key,
	ProcessInstanceId	NVarchar(64),
	WorkitemId		Int,
	ProcessDefId		Int,
	ActivityId		Int,
	EscalationMode		NVarchar(20),
	ConcernedAuthInfo	NVarchar(256),
	Comments		NVarchar(512),
	Message			NText,
	ScheduleTime		DateTime,
	FromId              NVarchar(256) NOT NULL,
	CCId                NVarchar(256),
	BCCId               NVARCHAR(256) DEFAULT NULL,
	Frequency			int,
	FrequencyDuration 	int,
	TaskId				Int NULL,
	EscalationType		NVARCHAR(1) DEFAULT('F'),
	ResendDurationMinutes	INT
)
	
go
/* SrNo-2, New tables for feature -> JMS support */
/***********	WFJMSMESSAGETABLE	****************/

CREATE TABLE WFJMSMESSAGETABLE (
	messageId		INT		identity (1, 1), 
	message			NTEXT           NOT NULL, 
	destination		NVarchar(256),
	entryDateTime		DateTime,
	OperationType		NVarchar(1)		
)
	
go

/***********	WFJMSMessageInProcessTable	****************/

Create Table WFJMSMessageInProcessTable (
	messageId		INT, 
	message			NTEXT, 
	destination		NVARCHAR(256), 
	lockedBy		NVARCHAR(63), 
	entryDateTime		DateTime, 
	lockedTime		DateTime,
	OperationType		NVarchar(1)
)
	
go

/***********	WFJMSFailedMessageTable	****************/

Create Table WFJMSFailedMessageTable (
	messageId		INT,
	message			NTEXT,
	destination		NVARCHAR(256), 
	entryDateTime		DateTime, 
	failureTime		DateTime ,
	failureCause		NVARCHAR(2000),
	OperationType		NVarchar(1)
)

go

/***********	WFJMSDestInfo	****************/

CREATE TABLE WFJMSDestInfo(
	destinationId		INT PRIMARY KEY,
	appServerIP		NVARCHAR(16),
	appServerPort		INT,
	appServerType		NVARCHAR(16),
	jmsDestName		NVARCHAR(256) NOT NULL,
	jmsDestType		NVARCHAR(1) NOT NULL
)

go

/***********	WFJMSPublishTable	****************/

CREATE TABLE WFJMSPublishTable(
	processDefId		INT,
	activityId			INT,
	destinationId		INT,
	Template			NTEXT
)
	
go

/***********	WFJMSSubscribeTable	****************/

CREATE TABLE WFJMSSubscribeTable(
	processDefId			INT,
	activityId				INT,
	destinationId			INT,
	extParamName			NVARCHAR(256),
	processVariableName		NVARCHAR(256),
	variableProperty		NVARCHAR(1),
	VariableId				INT					NULL,
	VarFieldId				INT					NULL
)

go

/* SrNo-3, New tables for New feature web service method invocation - Mandep Kaur/ Ruhi Hira ; WFS_6.1.2_008 */

/************	WFDataStructureTable	************/

CREATE TABLE WFDataStructureTable (
	DataStructureId		Int,
	ProcessDefId		Int,
	ActivityId		Int,
	ExtMethodIndex		Int		NOT NULL,
	Name			NVarchar(256),
	Type			SmallInt,
	ParentIndex		Int,
	ClassName		NVARCHAR(255),
	Unbounded		NVARCHAR(1) 		NOT NULL DEFAULT N'N' CHECK (Unbounded IN (N'Y' , N'N',N'X',N'Z',N'M',N'P')),
	PRIMARY KEY		(ProcessDefId, ExtMethodIndex, DataStructureId)
)

go

/*************	WFWebServiceTable    ***************/

CREATE TABLE WFWebServiceTable (
	ProcessDefId			Int NOT NULL,
	ActivityId				Int NOT NULL,
	ExtMethodIndex			Int NOT NULL,
	ProxyEnabled			NVarchar(1),
	TimeOutInterval			Int,
	InvocationType			NVarchar(1),
	FunctionType			NVarchar(1) NOT NULL DEFAULT N'L' CHECK (FunctionType IN (N'G' , N'L')),
	ReplyPath				NVarchar(256), 
	AssociatedActivityId	INT,
	InputBuffer				NText,
	OutputBuffer			NText,
	OrderId                 int   NOT  NULL,
	PRIMARY KEY		(ProcessDefId, ActivityId,ExtMethodIndex)
)

go
/*SrNo-5 New Tables Created for Audit Log configuration*/

/**********	WFVarStatusTable	***********/
CREATE TABLE WFVarStatusTable (
	ProcessDefId	int		NOT NULL ,
	VarName		nvarchar(50)	NOT NULL ,
	Status		nvarchar(1)	NOT NULL DEFAULT N'Y' CHECK (Status = N'Y' OR Status = N'N' ),
	ProcessVariantId        INT          NOT NULL DEFAULT 0
) 
go
/************  WFActionStatusTable   ************/
CREATE TABLE WFActionStatusTable(
	ActionId	int		PRIMARY KEY ,
	Type		nvarchar(1)	NOT NULL DEFAULT N'C' CHECK (Type = N'C' OR Type = N'S' OR Type = N'R'),
	Status		nvarchar(1)	NOT NULL DEFAULT N'Y' CHECK (Status = N'Y' OR Status = N'N' )
) 

go

/* SrNo-6, Calendar Implementation - Ruhi Hira */
/************  WFCalDefTable  ************/
CREATE TABLE WFCalDefTable(
	ProcessDefId	Int, 
	CalId		Int, 
	CalName		NVarchar(256)	NOT NULL,
	GMTDiff		Int,
	LastModifiedOn	DATETIME,
	Comments	NVarchar(1024),
	PRIMARY KEY	(ProcessDefId, CalId)
)

go

Insert into WFCalDefTable values(0, 1, N'DEFAULT 24/7', 530, getDate(), N'This is the default calendar')

go

/************  WFCalRuleDefTable  ************/ 
CREATE TABLE WFCalRuleDefTable( 
	ProcessDefId	Int, 
	CalId		Int, 
	CalRuleId	Int, 
	Def		NVarchar(256), 
	CalDate		DateTime, 
	Occurrence	SmallInt, 
	WorkingMode	NVarChar(1), 
	DayOfWeek	SmallInt, 
	WEF		DateTime, 
	PRIMARY KEY	(ProcessDefId, CalId, CalRuleId)
)

go

/************  WFCalHourDefTable  ************/
CREATE TABLE WFCalHourDefTable(
	ProcessDefId	Int		NOT NULL,
	CalId		Int		NOT NULL,
	CalRuleId	Int		NOT NULL,
	RangeId		Int		NOT NULL,
	StartTime	Int,
	EndTime		Int,
	PRIMARY KEY (ProcessDefId, CalId, CalRuleId, RangeId)
)

go

Insert into WFCalHourDefTable values (0, 1, 0, 1, 0000, 2400)

go

/************  WFCalendarAssocTable  ************/
CREATE TABLE WFCalendarAssocTable(
	CalId		Int		NOT NULL,
	ProcessDefId	Int		NOT NULL,
	ActivityId	Int		NOT NULL,
	CalType		NVarChar(1)	NOT NULL,
	UNIQUE (processDefId, activityId)
)

go

/************ TemplateMultiLanguageTable  ************/
CREATE TABLE TemplateMultiLanguageTable (
	ProcessDefId	INT				NOT NULL,
	TemplateId		INT				NOT NULL,
	Locale			NCHAR(5)		NOT NULL,
	TemplateBuffer	NTEXT			NULL,
	isEncrypted		NVARCHAR(1),
	CONSTRAINT PK_TemplateMultiLanguageTable PRIMARY KEY(ProcessdefId,TemplateId,Locale)
)

go

/************ InterfaceDescLanguageTable  ************/
CREATE TABLE InterfaceDescLanguageTable (
	ProcessDefId	INT			NOT NULL,		
	ElementId		INT			NOT NULL,
	InterfaceID		INT			NOT NULL,
	Locale			NCHAR(5)	NOT NULL,
	Description		NVARCHAR(255)	NOT NULL,
	CONSTRAINT PK_InterfaceDescLanguageTable PRIMARY KEY(ProcessDefId,ElementId,InterfaceID)
)

go

/***********  WFActivityReportTable  ***********/
CREATE TABLE WFActivityReportTable(
	ProcessDefId		Integer,
	ActivityId		Integer,
	ActivityName		Nvarchar(30),
	ActionDateTime		DateTime,
	TotalWICount		Integer,
	TotalDuration		BIGINT,
	TotalProcessingTime	BIGINT
)
go

/***********  WFReportDataTable  ***********/
CREATE TABLE WFReportDataTable(
	ProcessInstanceId	Nvarchar(63),
	WorkitemId		Integer,
	ProcessDefId		Integer NOT NULL,
	ActivityId		Integer,
	UserId			Integer,
	TotalProcessingTime	Integer,
	ProcessVariantId 	INT 	NOT NULL DEFAULT 0
)

go
/***********  WFReportDataHistoryTable  ***********/
CREATE TABLE WFReportDataHistoryTable(
	ProcessInstanceId	Nvarchar(63),
	WorkitemId		Integer,
	ProcessDefId		Integer NOT NULL,
	ActivityId		Integer,
	UserId			Integer,
	TotalProcessingTime	Integer,
	ProcessVariantId 	INT 	NOT NULL DEFAULT 0
)

/*********** SuccessLogTable  ***********/
CREATE TABLE SuccessLogTable(
	LogId INT,
	ProcessInstanceId Nvarchar(63)
)

go

/*********** FailureLogTable  ***********/
CREATE TABLE FailureLogTable(
	LogId INT,
	ProcessInstanceId Nvarchar(63)
)

go

/*********** WFQuickSearchTable ***********/
CREATE TABLE WFQuickSearchTable(
	VariableId			INT				IDENTITY(1,1),
	ProcessDefId		INT				NOT NULL,
	VariableName		NVARCHAR(64)	NOT NULL,
	Alias				NVARCHAR(64)	NOT NULL,
	SearchAllVersion	NVARCHAR(1)		NOT NULL,  
	CONSTRAINT UK_WFQuickSearchTable UNIQUE (Alias)
)

go

/*********** WFDurationTable ***********/
CREATE TABLE WFDurationTable(
	ProcessDefId		INT			NOT NULL,
	DurationId			INT			NOT NULL,
	WFYears				NVARCHAR(256),
	VariableId_Years	INT	,
	VarFieldId_Years	INT	, 
 	WFMonths			NVARCHAR(256),
	VariableId_Months   INT	,
	VarFieldId_Months	INT	,
	WFDays				NVARCHAR(256),
	VariableId_Days		INT	,
	VarFieldId_Days		INT	,
	WFHours				NVARCHAR(256), 
	VariableId_Hours	INT	,
	VarFieldId_Hours	INT	,
	WFMinutes		NVARCHAR(256), 
	VariableId_Minutes	INT	,
	VarFieldId_Minutes	INT	,
	WFSeconds			NVARCHAR(256),
	VariableId_Seconds	INT	,
	VarFieldId_Seconds	INT	,
	CONSTRAINT UK_WFDurationTable UNIQUE (ProcessDefId, DurationId)
)

go
/*********** WFCommentsTable ***********/
CREATE TABLE WFCommentsTable(
	CommentsId			INT				IDENTITY(1,1)	PRIMARY KEY,
	ProcessDefId 		INT 			NOT NULL,
	ActivityId 			INT 			NOT NULL,
	ProcessInstanceId 	NVARCHAR(64) 	NOT NULL,
	WorkItemId 			INT 			NOT NULL,
	CommentsBy			INT 			NOT NULL,
	CommentsByName		NVARCHAR(64) 	NOT NULL,
	CommentsTo			INT 			NOT NULL,
	CommentsToName		NVARCHAR(64)	NOT NULL,
	Comments			NVARCHAR(1000)	NULL,
	ActionDateTime		DATETIME		NOT NULL,
	CommentsType		INT				NOT NULL	CHECK(CommentsType IN (1, 2, 3,4,5,6,7,8,9,10)),
	ProcessVariantId 	INT 			NOT NULL DEFAULT 0,
	TaskId				INT				NOT NULL DEFAULT 0,
	SubTaskId			INT				NOT NULL DEFAULT 0
)

go
/*********** WFCommentsHistoryTable ***********/
CREATE TABLE WFCommentsHistoryTable(
	CommentsId			INT				IDENTITY(1,1)	PRIMARY KEY,
	ProcessDefId 		INT 			NOT NULL,
	ActivityId 			INT 			NOT NULL,
	ProcessInstanceId 	NVARCHAR(64) 	NOT NULL,
	WorkItemId 			INT 			NOT NULL,
	CommentsBy			INT 			NOT NULL,
	CommentsByName		NVARCHAR(64) 	NOT NULL,
	CommentsTo			INT 			NOT NULL,
	CommentsToName		NVARCHAR(64)	NOT NULL,
	Comments			NVARCHAR(1000)	NULL,
	ActionDateTime		DATETIME		NOT NULL,
	CommentsType		INT				NOT NULL	CHECK(CommentsType IN (1, 2, 3,4,5,6,7,8,9,10)),
	ProcessVariantId 	INT 			NOT NULL DEFAULT 0,
	TaskId				INT				NOT NULL DEFAULT 0,
	SubTaskId			INT				NOT NULL DEFAULT 0
)

go
/*********** WFFilterTable ***********/
CREATE TABLE WFFilterTable(
	ObjectIndex			INT			NOT NULL,
	ObjectType			NVARCHAR(1)	NOT NULL
)	

go

/*********** WFSwimLaneTable ***********/
CREATE TABLE WFSwimLaneTable(
	ProcessDefId	INT		NOT NULL,
	SwimLaneId		INT		NOT NULL,
	SwimLaneWidth	INT		NOT NULL,
	SwimLaneHeight	INT		NOT NULL,
	ITop			INT		NOT NULL,
	ILeft			INT		NOT NULL,
	BackColor		BIGINT	NOT NULL,
    SwimLaneType    NVARCHAR(1) NOT NULL,
    SwimLaneText    NVARCHAR(255) NOT NULL,
    SwimLaneTextColor     INT   NOT NULL,
	PoolId 				INT		NULL,
	IndexInPool			INT		NULL,
	PRIMARY KEY ( ProcessDefId, SwimLaneId),
	UNIQUE(ProcessDefId, SwimLaneText)	
)

go

/*********** WFExportTable ***********/
CREATE TABLE WFExportTable(
	ProcessDefId		INT,
	ActivityId			INT,
	DatabaseType		NVARCHAR(10),
	DatabaseName		NVARCHAR(50),
	UserId				NVARCHAR(50),
	UserPwd				NVARCHAR(255),
	TableName			NVARCHAR(50),
	CSVType				INT,
	NoOfRecords			INT,
	HostName			NVARCHAR(255),
	ServiceName			NVARCHAR(255),
	Port				NVARCHAR(255),
	Header				NVARCHAR(1),
	CSVFileName			NVARCHAR(255),
	OrderBy				NVARCHAR(255),
	FileExpireTrigger	NVARCHAR(1),
	BreakOn				NVARCHAR(1),
	FieldSeperator		NVARCHAR(1), 
	FileType			INT,
	FilePath			NVARCHAR(255),
	HeaderString		NVARCHAR(255),
	FooterString		NVARCHAR(255),
	SleepTime			INT,
	MaskedValue			NVARCHAR(255),
	DateTimeFormat		NVARCHAR(50)
)

go

/*********** WFDataMapTable ***********/
CREATE TABLE WFDataMapTable(
	ProcessDefId		INT,
	ActivityId			INT,
	OrderId				INT,
	FieldName			NVARCHAR(255),
	MappedFieldName		NVARCHAR(255),
	FieldLength			INT,
	DocTypeDefId		INT,
	DateTimeFormat		NVARCHAR(50),
	QuoteFlag			NVARCHAR(1),
	VariableId			INT					NULL,
	VarFieldId			INT					NULL,
	EXTMETHODINDEX		INT					NULL,
	ALIGNMENT 			NVARCHAR(5),
	ExportAllDocs		NVARCHAR(2),
	PRIMARY KEY (ProcessDefId, ActivityId, OrderId)
)

go

/*********** WFRoutingServerInfo ***********/
CREATE TABLE WFRoutingServerInfo ( 
	InfoId			INT		IDENTITY (1, 1) NOT NULL, 
	DmsUserIndex		INT		NULL, 
	DmsUserName		NVARCHAR(64)	NULL, 
	DmsUserPassword		NVARCHAR(255)	NULL, 
	DmsSessionId		INT		NULL, 
	Data			NVARCHAR(128)	NULL  
) 

go

/****** WFTypeDescTable  ******/

CREATE TABLE WFTypeDescTable (
	ProcessDefId		INT				NOT NULL,
	TypeId				SMALLINT		NOT NULL,
	TypeName			NVARCHAR(128)	NOT NULL, 
	ExtensionTypeId		SMALLINT		NULL,
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	PRIMARY KEY (ProcessDefId, TypeId,ProcessVariantId)
)

go

/******   WFTypeDefTable    ******/

CREATE TABLE WFTypeDefTable (
	ProcessDefId	INT				NOT NULL,
	ParentTypeId	SMALLINT		NOT NULL,
	TypeFieldId		SMALLINT		NOT NULL,
	FieldName		NVARCHAR(128)	NOT NULL, 
	WFType			SMALLINT		NOT NULL,
	TypeId			SMALLINT		NOT NULL,
	Unbounded		NVARCHAR(1)		NOT NULL	DEFAULT N'N' CHECK (Unbounded IN (N'Y' , N'N')),
	ExtensionTypeId SMALLINT,
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	PRIMARY KEY (ProcessDefId, ParentTypeId, TypeFieldId,ProcessVariantId)
)

go

/****** WFUDTVarMappingTable   *****/

CREATE TABLE WFUDTVarMappingTable (
	ProcessDefId 		INT 			NOT NULL,
	VariableId			INT 			NOT NULL,
	VarFieldId			SMALLINT		NOT NULL,
	TypeId				SMALLINT		NOT NULL,
	TypeFieldId			SMALLINT		NOT NULL,
	ParentVarFieldId	SMALLINT		NOT NULL,
	MappedObjectName	NVARCHAR(256) 		NULL,
	ExtObjId 			INT					NULL,
	MappedObjectType	NVARCHAR(1)		    NULL,
	DefaultValue		NVARCHAR(256)		NULL,
	FieldLength			INT					NULL,
	VarPrecision		INT					NULL,
	RelationId			INT 			    NULL,
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	IsEncrypted         NVARCHAR(1)   NULL DEFAULT N'N',
	IsMasked           	NVARCHAR(1)	  NULL DEFAULT N'N',
	MaskingPattern      NVARCHAR(10)  NULL DEFAULT N'X',  
	PRIMARY KEY (ProcessDefId, VariableId, VarFieldId,ProcessVariantId)
)

go

/******   WFVarRelationTable   ******/

CREATE TABLE WFVarRelationTable (
	ProcessDefId 	INT 				NOT NULL,
	RelationId		INT 				NOT NULL,
	OrderId			INT 				NOT NULL,
	ParentObject	NVARCHAR(256)		NOT NULL,
	Foreignkey		NVARCHAR(256)		NOT NULL,
	FautoGen		NVARCHAR(1)		    NULL,
	ChildObject		NVARCHAR(256)		NOT NULL,
	Refkey			NVARCHAR(256)		NOT NULL,
	RautoGen		NVARCHAR(1)		    NULL,
	ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
	PRIMARY KEY (ProcessDefId, RelationId, OrderId, ProcessVariantId)
)

go

/******   WFDataObjectTable   ******/

CREATE TABLE WFDataObjectTable (
	ProcessDefId 		INT 			NOT NULL,
	iId					INT,
	xLeft				INT,
	yTop				INT,
	Data				NVARCHAR(255),
	SwimLaneId			INT,
	PRIMARY KEY (ProcessDefId, iId)
)

go

/******   WFGroupBoxTable   ******/

CREATE TABLE WFGroupBoxTable (
	ProcessDefId 		INT 			NOT NULL,
	GroupBoxId			INT,
	GroupBoxWidth		INT,
	GroupBoxHeight		INT,
	iTop				INT,
	iLeft				INT,
	BlockName			NVARCHAR(255)	NOT NULL,
	SwimLaneId			INT,
	PRIMARY KEY (ProcessDefId, GroupBoxId)
)

go                                                      

/******   WFAdminLogTable    ******/

CREATE TABLE WFAdminLogTable  (
	AdminLogId			INT				IDENTITY (1,1) PRIMARY KEY,
	ActionId			INT				NOT NULL,
	ActionDateTime		DATETIME		NOT NULL,
	ProcessDefId		INT,
	QueueId				INT,
	QueueName       	NVARCHAR(64),
	FieldId1			INT,
	FieldName1			NVARCHAR(255),
	FieldId2			INT,
	FieldName2      	NVARCHAR(255),
	Property        	NVARCHAR(64),
	UserId				INT,
	UserName			NVARCHAR(64),
	OldValue			NVARCHAR(255),
	NewValue			NVARCHAR(255),
	WEFDate         	DATETIME,
	ValidTillDate   	DATETIME,
	Operation			NVARCHAR(1),
	ProfileId			INT,
	ProfileName			NVARCHAR(64),	
	Property1			NVARCHAR(64)	
)

go

/******   WFAutoGenInfoTable    ******/

CREATE TABLE WFAutoGenInfoTable (
	TableName			NVARCHAR(256), 
	ColumnName			NVARCHAR(256), 
	Seed				INT,
	IncrementBy			INT, 
	CurrentSeqNo		INT,
	SeqName				NVARCHAR(30),
	UNIQUE(TableName, ColumnName)
)

go

/******   WFSearchVariableTable    ******/

CREATE TABLE WFSearchVariableTable (
   ProcessDefID			INT				NOT NULL,
   ActivityID			INT				NOT NULL,
   FieldName			NVARCHAR(2000)	NOT NULL,
   VariableId			INT,				
   Scope				NVARCHAR(1)		NOT NULL CHECK (Scope = 'C' or Scope = 'F' or Scope = 'R'),
   OrderID				INT				NOT NULL
   PRIMARY KEY (ProcessDefID, ActivityID, FieldName, Scope)
)

go

/******   WFProxyInfo    ******/

CREATE TABLE WFProxyInfo (
   ProxyHost			NVARCHAR(200)				NOT NULL,
   ProxyPort			NVARCHAR(200)				NOT NULL,
   ProxyUser			NVARCHAR(200)				NOT NULL,
   ProxyPassword		NVARCHAR(512),
   DebugFlag			NVARCHAR(200),				
   ProxyEnabled			NVARCHAR(200)
)

go

/***********  WFAuthorizationTable  ***********/
CREATE TABLE WFAuthorizationTable (
	AuthorizationID		INT 		identity (1, 1) PRIMARY KEY,
    EntityType			NVARCHAR(1)	CHECK (EntityType = 'Q' or EntityType = 'P'),
	EntityID			INT					NULL,
	EntityName			NVARCHAR(63)	NOT NULL,
	ActionDateTime		DATETIME		NOT NULL,
	MakerUserName		NVARCHAR(256)	NOT NULL,
	CheckerUserName		NVARCHAR(256)		NULL,
	Comments			NVARCHAR(2000)		NULL,
	Status				NVARCHAR(1)	CHECK (Status = 'P' or Status = 'R' or Status = 'I')	
)

go

/***********  WFAuthorizeQueueDefTable ***********/
CREATE TABLE WFAuthorizeQueueDefTable (
	AuthorizationID		INT				NOT NULL,
	ActionId			INT				NOT NULL,	
	QueueType			NVARCHAR(1)		NULL,
	Comments			NVARCHAR(255)	NULL ,
	AllowReASsignment 	NVARCHAR(1)		NULL,
	FilterOption		INT				NULL,
	FilterValue			NVARCHAR(63)	NULL,
	OrderBy				INT				NULL,
	QueueFilter			NVARCHAR(2000)	NULL,
    SortOrder           NVARCHAR(1)     NULL,
	QueueName		NVARCHAR(63) 	 NULL 
) 

go

/***********  WFAuthorizeQueueStreamTable ***********/
CREATE TABLE WFAuthorizeQueueStreamTable (
	AuthorizationID	INT				NOT NULL,
	ActionId		INT				NOT NULL,	
	ProcessDefID 	INT				NOT NULL,
	ActivityID 		INT				NOT NULL,
	StreamId 		INT				NOT NULL,
	StreamName		NVARCHAR(30) 	NOT NULL
)

go	

/******   WFAuthorizeQueueUserTable ******/
CREATE TABLE WFAuthorizeQueueUserTable (
	AuthorizationID			INT				NOT NULL,
	ActionId				INT				NOT NULL,	
	Userid					INT		NOT NULL,
	ASsociationType			SMALLINT		NULL,
	ASsignedTillDATETIME	DATETIME		NULL, 
	QueryFilter				NVARCHAR(2000)	NULL,
	UserName				NVARCHAR(256)	NOT NULL
)  

go	

/******   WFAuthorizeProcessDefTable ******/
CREATE TABLE WFAuthorizeProcessDefTable (
	AuthorizationID		INT				NOT NULL,
	ActionId			INT				NOT NULL,	
	VersionNo			SMALLINT		NOT NULL,
	ProcessState		NVARCHAR(10)	NOT NULL 
)

go

/******   WFSoapReqCorrelationTable ******/
CREATE TABLE WFSoapReqCorrelationTable (
   Processdefid     INT					NOT NULL,
   ActivityId       INT					NOT NULL,
   PropAlias        NVARCHAR(255)		NOT NULL,
   VariableId       INT					NOT NULL,
   VarFieldId       INT					NOT NULL,
   SearchField      NVARCHAR(255)		NOT NULL,
   SearchVariableId INT					NOT NULL,
   SearchVarFieldId INT					NOT NULL
)

go

/******   WFWSAsyncResponseTable ******/
CREATE TABLE WFWSAsyncResponseTable (
	ProcessDefId		INT				NOT NULL, 
	ActivityId			INT				NOT NULL, 
	ProcessInstanceId	Nvarchar(64)	NOT NULL, 
	WorkitemId			INT				NOT NULL, 
	CorrelationId1		Nvarchar(100)		NULL, 
	CorrelationId2		Nvarchar(100)		NULL, 
	OutParamXML			Nvarchar(2000)		NULL, 
	Response			NTEXT				NULL,
	CONSTRAINT UK_WFWSAsyncResponseTable UNIQUE (ActivityId, ProcessInstanceId, WorkitemId)
)

go

/******   WFScopeDefTable ******/
CREATE TABLE WFScopeDefTable (
	ProcessDefId		INT				NOT NULL,
	ScopeId				INT				NOT NULL,
	ScopeName			NVarChar(256)	NOT NULL,
	PRIMARY KEY (ProcessDefId, ScopeId)
)

go

/******   WFEventDefTable ******/
CREATE TABLE WFEventDefTable (
	ProcessDefId				INT				NOT NULL,
	EventId						INT				NOT NULL,
	ScopeId						INT					NULL,
	EventType					NVarChar(1)		DEFAULT N'M' CHECK (EventType IN (N'A' , N'M')),
	EventDuration				INT					NULL,
	EventFrequency				NVarChar(1)		CHECK (EventFrequency IN (N'O' , N'M')),
	EventInitiationActivityId	INT				NOT NULL,
	EventName					NVarChar(64)	NOT NULL,
	associatedUrl				NVarChar(255)		NULL,
	PRIMARY KEY (ProcessDefId, EventId)
)

go

/******   WFActivityScopeAssocTable ******/
CREATE TABLE WFActivityScopeAssocTable (
	ProcessDefId		INT			NOT NULL,
	ScopeId				INT			NOT NULL,
	ActivityId			INT			NOT NULL,
	CONSTRAINT UK_WFActivityScopeAssocTable UNIQUE (ProcessDefId, ScopeId, ActivityId)
)

go
/* 27/03/2009, SrNo-15, New tables added for SAP integration. - Ruhi Hira */

/****** WFSAPConnectTable ******/
/*Modified on 21-03-2012 by Akash Bartaria. Three fields added ConfigurationID, RFCHostName, ConfigurationName */
/*CREATE TABLE WFSAPConnectTable (
	ProcessDefId		INT				NOT NULL Primary Key,
	SAPHostName			NVarChar(64)	NOT NULL,
	SAPInstance			NVarChar(2)		NOT NULL,
	SAPClient			NVarChar(3)		NOT NULL,
	SAPUserName			NVarChar(256)	NULL,
	SAPPassword			NVarChar(512)	NULL,
	SAPHttpProtocol		NVarChar(8)		NULL,
	SAPITSFlag			NVarChar(1)		NULL,
	SAPLanguage			NVarChar(8)		NULL,
	SAPHttpPort			INT				NULL,
	ConfigurationID     INT             NOT NULL,
	RFCHostName         NVarChar(64)	NULL,
	ConfigurationName   NVarChar(64)	NULL
) */
/* Modified on 07/05/2012  by Akash Bartaria - Primary key changed on WFSAPCONNECTTABLE in case of Multiple CONFIGURATIONID withing one Process  */
CREATE TABLE WFSAPConnectTable (
					ProcessDefId		INT				NOT NULL,	
					SAPHostName			NVarChar(64)	NOT NULL,
					SAPInstance			NVarChar(2)		NOT NULL,
					SAPClient			NVarChar(3)		NOT NULL,
					SAPUserName			NVarChar(256)	    NULL,
					SAPPassword			NVarChar(512)	    NULL,
					SAPHttpProtocol		NVarChar(8)		    NULL,
					SAPITSFlag			NVarChar(1)		    NULL,
					SAPLanguage			NVarChar(8)		    NULL,
					SAPHttpPort			INT			        NULL,
					ConfigurationID     INT             NOT NULL,
	                RFCHostName         NVarChar(64)        NULL,
	                ConfigurationName   NVarChar(64)        NULL,
					SecurityFlag		NVarChar(1)        NULL,
                    CONSTRAINT [pk_WFSAPConnect] PRIMARY KEY CLUSTERED 
                    ( ProcessDefId ASC,
                      ConfigurationID ASC
                    ) ON [PRIMARY]
             ) ON [PRIMARY]

go

/****** WFSAPGUIDefTable ******/
/*Modified on 23-06-2009 by Ananta Handoo .Three fields added TCodeType, VariableId, VarFieldId */
CREATE TABLE WFSAPGUIDefTable (
	ProcessDefId		INT				NOT NULL,
	DefinitionId		INT				NOT NULL,
	DefinitionName		NVarChar(256)	NOT NULL,
	SAPTCode			NVarChar(64)	NOT NULL,
	TCodeType			NVarChar(1)	NOT NULL,
	VariableId			INT				NULL,
	VarFieldId			INT				NULL,
	PRIMARY KEY (ProcessDefId, DefinitionId)
)

go

/****** WFSAPGUIFieldMappingTable ******/
CREATE TABLE WFSAPGUIFieldMappingTable (
	ProcessDefId		INT				NOT NULL,
	DefinitionId		INT				NOT NULL,
	SAPFieldName		NVarChar(512)	NOT NULL,
	MappedFieldName		NVarChar(256)	NOT NULL,
	MappedFieldType		NVarChar(1)	CHECK (MappedFieldType	in (N'Q', N'F', N'C', N'S', N'I', N'M', N'U')),
	VariableId			INT				NULL,
	VarFieldId			INT				NULL
)

go

/****** WFSAPGUIAssocTable ******/
/*Modified on 21-03-2012 by Akash Bartaria. One field added ConfigurationID */
CREATE TABLE WFSAPGUIAssocTable (
	ProcessDefId		INT				NOT NULL,
	ActivityId			INT				NOT NULL,
	DefinitionId		INT				NOT NULL,
	Coordinates             NVarChar(255)                   NULL, 
	ConfigurationID     INT             NOT NULL,
	CONSTRAINT UK_WFSAPGUIAssocTable UNIQUE (ProcessDefId, ActivityId, DefinitionId)
)

go
/* 15/04/2009, New tables added for SAP integration. - Ananta Handoo */

/****** WFSAPAdapterAssocTable ******/
/*Modified on 21-03-2012 by Akash Bartaria. One field added ConfigurationID */
CREATE TABLE WFSAPAdapterAssocTable (
	ProcessDefId		INT				 NULL,
	ActivityId			INT				 NULL,
	EXTMETHODINDEX		INT				 NULL,
	ConfigurationID     INT              NOT NULL
)

go

/* Added by Ishu Saraf - 17/06/2009 */
/****** WFPDATable ******/
CREATE TABLE WFPDATable(
	ProcessDefId		INT				NOT NULL, 
	ActivityId			INT				NOT NULL , 
	InterfaceId			INT				NOT NULL,
	InterfaceType		NVARCHAR(1)
)

go

/* Added by Ishu Saraf - 17/06/2009 */
/****** WFPDA_FormTable ******/
CREATE TABLE WFPDA_FormTable(
	ProcessDefId		INT				NOT NULL, 
	ActivityId			INT				NOT NULL , 
	VariableID			INT				NOT NULL, 
	VarfieldID			INT				NOT NULL
)

go

/* Added by Ishu Saraf - 17/06/2009 */
/****** WFPDAControlValueTable ******/
/*
CREATE TABLE WFPDAControlValueTable(
	ProcessDefId	INT			NOT NULL, 
	ActivityId		INT			NOT NULL, 
	VariableId		INT			NOT NULL,
	VarFieldId		INT			NOT NULL,
	ControlValue	NVARCHAR(255)
)*/

/****** WFWorkListConfigTable ******/
go
CREATE TABLE WFWorkListConfigTable(	
	QueueId				INT NOT NULL,
	VariableId			INT ,
	AliasId	        	INT,
	ViewCategory		NVARCHAR(2),
	VariableType		NVARCHAR(2),
	DisplayName			NVARCHAR(50),
	MobileDisplay		NVARCHAR(2)
)
go
insert into WFWorkListConfigTable values (0,29,0,'M','S','EntryDateTime','Y')
go
insert into WFWorkListConfigTable values (0,31,0,'M','S','ProcessInstanceName','Y')
go
insert into WFWorkListConfigTable values (0,32,0,'M','S','CreatedByName','Y')
go
insert into WFWorkListConfigTable values (0,37,0,'M','S','InstrumentStatus','Y')
go
insert into WFWorkListConfigTable values (0,38,0,'M','S','PriorityLevel','Y')
go
insert into WFWorkListConfigTable values (0,46,0,'M','S','LockedByName','Y')
go
insert into WFWorkListConfigTable values (0,48,0,'M','S','LockStatus','Y')
go
insert into WFWorkListConfigTable values (0,49,0,'M','S','ActivityName','Y')
go
insert into WFWorkListConfigTable values (0,52,0,'M','S','ProcessedBy','Y')
go

/****** WFExtInterfaceConditionTable ******/
CREATE TABLE WFExtInterfaceConditionTable (
	ProcessDefId 	    	INT		NOT NULL,
	ActivityId          	INT		NOT NULL ,
	InterFaceType           NVARCHAR(1)   	NOT NULL ,
	RuleOrderId         	INT      	NOT NULL ,
	RuleId              	INT      	NOT NULL ,
	ConditionOrderId    	INT 		NOT NULL ,
	Param1			NVARCHAR(255) 	NOT NULL ,
	Type1               	NVARCHAR(1) 	NOT NULL ,
	ExtObjID1	    	INT		NULL,
	VariableId_1		INT		NULL,
	VarFieldId_1		INT		NULL,
	Param2			NVARCHAR(255) 	NOT NULL ,
	Type2               	NVARCHAR(1) 	NOT NULL ,
	ExtObjID2	    	INT		NULL,
	VariableId_2		INT             NULL,
	VarFieldId_2		INT             NULL,
	Operator            	INT 		NOT NULL ,
	LogicalOp           	INT 		NOT NULL ,
	PRIMARY KEY (ProcessDefId, InterFaceType, RuleId, ConditionOrderId)	
)

go

/****** WFExtInterfaceOperationTable ******/
CREATE TABLE WFExtInterfaceOperationTable (
	ProcessDefId 	    	INT		NOT NULL,
	ActivityId          	INT		NOT NULL ,
	InterFaceType           NVARCHAR(1)   	NOT NULL ,	
	RuleId              	INT      	NOT NULL , 	
	InterfaceElementId	INT		NOT NULL		

)

go
CREATE TABLE WFImportFileData (
    FileIndex	    INT IDENTITY (1, 1),
    FileName 	    Nvarchar(256),
    FileType 	    Nvarchar(10),
    FileStatus	    Nvarchar(1),
    Message	        Nvarchar(1000),
    StartTime	    DATETIME,
    EndTime	        DATETIME,
    ProcessedBy     Nvarchar(256),
    TotalRecords    INT,
	FailRecords		INT DEFAULT 0
)

go

	CREATE TABLE WFFailFileRecords (
		FailRecordId INT IDENTITY (1, 1),
		FileIndex INT,
		RecordNo INT,
		RecordData NVARCHAR(2000),
		Message NVARCHAR(1000),
		EntryTime DATETIME DEFAULT GETDATE()
	)

go


CREATE TABLE WFPURGECRITERIATABLE(
	PROCESSDEFID	INT		NOT NULL PRIMARY KEY,
	OBJECTNAME	NVARCHAR(255)	NOT NULL, 
	EXPORTFLAG	NVARCHAR(1)	NOT NULL, 
	DATA		TEXT, 
	CONSTRAINT UK_KEY_OBJECTNAME UNIQUE (OBJECTNAME)
)

go
CREATE TABLE WFEXPORTINFOTABLE(	
	SOURCEUSERNAME		NVARCHAR(255)	NOT NULL,
	SOURCEPASSWORD		NVARCHAR(255),
	KEEPSOURCEIS            NVARCHAR(1),
	TARGETCABINETNAME	NVARCHAR(255),
	APPSERVERIP		NVARCHAR(20),
	APPSERVERPORT		INT,
	TARGETUSERNAME		NVARCHAR(200),
	TARGETPASSWORD		NVARCHAR(200),
	SITEID			INT ,
	VOLUMEID		INT ,
	WEBSERVERINFO		NVARCHAR(255),
	ISENCRYPTED NVARCHAR(1) DEFAULT 'N' NOT NULL
)

go
CREATE TABLE WFSOURCECABINETINFOTABLE(	
	ISSOURCEIS		NVARCHAR(1),
	SITEID			INT,
	SOURCECABINET	        NVARCHAR(255),
	APPSERVERIP		NVARCHAR(30),
	APPSERVERPORT		INT
)

go
CREATE TABLE WFFormFragmentTable(	
	ProcessDefId		int 		   NOT NULL,
	FragmentId	    	int 		   NOT NULL,
	FragmentName		NVARCHAR(50)   NOT NULL,
	FragmentBuffer		NTEXT          NULL,
	IsEncrypted	    	NVARCHAR(1)    NOT NULL,
	StructureName		NVARCHAR(128)  NOT NULL,
	StructureId	    	int            NOT NULL,
	LastModifiedOn		DATETIME,
	DeviceType			NVARCHAR(1) NOT NULL DEFAULT 'D',
	FormHeight			INT NOT NULL DEFAULT 100,
	FormWidth			INT NOT NULL DEFAULT 100,
	CONSTRAINT PK_WFFormFragmentTable PRIMARY KEY(ProcessDefId,FragmentId)
)


go
/**** WFS_8.0_115 *****/

CREATE TABLE WFDocTypeFieldMapping( 
	ProcessDefId 	INT 				NOT NULL, 
	DocID 			INT 				NOT NULL, 
	DCName 			NVARCHAR (30) 		NOT NULL, 
	FieldName 		NVARCHAR (30) 		NOT NULL, 
	FieldID 		INT 				NOT NULL, 
	VariableID 		INT 				NOT NULL, 
	VarFieldID 		INT 				NOT NULL, 
	MappedFieldType NVARCHAR(1) 		NOT NULL, 
	MappedFieldName NVARCHAR(255) 		NOT NULL, 
	FieldType 		INT		 			NOT NULL 
) 

go
/**** WFS_8.0_115 *****/
CREATE TABLE WFDocTypeSearchMapping( 
	ProcessDefId 	INT		 		NOT NULL, 
	ActivityID 		INT		 		NOT NULL, 
	DCName 			NVARCHAR(30) 	NULL, 
	DCField 		NVARCHAR(30) 	NOT NULL, 
	VariableID 		INT		 		NOT NULL, 
	VarFieldID 		INT		 		NOT NULL, 
	MappedFieldType NVARCHAR(1) 	NOT NULL, 
	MappedFieldName NVARCHAR(255) 	NOT NULL, 
	FieldType 		INT		 		NOT NULL 
) 

go
/**** WFS_8.0_115 This table is used by Process Modeler Only*****/
CREATE TABLE WFDataclassUserInfo( 
	ProcessDefId 	INT		 			NOT NULL, 
	CabinetName 	NVARCHAR(30) 		NOT NULL, 
	UserName 		NVARCHAR(30) 		NOT NULL, 
	SType 			NVARCHAR(1) 		NOT NULL, 
	UserPWD 		NVARCHAR(255) 		NOT NULL 
) 

/* Tables for OTMS [Transport Management System]*/
go
CREATE TABLE WFTransportDataTable  (
	TMSLogId			INT				IDENTITY (1,1) PRIMARY KEY,
    RequestId     NVARCHAR(64),
	ActionId			INT				NOT NULL,
	ActionDateTime		DATETIME		NOT NULL,
	ActionComments		NVARCHAR(255),
    UserId              INT             NOT NULL,
    UserName            NVARCHAR(64)    NOT NULL,
	Released			NVARCHAR(1)    Default 'N',
    ReleasedByUserId          INT,
	ReleasedBy       	NVARCHAR(64),
    ReleasedComments	NVARCHAR(255),
    ReleasedDateTime    DATETIME,
	Transported			NVARCHAR(1)     Default 'N',
    TransportedByUserId INT,
	TransportedBy		NVARCHAR(64),
    TransportedDateTime DATETIME,
    ObjectName          NVARCHAR(64),
    ObjectType          NVARCHAR(1),
    ProcessDefId        INT ,
	ObjectTypeId		INT
    CONSTRAINT uk_TransportDataTable	UNIQUE (RequestId)    
)

go
CREATE TABLE WFTMSAddQueue (
    RequestId           NVARCHAR(64)     NOT NULL,    
    QueueName           NVARCHAR(64),
    RightFlag           NVARCHAR(64),
    QueueType           NVARCHAR(1),    
    Comments            NVARCHAR(255),
    ZipBuffer           NVARCHAR(1),
    AllowReassignment   NVARCHAR(1),
    FilterOption        INT,
    FilterValue         NVARCHAR(64),
    QueueFilter         NVARCHAR(64),
    OrderBy             INT,
    SortOrder           NVARCHAR(1),
    IsStreamOper        NVARCHAR(1)     
)

go
CREATE TABLE WFTMSChangeProcessDefState(
    RequestId           NVARCHAR(64)     NOT NULL,    
    RightFlag           NVARCHAR(64),
    ProcessDefId        INT,    
    ProcessDefState  NVARCHAR(64),
    ProcessName         NVARCHAR(64)
)

go
CREATE TABLE WFTMSChangeQueuePropertyEx(
    RequestId           NVARCHAR(64)     NOT NULL,    
    QueueName           NVARCHAR(64),
    QueueId             INT,
    RightFlag           NVARCHAR(64),
    ZipBuffer           NVARCHAR(1),
    Description         NVARCHAR(255),
    QueueType           NVARCHAR(1),
    FilterOption        INT,
    QueueFilter         NVARCHAR(64),
    FilterValue         NVARCHAR(64),    
    OrderBy             INT,
    SortOrder           NVARCHAR(1),
    AllowReassignment   NVARCHAR(1),            
    IsStreamOper        NVARCHAR(1),
    OriginalQueueName   NVARCHAR(64)    
)

go
CREATE TABLE WFTMSDeleteQueue(
    RequestId           NVARCHAR(64)     NOT NULL,    
    ZipBuffer           NVARCHAR(1),
    RightFlag           NVARCHAR(64),
    QueueId             INT     NOT NULL,
    QueueName           NVARCHAR(64)
)

go
CREATE TABLE WFTMSStreamOperation(
    RequestId           NVARCHAR(64)     NOT NULL,    
    ID                  INT,
    StreamName          NVARCHAR(64),
    ProcessDefId        INT,
    ProcessName         NVARCHAR(64),
    ActivityId          INT,
    ActivityName        NVARCHAR(64),
    Operation           NVARCHAR(1)
)

go
CREATE TABLE WFTMSSetVariableMapping(
    RequestId           NVARCHAR(64)     NOT NULL,    
    ProcessDefId        INT,        
    ProcessName         NVARCHAR(64),
    RightFlag           NVARCHAR(64),
    ToReturn            NVARCHAR(1),
    Alias               NVARCHAR(64),
    QueueId             INT,
    QueueName           NVARCHAR(64),
    Param1              NVARCHAR(64),
    Param1Type           INT,    
    Type1               NVARCHAR(1),
	AliasRule			VARCHAR(4000)
)

go
CREATE TABLE WFTMSSetTurnAroundTime(
    RequestId           NVARCHAR(64)     NOT NULL,    
    ProcessDefId        INT,    
    ProcessName         NVARCHAR(64),
    RightFlag           NVARCHAR(64),
    ProcessTATMinutes   INT,           
    ProcessTATHours     INT,    
    ProcessTATDays      INT,    
    ProcessTATCalFlag   NVARCHAR(1),    
    ActivityId          INT,
    AcitivityTATMinutes INT,
    ActivityTATHours    INT,
    ActivityTATDays     INT,
    ActivityTATCalFlag  NVARCHAR(1)
)

go
CREATE TABLE WFTMSSetActionList(
    RequestId           NVARCHAR(64)     NOT NULL,    
    RightFlag           NVARCHAR(64),
    EnabledList         NVARCHAR(255),
    DisabledList        NVARCHAR(255),
    ProcessDefId        INT,    
    ProcessName           NVARCHAR(64),
    EnabledVarList       NVARCHAR(255)    
)

go
CREATE TABLE WFTMSSetDynamicConstants(
    RequestId           NVARCHAR(64)     NOT NULL,    
    ProcessDefId        INT,  
    ProcessName         NVARCHAR(64),
    RightFlag           NVARCHAR(64),
    ConstantName        NVARCHAR(64),
    ConstantValue       NVARCHAR(64)
)

go
CREATE TABLE WFTMSSetQuickSearchVariables(
    RequestId           NVARCHAR(64)     NOT NULL,    
    RightFlag           NVARCHAR(64),
    Name                NVARCHAR(64),
    Alias               NVARCHAR(64),
    SearchAllVersion    NVARCHAR(1),    
    ProcessDefId        INT,    
    ProcessName         NVARCHAR(64),
    Operation           NVARCHAR(1)
)

go
CREATE TABLE WFTransportRegisterationInfo(
    ID                          INT     PRIMARY KEY,    
    TargetEngineName           NVARCHAR(64),
    TargetAppServerIp           NVARCHAR(64),
    TargetAppServerPort         INT,       
    TargetAppServerType         NVARCHAR(64),    
    UserName                    NVARCHAR(64),    
    Password                    NVARCHAR(64)    
)

go
Create TABLE WFTMSSetCalendarData(
    RequestId           NVARCHAR(64)     NOT NULL, 
    CalendarId          INT,    
    ProcessDefId        INT,
    ProcessName         NVARCHAR(64),
    DefaultHourRange    VARCHAR(2000), 
    CalRuleDefinition   VARCHAR(4000)     
)

go
Create TABLE WFTMSAddCalendar(
    RequestId           NVARCHAR(64)     NOT NULL,     
    ProcessDefId        INT,
    ProcessName         NVARCHAR(64),
    CalendarName        NVARCHAR(64),
    CalendarType        NVARCHAR(1),
    Comments             NVARCHAR(512),
    DefaultHourRange    VARCHAR(2000), 
    CalRuleDefinition   VARCHAR(4000)     
)

go
Create TABLE WFBPELDefTable(    
    ProcessDefId        INT     NOT NULL PRIMARY KEY,
    BPELDef             NTEXT   NOT NULL,
    XSDDef              NTEXT   NOT NULL    
)

go

/****** WFWebServiceInfoTable ******/
CREATE TABLE WFWebServiceInfoTable (
	ProcessDefId		INT				NOT NULL, 
	WSDLURLId			INT				NOT NULL,
	WSDLURL				NVARCHAR(2000)		NULL,
	USERId				NVARCHAR(255)		NULL,
	PWD					NVARCHAR(255)		NULL,
    SecurityFlag		NVARCHAR(1)		    NULL,
	PRIMARY KEY (ProcessDefId, WSDLURLId)
)


go

/****** WFSystemServicesTable ******/
CREATE TABLE WFSystemServicesTable (
	ServiceId  			INT 				IDENTITY (1,1) 		PRIMARY KEY,
	PSID 				INT					NULL, 
	ServiceName  		NVARCHAR(50)		NULL, 
	ServiceType  		NVARCHAR(50)		NULL, 
	ProcessDefId 		INT					NULL, 
	EnableLog  			NVARCHAR(50)		NULL, 
	MonitorStatus 		NVARCHAR(50)		NULL, 
	SleepTime  			INT					NULL, 
	DateFormat  		NVARCHAR(50)		NULL, 
	UserName  			NVARCHAR(50)		NULL, 
	Password  			NVARCHAR(200)		NULL, 
	RegInfo   			NTEXT				NULL,
	AppServerId			NVARCHAR(50)		NULL
)

go

/*      New tables added for color display support on web.(Requirement)     */
/*      Added by Abhishek Gupta - 24/08/2009    */
/****** WFQueueColorTable ******/
CREATE TABLE WFQueueColorTable(
    Id              INT     IDENTITY(1,1)	NOT NULL		PRIMARY KEY,
    QueueId 		INT                     NOT NULL,
    FieldName 		VARCHAR(50)             NULL,
    Operator 		INT                     NULL,
    CompareValue	VARCHAR(255)            NULL,
    Color			VARCHAR(10)             NULL
)

go

/*      Added by Abhishek Gupta - 24/08/2009    */
/****** WFAuthorizeQueueColorTable ******/
CREATE TABLE WFAuthorizeQueueColorTable(
    AuthorizationId INT         	NOT NULL,
    ActionId 		INT             NOT NULL,
    FieldName 		VARCHAR(50)     NULL,
    Operator 		INT             NULL,
    CompareValue	VARCHAR(255)	NULL,
    Color			VARCHAR(10)     NULL
)

go

/*	Added by AMit Goyal	*/
/************WFAuditRuleTable*************/
CREATE TABLE WFAuditRuleTable(
	ProcessDefId	INT NOT NULL,
	ActivityId		INT NOT NULL,
	RuleId			INT NOT NULL,
	RandomNumber	NVARCHAR(50),
	CONSTRAINT PK_WFAuditRuleTable PRIMARY KEY(ProcessDefId,ActivityId,RuleId)
)

go

/************WFAuditTrackTable***************/
CREATE TABLE WFAuditTrackTable(
	ProcessInstanceId	NVARCHAR(255),
	WorkitemId			INT,
	SampledStatus		INT,
	CONSTRAINT PK_WFAuditTrackTable PRIMARY KEY(ProcessInstanceID,WorkitemId)
	
)

go

CREATE TABLE WFActivitySequenceTABLE(
	ProcessDefId 	INT 	NOT NULL,
	MileStoneId 	INT 	NOT NULL,
	ActivityId 		INT 	NOT NULL,
	SequenceId 		INT 	NOT NULL,
	SubSequenceId 	INT NOT NULL,
	CONSTRAINT pk_WFActivitySequenceTABLE PRIMARY KEY(ProcessDefId,MileStoneId,SequenceId,SubSequenceId)
)

go

CREATE TABLE WFMileStoneTable(
	ProcessDefId 	INT NOT NULL,
	MileStoneId 	INT NOT NULL,
	MileStoneSeqId 	INT NOT NULL,
	MileStoneName 	NVARCHAR(255) NULL,
	MileStoneWidth 	INT NOT NULL,
	MileStoneHeight INT NOT NULL,
	ITop 			INT NOT NULL,
	ILeft 			INT NOT NULL,
	BackColor 		INT NOT NULL,
	Description 	NVARCHAR(255) NULL,
	isExpanded 		NVARCHAR(50) NULL,
	Cost 			INT NULL,
	Duration 		NVARCHAR(255) NULL,
    CONSTRAINT pk_WFMileStoneTable PRIMARY KEY(ProcessDefId,MileStoneId),
    CONSTRAINT uk_WFMileStoneTable UNIQUE (ProcessDefId,MileStoneName)
)

go

CREATE TABLE WFProjectListTable(
	ProjectID 			INT 			NOT NULL,
	ProjectName 		NVARCHAR(255) 	NOT NULL,
	Description 		NTEXT			NULL,
	CreationDateTime 	DATETIME 		NOT NULL,
	CreatedBy 			NVARCHAR(255) 	NOT NULL,
	LastModifiedOn 		DATETIME 		NULL,
	LastModifiedBy 		NVARCHAR(255) 	NULL,
	ProjectShared 		NCHAR(1) 		NULL,
    CONSTRAINT pk_WFProjectListTable PRIMARY KEY(ProjectID),
    CONSTRAINT WFUNQ_1 UNIQUE(ProjectName)
)

go

Insert into WFProjectListTable values (1, 'Default', ' ', GETDATE(), 'Supervisor', GETDATE(), 'Supervisor', 'N')

go

create TABLE WFEventDetailsTable(
	EventID 				int 			NOT NULL,
	EventName 				nvarchar(255) 	NOT NULL,
	Description 			nvarchar(400) 	NULL,
	CreationDateTime 		datetime 		NOT NULL,
	ModificationDateTime	datetime 		NULL,
	CreatedBy 				nvarchar(255) 	NOT NULL,
	StartTimeHrs 			int 			NOT NULL,
	StartTimeMins 			int 			NOT NULL,
	EndTimeMins 			int 			NOT NULL,
	EndTimeHrs 				int 			NOT NULL,
	StartDate 				datetime 		NOT NULL,
	EndDate 				datetime 		NOT NULL,
	EventRecursive 			nvarchar(1) 	NOT NULL,
	FullDayEvent 			nvarchar(1) 	NOT NULL,
	ReminderType 			nvarchar(1) 	NULL,
	ReminderTime 			int 			NULL,
	ReminderTimeType 		nvarchar(1) 	NULL,
	ReminderDismissed 		nvarchar(1) 	NOT NULL Default 'N',
	SnoozeTime 				int 			NOT NULL DEFAULT -1,
	EventSummary 			nvarchar(255) 	NULL,
	UserID 					int 			NULL,
	ParticipantName 		nvarchar(1024) 	NOT NULL,
    CONSTRAINT pk_WFEventDetailsTable PRIMARY KEY(EventID)
)

go

CREATE TABLE WFRepeatEventTable(
	EventID 		INT 			NOT NULL,
	RepeatType 		NVARCHAR(1) 	NOT NULL,
	RepeatDays 		NVARCHAR(255) 	NOT NULL,
	RepeatEndDate 	DATETIME 		NOT NULL,
	RepeatSummary 	NVARCHAR(255) 	NULL
)

go

CREATE table WFOwnerTable(
	Type 			INT NOT NULL,
	TypeId 			INT NOT NULL,
	ProcessDefId 	INT NOT NULL,	
	OwnerOrderId 	INT NOT NULL,
	UserName 		NVARCHAR(255) 	NOT NULL,
	constraint pk_WFOwnerTable PRIMARY KEY (Type,TypeId,ProcessDefId,OwnerOrderId)
)

go

CREATE TABLE WFConsultantsTable(
	Type 				INT 	NOT NULL,
	TypeId 				INT 	NOT NULL,
	ProcessDefId 		INT 	NOT NULL,	
	ConsultantOrderId 	INT 	NOT NULL,
	UserName 		NVARCHAR(255) 	NOT NULL,
	constraint pk_WFConsultantsTable PRIMARY KEY (Type,TypeId,ProcessDefId,ConsultantOrderId)
)

go

CREATE table WFSystemTable(
	Type 			INT 			NOT NULL,
	TypeId 			INT 			NOT NULL,
	ProcessDefId 	INT 			NOT NULL,	
	SystemOrderId 	INT 			NOT NULL,
	SystemName  	NVARCHAR(255) 	NOT NULL,
	constraint pk_WFSystemTable PRIMARY KEY (Type,TypeId,ProcessDefId,SystemOrderId)
)

go

CREATE table WFProviderTable(
	Type 				INT 			NOT NULL,
	TypeId 				INT 			NOT NULL,
	ProcessDefId 		INT 			NOT NULL,	
	ProviderOrderId 	INT 			NOT NULL,
	ProviderName  		NVARCHAR(255) 	NOT NULL,
	constraint pk_WFProviderTable PRIMARY KEY (Type,TypeId,ProcessDefId,ProviderOrderId)
)

go

create table WFConsumerTable(
	Type 			INT 			NOT NULL,
	TypeId 			INT 			NOT NULL,
	ProcessDefId 	INT 			NOT NULL,	
	ConsumerOrderId INT 			NOT NULL,
	ConsumerName 	NVARCHAR(255) 	NOT NULL,
	constraint pk_WFConsumerTable PRIMARY KEY (Type,TypeId,ProcessDefId,ConsumerOrderId)
)

go

create TABLE WFPoolTable(
	ProcessDefId 		INT 			NOT NULL,
	PoolId 				INT 			NOT NULL,
	PoolName 			NVARCHAR(255) 	NULL,
	PoolWidth 			INT 			NOT NULL,
	PoolHeight 			INT 			NOT NULL,
	ITop 				INT 			NOT NULL,
	ILeft 				INT 			NOT NULL,
	BackColor 			NVARCHAR(255) 	NULL,   
    CONSTRAINT pk_WFPoolTable PRIMARY KEY (ProcessDefId,PoolId),
    CONSTRAINT uk_WFPoolTable UNIQUE (ProcessDefId,PoolName) 
)

go

CREATE TABLE WFRecordedChats(
	ProcessDefId 		INT 			NOT NULL,
	ProcessName 		NVARCHAR(255) 	NULL,
	SavedBy 			NVARCHAR(255) 	NULL,
	SavedAt 			DATETIME 		NOT NULL,
	ChatId 				NVARCHAR(255) 	NOT NULL,
	Chat 				NVARCHAR(MAX) 	NULL,
	ChatStartTime 		DATETIME 		NOT NULL,
	ChatEndTime 		DATETIME 		NOT NULL
)

go

CREATE TABLE WFRequirementTable(
	ProcessDefId		INT		NOT NULL,
	ReqType				INT		NOT NULL,
	ReqId				INT		NOT NULL,
	ReqName				NVARCHAR(255)	NOT	NULL,
	ReqDesc				NTEXT			NULL,
	ReqPriority			INT				NULL,
	ReqTypeId			INT		NOT NULL,
	ReqImpl				NTEXT			NULL,
	CONSTRAINT pk_WFRequirementTable PRIMARY KEY (ProcessDefId, ReqType, ReqId, ReqTypeId)
)

go

CREATE TABLE WFDocBuffer(
	ProcessDefId 	INT 	NOT NULL,
	ActivityId 		INT 	NOT NULL ,
	DocName 		NVARCHAR(255) NOT NULL,
	DocId 			INT		NOT NULL,
	DocumentBuffer  Ntext 	NOT NULL,
	Status 			NVARCHAR(1) DEFAULT 'S' NOT NULL,
	PRIMARY KEY (ProcessDefId, ActivityId, DocId)		
)

go

Create Table WFLaneQueueTable (
	ProcessDefId 	INT NOT NULL,
	SwimLaneId 		INT NOT NULL ,
	QueueID 		INT	NOT NULL,
	DefaultQueue 	NVARCHAR(1) DEFAULT 'N',
	PRIMARY KEY (ProcessDefId, SwimLaneId, QueueID)
)

go

Create Table WFCreateChildWITable(
	ProcessDefId		INT NOT NULL,
	TriggerId			INT NOT NULL,
	WorkstepName		NVARCHAR(255), 
	Type		NVARCHAR(1), 
	GenerateSameParent	NVARCHAR(1), 
	VariableId			INT, 
	VarFieldId			INT,
	PRIMARY KEY (Processdefid , TriggerId)
)

go

CREATE TABLE CONFLICTINGQUEUEUSERTABLE (
	ConflictId		INT			IDENTITY (1,1) 		NOT NULL	PRIMARY KEY,
	QueueId 		INT 		NOT NULL ,
	Userid 			INT 	NOT NULL ,
	AssociationType 	SMALLINT 	NOT NULL ,
	AssignedTillDATETIME	DATETIME	NULL, 
	QueryFilter		NVarchar(2000)	NULL,
	QueryPreview		NVARCHAR(1)	NULL DEFAULT 'Y',
	RevisionNo		INT,
	ProcessDefId	INT
)

go

CREATE TABLE RevisionNoSequence (
	SeqNo 				INT		IDENTITY (1,1) 		NOT NULL	PRIMARY KEY,
	SeqValue  			INT 		NULL,	
)

go

CREATE TABLE WFWorkdeskLayoutTable (
	ProcessDefId  		INT		NOT NULL,
	ActivityId    		INT 	NOT NULL,	
	TaskId	    		INT DEFAULT 0 NOT NULL,
	WSLayoutDefinition 	NVARCHAR(4000),
	PRIMARY KEY (ProcessDefId, ActivityId,TaskId)
)

go

Create Table WFProfileTable(
	ProfileId		INT IDENTITY(1,1) PRIMARY KEY,
	ProfileName		NVARCHAR(50),
	Description		NVARCHAR(255),
	Deletable		NVARCHAR(1),
	CreatedOn		DateTime,
	LastModifiedOn	DateTime,
	OwnerId			INT,
	OwnerName		NVARCHAR(64),
	CONSTRAINT uk_WFProfileTable UNIQUE (ProfileName)
)
go
Create Table WFObjectListTable(
	ObjectTypeId			INT IDENTITY(1,1) PRIMARY KEY,
	ObjectType				NVARCHAR(20),
	ObjectTypeName			NVARCHAR(50),
	ParentObjectTypeId		INT,
	ClassName				NVARCHAR(255),
	DefaultRight			NVARCHAR(100),
	List					NVARCHAR(1)
)

go

Create Table WFAssignableRightsTable(
	ObjectTypeId		INT,
	RightFlag			NVARCHAR(50),
	RightName			NVARCHAR(50),
	OrderBy				INT
)

go

Create Table WFProfileObjTypeTable(
	UserId					INT 		NOT NULL ,
	AssociationType			INT 		NOT NULL ,
	ObjectTypeId			INT 		NOT NULL ,
	RightString				NVARCHAR(100),
	Filter					NVARCHAR(255),
	PRIMARY KEY(UserId, AssociationType, ObjectTypeId, RightString)
)
go



Create Table WFUserObjAssocTable(
	ObjectId					INT 		NOT NULL ,
	ObjectTypeId				INT 		NOT NULL ,
	ProfileId					INT,
	UserId						INT 		NOT NULL ,
	AssociationType				INT 		NOT NULL ,
	AssignedTillDATETIME		DATETIME,
	AssociationFlag				NVARCHAR(1),
	PRIMARY KEY(ObjectId, ObjectTypeId, ProfileId, UserId, AssociationType)
)

go

Create Table WFFilterListTable(
	ObjectTypeId			INT NOT NULL,
	FilterName				NVARCHAR(50),
	TagName					NVARCHAR(50)
)

go

CREATE TABLE WFLASTREMINDERTABLE (
	USERID 				INT NOT NULL,
	LASTREMINDERTIME	DATETIME 
)

go




/*      Added by Shweta Singhal- 29/03/2012    */
/******   WFUnderlyingDMS    ******/
CREATE TABLE WFUnderlyingDMS (
	DMSType		INT				NOT NULL,
	DMSName		NVARCHAR(255)	NULL
)

go

/******   WFSharePointInfo    ******/
CREATE TABLE WFSharePointInfo (
	ServiceURL		NVARCHAR(255)	NULL,
	ProxyEnabled	NVARCHAR(200)	NULL,
	ProxyIP			NVARCHAR(20)	NULL,
	ProxyPort		NVARCHAR(200)	NULL,
	ProxyUser		NVARCHAR(200)	NULL,
	ProxyPassword	NVARCHAR(512)	NULL,
	SPWebUrl		NVARCHAR(200)	NULL
)

go

/******   WFDMSLibrary    ******/
CREATE TABLE WFDMSLibrary (
	LibraryId			INT				NOT NULL 	IDENTITY(1,1) 	PRIMARY KEY,
	URL					NVARCHAR(255)	NULL,
	DocumentLibrary		NVARCHAR(255)	NULL
)

go

/******   WFProcessSharePointAssoc    ******/
CREATE TABLE WFProcessSharePointAssoc (
	ProcessDefId			INT		NOT NULL,
	LibraryId				INT		NULL,
	PRIMARY KEY (ProcessDefId)
)

go

/******   WFArchiveInSharePoint    ******/
CREATE TABLE WFArchiveInSharePoint (
	ProcessDefId			INT				NULL,
	ActivityID				INT				NULL,
	URL					 	NVARCHAR(255)	NULL,		
	SiteName				NVARCHAR(255)	NULL,
	DocumentLibrary			NVARCHAR(255)	NULL,
	FolderName				NVARCHAR(255)	NULL,
	ServiceURL 				NVARCHAR(255) 	NULL,
	SameAssignRights		NVARCHAR(2) 	NULL,
	DiffFolderLoc			NVARCHAR(2) 	NULL	
)

go

/******   WFSharePointDataMapTable    ******/
CREATE TABLE WFSharePointDataMapTable (
	ProcessDefId			INT				NULL,
	ActivityID				INT				NULL,
	FieldId					INT				NULL,
	FieldName				NVARCHAR(255)	NULL,
	FieldType				INT				NULL,
	MappedFieldName			NVARCHAR(255)	NULL,
	VariableID				NVARCHAR(255)	NULL,
	VarFieldID				NVARCHAR(255)	NULL
	
)

go

/******   WFSharePointDocAssocTable    ******/
CREATE TABLE WFSharePointDocAssocTable (
	ProcessDefId			INT				NULL,
	ActivityID				INT				NULL,
	DocTypeID				INT				NULL,
	AssocFieldName			NVARCHAR(255)	NULL,
	FolderName				NVARCHAR(255)	NULL
)
 
go

CREATE TABLE WFMsgAFTable(
	ProcessDefId 	INT NOT NULL,
	MsgAFId 		INT NOT NULL,
	xLeft 			INT NULL,
	yTop 			INT NULL,
	MsgAFName 		NVARCHAR(255) NULL,
	SwimLaneId 		INT NOT NULL,
	PRIMARY KEY ( ProcessDefId, MsgAFId, SwimLaneId)
)
go
/*Table created for Process Variant support-- Shweta Singhal*/
CREATE TABLE WFProcessVariantDefTable(
	ProcessDefId			INT	NOT NULL,
	ProcessVariantId		INT		IDENTITY(1,1)	NOT NULL,
	ProcessVariantName		NVARCHAR(64),
	ProcessVariantState		NVARCHAR(10),
	RegPrefix				NVARCHAR(20)	NOT NULL,
	RegSuffix				NVARCHAR(20)	NULL,
	RegStartingNo			INT				NULL,
	Label					NVARCHAR(255),
	Description				NVARCHAR(255),
	CreatedOn				DATETIME,
	CreatedBy				NVARCHAR(64),
	LastModifiedOn			DATETIME,
	LastModifiedBy			NVARCHAR(64)
)

go

CREATE TABLE WFVariantFieldInfoTable(
	ProcessDefId			INT Not Null,
	ProcessVariantId		INT	Not Null,
	FieldId                 INT Not Null,
    VariableId				INT,
    VarFieldId				INT,
    Type          			INT,
    Length                  INT,
    DefaultValue            Nvarchar(255),
    MethodName          	Nvarchar(255),
    PickListInfo            Nvarchar(512),
    ControlType             INT,
	PRIMARY KEY ( ProcessDefId, ProcessVariantId, FieldId)
)

go

CREATE TABLE WFVariantFieldAssociationTable(
	ProcessDefId			INT Not Null,
	ProcessVariantId		INT	Not Null,
	ActivityId              INT Not Null,
    VariableId              INT Not Null,
	VarFieldId              INT Not Null,
    Enable		       		Nvarchar(1),
    Editable	      		Nvarchar(1),
    Visible     	        Nvarchar(1),
    Mandatory				Nvarchar(1),
	PRIMARY KEY ( ProcessDefId, ProcessVariantId, ActivityId, VariableId, VarFieldId)
)

go

CREATE TABLE WFVariantFormListenerTable(
	ProcessDefId			INT Not Null,
	ProcessVariantId		INT	Not Null,
	VariableId              INT Null,
	VarFieldId              INT Null,
	FormExtId               INT Null,
    ActivityId              INT Null,
	FunctionName			NVarchar(512),
    CodeSnippet             NText,
    LanguageType  			NVarchar(2),
    FieldListener     	    INT,
    ObjectForListener		NVarchar(1)
)

go

CREATE TABLE WFVariantFormTable(
	ProcessDefId			INT Not Null,
	ProcessVariantId		INT	Not Null,
    FormExtId   	        INT Not Null identity (1,1) ,
	Columns		            INT,
    Width1		            INT,
    Width2		            INT,
    Width3		            INT,
	PRIMARY KEY ( ProcessDefId, ProcessVariantId, FormExtId)
)

go

CREATE TABLE WFINSTRUMENTTABLE (
	ProcessInstanceID			NVARCHAR(63)  NOT NULL ,
	ProcessDefID				INT		NOT NULL,
	Createdby					INT		NOT NULL ,
	CreatedByName				NVARCHAR(63)	NULL ,
	Createddatetime			DATETIME		NOT NULL ,
	Introducedbyid				INT		NULL ,
	Introducedby				NVARCHAR(63)	NULL ,
	IntroductionDATETIME	DATETIME		NULL ,
	ProcessInstanceState		INT		NULL ,
	ExpectedProcessDelay		DATETIME		NULL ,
	IntroducedAt				NVARCHAR(30)	NOT NULL ,
	WorkItemId					INT		NOT NULL ,
	VAR_INT1					SMALLINT	NULL ,
	VAR_INT2					SMALLINT	NULL ,
	VAR_INT3					SMALLINT	NULL ,
	VAR_INT4					SMALLINT	NULL ,
	VAR_INT5					SMALLINT	NULL ,
	VAR_INT6					SMALLINT	NULL ,
	VAR_INT7					SMALLINT	NULL ,
	VAR_INT8					SMALLINT	NULL ,
	VAR_FLOAT1					NUMERIC(15, 2)	NULL ,
	VAR_FLOAT2					NUMERIC(15, 2)	NULL ,
	VAR_DATE1				DATETIME		NULL ,
	VAR_DATE2				DATETIME		NULL ,
	VAR_DATE3				DATETIME		NULL ,
	VAR_DATE4				DATETIME		NULL ,
	VAR_LONG1					INT		NULL ,
	VAR_LONG2					INT		NULL ,
	VAR_LONG3					INT		NULL ,
	VAR_LONG4					INT		NULL ,
	VAR_STR1					NVARCHAR(255)  NULL ,
	VAR_STR2					NVARCHAR(255)  NULL ,
	VAR_STR3					NVARCHAR(255)  NULL ,
	VAR_STR4					NVARCHAR(255)  NULL ,
	VAR_STR5					NVARCHAR(255)  NULL ,
	VAR_STR6					NVARCHAR(255)  NULL ,
	VAR_STR7					NVARCHAR(255)  NULL ,
	VAR_STR8					NVARCHAR(255)  NULL ,
	VAR_REC_1					NVARCHAR(255)  NULL ,
	VAR_REC_2					NVARCHAR(255)  NULL ,
	VAR_REC_3					NVARCHAR(255)  NULL ,
	VAR_REC_4					NVARCHAR(255)  NULL ,
	VAR_REC_5					NVARCHAR(255)  NULL CONSTRAINT DF_VAR_REC_5 DEFAULT '0',
	InstrumentStatus			NVARCHAR(1)	NULL, 
	CheckListCompleteFlag		NVARCHAR(1)	NULL ,
	SaveStage					NVARCHAR(30)	NULL ,
	HoldStatus					INT		NULL,
	Status						NVARCHAR(255)  NULL ,
	ReferredTo					INT		NULL ,
	ReferredToName				NVARCHAR(63)	NULL ,
	ReferredBy					INT		NULL ,
	ReferredByName				NVARCHAR(63)	NULL ,
	ChildProcessInstanceId		NVARCHAR(63)	NULL,
	ChildWorkitemId				INT,
	ParentWorkItemID			INT,
	CalendarName        		NVARCHAR(255) NULL,  
	ProcessName 				NVARCHAR(30)	NOT NULL ,
	ProcessVersion   			SMALLINT,
	LastProcessedBy 			INT		NULL ,
	ProcessedBy					NVARCHAR(63)	NULL,	
	ActivityName 				NVARCHAR(30)	NULL ,
	ActivityId 					INT		NULL ,
	EntryDATETIME 			DATETIME		NULL ,
	AssignmentType				NVARCHAR (1)	NULL ,
	CollectFlag					NVARCHAR (1)	NULL ,
	PriorityLevel				SMALLINT	NULL ,
	ValidTill					DATETIME		NULL ,
	Q_StreamId					INT		NULL ,
	Q_QueueId					INT		NULL ,
	Q_UserId					INT	NULL ,
	AssignedUser				NVARCHAR(63)	NULL,	
	FilterValue					INT		NULL ,
	WorkItemState				INT		NULL ,
	Statename 					NVARCHAR(255),
	ExpectedWorkitemDelay		DATETIME		NULL ,
	PreviousStage				NVARCHAR (30)  NULL ,
	LockedByName				NVARCHAR(63)	NULL,	
	LockStatus					NVARCHAR(1)	NOT NULL,
	RoutingStatus				NVARCHAR(1) NOT NULL,	
	LockedTime					DATETIME		NULL , 
	Queuename 					NVARCHAR(63),
	Queuetype 					NVARCHAR(1),
	NotifyStatus				NVARCHAR(1),	  /* moved from after Guid*/
	Guid 						BIGINT ,
	NoOfCollectedInstances		INT DEFAULT 0 NOT NULL,
	IsPrimaryCollected			NVARCHAR(1)	NULL CHECK (IsPrimaryCollected IN (N'Y', N'N')),
	ExportStatus				NVARCHAR(1) DEFAULT 'N',
	ProcessVariantId 			INT 		NOT NULL DEFAULT 0,
	Q_DivertedByUserId   		INT NULL,
	ActivityType				SmallInt NULL,
	lastModifiedTime				DATETIME,
	VAR_DATE5					DATETIME		NULL ,
	VAR_DATE6					DATETIME		NULL ,
	VAR_LONG5					INT		NULL ,
	VAR_LONG6					INT		NULL ,
	VAR_STR9					NVARCHAR(512)  NULL ,
	VAR_STR10					NVARCHAR(512)  NULL ,
	VAR_STR11					NVARCHAR(512)  NULL ,
	VAR_STR12					NVARCHAR(512)  NULL ,
	VAR_STR13					NVARCHAR(512)  NULL ,
	VAR_STR14					NVARCHAR(512)  NULL ,
	VAR_STR15					NVARCHAR(512)  NULL ,
	VAR_STR16					NVARCHAR(512)  NULL ,
	VAR_STR17					NVARCHAR(512)  NULL ,
	VAR_STR18					NVARCHAR(512)  NULL ,
	VAR_STR19					NVARCHAR(512)  NULL ,
	VAR_STR20					NVARCHAR(512)  NULL ,
	URN							NVARCHAR(63)   NULL ,
	CONSTRAINT PK_WFINSTRUMENTTable PRIMARY KEY 
	(
	ProcessInstanceID,WorkitemId
	)
) 

go 
 
CREATE TABLE WFUserSkillCategoryTable (
 CategoryId     INT  IDENTITY (1,1) PRIMARY KEY,
 CategoryName    Nvarchar(256)  NOT NULL ,
 CategoryDefinedBy   INT  NOT NULL ,
 CategoryDefinedOn   DateTime,
 CategoryAvailableForRating  NVARCHAR(1) 
 
)
go
 
CREATE TABLE WFUserSkillDefinitionTable (
 SkillId      INT  IDENTITY (1,1) PRIMARY KEY,
 CategoryId     INT  NOT NULL ,
 SkillName     NVARCHAR(256),
 SkillDescription   Nvarchar(1024),
 SkillDefinedBy    INT  NOT NULL ,
 SkillDefinedOn    DateTime,
 SkillAvailableForRating  NVARCHAR(1) 
 
)

go

CREATE TABLE WFUserRatingLogTable (
 RatingLogId     BIGINT  IDENTITY (1,1) ,
 RatingToUser    INT    NOT NULL ,
 RatingByUser    INT    NOT NULL,
 SkillId      INT    NOT NULL,
 Rating      DECIMAL(5,2)  NOT NULL ,
 RatingDateTime    DateTime,
 Remarks       NVARCHAR(1024) ,
 PRIMARY KEY ( RatingToUser,RatingByUser,SkillId )
 
)

go


/* New Tables added for BRMS workstep  */

create table WFBRMSConnectTable(
   ConfigName nvarchar(128) NOT NULL,
   ServerIdentifier integer NOT NULL,
   ServerHostName nvarchar(128) NOT NULL,
   ServerPort integer NOT NULL,
   ServerProtocol nvarchar(32) NOT NULL,
   URLSuffix nvarchar(32) NOT NULL,
   UserName nvarchar(128) NULL,
   Password nvarchar(128) NULL,
   ProxyEnabled nvarchar(1) NOT NULL,
   CONSTRAINT pk_WFBRMSConnectTable PRIMARY KEY(ServerIdentifier)
  ) 

go
  
create table WFBRMSRuleSetInfo(
   ExtMethodIndex integer NOT NULL,
   ServerIdentifier integer NOT NULL,
   RuleSetName nvarchar(128) NOT NULL,
   VersionNo nvarchar(5) NOT NULL,
   InvocationMode nvarchar(128) NOT NULL,
   CONSTRAINT pk_WFBRMSRuleSetInfo PRIMARY KEY(ExtMethodIndex)
   ) 
   
go
   
create table WFBRMSActivityAssocTable(
   ProcessDefId integer NOT NULL,
   ActivityId integer NOT NULL,
   ExtMethodIndex integer NOT NULL,
   OrderId integer NOT NULL,
   TimeoutDuration integer NOT NULL,
   CONSTRAINT pk_WFBRMSActivityAssocTable PRIMARY KEY(ProcessDefId,ActivityId,ExtMethodIndex)
   ) 
   
go  
 
CREATE TABLE WFUserRatingSummaryTable (
 UserId      INT             NOT NULL,
 SkillId      INT    NOT NULL ,
 AverageRating    DECIMAL(5,2) NOT NULL,
 RatingCount     INT NOT NULL,
 PRIMARY KEY (UserId,SkillId )
 )
go

create table WFSYSTEMPROPERTIESTABLE(
	PROPERTYKEY NVARCHAR(255), 
	PROPERTYVALUE NVARCHAR(1000) NOT NULL, 
	PRIMARY KEY (PROPERTYKEY)
	)
	
go
Create Table WFObjectPropertiesTable (
	ObjectType NVarchar(1),
	ObjectId Integer, 
	PropertyName NVarchar(255),
	PropertyValue NVarchar(1000), 
	Primary Key(ObjectType,ObjectId,PropertyName))
go

/* New Tables added for iBPS Case Management   */
create TABLE WFTaskDefTable(
    ProcessDefId integer NOT NULL,
    TaskId integer NOT NULL,
    TaskType integer NOT NULL,
    TaskName nvarchar(100) NOT NULL,
    Description ntext NULL,
    xLeft integer  NULL,
    yTop integer  NULL,
    IsRepeatable nvarchar(1) DEFAULT 'Y' NOT NULL,
    TurnAroundTime integer  NULL,/*contains duration Id*/
    CreatedOn datetime NOT NULL,
    CreatedBy nvarchar(255) NOT NULL,
    Scope nvarchar(1) NOT NULL,/*P for process Created*/
    Goal nvarchar(1000) NULL,
    Instructions nvarchar(1000) NULL,
    TATCalFlag nvarchar(1) DEFAULT 'N' NOT NULL,/*contains Y for calenday days else N*/
    Cost numeric(15,2) NULL,
	NotifyEmail nvarchar(1) DEFAULT 'N' NOT NULL,
	TaskTableFlag nvarchar(1)  DEFAULT 'N' NOT NULL,
	TaskMode Varchar(1),
	UseSeparateTable nvarchar(1)  DEFAULT 'Y' NOT NULL,
    Primary Key( ProcessDefId,TaskId)
 )
go

create table WFTaskInterfaceAssocTable (
    ProcessDefId INT  NOT NULL , 
	ActivityId INT NOT NULL ,
	TaskId Integer NOT NULL , 
	InterfaceId Integer NOT NULL, 
	InterfaceType NCHAR(1) NOT NULL,
	Attribute NVarchar(2)
)
go

create table WFRTTaskInterfaceAssocTable (
    ProcessInstanceId NVarchar(63) NOT NULL,
	WorkItemId  INT NOT NULL,
    ProcessDefId INT  NOT NULL, 
	ActivityId INT NOT NULL,
	TaskId Integer NOT NULL, 
	InterfaceId Integer NOT NULL, 
	InterfaceType NCHAR(1) NOT NULL,
	Attribute NVarchar(2)
)
go
create table WFRTTASKINTFCASSOCHISTORY (
    ProcessInstanceId NVarchar(63) NOT NULL,
	WorkItemId  INT NOT NULL,
    ProcessDefId INT  NOT NULL, 
	ActivityId INT NOT NULL,
	TaskId Integer NOT NULL, 
	InterfaceId Integer NOT NULL, 
	InterfaceType NCHAR(1) NOT NULL,
	Attribute NVarchar(2)
)
go
CREATE TABLE RTACTIVITYINTERFACEASSOCTABLE (
    ProcessInstanceId NVarchar(63) NOT NULL,
	WorkItemId  INT NOT NULL,
	ProcessDefId            INT		NOT NULL,
	ActivityId              INT             NOT NULL,
	ActivityName            NVARCHAR(30)    NOT NULL,
	InterfaceElementId      INT             NOT NULL,
	InterfaceType           NVARCHAR(1)     NOT NULL,
	Attribute               NVARCHAR(2)     NULL,
	TriggerName             NVARCHAR(255)   NULL,
	ProcessVariantId 		INT 			NOT NULL DEFAULT 0
)

go
CREATE TABLE RTACTIVITYINTFCASSOCHISTORY (
    ProcessInstanceId NVarchar(63) NOT NULL,
	WorkItemId  INT NOT NULL,
	ProcessDefId            INT		NOT NULL,
	ActivityId              INT             NOT NULL,
	ActivityName            NVARCHAR(30)    NOT NULL,
	InterfaceElementId      INT             NOT NULL,
	InterfaceType           NVARCHAR(1)     NOT NULL,
	Attribute               NVARCHAR(2)     NULL,
	TriggerName             NVARCHAR(255)   NULL,
	ProcessVariantId 		INT 			NOT NULL DEFAULT 0
)

go

create table WFTaskTemplateFieldDefTable (
    ProcessDefId INT NOT NULL,
	TaskId Integer NOT NULL, 
	TemplateVariableId Integer  NOT NULL,
    TaskVariableName NVarchar(255) NOT NULL, 
	DisplayName NVarchar(255), 
	VariableType 	Integer NOT NULL ,
	OrderId Integer NOT NULL,
	ControlType Integer NOT NULL /*1 for textbox, 2 for text area, 3 for combo*/,
	DBLinking nvarchar(1) default 'N' NOT NULL
)
go

create table WFTaskTemplateDefTable (
    ProcessDefId INT NOT NULL ,
	TaskId Integer NOT NULL, 
	TemplateName NVarchar(255) NOT NULL
)
go

CREATE TABLE WFTaskTempControlValues(
    ProcessDefId Integer NOT NULL,
    TaskId Integer NOT NULL,
    TemplateVariableId Integer NOT NULL,
    ControlValue NVarchar(255) NOT NULL    
)
go

create table WFApprovalTaskDataTable(
	ProcessInstanceId NVarchar(63) NOT NULL,
	WorkItemId INT NOT NULL, 
	ProcessDefId INT  NOT NULL, 
	ActivityId INT NOT NULL,
	TaskId Integer NOT NULL,
	Decision NVarchar(100) , 
	Decision_By NVarchar(255), 
	Decision_Date	DATETIME, 
	Comments NVarchar(255),
	SubTaskId INT
)
go
create table WFMeetingTaskDataTable(
	ProcessInstanceId NVarchar(63) NOT NULL,
	WorkItemId INT NOT NULL, 
	ProcessDefId INT  NOT NULL, 
	ActivityId INT NOT NULL,
	TaskId Integer NOT NULL,
	Venue NVarchar(255), 
	ParticipantList NVarchar(1000), 
	Purpose	NVarchar(255),
	InitiatedBy NVarchar(255),
	Comments NVarchar(255),
	SubTaskId INT
)
go

create table WFTaskVariableMappingTable(
	ProcessDefId INT NOT NULL, 
	ActivityId INT NOT NULL, 
	TaskId Integer NOT NULL,
	TemplateVariableId Integer NOT NULL, 
	TaskVariableName NVarchar(255) NOT NULL, 
	VariableId Integer NOT NULL, 
	TypeFieldId Integer NOT NULL, 
	ReadOnly nvarchar(1) NULL,
	VariableName nvarchar(255) NULL,
	primary key(ProcessDefId,ActivityId,TaskId,TemplateVariableId)
)
 go
 
create table WFTaskRulePreConditionTable(
    ProcessDefId INT NOT NULL,
    ActivityId INT NOT NULL,
    TaskId Integer NOT NULL,
    RuleType NCHAR(1) NOT NULL,
    RuleOrderId Integer NOT NULL,
    RuleId Integer NOT NULL,
    ConditionOrderId Integer NOT NULL,
    Param1 NVarchar(255) NOT NULL,
    Type1 NVarchar(1) not null,
    ExtObjId1 Integer null,
    VariableId_1 Integer NOT NULL,
    VarFieldId_1 Integer null,
    Param2 NVarchar(255) ,
    Type2 NVarchar(1) ,
    ExtObjId2 integer null ,
    VariableId_2 integer null,
    VarFieldId_2 integer null,
    Operator integer  ,
    Logicalop integer NOT NULL 
)
 go
  
create table WFTaskStatusTable(
    ProcessInstanceId NVarchar(63) NOT NULL,
    WorkItemId INT NOT NULL,
    ProcessDefId INT NOT NULL,
    ActivityId INT NOT NULL,
    TaskId Integer NOT NULL,
	SubTaskId  Integer NOT NULL,
    TaskStatus integer NOT NULL,
    AssignedBy varchar(63) NOT NULL,
    AssignedTo varchar(63) NULL,
	Instructions varchar(2000) NULL,
	ActionDateTime DATETIME NOT NULL,
	DueDate DATETIME,
	Priority  INT, /* 0 for Low , 1 for MEDIUM , 2 for High*/
	ShowCaseVisual	varchar(1) default 'N' NOT NULL,
    ReadFlag varchar(1) default 'N' NOT NULL,
	CanInitiate	varchar(1) default 'N' NOT NULL,
	Q_DivertedByUserId INT DEFAULT 0,
	LockStatus VARCHAR(1)  default 'N' NOT NULL,
	InitiatedBy VARCHAR(63) NULL,
	TaskEntryDateTime DATETIME NULL,
	ValidTill DATETIME NULL,
	ApprovalRequired Varchar(1) default 'N' not  null,
	ApprovalSentBy VARCHAR(63) NULL,
	AllowReassignment Varchar(1) default 'Y' not  null,
	AllowDecline Varchar(1) default 'Y' not  null,
	EscalatedFlag Varchar(1),
	CONSTRAINT PK_WFTaskStatusTable PRIMARY KEY(ProcessInstanceId,WorkItemId,ProcessDefID,ActivityId,TaskId,SubTaskId)
)
go
create table WFTaskStatusHistoryTable(
    ProcessInstanceId NVarchar(63) NOT NULL,
    WorkItemId INT NOT NULL,
    ProcessDefId INT NOT NULL,
    ActivityId INT NOT NULL,
    TaskId Integer NOT NULL,
	SubTaskId  Integer NOT NULL,
    TaskStatus integer NOT NULL,
    AssignedBy varchar(63) NOT NULL,
    AssignedTo varchar(63) NULL,
	Instructions varchar(2000) NULL,
	ActionDateTime DATETIME NOT NULL,
	DueDate DATETIME,
	Priority  INT, /* 0 for Low , 1 for MEDIUM , 2 for High*/
	ShowCaseVisual	varchar(1) default 'N' NOT NULL,
    ReadFlag varchar(1) default 'N' NOT NULL,
	CanInitiate	varchar(1) default 'N' NOT NULL,
	Q_DivertedByUserId INT DEFAULT 0,
	LockStatus VARCHAR(1)  default 'N' NOT NULL,
	InitiatedBy VARCHAR(63) NULL,
	TaskEntryDateTime DATETIME NULL,
	ValidTill DATETIME NULL,
	ApprovalRequired Varchar(1) default 'N' not  null,
	ApprovalSentBy VARCHAR(63) NULL,
	AllowReassignment Varchar(1) default 'Y' not  null,
	AllowDecline Varchar(1) default 'Y' not  null,
	EscalatedFlag Varchar(1),
	CONSTRAINT PK_WFTaskStatusHistoryTable PRIMARY KEY(ProcessInstanceId,WorkItemId,ProcessDefID,ActivityId,TaskId,SubTaskId)
)
go

CREATE TABLE WFTaskFormTable (
    ProcessDefId            INT             NOT NULL,
    TaskId                  INT             NOT NULL,
    FormBuffer              NTEXT           NULL,
    DeviceType              NVARCHAR(1)     NOT NULL     DEFAULT 'D',
    FormHeight              INT             NOT NULL     DEFAULT 100,
    FormWidth               INT             NOT NULL     DEFAULT 100,
    StatusFlag              NVARCHAR(1)        NULL
    CONSTRAINT PK_WFTaskFormTable PRIMARY KEY(ProcessDefID,TaskId)
) 


go

CREATE TABLE WFCaseDataVariableTable (
    ProcessDefId            INT             NOT NULL,
    ActivityID				INT				NOT NULL,
	VariableId		INT 		NOT NULL ,
	DisplayName			NVARCHAR(2000)		NULL,
	CONSTRAINT PK_WFCaseDataVariableTable PRIMARY KEY(ProcessDefID,ActivityID,VariableId)
)

go

CREATE TABLE WFCaseInfoVariableTable (
    ProcessDefId            INT             NOT NULL,
    ActivityID				INT				NOT NULL,
	VariableId		INT 		NOT NULL ,
	DisplayName			NVARCHAR(2000)		NULL,
	CONSTRAINT PK_WFCaseInfoVariableTable PRIMARY KEY(ProcessDefID,ActivityID,VariableId)
)

go

CREATE TABLE WFCaseSummaryDetailsTable(
    ProcessInstanceId NVarchar(63) NOT NULL,
    WorkItemId INT NOT NULL,
    ProcessDefId	INT NOT NULL,
    ActivityId INT NOT NULL,
    ActivityName NVARCHAR(30)    NOT NULL,
    Status INT NOT NULL,
    NoOfRetries INT NOT NULL,
	EntryDateTime 			DATETIME	NOT	NULL ,
	LockedBy	NVARCHAR(1000) NULL,
	CONSTRAINT PK_WFCaseSummaryDetailsTable PRIMARY KEY(ProcessInstanceId,WorkItemId,ActivityID,EntryDateTime)
)

go
CREATE TABLE WFCaseSummaryDetailsHistory(
    ProcessInstanceId NVarchar(63) NOT NULL,
    WorkItemId INT NOT NULL,
    ProcessDefId	INT NOT NULL,
    ActivityId INT NOT NULL,
    ActivityName NVARCHAR(30)    NOT NULL,
    Status INT NOT NULL,
    NoOfRetries INT NOT NULL,
	EntryDateTime 			DATETIME	NOT	NULL ,
	LockedBy	NVARCHAR(1000) NULL,
	CONSTRAINT PK_WFCaseSummaryDetailsHistory PRIMARY KEY(ProcessInstanceId,WorkItemId,ActivityID,EntryDateTime)
)

go

CREATE TABLE WFGenericServicesTable	 (
	ServiceId  			INT 				NOT NULL,
	GenServiceId		INT					NOT NULL, 
	GenServiceName  		NVARCHAR(50)		NULL, 
	GenServiceType  		NVARCHAR(50)		NULL, 
	ProcessDefId 		INT					NULL, 
	EnableLog  			NVARCHAR(50)		NULL, 
	MonitorStatus 		NVARCHAR(50)		NULL, 
	SleepTime  			INT					NULL, 
	RegInfo   			NTEXT				NULL,
	CONSTRAINT PK_WFGenericServicesTable PRIMARY KEY(ServiceId,GenServiceId)
)



go
create table WFTaskruleOperationTable(
	ProcessDefId     INT    NOT NULL,
	ActivityId     INT     NOT NULL, 
	TaskId     INT     NOT NULL, 
	RuleId     SMALLINT     NOT NULL, 
	OperationType     SMALLINT     NOT NULL, 
	Param1 nvarchar(255) NOT NULL,
	Type1 nvarchar(1) NOT NULL,
	ExtObjID1 int  NULL,
	VariableId_1 int  NULL,
	VarFieldId_1 int  NULL,    
	Param2 nvarchar(255) NOT NULL,
	Type2 nvarchar(1) NOT NULL,
	ExtObjID2 int  NULL,
	VariableId_2 int  NULL,
	VarFieldId_2 int  NULL,
	Param3 nvarchar(255) NULL,
	Type3 nvarchar(1) NULL,
	ExtObjID3 int  NULL,
	VariableId_3 int  NULL,
	VarFieldId_3 int  NULL,    
	Operator     SMALLINT     NOT NULL, 
	AssignedTo    nvarchar(63),    
	OperationOrderId     SMALLINT     NOT NULL, 
	RuleCalFlag				NVARCHAR(1)	NULL,
	CONSTRAINT pk_WFTaskruleOperationTable PRIMARY KEY  (ProcessDefId,ActivityId,TaskId,RuleId,OperationOrderId ) 
 
)
go
Create Table WFTaskPropertyTable(
ProcessDefId integer NOT NULL,
ActivityId INT NOT NULL ,
TaskId  integer NOT NULL,
DefaultStatus integer NOT NULL,
AllowReassignment nvarchar(1),
AllowDecline nvarchar(1),
ApprovalRequired nvarchar(1),
MandatoryText nvarchar(255),
CONSTRAINT pk_WFTaskPropertyTable PRIMARY KEY  ( ProcessDefId,ActivityId ,TaskId)
)
go




Create Table WFTaskPreConditionResultTable(
ProcessInstanceId	NVARCHAR(63)  	NOT NULL ,
WorkItemId 		INT 		NOT NULL ,
ActivityId INT NOT NULL ,
TaskId  integer NOT NULL,
Ready Integer  null,
Mandatory varchar(1),
CONSTRAINT pk_WFTaskPreCondResultTable PRIMARY KEY  ( ProcessInstanceId,WorkItemId,ActivityId ,TaskId)
)
go
Create Table WFTaskPreCondResultHistory(
ProcessInstanceId	NVARCHAR(63)  	NOT NULL ,
WorkItemId 		INT 		NOT NULL ,
ActivityId INT NOT NULL ,
TaskId  integer NOT NULL,
Ready Integer  null,
Mandatory varchar(1),
CONSTRAINT pk_WFTaskPreCondResultHistory PRIMARY KEY  ( ProcessInstanceId,WorkItemId,ActivityId ,TaskId)
)
go
Create Table WFTaskPreCheckTable(
ProcessInstanceId	NVARCHAR(63)  	NOT NULL ,
WorkItemId 		INT 		NOT NULL ,
ActivityId INT NOT NULL ,
checkPreCondition varchar(1),
ProcessDefId integer,
CONSTRAINT pk_WFTaskPreCheckTable PRIMARY KEY  ( ProcessInstanceId,WorkItemId,ActivityId)
)
go
Create Table WFTaskPreCheckHistory(
ProcessInstanceId	NVARCHAR(63)  	NOT NULL ,
WorkItemId 		INT 		NOT NULL ,
ActivityId INT NOT NULL ,
checkPreCondition varchar(1),
CONSTRAINT pk_WFTaskPreCheckHistory PRIMARY KEY  ( ProcessInstanceId,WorkItemId,ActivityId)
)
go
create table WFCaseDocStatusTable(
    ProcessInstanceId NVarchar(63) NOT NULL,
    WorkItemId INT NOT NULL,
    ProcessDefId INT NOT NULL,
    ActivityId INT NOT NULL,
    TaskId Integer NOT NULL,
	SubTaskId  Integer NOT NULL,
	DocumentType NVarchar(63)  NULL,
	DocumentIndex NVarchar(63) NOT NULL,
	ISIndex NVarchar(63) NOT NULL,
	CompleteStatus	varchar(1) default 'N' NOT NULL
)

go
create table WFCaseDocStatusHistory(
    ProcessInstanceId NVarchar(63) NOT NULL,
    WorkItemId INT NOT NULL,
    ProcessDefId INT NOT NULL,
    ActivityId INT NOT NULL,
    TaskId Integer NOT NULL,
	SubTaskId  Integer NOT NULL,
	DocumentType NVarchar(63) NOT NULL,
	DocumentIndex NVarchar(63) NOT NULL,
	ISIndex NVarchar(63) NOT NULL,
	CompleteStatus	varchar(1) default 'N' NOT NULL
)

go

CREATE TABLE CaseInitiateWorkitemTable ( 
	ProcessDefID 		INT				NOT NULL ,
	TaskId          INT   NOT NULL DEFAULT 0,
	ImportedProcessName NVARCHAR(30)	NOT NULL  ,
	ImportedFieldName 	NVARCHAR(63)	NOT NULL ,
	ImportedVariableId	INT					NULL,
	ImportedVarFieldId	INT					NULL,
	MappedFieldName		NVARCHAR(63)	NOT NULL ,
	MappedVariableId	INT					NULL,
	MappedVarFieldId	INT					NULL,
	FieldType			NVARCHAR(1)		NOT NULL,
	MapType				NVARCHAR(1)			NULL,
	DisplayName			NVARCHAR(2000)		NULL,
	ImportedProcessDefId	INT				NULL,
	EntityType			 NVARCHAR(1)	NOT NULL DEFAULT 'A'
)
go
CREATE TABLE CaseIMPORTEDPROCESSDEFTABLE (
	ProcessDefID 			INT 			NOT NULL,
	TaskId          INT   NOT NULL DEFAULT 0,
	ImportedProcessName 	NVARCHAR(30)	NOT NULL ,
	ImportedFieldName 		NVARCHAR(63)	NOT NULL ,
	FieldDataType			INT					NULL ,	
	FieldType				NVARCHAR(1)		NOT NULL,
	VariableId				INT					NULL,
	VarFieldId				INT					NULL,
	DisplayName				NVARCHAR(2000)		NULL,
	ImportedProcessDefId	INT					NULL,
	ProcessType				NVARCHAR(1)			NULL   DEFAULT (N'R')	
)
go

/* ----------------------------------------------------------------------------------------------------------------------------

Insert into WFTaskTemplateDefTable (ProcessDefId,TemplateId,TemplateName,ReUsable) values (0,1,'Approval','Y')
Insert into WFTaskTemplateFieldDefTable (ProcessDefId,TemplateId,TemplateVariableId,TaskVariableName,DisplayName,VariableType,OrderId,ControlType) values (0,1,1,'Decision','Decision',10,1,3)
Insert into WFTaskTemplateFieldDefTable (ProcessDefId,TemplateId,TemplateVariableId,TaskVariableName,DisplayName,VariableType,OrderId,ControlType) values (0,1,2,'Decision_By','Decision By',10,2,2)
Insert into WFTaskTemplateFieldDefTable (ProcessDefId,TemplateId,TemplateVariableId,TaskVariableName,DisplayName,VariableType,OrderId,ControlType) values (0,1,3,'Decision_Date','Decision Date',8,3,1)
Insert into WFTaskTemplateFieldDefTable (ProcessDefId,TemplateId,TemplateVariableId,TaskVariableName,DisplayName,VariableType,OrderId,ControlType) values (0,1,4,'Comments','Comments',10,4,2)
Insert into WFTaskTempControlValues(ProcessDefId,TemplateId,TemplateVariableId,ControlValue) values (0,1,1,'Approve')
Insert into WFTaskTempControlValues(ProcessDefId,TemplateId,TemplateVariableId,ControlValue) values (0,1,1,'Reject')
*********************************************************************************************************************/
INSERT  INTO WFSYSTEMPROPERTIESTABLE(PROPERTYKEY, PROPERTYVALUE) values('SYSTEMEMAILID','system_emailid@domain.com')

go
	
INSERT  INTO WFSYSTEMPROPERTIESTABLE(PROPERTYKEY, PROPERTYVALUE) values('ADMINEMAILID','admin_emailid@domain.com')

go

INSERT  INTO WFSYSTEMPROPERTIESTABLE(PROPERTYKEY, PROPERTYVALUE) values('AUTHORIZATIONFLAG','N')

go

INSERT INTO WFUserSkillCategoryTable(CategoryName,CategoryDefinedBy,CategoryAvailableForRating) values('Default',1,'N')
/*


INSERT INTO WFProfileTable values('SYSADMIN','Admin Profile','N',getDate(),getDate(), 0,'Administrator')



INSERT INTO WFUserObjAssocTable values (0,0,1,2,1,null,'Y')
*/
go

INSERT INTO wfobjectlisttable values ('PRC','Process Management',0,'com.newgen.wf.rightmgmt.WFRightGetProcessList', '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'Y')

go

INSERT INTO wfassignablerightstable VALUES (1,'V','View', 1)

go

INSERT INTO wfassignablerightstable VALUES (1,'M','Modify', 2)

go

INSERT INTO wfassignablerightstable VALUES (1,'U','UnRegister', 3)

go

INSERT INTO wfassignablerightstable VALUES (1,'C','Check-In/CheckOut/UndoCheckOut', 4)

go

INSERT INTO wfassignablerightstable VALUES (1,'CS','Change State', 5)

go

INSERT INTO wfassignablerightstable values (1,'AT','Audit Trail', 6) 

go

INSERT INTO wfassignablerightstable values (1,'PRPT','Process Report', 7) 

go

INSERT INTO wfassignablerightstable values (1,'IMPBO','Import Business objects', 8) 

go

INSERT INTO wffilterlisttable VALUES (1,'Process Name','ProcessName')

go

INSERT INTO wfobjectlisttable values ('QUE','Queue Management',0,'com.newgen.wf.rightmgmt.WFRightGetQueueList', '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'Y')

go

INSERT INTO wfassignablerightstable VALUES (2,'V','View', 1)

go

INSERT INTO wfassignablerightstable VALUES (2,'D','Delete', 2)

go

INSERT INTO wfassignablerightstable VALUES (2,'MQP','Modify Queue Property', 3)

go

INSERT INTO wfassignablerightstable VALUES (2,'MQU','Modify Queue User', 4)

go

INSERT INTO wfassignablerightstable VALUES (2,'MQA','Modify Queue Activity', 5)

go

INSERT INTO wfobjectlisttable values ('OTMS','Transport Management',0,'','0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'N')

go

INSERT INTO wfassignablerightstable VALUES (3,'T','Transport Request Id', 1)

go

INSERT INTO wffilterlisttable VALUES (2,'Queue Name','QueueName')

go

Insert into WFWorkdeskLayoutTable (ProcessDefId, ActivityId,TaskId, WSLayoutDefinition) values (0, 0,0, '<WDeskLayout Interfaces="4"><Resolution><ScreenWidth>1024</ScreenWidth><ScreenHeight>768</ScreenHeight></Resolution>        <WDeskInterfaces><Interface Type=''FormView'' Top=''50'' Left=''2'' Width=''501'' Height=''615''/><Interface Type=''Document'' Top=''50'' Left=''510'' Width=''501'' Height=''615''/></WDeskInterfaces><MenuInterfaces><Interface Type="Exceptions"/><Interface Type="ToDoList"/></MenuInterfaces></WDeskLayout>')

go

/*Insert into WFWorkdeskLayoutTable (ProcessDefId, ActivityId,TaskId, WSLayoutDefinition) values (0, 0, -1 , '<WDeskLayout Interfaces="5"><Resolution><ScreenWidth>580</ScreenWidth><ScreenHeight>360</ScreenHeight></Resolution><WDeskInterfaces><Interface Type="FormView" Top="0" Left="245" Width="329" Height="160" /><Interface Type="Document" Top="170" Left="244" Width="332" Height="150" /><Interface Type="Exceptions" Top="170" Left="0" Width="235" Height="150" /><Interface Type="DynamicCase" Top="0" Left="0" Width="235" Height="160" /></WDeskInterfaces><MenuInterfaces><Interface Type="ToDoList" /></MenuInterfaces></WDeskLayout>')*/


go

/**** CREATE VIEW ****/

/***********	EXCEPTION VIEW	****************/

CREATE VIEW EXCEPTIONVIEW 
AS
	SELECT * FROM EXCEPTIONTABLE (NOLOCK)
	UNION ALL
	SELECT * FROM EXCEPTIONHISTORYTABLE (NOLOCK)

go

/***********	TODOSTATUS VIEW	****************/

CREATE VIEW TODOSTATUSVIEW 
AS 
	SELECT * FROM TODOSTATUSTABLE (NOLOCK)
	UNION ALL
	SELECT * FROM TODOSTATUSHISTORYTABLE (NOLOCK)


go

/*********** ROUTELOGTABLE VIEW****************/

CREATE VIEW WFROUTELOGVIEW
AS 
	SELECT * FROM WFCURRENTROUTELOGTABLE (NOLOCK)
	UNION ALL
	SELECT * FROM WFHISTORYROUTELOGTABLE (NOLOCK)

go


/***********	WFGROUPMEMBERVIEW	****************/

CREATE VIEW WFGROUPMEMBERVIEW 
AS 
	SELECT * FROM PDBGROUPMEMBER (NOLOCK)

go

/***********	QUSERGROUPVIEW	****************/

CREATE VIEW QUSERGROUPVIEW 
AS
	SELECT queueid,userid, NULL  groupid, AssignedtillDateTime, queryFilter,QueryPreview
	FROM   QUEUEUSERTABLE (NOLOCK)
	WHERE  Associationtype=0
 	AND (AssignedtillDateTime is NULL or AssignedtillDateTime>=getdate())
	UNION
	SELECT queueid,userindex,userid AS groupid,NULL  AssignedtillDateTime, queryFilter,QueryPreview
 	FROM   QUEUEUSERTABLE (NOLOCK), WFGROUPMEMBERVIEW (NOLOCK)
	WHERE  Associationtype=1 
	AND    QUEUEUSERTABLE.userid=WFGROUPMEMBERVIEW.groupindex 

go

/***********	QUEUETABLE	****************/

/*CREATE VIEW QUEUETABLE 
AS
	SELECT  queueTABLE1.processdefid, processname, processversion, 
		queueTABLE1.processinstanceid, queueTABLE1.processinstanceid AS processinstancename, 
		queueTABLE1.activityid, queueTABLE1.activityname, 
		QUEUEDATATABLE.parentworkitemid, queueTABLE1.workitemid, 
		processinstancestate, workitemstate, statename, queuename, queuetype,
		AssignedUser, AssignmentType, instrumentstatus, checklistcompleteflag, 
		IntroductionDateTime, PROCESSINSTANCETABLE.CreatedDatetime AS CreatedDatetime,
		Introducedby, createdbyname, entryDATETIME,
		lockstatus, holdstatus, prioritylevel, lockedbyname, 
		lockedtime, validtill, savestage, previousstage,
		expectedworkitemdelay AS expectedworkitemdelaytime,
	        expectedprocessdelay AS expectedprocessdelaytime, status, 
		var_INT1, var_INT2, var_INT3, var_INT4, var_INT5, var_INT6, var_INT7, var_INT8, 
		var_float1, var_float2, 
		var_date1, var_date2, var_date3, var_date4, 
		var_long1, var_long2, var_long3, var_long4, 
		var_str1, var_str2, var_str3, var_str4, var_str5, var_str6, var_str7, var_str8, 
		var_rec_1, var_rec_2, var_rec_3, var_rec_4, var_rec_5,
		q_streamid, q_queueid, q_userid, LastProcessedBy, processedby, referredto,
		referredtoname, referredby, referredbyname, collectflag, NULL AS CompletionDatetime, CalendarName, queueTABLE1.ProcessVariantId
	FROM QUEUEDATATABLE  with (NOLOCK), 
	     PROCESSINSTANCETABLE  with (NOLOCK),
          (SELECT processinstanceid, workitemid, processname, processversion,
                  processdefid, LastProcessedBy, processedby, activityname, activityid,
                  entryDATETIME, parentworkitemid, AssignmentType,
                  collectflag, prioritylevel, validtill, q_streamid,
                  q_queueid, q_userid, AssignedUser, CreatedDatetime,
                  workitemstate, expectedworkitemdelay, previousstage,
                  lockedbyname, lockstatus, lockedtime, queuename, queuetype,
                  statename, ProcessVariantId
             FROM WORKLISTTABLE  with (NOLOCK)
           UNION ALL
           SELECT processinstanceid, workitemid, processname, processversion,
                  processdefid, LastProcessedBy, processedby, activityname, activityid,
                  entryDATETIME, parentworkitemid, AssignmentType,
                  collectflag, prioritylevel, validtill, q_streamid,
                  q_queueid, q_userid, AssignedUser, CreatedDatetime,
                  workitemstate, expectedworkitemdelay, previousstage,
                  lockedbyname, lockstatus, lockedtime, queuename, queuetype,
                  statename, ProcessVariantId
             FROM WORKINPROCESSTABLE  with (NOLOCK)
           UNION ALL
           SELECT processinstanceid, workitemid, processname, processversion,
                  processdefid, LastProcessedBy, processedby, activityname, activityid,
                  entryDATETIME, parentworkitemid, AssignmentType,
                  collectflag, prioritylevel, validtill, q_streamid,
                  q_queueid, q_userid, AssignedUser, CreatedDatetime,
                  workitemstate, expectedworkitemdelay, previousstage,
                  lockedbyname, lockstatus, lockedtime, queuename, queuetype,
                  statename, ProcessVariantId
             FROM WORKDONETABLE  with (NOLOCK)
           UNION ALL
           SELECT processinstanceid, workitemid, processname, processversion,
                  processdefid, LastProcessedBy, processedby, activityname, activityid,
                  entryDATETIME, parentworkitemid, AssignmentType,
                  collectflag, prioritylevel, validtill, q_streamid,
                  q_queueid, q_userid, AssignedUser, CreatedDatetime,
                  workitemstate, expectedworkitemdelay, previousstage,
                  lockedbyname, lockstatus, lockedtime, queuename, queuetype,
                  statename, ProcessVariantId
             FROM WORKWITHPSTABLE  with (NOLOCK)
           UNION ALL
           SELECT processinstanceid, workitemid, processname, processversion,
                  processdefid, LastProcessedBy, processedby, activityname, activityid,
                  entryDATETIME, parentworkitemid, AssignmentType,
                  collectflag, prioritylevel, validtill, q_streamid,
                  q_queueid, q_userid, AssignedUser, CreatedDatetime,
                  workitemstate, expectedworkitemdelay, previousstage,
                  lockedbyname, lockstatus, lockedtime, queuename, queuetype,
                  statename, ProcessVariantId
             FROM PENDINGWORKLISTTABLE with (NOLOCK)) queueTABLE1
    WHERE QUEUEDATATABLE.processinstanceid = queueTABLE1.processinstanceid
      AND QUEUEDATATABLE.workitemid = queueTABLE1.workitemid
      AND queueTABLE1.processinstanceid = PROCESSINSTANCETABLE.processinstanceid */
	  
	  CREATE VIEW QUEUETABLE 
AS
	SELECT  processdefid, processname, processversion, 
		processinstanceid, processinstanceid AS processinstancename, 
		activityid, activityname, 
		parentworkitemid, workitemid, 
		processinstancestate, workitemstate, statename, queuename, queuetype,
		AssignedUser, AssignmentType, instrumentstatus, checklistcompleteflag, 
		IntroductionDateTime, CreatedDatetime AS CreatedDatetime,
		Introducedby, createdbyname, entryDATETIME,
		lockstatus, holdstatus, prioritylevel, lockedbyname, 
		lockedtime, validtill, savestage, previousstage,
		expectedworkitemdelay AS expectedworkitemdelaytime,
	        expectedprocessdelay AS expectedprocessdelaytime, status, 
		var_INT1, var_INT2, var_INT3, var_INT4, var_INT5, var_INT6, var_INT7, var_INT8, 
		var_float1, var_float2, 
		var_date1, var_date2, var_date3, var_date4, var_date5, var_date6,
		var_long1, var_long2, var_long3, var_long4, var_long5, var_long6,
		var_str1, var_str2, var_str3, var_str4, var_str5, var_str6, var_str7, var_str8, var_str9, var_str10, var_str11, var_str12, var_str13, var_str14, var_str15, var_str16, var_str17, var_str18, var_str19, var_str20, 
		var_rec_1, var_rec_2, var_rec_3, var_rec_4, var_rec_5,
		q_streamid, q_queueid, q_userid, LastProcessedBy, processedby, referredto,
		referredtoname, referredby, referredbyname, collectflag, NULL AS CompletionDatetime, CalendarName, ProcessVariantId
	FROM WFINSTRUMENTTABLE  with (NOLOCK)
	     
go

/***********	QUEUEVIEW	****************/

CREATE VIEW QUEUEVIEW AS 
SELECT * FROM QUEUETABLE WITH (NOLOCK) 
UNION ALL 
SELECT PROCESSDEFID, PROCESSNAME, PROCESSVERSION, PROCESSINSTANCEID, PROCESSINSTANCEID AS PROCESSINSTANCENAME, ACTIVITYID, ACTIVITYNAME, PARENTWORKITEMID, WORKITEMID, PROCESSINSTANCESTATE, WORKITEMSTATE, STATENAME, QUEUENAME, QUEUETYPE, ASSIGNEDUSER, ASSIGNMENTTYPE, INSTRUMENTSTATUS, CHECKLISTCOMPLETEFLAG, INTRODUCTIONDATETIME, CREATEDDATETIME AS CREATEDDATETIME, INTRODUCEDBY, CREATEDBYNAME, ENTRYDATETIME, LOCKSTATUS, HOLDSTATUS, PRIORITYLEVEL, LOCKEDBYNAME, LOCKEDTIME, VALIDTILL, SAVESTAGE, PREVIOUSSTAGE, EXPECTEDWORKITEMDELAYTIME AS EXPECTEDWORKITEMDELAYTIME, EXPECTEDPROCESSDELAYTIME AS EXPECTEDPROCESSDELAYTIME, STATUS, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,
 VAR_DATE5, VAR_DATE6,
 VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19,VAR_STR20, VAR_REC_1, VAR_REC_2, VAR_REC_3, VAR_REC_4, VAR_REC_5, Q_STREAMID, Q_QUEUEID, Q_USERID, LASTPROCESSEDBY, PROCESSEDBY, REFERREDTO, REFERREDTONAME, REFERREDBY, REFERREDBYNAME, COLLECTFLAG, NULL AS COMPLETIONDATETIME, CALENDARNAME, PROCESSVARIANTID FROM QUEUEHISTORYTABLE WITH (NOLOCK)

go

/***********	WFSEARCHVIEW_0	****************/

CREATE VIEW WFSEARCHVIEW_0 
AS 
	SELECT QUEUEVIEW.ProcessInstanceId,QUEUEVIEW.QueueName,	QUEUEVIEW.ProcessName,
		ProcessVersion,QUEUEVIEW.ActivityName, statename,QUEUEVIEW.CheckListCompleteFlag,
		QUEUEVIEW.AssignedUser,QUEUEVIEW.EntryDATETIME,QUEUEVIEW.ValidTill,QUEUEVIEW.workitemid,
		QUEUEVIEW.prioritylevel, QUEUEVIEW.parentworkitemid,QUEUEVIEW.processdefid,
		QUEUEVIEW.ActivityId,QUEUEVIEW.InstrumentStatus, QUEUEVIEW.LockStatus,
		QUEUEVIEW.LockedByName,QUEUEVIEW.CreatedByName,QUEUEVIEW.CreatedDatetime, 
		QUEUEVIEW.LockedTime, QUEUEVIEW.IntroductionDateTime,QUEUEVIEW.Introducedby ,
		QUEUEVIEW.AssignmentType, QUEUEVIEW.processinstancestate, QUEUEVIEW.queuetype ,
		Status ,Q_QueueId ,DATEDIFF( hh,  EntryDateTime ,  ExpectedWorkItemDelayTime )  AS TurnaroundTime, 
		ReferredBy , ReferredTo ,ExpectedProcessDelayTime , ExpectedWorkItemDelayTime,  
		ProcessedBy ,  Q_UserID , WorkItemState , VAR_REC_1, VAR_REC_2
	FROM QUEUEVIEW 

go

/***********	WFUSERVIEW	****************/

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('pdbUser') AND xType='U')
	EXECUTE('
		CREATE VIEW WFUSERVIEW 
		AS 
		SELECT * FROM PDBUSER Where DeletedFlag = ''N'' and UserAlive = ''Y''
	')

go

/***********	WFALLUSERVIEW	****************/

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('pdbUser') AND xType='U')
	EXECUTE('
		CREATE VIEW WFALLUSERVIEW 
		AS 
		SELECT * FROM PDBUSER Where DeletedFlag = ''N'' 
	')

go

/***********	WFGROUPVIEW	****************/

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('PDBGroup') AND xType='U')
	EXECUTE('
		CREATE VIEW WFGROUPVIEW 
		AS 
		SELECT groupindex, groupname, CreatedDatetime, expiryDATETIME, 
			privilegecontrollist, owner, comment as commnt, grouptype, maingroupindex 
		FROM PDBGROUP
	')

go

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('PDBROLES') AND xType='U')
    EXECUTE('
        CREATE VIEW WFROLEVIEW 
        AS 
        SELECT roleindex, rolename, description, manyuserflag
        FROM PDBROLES
    ')

go

/***********	WFSESSIONVIEW	****************/

CREATE VIEW WFSESSIONVIEW 
AS 
	SELECT  RandomNumber AS SessionID, UserIndex AS UserID, UserLogINTime, 
		HostName AS Scope, MainGroupId, UserType AS ParticipantType,
		AccessDATETIME , StatusFlag, Locale 
	FROM PDBCONNECTION
go
/***********	WFCabinetView 	****************/
IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('PDBCABINET') AND xType='U')
	EXECUTE('
			Create view WFCabinetView 
			AS 
			Select * from PDBCabinet
	')
go
/***********	PROFILEUSERGROUPVIEW	****************/

/*CREATE VIEW PROFILEUSERGROUPVIEW
AS
	SELECT profileId,userid, NULL groupid, AssignedtillDateTime
	FROM WFUserObjAssocTable (NOLOCK)
	WHERE Associationtype=0
	AND (AssignedtillDateTime is NULL or AssignedtillDateTime>=getdate())
	UNION
	SELECT profileId, userindex,userId AS groupid,NULL AssignedtillDateTime
	FROM WFUserObjAssocTable (NOLOCK), WFGROUPMEMBERVIEW (NOLOCK)
	WHERE Associationtype=1
	AND WFUserObjAssocTable.userid=WFGROUPMEMBERVIEW.groupindex */
	
	CREATE VIEW PROFILEUSERGROUPVIEW
	AS
	SELECT profileId,userid, NULL groupid, NULL roleid, AssignedtillDateTime
	FROM WFUserObjAssocTable (NOLOCK)
	WHERE Associationtype=0
	AND (AssignedtillDateTime is NULL or AssignedtillDateTime>=getdate())
	UNION ALL
	SELECT profileId, userindex as userid, userId AS groupid, NULL roleid, NULL AssignedtillDateTime
	FROM WFUserObjAssocTable (NOLOCK), WFGROUPMEMBERVIEW (NOLOCK)
	WHERE Associationtype=1
	AND WFUserObjAssocTable.userid=WFGROUPMEMBERVIEW.groupindex 
	AND (AssignedtillDateTime is NULL or AssignedtillDateTime>=getdate())
	UNION ALL
	SELECT profileId, userindex as userid, groupindex as groupid, userId AS roleid, NULL AssignedtillDateTime
	FROM WFUserObjAssocTable (NOLOCK), PDBGroupRoles (NOLOCK)
	WHERE Associationtype=3
	AND WFUserObjAssocTable.userid=PDBGroupRoles.RoleIndex 
	AND (AssignedtillDateTime is NULL or AssignedtillDateTime>=getdate())


go


/***********	CREATE TRIGGER	****************/


/***********	WF_USR_DEL	****************/
/***********	BUG 31898 ****************/

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('pdbUser') AND xType='U')
	EXECUTE('
		CREATE TRIGGER WF_USR_DEL 
		       on PDBUSER 
		       AFTER UPDATE 
	        AS
			DECLARE @Assgnid INT,
				@DeletedFlag NVARCHAR(1)	
			IF(UPDATE(DeletedFlag))
			BEGIN
				SELECT @Assgnid = DELETED.UserIndex, @DeletedFlag = INSERTED.DeletedFlag FROM INSERTED,DELETED
				IF(@DeletedFlag = ''Y'')
				BEGIN
					
					UPDATE WFInstrumentTable 
					SET	AssignedUser = NULL, AssignmentType = NULL,	LockStatus = ''N'' , 
					LockedByName = NULL,LockedTime = NULL , Q_UserId = 0 ,
					QueueName = (SELECT QUEUEDEFTABLE.QueueName 
					FROM   QUEUESTREAMTABLE , QUEUEDEFTABLE
					WHERE  QUEUESTREAMTABLE.QueueID = QUEUEDEFTABLE.QueueID 
					AND    StreamID = Q_StreamID
					AND    QUEUESTREAMTABLE.ProcessDefId = WFInstrumentTable.ProcessDefId
					AND    QUEUESTREAMTABLE.ActivityId = WFInstrumentTable.ActivityId) ,
					QueueType = (SELECT QUEUEDEFTABLE.QueueType 
							FROM   QUEUESTREAMTABLE , QUEUEDEFTABLE
							WHERE  QUEUESTREAMTABLE.QueueID = QUEUEDEFTABLE.QueueID 
							AND    StreamID = Q_StreamID
							AND QUEUESTREAMTABLE.ProcessDefId = WFInstrumentTable.ProcessDefId
							AND QUEUESTREAMTABLE.ActivityId = WFInstrumentTable.ActivityId) ,
				            Q_QueueID = (SELECT QueueId 
							FROM QUEUESTREAMTABLE 
							WHERE StreamID = Q_StreamID
							AND QUEUESTREAMTABLE.ProcessDefId = WFInstrumentTable.ProcessDefId
							AND QUEUESTREAMTABLE.ActivityId = WFInstrumentTable.ActivityId)	
					WHERE Q_UserId = @Assgnid AND RoutingStatus =''N'' AND LockStatus = ''N''
			
					UPDATE WFInstrumentTable 
					SET	AssignedUser = NULL, AssignmentType = NULL, LockStatus = ''N'' ,
						LockedByName = NULL, LockedTime = NULL , Q_UserId = 0 
						WHERE  AssignmentType != ''F'' AND Q_UserId = @Assgnid AND LockStatus = ''N'' AND RoutingStatus = ''N''
					
					DELETE FROM QUEUEUSERTABLE  WHERE UserID = @Assgnid AND Associationtype = 0
					DELETE FROM USERQUEUETABLE  WHERE UserID = @Assgnid
					DELETE FROM PMWQUEUEUSERTABLE  WHERE UserID = @Assgnid AND Associationtype = 0
					DELETE FROM USERPREFERENCESTABLE WHERE UserID = @Assgnid
					DELETE FROM USERDIVERSIONTABLE WHERE Diverteduserindex = @Assgnid OR AssignedUserindex = @Assgnid
					DELETE FROM USERWORKAUDITTABLE WHERE Userindex = @Assgnid OR Auditoruserindex = @Assgnid
					DELETE FROM WFProfileObjTypeTable WHERE UserID = @Assgnid AND Associationtype = 0
					DELETE FROM WFUserObjAssocTable WHERE UserID = @Assgnid AND Associationtype = 0
				END				
			END
         ')


go
/***********	WF_UTIL_UNREGISTER	****************/
IF NOT EXISTS(SELECT name from sysobjects where name='WF_UTIL_UNREGISTER')
BEGIN
	EXECUTE('CREATE TRIGGER WF_UTIL_UNREGISTER 
		ON PSREGISTERATIONTABLE 
		FOR DELETE
		AS	
		DECLARE @PSName NVARCHAR(100)	
		DECLARE @PSData NVARCHAR(50)
		BEGIN
			SELECT @PSName = DELETED.PSName, @PSData = DELETED.Data FROM DELETED
			IF @PSData = ''PROCESS SERVER''
			BEGIN
				Update WFInstrumentTable set LockedByName = null , LockStatus = ''N'', LockedTime = null where LockedByName = @PSName and LockStatus = ''Y'' and RoutingStatus = ''Y''
			END
			
			IF @PSData = ''MAILING AGENT''
			BEGIN
				UPDATE WFMailQueueTable SET MailStatus = ''N'', LockedBy = null, LastLockTime = null, NoOfTrials = 0 where LockedBy = @PSName
			END
			IF @PSData = ''MESSAGE AGENT''
			BEGIN
				UPDATE WFMessageTable SET LockedBy = null, Status = ''N'' where LockedBy = @PSName
			END
			IF (@PSData = ''PRINT,FAX & EMAIL'' OR @PSData = ''ARCHIVE UTILITY'')
			BEGIN			
				Update WFInstrumentTable set Q_UserId = 0, AssignedUser = null , LockedByName = null , LockStatus = N''N'' , LockedTime = null 
				  where  LockedByName = @PSName and LockStatus = ''Y''  and RoutingStatus = ''N''
			END
		END')
	PRINT 'Trigger WF_UTIL_UNREGISTER created on table PSRegisterationTable'
END
go
/***********	TR_LOG_PDBCONNECTION	****************/

/*CREATE TRIGGER TR_LOG_PDBCONNECTION
       ON PDBCONNECTION
       FOR INSERT,DELETE 
AS 
	DECLARE 
	@deleteCnt	INT,
	@insertCnt	INT,
	@userid		INT,
	@username	NVARCHAR(63)

	BEGIN
		SELECT @deleteCnt = COUNT(*) FROM Deleted
		SELECT @insertCnt = COUNT(*) FROM INSERTED
		IF (@deleteCnt>0)
		BEGIN
			SELECT @userId = userindex FROM deleted
			SELECT @userName =username FROM pdbuser WHERE userindex=@userid
	 
			INSERT INTO WFCURRENTROUTELOGTABLE ( ProcessDefId , ActivityId , ProcessInstanceId , WorkItemId , UserId , ActionId , 
			ActionDatetime , AssociatedFieldId , AssociatedFieldName  , ActivityName , UserName ) 
			VALUES (0,0,NULL,0,@userid,24,getdate(),@userid,@username,NULL,@username)
	 
		END
		ELSE IF(@insertCnt >0)
		BEGIN
			SELECT @userId = userindex FROM inserted 
			SELECT @userName =username FROM pdbuser WHERE userindex=@userid
	 
			INSERT INTO WFCURRENTROUTELOGTABLE ( ProcessDefId , ActivityId , ProcessInstanceId , WorkItemId , UserId , ActionId , 
			ActionDatetime , AssociatedFieldId , AssociatedFieldName  , ActivityName , UserName ) 
			VALUES (0,0,NULL,0,@userid,23,getdate(),@userid,@username,NULL,@username)
		END
	END


*/
/***********	TR_UNQ_PSREGISTERATIONTABLE	****************/

CREATE TRIGGER TR_UNQ_PSREGISTERATIONTABLE 
ON PSREGISTERATIONTABLE 
AFTER  UPDATE 
AS 
BEGIN 
DECLARE  
@sessionid	int, 
@psid	int 

SELECT @sessionid = sessionid,@psid=psid FROM inserted 

IF (exists (SELECT * FROM psregisterationtable WHERE sessionid =@sessionid AND  psid !=@psid )) 
BEGIN 
RAISERROR ('Have same session ID', 16, 1) 
RETURN 
END 
END  

go
/***********	WF_DelProcVariantTrigger	****************/

/*
Code being coomented as Deletion from these tables wil be deleted from API itselt.

CREATE TRIGGER WF_DelProcVariantTrigger
       ON WFProcessVariantDefTable
       AFTER DELETE
AS 
	DECLARE 
	@deleteCnt	INT,
	@processVariantId	INT
BEGIN
	SELECT @deleteCnt = COUNT(*) FROM Deleted
	IF (@deleteCnt>0)
	BEGIN
		SELECT @processVariantId = ProcessVariantId FROM Deleted
 
		Delete from ACTIVITYASSOCIATIONTABLE where ProcessVariantId =@processVariantId;
		Delete from VARMAPPINGTABLE where ProcessVariantId =@processVariantId;
		Delete from WFUDTVarMappingTable where ProcessVariantId =@processVariantId;
		Delete from EXTDBCONFTABLE where ProcessVariantId =@processVariantId;
		Delete from DOCUMENTTYPEDEFTABLE where ProcessVariantId =@processVariantId;
		Delete from WFTYPEDEFTABLE where ProcessVariantId = @processVariantId;
		Delete from WFTYPEDESCTABLE where ProcessVariantId = @processVariantId;
		Delete from WFVARRELATIONTABLE where ProcessVariantId = @processVariantId;
		
		Delete from ACTIVITYINTERFACEASSOCTABLE where ProcessVariantId = @processVariantId;
	END
	
END
	*/   

go



/***********	CREATE INDEX	****************/


/***********Index for ROUTELOGTABLE****************/

CREATE INDEX  IDX1_WFRouteLogTABLE ON WFCURRENTROUTELOGTABLE (ProcessDefId,ActionId)

go

/***********Index for ROUTELOGTABLE****************/

CREATE INDEX  IDX2_WFRouteLogTABLE ON WFCURRENTROUTELOGTABLE (ActionId,UserID)

go 

/***********Index for ROUTELOGTABLE****************/

CREATE INDEX  IDX1_WFHRouteLogTABLE ON WFHISTORYROUTELOGTABLE (ProcessDefId,ActionId)

go

/***********Index for ROUTELOGTABLE****************/

CREATE INDEX  IDX2_WFHRouteLogTABLE ON WFHISTORYROUTELOGTABLE (ActionId,UserID)

go

/***********Index for SUMMARYTABLE****************/
/* Bug 39903 - Summary table queries and indexes to be modified    */
/*CREATE INDEX IX1_SUMMARYTABLE ON SUMMARYTABLE  (processdefid, actionid)*/
CREATE INDEX IDX1_SUMMARYTABLE ON SUMMARYTABLE
        (PROCESSDEFID, ACTIONID, ActionDateTime, ACTIVITYID, QueueId, USERID)	

 
go

/***********INDEX FOR WFMessageInProcessTable****************/
CREATE INDEX IX1_WFMessageInProcessTable ON WFMessageInProcessTable (lockedBy)

go

/***********INDEX FOR WFEscalationTable****************/
CREATE NONCLUSTERED INDEX IX1_WFEscalationTable ON WFEscalationTable (EscalationMode, ScheduleTime)

go

/***********INDEX FOR WFCurrentRouteLogTable****************/

CREATE INDEX IDX3_WFCRouteLogTable ON WFCurrentRouteLogTable (ProcessInstanceId)

go

/***********INDEX FOR WFHistoryRouteLogTable****************/

CREATE INDEX IDX3_WFHRouteLogTable ON WFHistoryRouteLogTable (ProcessInstanceId)

go

/***********INDEX FOR QueueStreamTable****************/
CREATE INDEX IDX1_QueueStreamTable ON QueueStreamTable (QueueId)

go

/***********INDEX FOR QueueDefTable****************/
CREATE INDEX IDX2_QueueDefTable ON QueueDefTable (QueueName)

go

/***********INDEX FOR VarMappingTable****************/
CREATE INDEX IDX2_VarMappingTable ON VarMappingTable (UserDefinedName)

go

/***********INDEX FOR WFMessageInProcessTable****************/
CREATE INDEX IX2_WFMessageInProcessTable ON WFMessageInProcessTable (messageId)

go

/***********INDEX FOR WFActivityReportTable****************/
CREATE INDEX IDX1_WFActivityReportTable ON WFActivityReportTable (ProcessDefId, ActivityId, ActionDateTime)

go

/***********INDEX FOR WFReportDataTable****************/
CREATE INDEX IDX1_WFReportDataTable ON WFReportDataTable (ProcessInstanceId, WorkitemId, ProcessDefId, ActivityId, UserId)

go

/***********INDEX FOR VarAliasTable****************/
CREATE INDEX IDX1_VarAliasTable ON VarAliasTable (QueueId, Id)

go

/***********INDEX FOR WFQuickSearchTable****************/
CREATE INDEX IDX1_WFQuickSearchTable ON WFQuickSearchTable (Alias)

go

/***********INDEX FOR WFCommentsTable****************/
CREATE INDEX  IDX1_WFCommentsTable ON WFCommentsTable (ProcessInstanceId, ActivityId)

go

/***********INDEX FOR WFDataMapTable****************/
CREATE INDEX IDX1_WFDataMapTable ON WFDataMapTable (ProcessDefId, ActivityId)

go

/***********INDEX FOR WFExportTable****************/
CREATE INDEX IDX1_WFExportTable ON WFExportTable (ProcessDefId, ActivityId)

go

/***********INDEX FOR ExceptionTable****************/
CREATE INDEX IDX1_ExceptionTable ON ExceptionTable (ProcessInstanceId, ProcessDefId, ActivityId, ExceptionId, excpseqid DESC, ActionId DESC)

go

/***********INDEX FOR ExceptionTable****************/
CREATE INDEX IDX2_ExceptionTable ON ExceptionTable (ProcessInstanceId)

go

/***********INDEX FOR ExceptionHistoryTable****************/
CREATE INDEX IDX1_ExceptionHistoryTable ON ExceptionHistoryTable (ProcessInstanceId, ProcessDefId, ActivityId, ExceptionId, excpseqid DESC, ActionId DESC)

go

/***********INDEX FOR ExceptionHistoryTable****************/
CREATE INDEX IDX2_ExceptionHistoryTable ON ExceptionHistoryTable (ProcessInstanceId)

go

/***********INDEX FOR ActivityAssociationTable****************/
CREATE INDEX IDX1_ActivityAssociationTable ON ActivityAssociationTable (ProcessdefId, ActivityId, VariableId)

go

/***********INDEX FOR WFWSAsyncResponseTable****************/
CREATE INDEX IDX1_WFWSAsyncResponseTable ON WFWSAsyncResponseTable (CorrelationId1)

go
CREATE INDEX IDX1_ActivityTable ON ActivityTable (ActivityType)

go

CREATE INDEX IDX4_WFCRouteLogTable ON WFCurrentRouteLogTable (ProcessInstanceId, ActionDateTime, LogID)

go

CREATE INDEX  IDX4_WFHRouteLogTABLE ON WFHISTORYROUTELOGTABLE (ProcessInstanceId, ActionDateTime, LogID)

go

CREATE INDEX  IDX2_QueueHistoryTable ON QueueHistoryTable (ActivityName)

go

CREATE INDEX  IDX3_QueueHistoryTable ON QueueHistoryTable (VAR_REC_1, VAR_REC_2)

go

CREATE INDEX  IDX4_QueueHistoryTable ON QueueHistoryTable (Q_QueueId)

go

CREATE INDEX IDX2_QueueStreamTable ON QueueStreamTable (Activityid, Streamid)

go

CREATE INDEX IDX3_ExceptionTable ON ExceptionTable (ProcessDefId, ActivityId)

go

CREATE INDEX IDX1_TODOSTATUSTABLE ON TODOSTATUSTABLE (ProcessInstanceId)

go

CREATE INDEX IDX1_TODOSTATUSHISTORYTABLE ON TODOSTATUSHISTORYTABLE (ProcessInstanceId)

go
CREATE INDEX IDX1_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (var_rec_1, var_rec_2)
go

CREATE INDEX IDX2_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (Q_QueueId,ProcessInstanceId,WorkitemId)

go

CREATE INDEX IDX3_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (Q_UserID, ProcessInstanceId, WorkitemId)

go

CREATE INDEX IDX5_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (Q_QueueId, WorkItemState , LockStatus , RoutingStatus , EntryDateTime)
go

CREATE INDEX IDX6_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (ProcessDefId, RoutingStatus, LockStatus)
go

CREATE INDEX IDX7_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE  (PROCESSINSTANCEID, PARENTWORKITEMID)

go

CREATE INDEX IDX8_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(Q_UserId, ROUTINGSTATUS, Q_QUEUEID)

go

CREATE INDEX IDX9_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(Q_Queueid, LockStatus,EntryDateTime,ProcessInstanceID,WorkItemID)

go
CREATE INDEX IDX10_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(Childprocessinstanceid, Childworkitemid)

go

CREATE INDEX IDX11_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(ValidTill)
go

CREATE INDEX IDX12_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(ASSIGNMENTTYPE  , VALIDTILL  ,ROUTINGSTATUS  ,LOCKSTATUS)

go

CREATE INDEX IDX13_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(Q_UserId, Q_DivertedByUserId)

go

CREATE INDEX IDX14_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(URN)

go

CREATE INDEX IDX1_WFATTRIBUTEMESSAGETABLE ON WFATTRIBUTEMESSAGETABLE(PROCESSINSTANCEID)	

go
CREATE INDEX IDX1_WFObjectPropertiesTable ON WFObjectPropertiesTable(ObjectType,PropertyName)	
go
CREATE INDEX IDX1_WFRTTaskInterfaceAssocTable ON WFRTTaskInterfaceAssocTable(PROCESSINSTANCEID,WorkitemId)

go
	
CREATE INDEX IDX1_RTACTIVITYINTERFACEASSOCTABLE ON RTACTIVITYINTERFACEASSOCTABLE(PROCESSINSTANCEID,WorkitemId)

go
/***********INDEX FOR WFCommentsHistoryTable****************/
CREATE INDEX  IDX1_WFCommentsHistoryTable ON WFCommentsHistoryTable (ProcessInstanceId, ActivityId)

go

-----------------------------------Prerquisites for Archival ------------------------------------
	
CREATE INDEX IDXMIGRATION_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(PROCESSINSTANCESTATE, CREATEDDATETIME, PROCESSINSTANCEID, WORKITEMID, PROCESSDEFID)

go


Create Table getnerateLogId(
		id int identity (1,1)
)


go
	
CREATE TYPE Process_Variant_Type AS TABLE
(
	PROCESSDEFID INT, ProcessVariantId INT
)

go
	
If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFMigrationLogTable')
Begin
	Execute('DROP TABLE WFMigrationLogTable')
	Print 'TABLE WFMigrationLogTable already exists, hence older one dropped ..... '
End

go

CREATE TABLE WFMigrationLogTable
(	
	executionLogId INT, 
	actionDateTime DATETIME, 
	Remarks		   VARCHAR(MAX) 
) 

go

-----------------------------------Prerquisite for MetaData Migration ------------------------------------


If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFMetaDataMigrationProgressLog')
Begin
	Execute('DROP TABLE WFMetaDataMigrationProgressLog')
	Print 'TABLE WFMetaDataMigrationProgressLog already exists, hence older one dropped ..... '
End

go

CREATE TABLE WFMetaDataMigrationProgressLog
(	
	executionLogId	 INT, 
	actionDateTime 	 DATETIME, 
	ProcessId	     INT,
	tableName		 VARCHAR(1024),
	Remarks		     VARCHAR(MAX) 
) 
 
go

If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFFailedMetaDataMigrationLog')
Begin
	Execute('DROP TABLE WFFailedMetaDataMigrationLog')
	Print 'TABLE WFFailedMetaDataMigrationLogTable already exists, hence older one dropped ..... '
End

go

CREATE TABLE WFFailedMetaDataMigrationLog
(	
	executionLogId	 INT, 
	actionDateTime 	 DATETIME, 
	FailedProcessId	 INT,
	Remarks		     VARCHAR(MAX) 
) 
 
go


-----------------------------------Prerquisite for Transactional Data Migration ---------------------------

--------------------WFTxnDataMigrationProgressLog  Table Creation Script ------------------------------------
 
If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFTxnDataMigrationProgressLog')
Begin
	Execute('DROP TABLE WFTxnDataMigrationProgressLog')
	Print 'TABLE WFTxnDataMigrationProgressLog already exists, hence older one dropped ..... '
End

go

Create Table WFTxnDataMigrationProgressLog
(	 

	executionLogId 					Int,
	actionDateTime 					DATETIME,
	ProcessId 	   					Int,
	BatchStartProcessInstanceId		NVarchar(256),
	BatchEndProcessInstanceId		NVarchar(256)

)

go

--------------------WFFailedTxnDataMigrationLogTable  Table Creation Script ------------------------------------

If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFFailedTxnDataMigrationLogTable')
Begin
	Execute('DROP TABLE WFFailedTxnDataMigrationLogTable')
	Print 'TABLE WFFailedTxnDataMigrationLogTable already exists, hence older one dropped ..... '
End

go

Create Table WFFailedTxnDataMigrationLogTable
(	 

	executionLogId 					Int,
	actionDateTime 					DATETIME,
	FailedProcessId 	   			Int,
	ProcessInstanceId				NVarchar(256),
	Remarks							Varchar(max)

)

go

If Not Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFPartitionStatusTable')
Begin

	CREATE TABLE WFPartitionStatusTable
	(	
		processdefid 		int,
		processvariantid 	int,
		--partitionStatus  	VARCHAR(1)
	) 

End

go

CREATE TABLE IBPSUserDomain(
	ORGID NVARCHAR(10) NOT NULL,
	DOMAINID NVARCHAR(10) PRIMARY KEY NOT NULL,
	DOMAIN NVARCHAR(50)  NOT NULL
)

go

CREATE TABLE IBPSUserMaster(
    ORGID NVARCHAR(20) NOT NULL,
    MAILID NVARCHAR(50) NOT NULL,
    UDID NVARCHAR(100) NOT NULL,
  	USERVALIDATIONFLAG NVARCHAR(1) NULL,
  	CONSTRAINT user_master PRIMARY KEY (MAILID, UDID)
)

go
CREATE TABLE IBPSUserVerification(
	MAILID NVARCHAR(50) NOT NULL,
	UDID NVARCHAR(50) NOT NULL,
	VERIFICATIONCODE NVARCHAR(10) NULL,
  	VERIFICATIONSTATUS NVARCHAR(10) NULL
)

go
CREATE TABLE IBPSUserDomainInfo(
	DOMAINID NVARCHAR(10) NOT NULL,
	USERNAME NVARCHAR(10) NOT NULL,
	UDID NVARCHAR(50)NOT NULL,
  	OFSERVERIP NVARCHAR(25)NOT NULL, 
  	OFSERVERPORT NVARCHAR(10) NOT NULL,
	OFCABINET NVARCHAR(25) NOT NULL,
	OFCABTYPE NVARCHAR(25)NOT NULL,
  	OFAPPSERVERTYPE NVARCHAR(10) NOT NULL,
  	OFMWARNAME NVARCHAR(25) NOT NULL,
  	BAMSERVERPROTOCOL NVARCHAR(5)  NOT NULL,
    BAMSERVERIP NVARCHAR(25)  NOT NULL,
    BAMSERVERPORT NVARCHAR(10)  NOT NULL,
    FORMSERVERPROTOCOL NVARCHAR(5)  NOT NULL,
    FORMSERVERIP NVARCHAR(25)  NOT NULL,
    FORMSERVERPORT NVARCHAR(10)  NOT NULL,
	CALLBACKSERVERPROTOCOL NVARCHAR(5) NOT NULL, 
	CALLBACKSERVERIP NVARCHAR(25) NOT NULL, 
	CALLBACKSERVERPORT NVARCHAR(10) NOT NULL,
  CONSTRAINT domain_person PRIMARY KEY (DOMAINID,USERNAME,UDID)
)

go

----------- BUG 47682 FIXED ------------------

CREATE TABLE WFPSConnection(
	PSId	int	Primary Key NOT NULL,
	SessionId	int	Unique NOT NULL,
	Locale	Nchar(5),	
	PSLoginTime	DATETIME	
)

go

CREATE TABLE WFHoldEventsDefTable(	
	ProcessDefId		int 		   NOT NULL,
	ActivityId			int 		   NOT NULL,
	EventId				int			   NOT NULL,
	EventName			NVARCHAR(255)  NOT NULL,
	TriggerName			NVARCHAR(255),
	TargetActId	int,
	TargetActName	NVARCHAR(255),
	CONSTRAINT PK_WFHoldEventsDefTable PRIMARY KEY(ProcessDefId,ActivityId,EventId)
)
go
create TABLE WF_OMSConnectInfoTable(
	ProcessDefId 	int NOT NULL,
	ActivityId 		int NOT NULL,		
	CabinetName     NVARCHAR(255)    NULL,                
	UserId          NVARCHAR(50)     NULL,
	Passwd          NVARCHAR(256)   NULL,                
	AppServerIP		NVARCHAR(15)	NULL,
	AppServerPort	NVARCHAR(5)		NULL,
	AppServerType	NVARCHAR(255)	NULL,
	SecurityFlag	NVARCHAR(1)		NULL
)
go
create TABLE WF_OMSTemplateInfoTable(
	ProcessDefId 	int NOT NULL,
	ActivityId 		int NOT NULL,
	ProductName 	nvarchar(255) NOT NULL,
	VersionNo 		nvarchar(3) NOT NULL,
	CommGroupName 	nvarchar(255) NULL,
	CategoryName 	nvarchar(255) NULL,
	ReportName 		nvarchar(255) NULL,
	Description 	nvarchar(255) NULL,	
	InvocationType 	nvarchar(1) NULL,
	TimeOutInterval int NULL,
	DocTypeName		nvarchar(255) NULL,
	CONSTRAINT PK_WFOMSTemplateInfoTable PRIMARY KEY(ProcessDefID,ActivityId,ProductName,VersionNo)
)
go
 CREATE TABLE WF_OMSTemplateMappingTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	ProductName nvarchar(255) NOT NULL,
	VersionNo nvarchar(10) NOT NULL,
	MapType nvarchar(2) NOT NULL,
	TemplateVarName nvarchar(255) NULL,
	TemplateVarType int NULL,
	MappedName nvarchar(255) NULL,
	MaxOccurs nvarchar(255) NULL,
	MinOccurs nvarchar(255) NULL,
	VarId int NULL,
	VarFieldId int NULL,
	VarScope nvarchar(255) NULL,
	OrderId		int	
) 
go	

/***********	WFAUDITTRAILDOCTABLE	****************/

CREATE TABLE WFAUDITTRAILDOCTABLE(
	PROCESSDEFID			INT NOT NULL,
	PROCESSINSTANCEID		NVARCHAR(63),
	WORKITEMID			INT NOT NULL,
	ACTIVITYID			INT NOT NULL,
	DOCID				INT NOT NULL,
	PARENTFOLDERINDEX		INT NOT NULL,
	VOLID				INT NOT NULL,
	APPSERVERIP			NVARCHAR(63) NOT NULL,
	APPSERVERPORT			INT NOT NULL,
	APPSERVERTYPE			NVARCHAR(63) NULL,
	ENGINENAME			NVARCHAR(63) NOT NULL,
	DELETEAUDIT			NVARCHAR(1) Default 'N',
	STATUS				CHAR(1)	NOT NULL,
	LOCKEDBY			NVARCHAR(63)	NULL,
	PRIMARY KEY ( PROCESSINSTANCEID , WORKITEMID)
)
go
CREATE TABLE WFActivityMaskingInfoTable (
	ProcessDefId 		INT 			NOT NULL,
	ActivityId 		    INT 		    NOT NULL,
	ActivityName 		NVARCHAR(30)	NOT NULL,
	VariableId			INT 			NOT NULL,
	VarFieldId			SMALLINT		NOT NULL,
	VariableName		NVARCHAR(255) 	NOT NULL
)
go

/*** WFTaskExpiryOperation ***/

CREATE TABLE WFTaskExpiryOperation(
    ProcessDefId             INT             NOT NULL,
    TaskId                    INT                NOT NULL,
    NeverExpireFlag            NVARCHAR(1)        NOT NULL,
    ExpireUntillVariable    NVARCHAR(255)        NULL,
    ExtObjID                 INT                    NULL,
    ExpCalFlag                NVARCHAR(1)              NULL,
    Expiry                    INT                NOT NULL,
    ExpiryOperation            INT                NOT NULL,
    ExpiryOpType            NVARCHAR(64)     NOT NULL,
    ExpiryOperator            INT                NOT NULL,
    UserType                NVARCHAR(1)     NOT NULL,
    VariableId                INT                    NULL,
    VarFieldId                INT                    NULL,
    Value                    NVARCHAR(255)		NULL,
    TriggerID                 SMALLINT            NULL,
    PRIMARY KEY (ProcessDefId, TaskId, ExpiryOperation)
)

go

/*** WFTaskUserAssocTable ***/

CREATE TABLE WFTaskUserAssocTable(
	ProcessDefId int,
	ActivityId int,
	TaskId int,
	UserId int,
	AssociationType int
)


go

/*** WFDefaultTaskUser ***/

create table WFDefaultTaskUser(
	processdefid int,
	activityid int,
	taskid int,
	CaseManagerId int,
	userid int,
	constraint WFDefaultTaskUser_PK PRIMARY KEY (ProcessDefId, ActivityId, TaskId, CaseManagerId)
)

go

CREATE TABLE WFInitiationAgentReportTable(
	LogId bigint IDENTITY(1,1) NOT NULL,
	EmailReceivedDateTime datetime NULL,
	MailFrom nvarchar(4000) NULL,
	MailTo nvarchar(4000) NULL,
	MailSubject nvarchar(4000) NULL,
	MailCC nvarchar(4000) NULL,
	EmailFileName nvarchar(200) NULL,
	EMailStatus nvarchar(100) NULL,
	ActionDateTime datetime NULL,
	ProcessInstanceId nvarchar(200) NULL,
	ActionDescription nvarchar(4000) NULL,
	ProcessDefId int NULL,
	ActivityId int NULL
)

go

CREATE TABLE  WFTxnDataMigrationLogTable
		(
			executionLogId              INT,		
			ProcessDefId                   INT,
			ProcessInstanceId 			NVARCHAR (256),
			Status					    Char (1),
			ActionStartDateTime         DATETIME,
			ActionEndDateTime           DATETIME,
			CONSTRAINT PK_WFTxnDataMigrationLog PRIMARY KEY (ProcessDefId, ProcessInstanceID)
		)

		CREATE NONCLUSTERED INDEX IDX1_WFTxnDataMigrationLog
		ON dbo.WFTxnDataMigrationLogTable (ProcessInstanceID)
go

CREATE TABLE WFUserLogTable  (
	UserLogId			INT				IDENTITY (1,1) PRIMARY KEY,
	ActionId			INT				NOT NULL,
	ActionDateTime		DATETIME		NOT NULL,
	UserId				INT,
	UserName			NVARCHAR(64),
	Message				NVARCHAR(1000)
)

go
/*Bug 73913	Rest Ful webservices implementation in iBPS*/
CREATE TABLE WFRestServiceInfoTable (
	ProcessDefId		INT		,
	ResourceId			INT		,
	ResourceName 		NVARCHAR(255) NOT NULL ,
	BaseURI             NVARCHAR(2000)  NULL,
	ResourcePath        NVARCHAR(2000)  NULL,
	ResponseType		NVARCHAR(2)		NULL,		
	ContentType			NVARCHAR(2)		NULL,		
	OperationType		NVARCHAR(50)		NULL,	
	AuthenticationType	NVARCHAR(500)		NULL,
	AuthUser			NVARCHAR(1000)		NULL,
	AuthPassword		NVARCHAR(1000)		NULL,
	AuthenticationDetails			NVARCHAR(2000) NULL,
	AuthToken			NVARCHAR(2000)		NULL,
	ProxyEnabled			NVARCHAR(2)		NULL,
	SecurityFlag		NVARCHAR(1)		    NULL
	PRIMARY KEY ( ProcessDefId,ResourceId)
)

go
Create table WFRestActivityAssocTable(
	ProcessDefId integer NOT NULL,
	ActivityId integer NOT NULL,
	ExtMethodIndex integer NOT NULL,
	OrderId integer NOT NULL,
	TimeoutDuration integer NOT NULL,
	CONSTRAINT pk_RestServiceActAssoc PRIMARY KEY(ProcessDefId,ActivityId,ExtMethodIndex)
) 
/*END Bug 73913	Rest Ful webservices implementation in iBPS*/
go

/*________________________________________________________________________________
				NEWGEN SOFTWARE TECHNOLOGIES LIMITED
  ________________________________________________________________________________
		Group					: Application – Products
		Product / Project		: WorkFlow 7.0
		Module					: Transaction Server
		File Name				: actionsp.sql
		Author					: Ruhi Hira
		Date written(DD/MM/YYYY): August 3rd 06.
		Description				: Script for inserting default entries in 
										WFActionStatusTable.
  ________________________________________________________________________________
						CHANGE HISTORY
  ________________________________________________________________________________
  Date (DD/MM/YYYY)	Change By	Change Description (Bug No. (If Any))
  ________________________________________________________________________________

  06/02/2007		Varun Bhansaly		Add row in WFActionStatusTable for new actionIds – 77, 78, 79
  24/04/2007		Varun Bhansaly		Type for ActionId=77 will be 'C' in WFActionStatusTable
  28/05/2007		Varun Bhansaly		Bugzilla Id 357 (Auditing of actions related to calendar)
  21/12/2007		Varun Bhansaly		SrNo-4, New ActionIds 81, 82, 83, 84, 85
  31/01/2008		Varun Bhansaly		Bugzlla Id 3775, (Add N for NVarchar fields in actionSP)
  07/02/2008 		Varun Bhansaly		Bugzilla Bug 2774 Maker Checker Functionality
  07/07/2009		Preeti Awasthi		WFS_8.0_015 Support of ActionId
  19/04/2010		Saurabh Kamal		Bugzilla Bug 11973, No entry should be there for ActionId (96-100)
  09/04/2012        Bhavneet Kaur   	Bug 31002: Workitem History Capture for Document Print Operation and AddtoMail Queue Action
  25/06/2014        Anwar Danish        PRD Bug 45001 merged - Add new action ids, handle also at front end configuration screen and history generation functionality.
  03/11/2014		Hitesh Singla		Bug 51606 - export cabinet n purge criteria options should be removed 
  15-07-2015		Sajid Khan			Enabling\Disabling of Task Related Actions.
  23 Nov 2015		Sajid Khan			Enabling\Disabling of Hold/Unhold Actions.
  28-12-2015		Kirti Wadhwa		Changes for Bug 57652 - while diversion, tasks should also be diverted along with the workitems.
  20/04/2017        Kumar Kimil			Bug 60184-Entry missing in WFSString.properties from ActionId = 123[Diverstion Rollback workitem ]
  07/04/2017		Shubhankur Manuja	Changes related to WFDECLINETASK API for new actionid = 708 in wfactionstatustable
  02/02/2018        Kumar Kimil         Bug 75629 - Arabic:-Unable to see Case visualization getting blank error screen
_____________________________________________________________________
  19/04/2017		Rakesh K Saini		Bug 66398 - Support of WFChangeWorkItemPriority API to get the Priority Level audting when Workitem priority is changed_______________________________________________________________________________*/
/* SrNo-3 procedure to insert data into WFActionStatusTable*/
/*WFS_6.1.2_031-algorithm of actionsp modified*/
/*WFS_6.1.2_037*/
/*WFS_6.1.2_042*/
/** C-> Cabinet :- Operations for which the user will make auditing decision. 
  * User can generate auditing for them, or the user may disable auditing for them.
  * S-> System :- Operations for which auditing will always be done. These will not be modifiable by the user.
 **/
If Exists (Select 1 From SYSObjects Where name = 'actionsp' AND xType = 'P')
Begin
	Drop Procedure actionsp
	Print 'As Procedure actionsp exists dropping old procedure ........... '
End

Print 'Creating procedure actionsp ........... '
go

CREATE PROCEDURE actionsp  
AS 
	DECLARE @cnt int 
	DECLARE @ctype NVarchar(2)       	
BEGIN 
	SET @cnt = 1 
	SET @ctype=N'C'   
	WHILE @cnt <= 123  
	BEGIN 
		IF NOT EXISTS (
			SELECT ActionId  FROM WFACTIONSTATUSTABLE 
			WHERE	ActionId = @cnt
			)
		BEGIN 
			IF(@cnt not in(11 ,12, 97, 98, 99, 100,122)) 
			BEGIN  
				IF(@cnt in(1,2,4,5,6,7,8,13,16,23,24,25,27,28,72,75,76,78,79,80,81,82,84,85,101,102,103,104,105,106,107,108,109,110,111))  
					set @ctype=N'S' 
				ELSE IF(@cnt in(116,117,118,119,120,121))
					SET @ctype=N'R'
                 ELSE
                    SET @ctype=N'C'					
				INSERT INTO wfactionstatustable   
				VALUES(@cnt ,@ctype,N'Y') 
			END  
		END  
		set @cnt=@cnt+1 

	END  
	BEGIN 
	IF NOT EXISTS (
			SELECT ActionId  FROM WFACTIONSTATUSTABLE 
			WHERE	ActionId = 200
			) 

	INSERT INTO wfactionstatustable VALUES(200 ,N'C',N'Y') 
	END 
	BEGIN 
	IF NOT EXISTS (
			SELECT ActionId  FROM WFACTIONSTATUSTABLE 
			WHERE	ActionId = 128
			) 

	INSERT INTO wfactionstatustable VALUES(128,N'C',N'Y') 
	END 
	set @cnt=501 
	WHILE @cnt <=505 
	BEGIN 
		IF NOT EXISTS (
			SELECT ActionId  FROM WFACTIONSTATUSTABLE 
			WHERE	ActionId = @cnt
			) 
			INSERT INTO wfactionstatustable   
			VALUES(@cnt,N'S',N'Y') 
		set @cnt=@cnt+1 

	END  	
--Enabling/Disabling of Task Related operations.	
    set @cnt=701 
	WHILE @cnt <=714
	BEGIN 
		IF(@cnt=706) 
		BEGIN 
		    set @cnt=@cnt+1 
			CONTINUE
		END		
		IF NOT EXISTS (
			SELECT ActionId  FROM WFACTIONSTATUSTABLE 
			WHERE	ActionId = @cnt
			) 
			INSERT INTO wfactionstatustable   
			VALUES(@cnt,N'S',N'Y') 
		set @cnt=@cnt+1 
	END
	
--Enabling/Disabling of Hold/Unhold operations.	
    set @cnt=800 
	WHILE @cnt <=801 
	BEGIN 
		IF NOT EXISTS (
			SELECT ActionId  FROM WFACTIONSTATUSTABLE 
			WHERE	ActionId = @cnt
			) 
			INSERT INTO wfactionstatustable   
			VALUES(@cnt,N'C',N'Y') 
		set @cnt=@cnt+1 
	END
	
END 

go

Print 'Executing procedure actionsp ........... '
Exec actionsp

go
/*WFS_6.1.2_025*/

Print 'Dropping procedure actionsp ........... '
Drop Procedure actionsp
go

go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group				: Application – Products
	Product / Project		: WorkFlow 5.0
	Module				: Transaction Server
	File Name			: Create_ProcessView.sql
	Author				: Ashish Mangla.
	Date written (DD/MM/YYYY)	:
	Description			: Stored procedure to create process views.

______________________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________________
 Date		Change By		Change Description (Bug No. (If Any))
 24/05/2007	Ruhi Hira		Bugzilla Bug 945.
 17/05/2013	Shweta Singhal	Process Variant Support Changes

____________________________________________________________________________________________________*/

IF EXISTS (SELECT * FROM SysObjects WHERE xType = 'P' AND name = 'CREATE_PROCESSVIEW')
BEGIN
	EXECUTE('DROP PROCEDURE CREATE_PROCESSVIEW')
	PRINT 'Procedure CREATE_PROCESSVIEW already exists, hence older one dropped ..... '
END

go 
CREATE PROCEDURE CREATE_PROCESSVIEW
	@processDefId  	INT ,
	@pvariantId		INT	/*Process Variant Support Changes*/
AS 
BEGIN
	DECLARE @processName		NVARCHAR(30)
	DECLARE @processVersion		NVARCHAR(8)
	DECLARE @userDefinedName	NVARCHAR(50)
	DECLARE @systemDefinedName	NVARCHAR(50)
	DECLARE @extObjId		INT
	DECLARE @viewName		NVARCHAR(20)
	DECLARE @viewVersionName	NVARCHAR(30)
	DECLARE @columnString		NVARCHAR(4000)
	DECLARE @queryStr		VARCHAR(8000)
	DECLARE @queryIdView		VARCHAR(8000)
	DECLARE @queryVersionView	VARCHAR(8000)
	DECLARE @cntr_ext		INT
	DECLARE @extTABLEName		NVARCHAR(50)
	DECLARE @lojConditionStr	NVARCHAR(1000)
	DECLARE @val_Rec_1		NVARCHAR(50)
	DECLARE @val_Rec_2		NVARCHAR(50)
	DECLARE @val_Rec_3		NVARCHAR(50)
	DECLARE @val_Rec_4		NVARCHAR(50)
	DECLARE @val_Rec_5		NVARCHAR(50)
	DECLARE @pId			INT
	DECLARE @processDefIdString	NVARCHAR(100)
	DECLARE @dropVersionView	NVARCHAR(30)

	IF NOT EXISTS(SELECT * FROM ProcessDefTABLE WHERE ProcessDefId = @processDefId)
	BEGIN
		PRINT 'Invalid ProcessDefId , script could NOT be executed' 
		RETURN
	END
 
	SELECT @processName = processName
	FROM ProcessDefTABLE
	WHERE ProcessDefId = @processDefId


	SELECT @pId = MAX(ProcessDefId) FROM PROCESSDEFTABLE WHERE processName  = @processName;
	SET @viewName = 'WFProcessView_' + convert(VARCHAR(3), @processDefId)
	IF EXISTS(SELECT * FROM SysObjects WHERE name = @viewName AND xType = 'V')
		EXECUTE('Drop View ' + @viewName)
	
	SET @viewVersionName  = 'WFProcessView_Version_' + convert(VARCHAR(3), @processDefId)
	IF EXISTS(SELECT * FROM SysObjects WHERE name = @viewVersionName AND xType = 'V')
		EXECUTE('Drop View ' + @viewVersionName)

	SET @cntr_ext = 0
	SET @columnString = ''
	SET @queryStr =	' AS SELECT QUEUEVIEW.ProcessInstanceId, QUEUEVIEW.QueueName, QUEUEVIEW.processName, ' 
			+ ' QUEUEVIEW.ProcessVersion, QUEUEVIEW.ActivityName, QUEUEVIEW.stateName,' 
			+ ' QUEUEVIEW.CheckListCompleteFlag, QUEUEVIEW.AssignedUser, QUEUEVIEW.EntryDATETIME, '
			+ ' QUEUEVIEW.ValidTill, QUEUEVIEW.workitemid, QUEUEVIEW.prioritylevel, '
			+ ' QUEUEVIEW.parentworkitemid, QUEUEVIEW.processdefid, QUEUEVIEW.ActivityId, '
			+ ' QUEUEVIEW.InstrumentStatus, QUEUEVIEW.LockStatus, QUEUEVIEW.LockedByName, '
			+ ' QUEUEVIEW.CreatedByName, QUEUEVIEW.CreatedDatetime, QUEUEVIEW.LockedTime, '
			+ ' QUEUEVIEW.IntroductionDateTime, QUEUEVIEW.Introducedby, QUEUEVIEW.AssignmentType, '
			+ ' QUEUEVIEW.processinstancestate, QUEUEVIEW.queuetype, QUEUEVIEW.Status, ' 
			+ ' QUEUEVIEW.Q_QueueId, '
			+ ' DATEDIFF( hh, QUEUEVIEW.entryDATETIME, QUEUEVIEW.ExpectedWorkItemDelayTime) AS TurnaroundTime, '
			+ ' QUEUEVIEW.ReferredBy, QUEUEVIEW.ReferredTo, '
			+ ' QUEUEVIEW.ExpectedProcessDelayTime, QUEUEVIEW.ExpectedWorkItemDelayTime, QUEUEVIEW.ProcessedBy, '
			+ ' QUEUEVIEW.Q_UserID, QUEUEVIEW.WorkItemState, QUEUEVIEW.ProcessVariantId '/*Process Variant Support Changes*/
			
	SET @extTABLEName = ''
	SET @lojConditionStr = ''
	DECLARE variableCur Cursor FAST_Forward For
		SELECT  UserDefinedName, SystemDefinedName, VarMappingTABLE.ExtObjID
		FROM 	VarMappingTABLE , ActivityASsociationTABLE 
		WHERE 	ActivityASsociationTABLE.ProcessDefID = @processDefId
		AND 	ActivityASsociationTABLE.ProcessDefID = VarMappingTABLE.ProcessDefID 
		AND 	VariableScope IN ( 'U' , 'Q' , 'I' ) 
		AND 	UPPER(RTRIM(ActivityASsociationTABLE.FieldName)) = UPPER(RTRIM(VarMappingTABLE.UserDefinedName)) 
		AND 	Attribute  IN ('O' , 'B' , 'M' , 'R') 
		AND 	ActivityId in (SELECT activityid FROM ActivityTABLE WHERE activityType = 1 
		AND	Upper(RTRIM(primaryActivity)) = 'Y' AND processDefId = @processDefId)
		AND 	ActivityAssociationTABLE.ProcessVariantId = VarMappingTABLE.ProcessVariantId 
		ORDER BY VarMappingTABLE.ExtObjId/*Process Variant Support Changes*/
	OPEN variableCur
	FETCH NEXT FROM variableCur INTO @userDefinedName, @systemDefinedName, @extObjId
	WHILE(@@Fetch_Status <> -1)
	BEGIN
		IF (@@Fetch_Status <> -2)
		BEGIN
			SET @columnString = @columnString + ', '
			
			IF(@extObjId = 0)
			BEGIN
				IF(@userDefinedName is NOT NULL 
					AND len(rtrim(@userDefinedName)) > 0 
					AND @userDefinedName != @systemDefinedName)
					SET @columnString = @columnString + @systemDefinedName 
								+ ' AS ' + @userDefinedName
				ELSE
					SET @columnString = @columnString + @systemDefinedName
			END
			ELSE
			BEGIN
				IF(@extTABLEName = '')
				BEGIN
					SELECT @extTABLEName = TABLEName FROM ExtDBConfTABLE 
					WHERE processDefId = @processDefId 
					AND ProcessVariantId = @pvariantId/*Process Variant Support Changes*/
					SELECT  @val_Rec_1 = rec1, 
						@val_Rec_2 = rec2, 
						@val_Rec_3 = rec3,
						@val_Rec_4 = rec4, 
						@val_Rec_5 = rec5 
					FROM RecordMappingTABLE WHERE processDefId = @processDefId

					IF(@val_Rec_1 is NOT NULL AND len(rtrim(@val_Rec_1)) > 0)
					BEGIN
						IF(@cntr_ext > 0)
							SET @lojConditionStr = @lojConditionStr + ' AND '
						SET @lojConditionStr = @lojConditionStr  
						+ 'QUEUEVIEW.Var_Rec_1' +  
						+ ' = ' + @extTABLEName + '.' + @val_Rec_1
						SET @cntr_ext = @cntr_ext + 1
					END
					IF(@val_Rec_2 is NOT NULL AND len(rtrim(@val_Rec_2)) > 0)
					BEGIN
						IF(@cntr_ext > 0)
							SET @lojConditionStr = @lojConditionStr + ' AND '
						SET @lojConditionStr = @lojConditionStr  
						+ 'QUEUEVIEW.Var_Rec_2' +  
						+ ' = ' + @extTABLEName + '.' + @val_Rec_2
						SET @cntr_ext = @cntr_ext + 1
					END
					IF(@val_Rec_3 is NOT NULL AND len(rtrim(@val_Rec_3)) > 0)
					BEGIN
						IF(@cntr_ext > 0)
							SET @lojConditionStr = @lojConditionStr + ' AND '
						SET @lojConditionStr = @lojConditionStr  
						+ 'QUEUEVIEW.Var_Rec_3' +  
						+ ' = ' + @extTABLEName + '.' + @val_Rec_3
						SET @cntr_ext = @cntr_ext + 1
					END
					IF(@val_Rec_4 is NOT NULL AND len(rtrim(@val_Rec_4)) > 0)
					BEGIN
						IF(@cntr_ext > 0)
							SET @lojConditionStr = @lojConditionStr + ' AND '
						SET @lojConditionStr = @lojConditionStr  
						+ 'QUEUEVIEW.Var_Rec_4' +  
						+ ' = ' + @extTABLEName + '.' + @val_Rec_4
						SET @cntr_ext = @cntr_ext + 1
					END
					IF(@val_Rec_5 is NOT NULL AND len(rtrim(@val_Rec_5)) > 0)
					BEGIN
						IF(@cntr_ext > 0)
							SET @lojConditionStr = @lojConditionStr + ' AND '
						SET @lojConditionStr = @lojConditionStr  
						+ 'QUEUEVIEW.Var_Rec_5' +  
						+ ' = ' + @extTABLEName + '.' + @val_Rec_5
						SET @cntr_ext = @cntr_ext + 1
					END
				END
				SET @columnString = @columnString + ' ' + @extTABLEName + '.' 
							+ @systemDefinedName + ' AS '+ @userDefinedName
			END
		END
		FETCH NEXT FROM variableCur INTO @userDefinedName, @systemDefinedName, @extObjId
	END
	CLOSE variableCur
	DEALLOCATE variableCur

	SET @queryStr = @queryStr + @columnString + ' FROM QUEUEVIEW with (NOLOCK) ' 
	IF( len(rtrim(@extTABLEName)) > 0 )
		SET @queryStr = @queryStr + ' Left Outer Join ' + @extTABLEName + ' with (NOLOCK) On ' + @lojConditionStr
	SET @queryIdView = 'CREATE VIEW ' + @viewName + @queryStr + ' WHERE QUEUEVIEW.ProcessDefId = ' + convert(VARCHAR(3), @processDefId)

	EXECUTE(@queryIdView) 

	IF(@pId = @processDefId)
	BEGIN
		SET @processDefIdString = '0'
		DECLARE processDefIDCur Cursor FASt_Forward For
			SELECT processDefId FROM ProcessDefTABLE WHERE processName  = @processName
		OPEN processDefIDCur
		FETCH NEXT FROM processDefIDCur INTO @pId
		WHILE(@@Fetch_Status <> -1)
	
		BEGIN
			IF (@@Fetch_Status <> -2)
			BEGIN
				SET @processDefIdString = @processDefIdString + ', '+ convert(VARCHAR(3), @pId) 
				SET @dropVersionView = 'WFProcessView_Version_' + convert(VARCHAR(3), @pId)
				IF EXISTS(SELECT * FROM SysObjects WHERE name = @dropVersionView AND xType = 'V')
					EXECUTE('Drop View ' + @dropVersionView)
			END
			FETCH NEXT FROM processDefIDCur INTO @pId
		END

		CLOSE processDefIDCur
		DEALLOCATE processDefIDCur

		SET @queryVersionView = 'CREATE VIEW ' + @viewVersionName + @queryStr + ' WHERE QUEUEVIEW.ProcessDefId In (' + @processDefIdString + ')'

		EXECUTE(@queryVersionView) 
	END 
END

go

/*__________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________
	Group						: Phoenix
	Product / Project			: Omniflow 7.1
	Module						: WorkFlow Server
	File Name					: WFParseQueryFilter.sql [MSSQL]
	Author						: Varun Bhansaly
	Date written (DD/MM/YYYY)	: 30/08/2007
	Description					: Parse QueryFilter and substitute values for Macros 
									of type &<UserIndex.ColumnName>&/ &<GroupIndex.ColumnName>&.
									WFFilterTable must exist in the Cabinet.
______________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________
Date			Change By			Change Description (Bug No. (If Any))
24/09/2007		Varun Bhansaly		String type columns to be enclosed b/w Quotes.
									Hence code for finding datatype of the column removed.
17/02/2011		Preeti Awasthi		Bug 1091 Support of multiple rows in WFFilterTable
22/02/2011		Preeti Awasthi		Handling in case of SQL 2008
04/03/2013		Deepak Mittal		Bug 38623 Support of multiple filters in query string
									Support of single apostrophe in WFFilterTable column values
30/06/2015		Sanal Grover		Bug 55622 - DISTINCT values to be used in a filter while using WFFiltertable in WFParseQueryFilter.
09/07/2015		Sweta Bansal		Bug 55785 - In case of mssql, while fetching the data from WFFilterTable, locking is getting performed whereas data from WFFilterTable should be fetched with No lock. 									
______________________________________________________________________________________________
____________________________________________________________________________________________*/


/* Algorithm :-
	1. Parse QueryFilter to extract Column Names.
	2. Query WFFilterTable to extract values corresponding to the Column Names.
		Two Approaches
		1. Corresponding to each column fire a query. 
		   Thus, if there are 6 columns, then 6 queries will be fired.
	           Unlike JDBC, this should not be issue since DATABASE and SP reside on the same machine.
		2. Prepare a string of columns and fire single query.
			Issue : Since no. of columns will be dynamic, how will they be extracted into variables.
			i.e. how to obtain information on Meta-Data -> Research Required.
	3. Substitute complex macros with obtained values.

CASES :- 
	1. QueryFilter not containing any macros.
	2. QueryFilter containing simple macros. eg. &<UserIndex>&
	3. QueryFilter containing complex macros. eg. VAR_STR1 = '&<UserIndex.City>&'

CASES Not yet handled :-
	1. No support for Database Operator 'IN'
	2. 
Handling of IN :-
	1. Open a sursor to fetch all rows from WFFilterTable
	2. If single row is returned then = should be used otherwise 'IN' should be used.	
*/ 
IF Exists (Select * from SysObjects Where xType = 'P' and name = 'WFParseQueryFilter')
Begin
	Execute('DROP PROCEDURE WFParseQueryFilter')
	Print 'Procedure WFParseQueryFilter already exists, hence older one dropped ..... '
End

go 

CREATE PROCEDURE WFParseQueryFilter (@DBQueryFilter VARCHAR(8000), @DBObjectType NVarchar(1), @DBObjectIndex Int, @DBParsedQueryFilter VARCHAR(8000) OUT)
AS
BEGIN
	DECLARE @v_columnName nvarchar(256)
	DECLARE @v_columnValue nvarchar(256)
	--DECLARE @v_queryParameter nvarchar(256)
	DECLARE @v_query nvarchar(1024)
	DECLARE @v_toFind nvarchar(32)
	DECLARE @v_quoteChar nvarchar(1)
	DECLARE @v_startIndex int
	DECLARE @v_endIndex int
	DECLARE @v_len int
	DECLARE @v_rowCount int
	DECLARE @v_DataType 	NVARCHAR(100)
	DECLARE @v_strDataType 	INT
	DECLARE @v_SingleRcrd 	INT
	DECLARE @v_ColVal		NVARCHAR(1000)
	DECLARE @v_MultipleRows	INT

	SELECT @v_startIndex = 1
	SELECT @v_endIndex = 1
	SELECT @v_quoteChar = CHAR(39)  
	SELECT @v_DataType = ''
	SELECT @v_strDataType = 0
	SELECT @v_SingleRcrd = 0;

	IF @DBObjectType = N'U'
	BEGIN
		SELECT @v_toFind = N'&<UserIndex.'
	END
	ELSE IF @DBObjectType = N'G'
	BEGIN
		SELECT @v_toFind = N'&<GroupIndex.'
	END
	ELSE 
	BEGIN
		SELECT @DBParsedQueryFilter = @DBQueryFilter
		RETURN
	END
	SELECT @v_len = LEN(@v_toFind)
	SELECT @DBQueryFilter = ISNULL(LTRIM(RTRIM(@DBQueryFilter)),'')

	WHILE (1 = 1) 
	BEGIN
		SELECT @v_startIndex = CHARINDEX(@v_toFind, @DBQueryFilter, 1)
		IF @v_startIndex = 0
		BEGIN
			BREAK
		END
		SELECT @v_SingleRcrd = 0
		SELECT @v_endIndex = CHARINDEX(N'>&', @DBQueryFilter, @v_startIndex)

		SELECT @v_columnName = SUBSTRING(@DBQueryFilter, @v_startIndex + @v_len, @v_endIndex - (@v_startIndex + @v_len))
		
		SELECT @v_DataType = SysTypes.Name FROM SysObjects INNER JOIN SysColumns ON SysObjects.Id = 
		SysColumns.Id INNER JOIN SysTypes ON SysTypes.xtype = SysColumns.xtype WHERE SysObjects.type = 'U' AND SysObjects.name = 'WFFilterTable' 
		AND SysTypes.xusertype = SysColumns.xusertype AND SysColumns.name = @v_columnName
		
		IF (@v_DataType = N'CHAR' OR @v_DataType = N'NCHAR' OR @v_DataType = N'VARCHAR' OR @v_DataType = N'NVARCHAR')
		BEGIN
			SELECT @v_strDataType = 1
		END
		ELSE
		BEGIN
			SELECT @v_strDataType = 0
		END
		SELECT @v_query = 'SELECT DISTINCT ' + @v_columnName + ' FROM WFFilterTable WITH (NOLOCK) WHERE ObjectType = N' + @v_quoteChar + @DBObjectType  +  @v_quoteChar + ' AND ObjectIndex = ' + CAST(@DBObjectIndex AS NVARCHAR(10))
		EXECUTE('DECLARE CursorQuery CURSOR Fast_Forward FOR ' + @v_query) 
		OPEN CursorQuery
		FETCH NEXT FROM CursorQuery INTO @v_columnValue
		WHILE (@@FETCH_STATUS = 0)  
		BEGIN			
			IF (@v_SingleRcrd = 0)
			BEGIN
				IF (@v_strDataType = 1)
				BEGIN
					SELECT @v_columnValue=replace(@v_columnValue,'''','''''')	
					SELECT @v_ColVal = @v_quoteChar+@v_columnValue+@v_quoteChar
				END
				ELSE
					SELECT @v_ColVal = @v_columnValue				 
			END
			ELSE
			BEGIN
				IF (@v_strDataType = 1)
				BEGIN
					SELECT @v_columnValue=replace(@v_columnValue,'''','''''')
					SELECT @v_ColVal = @v_ColVal + ',' + @v_quoteChar+@v_columnValue+@v_quoteChar
				END
				ELSE 
					SELECT @v_ColVal = @v_ColVal + ',' + @v_columnValue				
			END
			SELECT @v_SingleRcrd = @v_SingleRcrd+1
			FETCH NEXT FROM CursorQuery INTO @v_columnValue
		END
		CLOSE CursorQuery
		DEALLOCATE CursorQuery
		/*SELECT @v_queryParameter = '@value NVarchar(100) OUTPUT'
		EXEC sp_executesql @v_query, @v_queryParameter, @value = @v_columnValue OUTPUT
		SELECT @v_rowCount = @@ROWCOUNT*/
		SELECT @v_ColVal = LTRIM(RTRIM(@v_ColVal))
		/* To Handle NULL values for a column */
		--SELECT @DBQueryFilter =  REPLACE(@DBQueryFilter,'''','')
		SELECT @DBQueryFilter =  REPLACE(@DBQueryFilter , @v_toFind + @v_columnName + N'>&' , ISNULL(@v_ColVal, ''))
	END
	IF(@v_SingleRcrd > 1) 
	BEGIN
		SELECT @DBQueryFilter =  REPLACE(@DBQueryFilter,'!=',' NOT IN (')
		SELECT @DBQueryFilter =  REPLACE(@DBQueryFilter,'=',' IN (')			
		SELECT @DBQueryFilter =  @DBQueryFilter + ')'
		SELECT @DBQueryFilter =  REPLACE(@DBQueryFilter,' OR ',') OR ')
		SELECT @DBQueryFilter =  REPLACE(@DBQueryFilter,' AND ',') AND ')
	END
	SELECT @DBParsedQueryFilter = @DBQueryFilter
END
 
go

Print 'Stored Procedure WFParseQueryFilter compiled successfully ........'

go

/*__________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________
	Group				: Application – Products
	Product / Project		: WorkFlow 7.0
	Module				: WorkFlow Server
	File Name			: WFFetchWorkList.sql [MSSQL]
	Author				: Tirupati Swaroop Srivastava
	Date written (DD/MM/YYYY)	: 04/03/2007
	Description			: Stored procedure for Dynamic queue for 
					  WFFetchWorkList API.[for SQL SERVER]
______________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________
Date			Change By	Change Description (Bug No. (If Any))
19/05/2007		Varun Bhansaly	In Case Row Count being less than equal to 0, 
							resultset is being returned as NULL. 
							Hence Incorrect Error Message
22/05/2007		Varun Bhansaly	Bugzilla Id 890 (WFFetchWorkList Fails in Case of Dynamic/ 
								WIP Queue and String function being used)
24/05/2007		Ruhi Hira	Bugzilla Bug 945.
05/06/2007		Varun Bhansaly	Bugzilla Bug 1016 (Query on QUserGroupView returns 
							multiple result sets causes exception in Oracle)
13/07/2007		Ruhi Hira	Bugzilla Bug 1390.
18/07/2007		Ashish Mangla	Bugzilla Bug 1297  (RowCount should be the written immediately in the next statement for whic rowcount is to be checked )
06/09/2007		Varun Bhansaly	Added for Support for Complex Query Filters and Generic Queue Filters.
28/09/2007              Shilpi S        Bugzilla Bug 1680 , new parameter is returned for number of workitems returned
19/10/2007		Vikram Kumbhar	Bugzilla Bug 1703, Support for showing 'only unlocked' or 'both locked and unlocked' workitems in worklist
08/01/2008		Ashish Mangla	Bugzilla Bug 1681 (UserName Marco support required)
08/01/2008		Varun Bhansaly	Bugzilla Id 3310
18/12/2008		Ruhi Hira		Bugzilla Bug 7374, variable length issue.
08/09/2009		Harmeet Kaur	WFS_8.0_030 Queue filter not working at a particulat queue.
14/10/09		Ashish Mangla	WFS_8.0_044 TurnAroundTime support in FetchWorklist and SearchWorkitem
27/10/2009		Saurabh Kamal	WFS_8.0_046 (In case user is member of multiple groups which are added to Queue, One group having no filter, then user should be able to view workitems considering 'no filter')
29/10/2009		Indraneel	WFS_8.0_047 Support for sorting on queue variables in fetch worklist.
04/11/2009		Saurabh Kamal	WFS_8.0_052 Return ProcessedBy in FetchWorklist
04/12/2009		Ashish Mangla	WFS_8.0_061 Process Specific Alias Support on MyQueue
23/12/2009		Saurabh Kamal	WFS_8.0_072 Error in Fetchworklist in case of SetFilter on MyQueue
03/08/2010		Vikas Saraswat	WFS_8.0_120 Order by is not working in Queue-User-Assoc Filter and in case of 	 webdesktop FilterString
29/09/2010		Ashish/Abhishek WFS_8.0_136	Support of process specific queue and alias on external table variables.
15/03/2010		Saurabh Kamal	WFS_8.0_153 Support of FUNCTION in QueryFilter
23/05/2011      Vikas Saraswat  Bug 27083 : Order By is not working if inner order is set in queuefilter or user filter
09/06/2011		Saurabh Kamal	Bug 27241 ,New QueueType Introduced on which we need not add Q_Queueid = ? criteria, just we need to consider filters only. No worksteps can be added to this type of queue.
24/06/2011		Saurabh Kamal	Bug 27310, Page batching support in FetchWorklist
03/08/2011      Gaurav Rana     Bug 27833, Support of workitem count in searchworkitem [In queue] and restricting sql injection in input xml.
11/06/2012		Saurabh Kamal	Bug 31397 - Error if alias on CreatedDateTime is defined.
26/09/2012		Shweta Singhal	Bug 35181 - Error code changed for insufficient rights from no more records.
15/01/2013		Preeti Awasthi	Bug 37793 - If username length is exceeding 63 character, workitems not opening if fixed assigned.
07/02/2013		Shweta Singhal	Bug 38263 - Error code changed for No association with Queue.
17/05 2013 		Shweta Singhal	Process Variant Support Changes
29/07/2013		Shweta Singhal	Bug 41579- requested operation failed on newly created queue
30/12/2013    Mohnish Chopra  Changed for Code Optimization 
10/02/2014		Shweta Singhal	Paging will be provided on the basis of pagingFlag
10/06/2014		Kanika Manik	PRD Bug 44140 - Batching not working correctly when filter contains order by on a DATE type field.  
12/06/2014 	    Anwar Danish    PRD Bug 40412 and 40412 merged - WMFetchWorkList API throws exception when FUNCTION filter is available on "No Assignment" Queue  
13/06/2014    Anwar Ali Danish  PRD Bug 38828 merged - Changes done for diversion requirement. CQRId 				CSCQR-00000000050705-Process  
17-06-2014	  Sajid Khan		Bug 46318 - Arabic: Defined Process Variable mapping for any queue, now unable to open the queue.
03/07/2014	  Anwar Danish	    Bug 42138 - PRD Issue in WFFetchWorklist Call: Due to insufficient size of DBUserFilterStr field in WFFetchWorklist filter string was getting truncated.  
11/08/2015	   Mohnish Chopra	Changes for Data Locking issue in Case Management -Returning ActivityType from Call 
10/03/2016	   Kirti Wadhwa		Changes for Bug 59472 - RHEL-7 + Weblogic 12.1.2C + Oracle 11g : Requested filter is invalid on sorting through column. 
15/02/2017		Mohnish Chopra		Merged Changes for Optimization in OF10/OF9 by Sajid/Sanal
24/04/2017		Sajid Khan			Error in WFFetchWorkList.sql [MS SQL] if length of string query returned from Function Filter is larger than 1000 length
30/04/2017		Sajid Khan			Verious Bugs regarding Queue Filter and Query Filter solved.
09-05-2017	Sajid Khan			Queue Varaible Extension Enahncement
02-08-2017	Shubhankur Manuja	Bug 70876 - The requested filter is invalid.Incorrect syntax near the keyword 'Where'. 
16-08-2017	Mohnish Chopra		Changes for Case Management - Queue variable header alias should allow spaces
09/19/2017		Mohnish Chopra	Changes for Case management - QueueFilter required on Case workstep queue.
17/10/2017	Ambuj Tripathi		Changes for Case Registration requirements, fetch URN in output
1/11/2017   Kumar Kimil         Bug 72917 - WBL+Oracle: Getting error in fetch worklist of My queue if alias has been added on My Queue
02-11-2017	Shubhankur Manuja	Bug Merging - 70858
16-01-2018	Sajid Khan			Bug Merging - 70209 - In embedded view when click on refresh button, open Workitem is disappeared from the list
17-05-2018	Ambuj Tripathi		Bug 77455 - WMFetchWorkList is getting failed if too many alias are defined 
____________________________________________________________________________________________*/


/* Algorithm :
	1. Check of user session validity 
	2. Prepare filterString to be appended for (the case like loggedin userindex = (!= ) VAR_INT1	[FILTER WI] 
	3. Prepare the QueryFilter to be appended (User Queue asdsociation filter)			[FILTER WI] 
		-> While getting QueryFiler, Also prepare the the order by string for innerOrderBy.
		-> QueryFilter may contain Complex Filters of Type &<UserIndex.*>&/ &<GroupIndex.*>&
		-> Use SP WFParseQueryFilter for complex Query Filter Parsing.
	4. If Query Filter is empty for either of User or Group, for NO Assignment Type Queues only, consider Generic Queue Filter.
	5. if data flag is Y, prepare the alias string  
		-> Also check if the sorting is to be done on Alias, get the order by string for that also 
 
CASES :- 
	1. '&<UserIndex>&' should have a space after it. 
	2. Queue-User-Assoc Filter can contain Order By maximxum upto 5 levels. 
	3. If User member of multiple groups, QuerryFilter will be ORed AND Order By of last (that is having order by) group coming is considered. 
*/ 
/* Bugzilla Id 1680
   a new input parameter is added in WFFetchWorklist-SP returnParam, if 0 -> only list, if 1 -> only count, if 2 -> both count and list
   sp will return count value as out parameter
   MSSQL will fire a count(*) query will similar conditions as for fetching worklist for case returnParam value 1 & 2
*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFFetchWorkList')
BEGIN
	EXECUTE('DROP PROCEDURE WFFetchWorkList')
	PRINT 'PROCEDURE WFFetchWorkList ALREADY EXISTS HENCE OLDER ONE DROPPED'
END

go

CREATE PROCEDURE WFFetchWorkList
(  
		@DBsessionId			INT,  
		@DBqueueId				INT ,  
		@DBsortOrder			NVARCHAR(1) ,  
		@DBorderBy				INT , 
		@DBbatchSize			INT , 
		@DBlastWorkItem			INT , 
		@DBdataFlag				NVARCHAR(1) , 
		@DBFetchLockedFlag		NVARCHAR(1) , /* Bugzilla Bug 1703 */
		@DBlastProcessInstance	NVARCHAR(63) , 
		@DBlastValue			NVARCHAR(2000) , 
		@DBuserFilterStr		VARCHAR(MAX)  ,
		@DBreturnParam          INT, /* 0 -> only list, if 1 -> only count, if 2 -> both count and list*/
		@DBProcessAlias			NVARCHAR(1) , 
		@DBProcessDefId			INT,
		@DBClientOrderFlag		NVARCHAR(1),
		@DBStartingRecNo		INT,
		@DBPagingFlag			NVARCHAR(1)
) 
AS 

Set NoCount On
	 
DECLARE		@v_DBStatus			INT 
DECLARE		@v_rowCount			INT 	
DECLARE		@v_filterStr			NVARCHAR(100) 
DECLARE		@v_filterOption			INT 
DECLARE		@v_QueryStr			NVARCHAR(max) 
DECLARE		@v_QueryStr1			NVARCHAR(max) 
DECLARE		@v_QueryStr2			VARCHAR(max) 
DECLARE		@v_QueryStr3			VARCHAR(max) 
DECLARE		@v_CountStr			VARCHAR(8000) 
DECLARE		@v_CountStr1			VARCHAR(8000) 
DECLARE		@v_CountStr2			VARCHAR(8000) 
DECLARE		@v_CountStr3			VARCHAR(8000) 
DECLARE		@v_QDTColStr			VARCHAR(8000) 
DECLARE		@v_WLTColStr			VARCHAR(8000) 
DECLARE		@v_WLTColStr1			VARCHAR(8000) 
DECLARE		@v_UserId			INT 
DECLARE		@v_UserName			NVARCHAR(63) 
DECLARE		@v_queueFilterStr		NVARCHAR(100) 
DECLARE		@v_queueFilterStr1		NVARCHAR(100) 
DECLARE		@v_existsFlag			INT
DECLARE		@v_retval				INT 
DECLARE		@v_QueryFilter			VARCHAR(max) 
DECLARE		@v_QueryFilterUG		VARCHAR(max) 
DECLARE		@v_QueryFilterQueue		VARCHAR(max) 
DECLARE		@v_CursorQueryFilter	INT 
DECLARE		@v_innerOrderBy			NVARChar(200) 
DECLARE		@v_orderByPos			INT 
DECLARE		@v_tempFilter			NVARCHAR(2000) 
DECLARE		@v_counter			INT 
DECLARE		@v_counter1			INT 
DECLARE		@v_noOfCounters			INT /* Bugzilla Bug 1703 */
DECLARE		@v_counterCondition		INT 
DECLARE		@v_CursorAlias			INT 
DECLARE		@v_AliasStr			NVARCHAR(max) 
DECLARE		@v_ExtAlias			NVARCHAR(max)
DECLARE		@v_Param1ExtAlias   NVARCHAR(max)
DECLARE		@v_PARAM1			NVARCHAR(255) 
DECLARE		@v_ALIAS			NVARCHAR(255) 
DECLARE		@v_ToReturn			NVARCHAR(1) 
DECLARE		@v_OrderByStr			NVARChar(2000) 
DECLARE		@v_sortStr			NVARCHAR(6) 
DECLARE		@v_op				CHAR(1) 
DECLARE		@v_sortFieldStr			NVARCHAR(50) 
DECLARE		@v_quoteChar 			CHAR(1) 
DECLARE		@v_tempDataType			NVARCHAR(50) 
DECLARE		@v_TempColumnName		NVARCHAR(256) 
DECLARE		@v_TempColumnVal		NVARCHAR(1000) 
DECLARE		@v_TempSortOrder		NVARCHAR(6) 
DECLARE		@v_TempOperator			NVARCHAR(3) 
DECLARE		@v_lastValueStr			NVARCHAR(1000) 
DECLARE		@v_TemplastValueStr		NVARCHAR(1000) 
DECLARE 	@DBmainCode			INT 
DECLARE 	@DBsubCode				INT 
DECLARE		@v_returnCount                  INT
DECLARE		@v_TempCount			INT
DECLARE		@v_innerOrderByCol1		NVARCHAR(64) 
DECLARE		@v_innerOrderByCol2		NVARCHAR(64) 
DECLARE		@v_innerOrderByCol3		NVARCHAR(64) 
DECLARE		@v_innerOrderByCol4		NVARCHAR(64) 
DECLARE		@v_innerOrderByCol5		NVARCHAR(64) 
DECLARE		@v_innerOrderBySort1		NVARCHAR(6) 
DECLARE		@v_innerOrderBySort2		NVARCHAR(6) 
DECLARE		@v_innerOrderBySort3		NVARCHAR(6) 
DECLARE		@v_innerOrderBySort4		NVARCHAR(6) 
DECLARE		@v_innerOrderBySort5		NVARCHAR(6) 
DECLARE		@v_innerOrderByVal1		NVARCHAR(256) 
DECLARE		@v_innerOrderByVal2		NVARCHAR(256) 
DECLARE		@v_innerOrderByVal3		NVARCHAR(256) 
DECLARE		@v_innerOrderByVal4		NVARCHAR(256) 
DECLARE		@v_innerOrderByVal5		NVARCHAR(256) 
DECLARE		@v_innerOrderByType1		NVARCHAR(50) 
DECLARE		@v_innerOrderByType2		NVARCHAR(50) 
DECLARE		@v_innerOrderByType3		NVARCHAR(50) 
DECLARE		@v_innerOrderByType4		NVARCHAR(50) 
DECLARE		@v_innerOrderByType5		NVARCHAR(50) 
DECLARE		@v_innerOrderByCount		INT 
DECLARE		@v_innerLastValueStr		NVARCHAR(1000) 
DECLARE		@v_CursorLastValue		INT 
DECLARE		@v_reverseOrder			INT 
DECLARE		@v_PositionComma		INT 
DECLARE		@v_prefix			NVARCHAR(50) 
DECLARE		@v_ProcessInstanceId		NVARCHAR(63) 
DECLARE		@v_ProcessdefId			INT 
DECLARE		@v_ProcessName			NVARCHAR(30) 
DECLARE		@v_ActivityId			INT 
DECLARE		@v_ActivityName			NVARCHAR(30) 
DECLARE		@v_PriorityLevel		SMALLINT 
DECLARE		@v_InstrumentStatus		NVARCHAR(1) 
DECLARE		@v_LockStatus			NVARCHAR(1) 
DECLARE		@v_LockedByName			NVARCHAR(63)  
DECLARE		@v_ValidTill			DATETIME 
DECLARE		@v_CreatedByName		NVARCHAR(63) 
DECLARE		@v_CreatedDateTime		DATETIME 
DECLARE		@v_StateName			NVARCHAR(255) 
DECLARE		@v_CheckListCompleteFlag	NVARCHAR(1) 
DECLARE		@v_EntryDateTime		DATETIME 
DECLARE		@v_LockedTime			DATETIME 
DECLARE		@v_IntroductionDateTime		DATETIME 
DECLARE		@v_IntroducedBy			NVARCHAR(63) 
DECLARE		@v_AssignedUser			NVARCHAR(70) 
DECLARE		@v_WorkitemId			INT 
DECLARE		@v_QueueName			NVARCHAR(63)  
DECLARE		@v_AssignmentType		NVARCHAR(1) 
DECLARE		@v_ProcessInstanceState		INT 
DECLARE		@v_QueueType			NVARCHAR(1) 
DECLARE		@v_Status			NVARCHAR(255) 
DECLARE		@v_Q_QueueId			INT 
DECLARE		@v_ReferredByName		NVARCHAR(63) 
DECLARE		@v_ReferredTo			INT 
DECLARE		@v_Q_UserId			INT 
DECLARE		@v_FilterValue			NVARCHAR(63)	/*WFS_8.0_030*/ 
DECLARE		@v_Q_StreamId			INT 
DECLARE		@v_Collectflag			NVARCHAR(1) 
DECLARE		@v_ParentWorkitemId		INT 
DECLARE		@v_ProcessedBy			NVARCHAR(63) 
DECLARE		@v_LastProcessedBy		INT 
DECLARE		@v_ProcessVersion		SMALLINT 
DECLARE		@v_WorkItemState		INT 
DECLARE		@v_PreviousStage		NVARCHAR(30) 
DECLARE		@v_ExpectedWorkItemDelay	DATETIME 
DECLARE		@v_VAR_INT1			SMALLINT 
DECLARE		@v_VAR_INT2			SMALLINT 
DECLARE		@v_VAR_INT3			SMALLINT 
DECLARE		@v_VAR_INT4			SMALLINT 
DECLARE		@v_VAR_INT5			SMALLINT 
DECLARE		@v_VAR_INT6			SMALLINT 
DECLARE		@v_VAR_INT7			SMALLINT 
DECLARE		@v_VAR_INT8			SMALLINT 
DECLARE		@v_VAR_FLOAT1			NUMERIC(15,2)   
DECLARE		@v_VAR_FLOAT2			NUMERIC(15,2)  
DECLARE		@v_VAR_DATE1			DATETIME 
DECLARE		@v_VAR_DATE2			DATETIME 
DECLARE		@v_VAR_DATE3			DATETIME 
DECLARE		@v_VAR_DATE4			DATETIME 
DECLARE		@v_VAR_DATE5			DATETIME
DECLARE		@v_VAR_DATE6			DATETIME 
DECLARE		@v_VAR_LONG1			INT 
DECLARE		@v_VAR_LONG2			INT 
DECLARE		@v_VAR_LONG3			INT 
DECLARE		@v_VAR_LONG4			INT 
DECLARE		@v_VAR_LONG5			INT
DECLARE		@v_VAR_LONG6			INT 
DECLARE		@v_VAR_STR1			NVARCHAR(255) 
DECLARE		@v_VAR_STR2			NVARCHAR(255) 
DECLARE		@v_VAR_STR3			NVARCHAR(255) 
DECLARE		@v_VAR_STR4			NVARCHAR(255) 
DECLARE		@v_VAR_STR5			NVARCHAR(255) 
DECLARE		@v_VAR_STR6			NVARCHAR(255) 
DECLARE		@v_VAR_STR7			NVARCHAR(255) 
DECLARE		@v_VAR_STR8			NVARCHAR(255)
DECLARE		@v_VAR_STR9			NVARCHAR(255)
DECLARE		@v_VAR_STR10		NVARCHAR(255)
DECLARE		@v_VAR_STR11 		NVARCHAR(255)
DECLARE		@v_VAR_STR12		NVARCHAR(255)
DECLARE		@v_VAR_STR13		NVARCHAR(255)
DECLARE		@v_VAR_STR14		NVARCHAR(255)
DECLARE		@v_VAR_STR15		NVARCHAR(255)
DECLARE		@v_VAR_STR16		NVARCHAR(255)
DECLARE		@v_VAR_STR17		NVARCHAR(255)
DECLARE		@v_VAR_STR18		NVARCHAR(255)
DECLARE		@v_VAR_STR19		NVARCHAR(255)
DECLARE		@v_VAR_STR20		NVARCHAR(255)  
DECLARE		@v_ParsedQueryFilter VARCHAR(8000)
DECLARE		@v_groupID			INT 
DECLARE		@v_QueueFilter			NVARCHAR(2000) 
DECLARE		@v_TempQueryFilter		NVARCHAR(2000)
DECLARE		@v_AliasProcessFilter	NVARCHAR(50)
DECLARE		@v_ProcessFilter	NVARCHAR(50)
DECLARE		@v_CommonProcessQuery	NVARCHAR(255)
DECLARE		@v_CommonTempId			INT
DECLARE		@v_CommonTableCount		INT
DECLARE		@v_CommonProcessDefId 	INT
DECLARE     @v_outAliasProcessDefId        INT
DECLARE		@v_CommonProcessCounter	INT
DECLARE		@v_tableName      NVARCHAR(50)
DECLARE		@v_CountCursor                 INT
DECLARE		@v_VariableId1			INT
DECLARE		@v_JoinExtTable			INT
DECLARE		@v_extTableName		NVARCHAR(50)
DECLARE		@v_extTable_QDT_JoinStr		NVARCHAR(256)
DECLARE		@v_SearchQueueType		NVARCHAR(1)
DECLARE		@v_RowIdQuery			NVARCHAR(50)
DECLARE		@v_extTable_WFI_JoinStr	    NVARCHAR(2000)

DECLARE		@v_FunctionPos		INT
DECLARE		@v_funPos1			INT
DECLARE		@v_funPos2			INT
DECLARE		@v_FunValue			VARCHAR(8000)
DECLARE		@queryFunStr		NVARCHAR(4000)
DECLARE		@v_functionFlag		NVARCHAR(1)
DECLARE		@v_prevFilter		VARCHAR(8000)
DECLARE		@v_funFilter		NVARCHAR(2000)
DECLARE		@v_postFilter		VARCHAR(8000)
DECLARE		@v_tempFunStr  		NVARCHAR(200)
DECLARE		@v_FunLength		INT
DECLARE  	@v_tableNameFilter	NVARCHAR(64)
DECLARE  	@routingFilterString	NVARCHAR(100)
DECLARE  	@qdtColString 		VARCHAR(8000) 
DECLARE 	@v_NullFlag		VARCHAR(2)
BEGIN 
	SELECT @DBmainCode = 0 
	SELECT @DBsubCode = 0 
	SELECT @v_returnCount = 0 /*Bugzilla Id 1680*/
	SELECT @v_CommonProcessDefId = 0
	SELECT @v_AliasProcessFilter = ' AND ProcessDefId = 0 '
	SELECT @v_VariableId1 = 0
	SELECT @v_JoinExtTable = 0 /*	Default 0 means External Table join not required.*/
	SELECT @v_quoteChar = CHAR(39)  
	SELECT @v_SearchQueueType = N'T'
	SELECT @v_NullFlag ='Y'
	/* Check for session validity ... */  
	BEGIN 
		SELECT @v_UserId = UserID, @v_UserName = UserName  
		FROM WFSessionView, WFUserView 
		WHERE UserId = UserIndex AND SessionID = @DBsessionId 

		SELECT @v_rowcount = @@ROWCOUNT  
		SELECT @v_DBStatus = @@ERROR 
	END 


	IF (@v_DBStatus <> 0 OR @v_rowcount <= 0) 
	BEGIN 
		SELECT @DBmainCode = 11     /* Invalid Session */
		SELECT @DBsubCode = 0 
		SELECT MainCode = @DBmainCode, SubCode = @DBsubCode, ReturnCount = @v_returnCount/*Bugzilla Id 1680*/
		RETURN 
	END
	
	--SELECT @v_queueFilterStr = ' WHERE 1 = 1 '  
	/* Add filer on the basis of queue ... */  
	/* 
		For Search  @DBqueueId = -1
		For MyQueue @DBqueueId = 0
	*/
	IF (@DBqueueId > 0)  
	BEGIN 
		--SELECT @v_queueFilterStr = ' Q_QueueId = ' + CONVERT(NVarchar(10),@DBqueueId) + ' ' 

		/* Checking Whether or not the User has rights on the Queue */
		/* Changed By Varun Bhansaly On 05/06/2007 for Bugzilla Bug 1016 */
		BEGIN  
			SELECT TOP 1 @v_existsFlag = 1
			FROM QUserGroupView 
			WHERE QueueId = @DBqueueId And 
				  UserId = @v_UserId 

			SELECT @v_rowcount = @@ROWCOUNT	 
			IF (@v_rowcount <= 0) 
			BEGIN 
				SELECT @DBmainCode = 300  
				SELECT @DBsubCode = 810  
				SELECT MainCode = @DBmainCode, SubCode = @DBsubCode, ReturnCount = @v_returnCount/*Bugzilla Id 1680*/
				RETURN  
			END  
		END  
		
		SELECT @v_filterOption = FilterOption, @v_FilterValue = FilterValue, @v_QueueType = QueueType, @v_QueueFilter = QueueFilter, @v_ProcessName = ProcessName	/*WFS_8.0_030*/ 
		FROM QueueDeftable (NOLOCK) 
		WHERE QueueID = @DBqueueId 

		SELECT @v_rowcount = @@ROWCOUNT 

		IF(@v_rowcount > 0)  
		BEGIN 
			IF (@v_QueueType <> @v_SearchQueueType) /* Q_QueueId filter considered in case not filter Queue*/
			BEGIN
				SELECT @v_queueFilterStr = ' Where  Q_QueueId = ' + CONVERT(NVarchar(10),@DBqueueId) + ' ' 	
				SELECT @v_queueFilterStr1 = ' AND Q_QueueId = ' + CONVERT(NVarchar(10),@DBqueueId) + ' ' 
			END
			IF(@v_filterOption = 2) 
			BEGIN 
				SELECT @v_filterStr = ' AND ' + @v_FilterValue  + ' = ' + CONVERT(NVarchar(10), @v_UserId)	/*WFS_8.0_030*/ 
			END 
			ELSE IF(@v_filterOption = 3) 
			BEGIN 
				SELECT @v_filterStr = ' AND ' + @v_FilterValue  + ' != ' + CONVERT(NVarchar(10), @v_UserId)	/*WFS_8.0_030*/ 
			END  
			
			
			IF (@v_ProcessName IS NOT NULL) 
				Select @v_extTableName = TableName from ExtDbConfTable (NOLOCK) 
				where ProcessDefId = 
					(Select Max(ProcessDefId) from ProcessDefTable (NOLOCK) WHERE processName = @v_ProcessName) 
				and ExtObjId = 1
						
		END 

		/* QueryFilter to be evaluated... */  
		BEGIN 
			/* Case -> Check Whether a Filter is Associated with a User */
			SELECT @v_QueryFilter = QueryFilter   
			FROM QueueUserTable (NOLOCK) 
			WHERE QueueId = @DBqueueId AND UserId = @v_UserId AND AssociationType = 0
			
			SELECT @v_rowcount = @@ROWCOUNT 
		END 
		IF(@v_rowcount > 0)  
		BEGIN 
			IF (@v_QueryFilter IS NOT NULL) 
			BEGIN 
				SELECT @v_QueryFilter = REPLACE(@v_QueryFilter, '&<UserIndex>&', @v_UserId) 
				SELECT @v_QueryFilter = REPLACE(@v_QueryFilter, '&<UserName>&', @v_UserName) 
				EXECUTE WFParseQueryFilter @v_QueryFilter, N'U', @v_UserId, @v_ParsedQueryFilter OUT
				/* As per specifications, User Filters will not contain &<GroupIndex.*>&. Hence ignored */
				SELECT @v_QueryFilter = @v_ParsedQueryFilter
				SELECT @v_orderByPos = CHARINDEX('ORDER BY', UPPER(@v_QueryFilter)) 
				IF (@v_orderByPos <> 0)  
				BEGIN 
					IF (@DBClientOrderFlag = N'N') 
						SELECT @v_innerOrderBy = SUBSTRING(@v_queryFilter, @v_orderByPos + LEN('ORDER BY'), LEN(@v_queryFilter))
					SELECT @v_queryFilter = SUBSTRING(@v_queryFilter, 1, @v_orderByPos - 1) 
				END  
			END  
		END 
		ELSE 
		BEGIN 
			/* User is not directly associated in Queue, rather is showing like this due to some group is added in queue and user is added in that group*/  
			/* Case -> Group is Associated With the Queue and User is added in that group */
			SELECT @v_QueryStr = 'SELECT QueryFilter, GroupId FROM QUserGroupView WHERE QueueId = ' + CONVERT(NVarchar(10), @DBqueueId) + ' AND UserId = '  + CONVERT(NVarchar(10), @v_UserId) + ' AND GroupId IS NOT NULL'  
			EXECUTE('DECLARE CursorQueryFilter CURSOR Fast_Forward FOR ' + @v_QueryStr) 
			OPEN CursorQueryFilter 

			/* Fetch next row and close cursor in case of error */  
			SELECT @v_counter = 0
			FETCH NEXT FROM CursorQueryFilter INTO @v_QueryFilter, @v_groupID
			WHILE (@@FETCH_STATUS = 0)  
			BEGIN 
				SELECT @v_QueryFilter = LTRIM(RTRIM(@v_queryFilter))
				IF (@v_QueryFilter IS NOT NULL AND LEN(@v_queryFilter) > 0) 
				BEGIN 
					SELECT @v_QueryFilter = replace(@v_QueryFilter, '&<UserIndex>&', @v_UserId) 
					SELECT @v_QueryFilter = REPLACE(@v_QueryFilter, '&<UserName>&', @v_UserName)

					SELECT @v_orderByPos = CHARINDEX('ORDER BY', UPPER(@v_QueryFilter)) 
					IF (@v_orderByPos <> 0) 
					BEGIN 
						IF (@DBClientOrderFlag = N'N')/*WFS_8.0_120*/
						  SELECT @v_innerOrderBy = SUBSTRING(@v_queryFilter, @v_orderByPos + LEN('ORDER BY'), LEN(@v_queryFilter))
						  SELECT @v_queryFilter = SUBSTRING(@v_queryFilter, 1, @v_orderByPos - 1)  
					END  
					/* User Filters can contain &<UserIndex.*>& */
					EXECUTE WFParseQueryFilter @v_QueryFilter, N'U', @v_UserId, @v_ParsedQueryFilter OUT
					SELECT @v_QueryFilter = @v_ParsedQueryFilter

					EXECUTE WFParseQueryFilter @v_QueryFilter, N'G', @v_groupID, @v_ParsedQueryFilter OUT
					SELECT @v_QueryFilter = @v_ParsedQueryFilter

					IF (LEN(@v_queryFilter) > 0)
					BEGIN
						/* If multiple groups added to the queue and if logged in user is a member of more than 1 group, 
						 *	all such group filters to be ORed together. 
						 */
						SELECT @v_queryFilter = '(' + @v_queryFilter + ')'
						IF (@v_counter = 0) 
						BEGIN 
							SELECT @v_tempFilter = ISNULL(@v_tempFilter, '') + @v_queryFilter
						END 
						ELSE  
						BEGIN 
							SELECT @v_tempFilter = @v_tempFilter + ' OR ' + @v_queryFilter  
						END  
						SELECT @v_counter = @v_counter + 1 
					END
				END
				/* WFS_8.0_046 */
				ELSE
				BEGIN
					SELECT @v_tempFilter = ''
					BREAK
				END
				FETCH NEXT FROM CursorQueryFilter INTO @v_QueryFilter, @v_groupID  
			END 
			 
			SELECT @v_queryFilter = @v_tempFilter
			/* Close and DeAllocate the CURSOR */ 
			CLOSE CursorQueryFilter 
			DEALLOCATE CursorQueryFilter 
		END		
		
		SELECT @v_QueryFilterUG =''
		SELECT @v_QueryFilterUG = @v_queryFilter
		BEGIN /* Query Filter IS NULL, for No Assignment Queues, check for Queue Filter */
			IF ((@v_QueueType = N'N' OR @v_QueueType = N'T' OR @v_QueueType = N'M') AND @v_queueFilter IS NOT NULL AND LEN(@v_queueFilter) > 0)
			BEGIN
				SELECT @v_queryFilter = LTRIM(RTRIM(@v_queueFilter))
				SELECT @v_QueryFilter = REPLACE(@v_QueryFilter, '&<UserIndex>&', @v_UserId) 
				SELECT @v_QueryFilter = REPLACE(@v_QueryFilter, '&<UserName>&', @v_UserName)
				SELECT @v_orderByPos = CHARINDEX('ORDER BY', UPPER(@v_QueryFilter)) 
				IF (@v_orderByPos <> 0) 
				BEGIN 
					IF (@DBClientOrderFlag = N'N')/*WFS_8.0_120*/				
					SELECT @v_innerOrderBy = SUBSTRING(@v_queryFilter, @v_orderByPos + LEN('ORDER BY'), LEN(@v_queryFilter))
					SELECT @v_queryFilter = SUBSTRING(@v_queryFilter, 1, @v_orderByPos - 1)  
				END  
				EXECUTE WFParseQueryFilter @v_QueryFilter, N'U', @v_UserId, @v_ParsedQueryFilter OUT
				SELECT @v_QueryFilter = @v_ParsedQueryFilter
				SELECT @v_TempQueryFilter = @v_queryFilter
				SELECT @v_QueryStr = 'SELECT GroupId FROM QUserGroupView WHERE QueueId = ' + CONVERT(NVarchar(10), @DBqueueId) + ' AND UserId = '  + CONVERT(NVarchar(10), @v_UserId) + ' AND GroupId IS NOT NULL'  
				EXECUTE('DECLARE CursorQueryFilter CURSOR Fast_Forward FOR ' + @v_QueryStr) 
				OPEN CursorQueryFilter 
				/* Fetch next row and close cursor in case of error */  
				SELECT @v_counter = 0
				SELECT @v_QueryFilterQueue = ''
				SELECT @v_tempFilter = ''
				FETCH NEXT FROM CursorQueryFilter INTO @v_groupID
				WHILE (@@FETCH_STATUS = 0)  
				BEGIN
					/** User can be member of multiple groups, for each of the groups, replace &<GroupIndex.*>& with respective values.
					  * If logged in user is member of 2 groups and both of the groups have rights on the Queue.
					  * Parsed version of filter VAR_INT1 = 1000 AND VAR_STR1 = &<GroupIndex.City>& will be like
					  * ((VAR_INT1 =1000 AND VAR_STR1 = 'Pune') OR (VAR_INT1 =1000 AND VAR_STR1 = 'Kolkata'))
					  * Though it should be like ((VAR_INT1 =1000 AND (VAR_STR1 = 'Pune' OR VAR_STR1 = 'Kolkata'))
					*/
					SELECT @v_QueryFilter = @v_TempQueryFilter 
					EXECUTE WFParseQueryFilter @v_QueryFilter, N'G', @v_groupID, @v_ParsedQueryFilter OUT
					SELECT @v_QueryFilter = @v_ParsedQueryFilter
					IF (LEN(@v_queryFilter) > 0)
					BEGIN
						SELECT @v_queryFilter = '(' + @v_queryFilter + ')'
						IF (@v_counter = 0) 
						BEGIN 
							SELECT @v_tempFilter = ISNULL(@v_tempFilter, '') + @v_queryFilter
						END 
						ELSE  
						BEGIN 
							SELECT @v_tempFilter = @v_tempFilter + ' OR ' + @v_queryFilter  
						END  
						SELECT @v_counter = @v_counter + 1 
					END
					FETCH NEXT FROM CursorQueryFilter INTO @v_groupID  
				END 
				
				IF(@v_tempFilter IS NOT NULL AND LEN(LTRIM(RTRIM(@v_tempFilter))) > 0 )
				BEGIN
					SELECT @v_queryFilter = @v_tempFilter 
				END
				IF (LEN(@v_queryFilter) > 0)
					--SELECT @v_queryFilter = ' AND ( ' + @v_queryFilter +')'
					SELECT @v_QueryFilterQueue = @v_queryFilter
				/* Close and DeAllocate the CURSOR */ 
				CLOSE CursorQueryFilter 
				DEALLOCATE CursorQueryFilter 
			END
		END
		IF(@v_queryFilter IS NOT NULL AND LEN(LTRIM(RTRIM(@v_queryFilter))) > 0)
		BEGIN
			IF((@v_QueryFilterUG IS NOT NULL AND LEN(LTRIM(RTRIM(@v_QueryFilterUG))) > 0) AND
			(@v_QueryFilterQueue IS NOT NULL AND LEN(LTRIM(RTRIM(@v_QueryFilterQueue))) > 0))
				SELECT @v_queryFilter = ' AND ( ' + @v_QueryFilterUG+ ' AND '+@v_QueryFilterQueue+')'
			ELSE IF(@v_QueryFilterUG IS NULL OR @v_QueryFilterUG = '')
				SELECT @v_queryFilter = ' AND ( ' + @v_QueryFilterQueue+')'
			ELSE IF(@v_QueryFilterQueue IS NULL OR @v_QueryFilterQueue = '')
				SELECT @v_queryFilter = ' AND ( ' + @v_QueryFilterUG+')'
		END
	END 
	ELSE 
	BEGIN 
		IF (@DBProcessAlias = N'Y' AND @DBProcessDefId = -1) 
		BEGIN
			SELECT @v_Counter = 0
			SELECT @v_CommonTableCount = 0
			WHILE (@v_Counter < 1) 
 			BEGIN /* Bugzilla Bug 1703 */
				IF (@v_Counter = 0) 
				BEGIN
					SELECT @v_tableNameFilter = ' AND RoutingStatus in ( ' +@v_quoteChar + 'N'+ @v_quoteChar + ',' + @v_quoteChar + 'R' + @v_quoteChar+ ') AND ACTIVITYTYPE!=32'
				END
				/*ELSE IF (@v_Counter = 1) 
				BEGIN
					SELECT @v_tableName = 'WorkInProcessTable'
   				END
				ELSE IF (@v_Counter = 2)
				BEGIN
					SELECT @v_tableName = 'PendingWorkListTable'
				END
				*/
				SELECT @v_Counter = @v_Counter + 1
				/*SELECT @v_CommonProcessQuery = 'SELECT DISTINCT ProcessDefId from ' + @v_tableName*/
				SELECT @v_CommonProcessQuery = 'SELECT DISTINCT ProcessDefId from WFInstrumentTable (NOLOCK) WHERE 1 = 1 ' + @v_tableNameFilter 
				IF (@DBuserFilterStr IS NOT NULL) 
				BEGIN
					SELECT @v_CommonProcessQuery = @v_CommonProcessQuery + ' AND Q_USERID = ' + CONVERT(NVarchar(10), @v_UserId)
				END
				
				EXECUTE('DECLARE CommonProcessCursor CURSOR Fast_Forward FOR ' + @v_CommonProcessQuery) 
				OPEN CommonProcessCursor 
				SELECT @v_CommonProcessCounter = 0
				
				FETCH NEXT FROM CommonProcessCursor INTO @v_CommonTempId
				WHILE (@@FETCH_STATUS = 0) 
				BEGIN
					SELECT @v_CommonProcessCounter = @v_CommonProcessCounter + 1
					if (@v_CommonProcessCounter > 1) 
					BEGIN
						BREAK
					END
					FETCH NEXT FROM CommonProcessCursor INTO @v_CommonTempId
				END 
				CLOSE CommonProcessCursor
				DEALLOCATE CommonProcessCursor

				IF (@v_CommonProcessCounter = 1)
				BEGIN
					IF (@v_CommonTableCount = 0) 
						BEGIN
						SELECT @v_CommonProcessDefId = @v_CommonTempId
						SELECT @v_CommonTableCount =  @v_CommonTableCount + 1
						END
						ELSE IF (@v_CommonProcessDefId <> @v_CommonTempId) 
						BEGIN
							SELECT @v_CommonProcessDefId = 0
							BREAK
						END
				END
				ELSE IF (@v_CommonProcessCounter > 1) 
				BEGIN
					SELECT @v_CommonProcessDefId = 0
					BREAK
				END				
			END
			SELECT @v_AliasProcessFilter = ' AND ProcessDefId = ' + CONVERT(NVarchar(10), @v_CommonProcessDefId)
			SELECT @v_outAliasProcessDefId = @v_CommonProcessDefId 
		END
		ELSE IF (@DBProcessAlias = N'Y' AND @DBProcessDefId > -1) 
		BEGIN
			IF (@DBProcessDefId > 0 ) 
			BEGIN
				SELECT @v_AliasProcessFilter = ' AND ProcessDefId = ' + CONVERT(NVarchar(10), @DBProcessDefId)
				SELECT @v_ProcessFilter = ' AND ProcessDefId = ' + CONVERT(NVarchar(10), @DBProcessDefId)
				SELECT @v_outAliasProcessDefId = @DBProcessDefId
			END
		END
		
	END

	IF (@v_queryFilter IS NOT NULL AND LEN(LTRIM(RTRIM(@v_queryFilter))) > 0)  
		BEGIN			
			SELECT @v_FunctionPos = CHARINDEX('&<FUNCTION>&', @v_QueryFilter)
			IF(@v_FunctionPos <> 0)
			BEGIN	
			SELECT @v_FunLength = LEN('&<FUNCTION>&')
			SELECT @v_functionFlag = 'Y'
			WHILE(@v_functionFlag = 'Y')
				BEGIN					
					SELECT @v_prevFilter = SUBSTRING(@v_QueryFilter, 0, @v_FunctionPos-1)
					SELECT @v_funPos1 = CHARINDEX('{', @v_QueryFilter)			
					
					SELECT @v_tempFunStr = SUBSTRING(@v_QueryFilter, @v_FunctionPos + @v_FunLength, @v_funPos1 - (@v_FunctionPos + @v_FunLength))
					SELECT @v_tempFunStr = LTRIM(RTRIM(@v_tempFunStr))					
					
					IF (@v_tempFunStr IS NULL OR LEN(@v_tempFunStr) = 0)
					BEGIN
						SELECT @v_funPos2 = CHARINDEX('}', @v_QueryFilter)
						SELECT @v_funFilter = SUBSTRING(@v_QueryFilter, @v_funPos1 + 1, @v_funPos2 - @v_funPos1 -1)
						
						SELECT @v_postFilter = STUFF(@v_QueryFilter, 1, @v_funPos2 + 1, NULL)						
						IF(@v_postFilter IS NULL OR LEN(@v_postFilter) = 0)
						BEGIN
							IF(CHARINDEX('(', @v_prevFilter) <> 0)
							BEGIN
								SELECT @v_postFilter = ')'
							END
						END							
						SELECT @queryFunStr  = 'SELECT @v_FunValue = dbo.' + @v_funFilter				
						
						EXEC SP_EXECUTESQL
							@query = @queryFunStr, 
							@params = N'@v_FunValue NVARCHAR(4000) OUTPUT', 
							@v_FunValue = @v_FunValue OUTPUT						
						
						SELECT @v_QueryFilter = @v_prevFilter + ' ' + @v_FunValue + ' ' + @v_postFilter
					END	
					ELSE
					BEGIN
						BREAK
					END							
					SELECT @v_FunctionPos = CHARINDEX('&<FUNCTION>&', @v_QueryFilter)					
					IF(@v_FunctionPos is null OR @v_FunctionPos = 0)
					BEGIN
						SELECT @v_functionFlag = 'N'
					END					
				END				
			END
		END	

	/* Bugzilla Bug 1390, Alias on system variables not working, 13/07/2007 - Ruhi Hira */
	IF (@DBdataFlag = N'Y' OR  @DBorderBy > 100 OR @v_queryFilter is NOT NULL OR @DBreturnParam=1)  
	BEGIN  
		SELECT @v_QueryStr = 'SELECT PARAM1, ALIAS, ToReturn, VariableId1 FROM VarAliasTable (NOLOCK) WHERE QueueId = ' + CONVERT(NVarchar(10), @DBqueueId) + ISNULL(@v_AliasProcessFilter, '') + ' ORDER BY ID ASC' 
		
		EXECUTE ('DECLARE CursorAlias CURSOR Fast_Forward FOR ' + @v_QueryStr) 

		OPEN CursorAlias 

		/* Fetch next row and close cursor in case of error */  
		SELECT @v_counter = 0    
		FETCH NEXT FROM CursorAlias INTO @v_PARAM1, @v_ALIAS, @v_ToReturn, @v_VariableId1
		WHILE (@@FETCH_STATUS = 0)  
		BEGIN 
			SELECT @v_counter = @v_counter + 1 
			IF (@v_ToReturn = N'Y') 
			BEGIN 
				IF(@v_PARAM1 = Upper('CreatedDateTime'))
				BEGIN
					SELECT @v_PARAM1 = 'WFInstrumentTable.' + @v_PARAM1
				END
				IF(@v_VariableId1 < 157 OR (@v_VariableId1 > 10005 AND @v_VariableId1 < 10022) )
				BEGIN	
					SELECT @v_AliasStr =  ISNULL(@v_AliasStr,'') + ', ' + @v_PARAM1 + ' AS "' + @v_ALIAS +'"'  
				END
				SELECT @v_ExtAlias =  ISNULL(@v_ExtAlias, '') + ', ' +'"' + @v_ALIAS +'"'  
				
			END  

			IF (@DBorderBy > 100) 
				IF (@v_VariableId1 = @DBorderBy) 
				BEGIN	
					IF(@DBorderBy < 157)
					BEGIN
						SELECT @v_sortFieldStr = ' ' + @v_PARAM1 + ' ' 
					END
					ELSE
					BEGIN
						SELECT @v_sortFieldStr = ' ' + @v_ALIAS + ' ' 
					END
					IF(LEN(@DBlastValue) > 0)  
					BEGIN 
						SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar   
					END 					
				END
			IF ((@v_VariableId1 > 157 AND (@v_VariableId1 < 10006 OR @v_VariableId1 > 10021)) AND @v_extTableName IS NOT NULL)
			BEGIN
				SELECT @v_JoinExtTable = 1
				SELECT @v_Param1ExtAlias = ISNULL(@v_Param1ExtAlias,'')  + ', ' + @v_PARAM1 + ' AS ' + @v_ALIAS
			END

			/*IF (@DBorderBy > 100) WFS_8.0_047 
			BEGIN 
				IF (@v_counter = @DBorderBy - 100)  
				BEGIN 
					SELECT @v_sortFieldStr = ' ' + @v_PARAM1 + ' '  
				END  
			END */ 
			FETCH NEXT FROM CursorAlias INTO @v_PARAM1, @v_ALIAS, @v_ToReturn, @v_VariableId1
		END  
		/* Close and DeAllocate the cursor */ 
		CLOSE CursorAlias 
		DEALLOCATE CursorAlias 
	END  
	/* Subcode assigned for Bug 41579*/
	IF (@DBorderBy > 100 AND @v_sortFieldStr IS NULL)
	BEGIN 
		SELECT @DBmainCode = 400     /* Invalid Session */
		SELECT @DBsubCode = 852
		SELECT MainCode = @DBmainCode, SubCode = @DBsubCode, ReturnCount = @v_returnCount/*Bugzilla Id 1680*/
		RETURN 
	END

	IF (@v_JoinExtTable = 1)
		BEGIN
			/*SELECT @v_extTable_QDT_JoinStr = ' LEFT OUTER JOIN ' + @v_extTableName + ' ON (QUEUEDATATABLE.VAR_REC_1 = ItemIndex AND QUEUEDATATABLE.VAR_REC_2 = ItemType) '*/
			SELECT @v_extTable_QDT_JoinStr = ' INNER JOIN ' + @v_extTableName + '  WITH (NOLOCK) ON (WFInstrumentTable.VAR_REC_1 = ItemIndex AND WFInstrumentTable.VAR_REC_2 = ItemType) '
			SELECT @v_extTable_WFI_JoinStr =  'INNER JOIN (Select ItemIndex, ItemType ' + @v_Param1ExtAlias +'  from ' + @v_extTableName + ')' + @v_extTableName + ' ON (WFInstrumentTable.VAR_REC_1 = ItemIndex AND WFInstrumentTable.VAR_REC_2 = ItemType)'
		END	
	ELSE	
		BEGIN
			SELECT @v_extTableName = ''
			SELECT @v_extTable_QDT_JoinStr = ''
			SELECT @v_extTable_WFI_JoinStr =  ''
		END	

	/* Define sortOrder */ 
	IF(@DBsortOrder = 'D') 
	BEGIN 
		SELECT @v_reverseOrder = 1  
		SELECT @v_sortStr = ' DESC '  
		SELECT @v_op = '<'  
	END 
	Else /* IF(@DBsortOrder = 'A') */  
	BEGIN 
		SELECT @v_reverseOrder = 0  
		SELECT @v_sortStr = ' ASC '  
		SELECT @v_op = '>'  
	END   
	
	IF (@v_innerOrderBy is NULL)  
	BEGIN 
		IF(@DBorderBy = 1)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar   
			END  
			SELECT @v_sortFieldStr = ' PriorityLevel '  
			SELECT @v_NullFlag ='N'
		END  
		ElSE IF(@DBorderBy = 2)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ProcessInstanceId ' 
			SELECT @v_NullFlag ='N'
		END  
		ElSE IF(@DBorderBy = 3)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END  
			SELECT @v_sortFieldStr = ' ActivityName ' 
			SELECT @v_NullFlag ='N'
		END 
		ElSE IF(@DBorderBy = 4)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' LockedByName ' 
		END 
		ElSE IF(@DBorderBy = 5) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' IntroducedBy ' 
		END 
		ElSE IF(@DBorderBy = 6)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END 	 
			SELECT @v_sortFieldStr = ' InstrumentStatus ' 
		END 
		ElSE IF(@DBorderBy = 7)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END  
			SELECT @v_sortFieldStr = ' CheckListCompleteFlag '  
		END 
		ElSE IF(@DBorderBy = 8)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' LockStatus ' 
			SELECT @v_NullFlag ='N'
		END 
		ElSE IF(@DBorderBy = 9)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @DBlastValue 
			END  
			SELECT @v_sortFieldStr = ' WorkItemState ' 
			SELECT @v_NullFlag ='N'
		END 
		ElSE IF(@DBorderBy = 10) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' EntryDateTime ' 
			SELECT @v_NullFlag ='N'
		END 
		ElSE IF(@DBorderBy = 11)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ValidTill ' 
		END 
		ElSE IF(@DBorderBy = 12)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END 
			SELECT @v_sortFieldStr = ' LockedTime ' 
		END 
		ElSE IF(@DBorderBy = 13)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END 	 
			SELECT @v_sortFieldStr = ' IntroductionDateTime ' 
		END 		
		ElSE IF(@DBorderBy = 16) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' AssignedUser ' 
		END 		
		ElSE IF(@DBorderBy = 17)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' Status ' 
		END 
		ElSE IF(@DBorderBy = 18) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' CreatedDateTime ' 
			SELECT @v_NullFlag ='N'
		END 
		ElSE IF(@DBorderBy = 19) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ExpectedWorkItemDelay ' 
		END 		/* Sorting On Alias */
		ElSE IF(@DBorderBy = 20) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ProcessedBy ' 
		END 		/* Sorting On Alias */
	
		IF(@DBlastProcessInstance IS NOT NULL)  
		/*BEGIN 		
			SELECT @v_TempColumnVal = @v_lastValueStr 

			IF(@DBlastValue IS NOT NULL) 
			BEGIN 
				SELECT @v_lastValueStr = ' AND ( ( ' + @v_sortFieldStr + @v_op + @v_TempColumnVal + ') '   
				SELECT @v_lastValueStr = @v_lastValueStr + ' OR ( ' + @v_sortFieldStr + ' = ' + @v_TempColumnVal 
			END 
			ELSE 
			BEGIN 
				IF(@DBorderBy <> 2 AND @DBorderBy <> 10)
				BEGIN
					SELECT @v_lastValueStr = ' AND  ( ( ' + @v_sortFieldStr + ' IS NULL '  
				END
			END  

			SELECT @v_lastValueStr = @v_lastValueStr + ' AND (  ' 
			SELECT @v_lastValueStr = @v_lastValueStr + ' ( Processinstanceid = ' + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar + ' AND  WorkItemId ' + @v_op + CONVERT(NVarchar(10), (@DBlastWorkItem)) + ' )' 
			SELECT @v_lastValueStr = @v_lastValueStr + ' OR Processinstanceid' + @v_op + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar  
			SELECT @v_lastValueStr = @v_lastValueStr + ' ) '  
			
			IF(@DBlastValue IS NOT NULL) 
			BEGIN 
				IF (@DBsortOrder = N'A' ) 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE  
				BEGIN 
					IF( @DBorderBy <> 2 AND @DBorderBy <> 10 )
						SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NULL )'  
					ELSE
						SELECT @v_lastValueStr = @v_lastValueStr + ')'  
				END 
				SELECT @v_lastValueStr = @v_lastValueStr + ') ' 
			END 
			ELSE  
			BEGIN 
				IF (@DBsortOrder = N'D') 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NOT NULL )'  
				END  
				SELECT @v_lastValueStr = @v_lastValueStr + ') ' 
			END 
		END */
		BEGIN 		
			SELECT @v_TempColumnVal = @v_lastValueStr 
			/*LastValue and LastProcessInstanceId would be same so removing the unwanted condition in case of Fetch In Order of 
			is selected as ProcessInstanceName*/
			IF( @DBorderBy <> 2)
			BEGIN
				IF(@DBlastValue IS NOT NULL) 
				BEGIN 
					SELECT @v_lastValueStr = ' AND (' + @v_sortFieldStr + @v_op + @v_TempColumnVal   
					SELECT @v_lastValueStr = @v_lastValueStr + ' OR ( ' + @v_sortFieldStr + ' = ' + @v_TempColumnVal 
				END 
				ELSE 
				BEGIN 
					IF(@v_NullFlag = 'Y')
					BEGIN
						SELECT @v_lastValueStr = ' AND  ( ( ' + @v_sortFieldStr + ' IS NULL '  
					END
				END  
			END
			IF( @DBorderBy = 2)--Fetch In Order of = ProcessInstanceName
			BEGIN
				SELECT @v_lastValueStr = ' AND (  ' 
				SELECT @v_lastValueStr = @v_lastValueStr + '  Processinstanceid' + @v_op + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar  
				SELECT @v_lastValueStr = @v_lastValueStr + ' OR  ( Processinstanceid = ' + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar + ' AND  WorkItemId ' + @v_op + CONVERT(NVarchar(10), (@DBlastWorkItem)) + ' )' 
				--SELECT @v_lastValueStr = @v_lastValueStr + ' OR Processinstanceid' + @v_op + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar  
				--SELECT @v_lastValueStr = @v_lastValueStr + ' ) '  
				/*Condition To Be Appended = AND ((  ProcessInstanceId >'WFAChild-0000000007-Process')
				OR (ProcessInstanceId  = 'WFAChild-0000000007-Process' AND  WorkItemId >1 ))  ORDER BY ProcessInstanceID  ASC , WorkItemID  ASC */
			END
			ELSE
			BEGIN
				SELECT @v_lastValueStr = @v_lastValueStr + ' AND   ' 
				--SELECT @v_lastValueStr = @v_lastValueStr + ' ( Processinstanceid = ' + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar + ' AND  WorkItemId ' + @v_op + CONVERT(NVarchar(10), (@DBlastWorkItem)) + ' )' 
				SELECT @v_lastValueStr = @v_lastValueStr + '  Processinstanceid' + @v_op + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar  
				SELECT @v_lastValueStr = @v_lastValueStr + '  '  
			END	
			IF(@DBlastValue IS NOT NULL) 
			BEGIN 
				IF (@DBsortOrder = N'A' ) 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE  
				BEGIN 
					IF(@v_NullFlag = 'Y')
						SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NULL )'  
					ELSE
						SELECT @v_lastValueStr = @v_lastValueStr + ')'  
				END 
				IF( @DBorderBy <> 2)
				BEGIN
					SELECT @v_lastValueStr = @v_lastValueStr + ') ' 
				END
			END 
			ELSE  
			BEGIN 
				IF (@DBsortOrder = N'D') 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NOT NULL )'  
				END  
				SELECT @v_lastValueStr = @v_lastValueStr + ') ' 
			END 
		END
		
		
		IF (@DBorderBy = 2 OR @v_sortFieldStr IS NULL OR @v_sortFieldStr = '') 
		BEGIN 
			SELECT @v_orderByStr = ' ORDER BY ProcessInstanceID ' + @v_sortStr + ', WorkItemID ' + @v_sortStr 
		END 
		ELSE  
		BEGIN 
			SELECT @v_orderByStr = ' ORDER BY ' + @v_sortFieldStr + @v_sortStr + ', ProcessInstanceID ' + @v_sortStr + ', WorkItemID ' + @v_sortStr 
		END  
	END /* End Case Inner_Order_By IS NULL*/ 
	ELSE 
	BEGIN 
		SELECT @v_orderByStr = ' ORDER BY '  
		SELECT @v_innerOrderBy = @v_innerOrderBy + ','  

		SELECT @v_PositionComma = CHARINDEX (',', @v_innerOrderBy)  
		SELECT @v_innerOrderByCount = 0  

		WHILE (@v_PositionComma > 0) 
		BEGIN 
			SELECT @v_innerOrderByCount = @v_innerOrderByCount + 1  
			SELECT @v_TempColumnName = SUBSTRING(@v_innerOrderBy, 1 , @v_PositionComma - 1)  

			SELECT @v_orderByPos = CHARINDEX( 'ASC',UPPER(@v_TempColumnName)) 
			IF (@v_orderByPos > 0)  
			BEGIN 
				SELECT @v_TempSortOrder = 'ASC' 
				SELECT @v_TempColumnName = RTRIM(SUBSTRING(@v_TempColumnName, 1, @v_orderByPos -1))  
			END 
			ELSE  
			BEGIN 
				SELECT @v_orderByPos = CHARINDEX( 'DESC',UPPER(@v_TempColumnName)) 
				IF (@v_orderByPos > 0) 
				BEGIN 
					SELECT @v_TempSortOrder = 'DESC' 
					SELECT @v_TempColumnName = RTRIM(SUBSTRING(@v_TempColumnName, 1, @v_orderByPos -1)) 
				END 
				ELSE  
				BEGIN 
					SELECT @v_TempSortOrder = 'ASC'  
				END  
			END  

			IF (@v_reverseOrder = 1)  
			BEGIN 
				IF (@v_TempSortOrder = 'ASC')  
				BEGIN 
					SELECT @v_TempSortOrder = 'DESC'  
				END 
				ELSE  
				BEGIN 
					SELECT @v_TempSortOrder = 'ASC' 
				END   
			END   

			IF (@v_innerOrderByCount = 1)  
			BEGIN 
			IF (@v_TempColumnName IS NULL) 
				SELECT @v_innerLastValueStr = @v_TempColumnName  
			ELSE
				SELECT @v_innerLastValueStr = 'CONVERT(NVARCHAR(256),'+@v_TempColumnName+',121)'  
				SELECT @v_orderByStr = @v_orderByStr + @v_TempColumnName + ' ' + @v_TempSortOrder 
			END 
			ELSE  
			BEGIN 
			IF (@v_TempColumnName IS NULL)
				SELECT @v_innerLastValueStr = @v_innerLastValueStr +  ', ' + @v_TempColumnName  
			ELSE
				SELECT @v_innerLastValueStr = @v_innerLastValueStr +  ', ' + 'CONVERT(NVARCHAR(256),'+@v_TempColumnName+',121)'
				SELECT @v_orderByStr = @v_orderByStr + ', ' + @v_TempColumnName + ' ' + @v_TempSortOrder  
			END  
			
			IF (@v_innerOrderByCount = 1 )  
			BEGIN 
				SELECT @v_innerOrderByCol1 = @v_TempColumnName  
				SELECT @v_innerOrderBySort1 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 2 )  
			BEGIN 
				SELECT @v_innerOrderByCol2 = @v_TempColumnName  
				SELECT @v_innerOrderBySort2 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 3 ) 
			BEGIN 
				SELECT @v_innerOrderByCol3 = @v_TempColumnName  
				SELECT @v_innerOrderBySort3 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 4 )  
			BEGIN 
				SELECT @v_innerOrderByCol4 = @v_TempColumnName  
				SELECT @v_innerOrderBySort4 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 5 )  
			BEGIN 
				SELECT @v_innerOrderByCol5 = @v_TempColumnName 
				SELECT @v_innerOrderBySort5 = @v_TempSortOrder  
			END  
			SELECT @v_innerOrderBy = SUBSTRING(@v_innerOrderBy, @v_PositionComma + 1, LEN(@v_innerOrderBy)) 
			SELECT @v_PositionComma = CHARINDEX (',',@v_innerOrderBy)  
			
		END  
		SELECT @v_orderByStr = @v_orderByStr + ', ' + 'ProcessInstanceID' + @v_sortStr + ', WorkItemID ' + @v_sortStr  
		
		IF(@DBlastProcessInstance IS NOT NULL)  
		BEGIN 
			SELECT @v_counter = 0  

			WHILE (@v_counter < @v_innerOrderByCount)  
			BEGIN 
				SELECT @v_counter = @v_counter + 1  
				IF (@v_counter = 1 )  
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol1 
				END 
				ELSE IF (@v_counter = 2 )  
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol2 
				END 
				ELSE IF (@v_counter = 3 ) 
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol3 
				END 
				ELSE IF (@v_counter = 4 )  
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol4 
				END 
				ELSE IF (@v_counter = 5 ) 
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol5  
				END  

				IF (@v_counter = 1 ) 
				BEGIN 
					SELECT @v_innerOrderByType1 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 2 ) 
				BEGIN 
					SELECT @v_innerOrderByType2 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 3 )  
				BEGIN 
					SELECT @v_innerOrderByType3 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 4 )  
				BEGIN 
					SELECT @v_innerOrderByType4 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 5 )  
				BEGIN 
					SELECT @v_innerOrderByType5 = @v_tempDataType  
				END  
			END  

			IF (@v_innerOrderByCount > 0 )  
			BEGIN 
				SELECT @v_counter = 5 - @v_innerOrderByCount  

				WHILE (@v_counter > 0) 
				BEGIN 
					select @v_innerLastValueStr = @v_innerLastValueStr +  ', NULL'  
					select @v_counter = @v_counter - 1 
				END  
			END  

			BEGIN 
			select @qdtColString = 'ProcessInstanceId, WorkItemId, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,
VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20,InstrumentStatus ,CheckListCompleteFlag ,
    SaveStage, HoldStatus, Status, ReferredTo, ReferredToName, ReferredBy, ReferredByName, ChildProcessInstanceId ChildWorkitemId, ParentWorkItemID, CalendarName,PriorityLevel,EntryDateTime  '
 
				select @v_QueryStr = 'SELECT ' +  @v_innerLastValueStr + ' FROM (SELECT ' + @qdtColString+ ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK) ' + @v_extTable_QDT_JoinStr + ' WHERE PROCESSINSTANCEID = N' + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar + ' AND WORKITEMID = ' + CONVERT(NVarchar(10), (@DBlastWorkItem)) + ') Table0' 

				EXECUTE ('DECLARE CursorLastValue CURSOR Fast_Forward FOR ' + @v_QueryStr) 
				
				OPEN CursorLastValue 
				SELECT @v_counter = 0
				
				FETCH NEXT FROM CursorLastValue INTO @v_innerOrderByVal1, @v_innerOrderByVal2, @v_innerOrderByVal3, @v_innerOrderByVal4, @v_innerOrderByVal5  

				WHILE (@@FETCH_STATUS = 0)  
				BEGIN  
					FETCH NEXT FROM CursorLastValue INTO @v_innerOrderByVal1, @v_innerOrderByVal2, @v_innerOrderByVal3, @v_innerOrderByVal4, @v_innerOrderByVal5  
				END 
				/* Close and DeAllocate the cursor */  
				CLOSE CursorLastValue 
				DEALLOCATE CursorLastValue 					
			END

			SELECT @v_counter = 0 
			SELECT @v_counterCondition = 0  
			SELECT @v_lastValueStr = ' Where ( '  
			WHILE (@v_counter < @v_innerOrderByCount + 1 ) 
			BEGIN 
				SELECT @v_counter1 = 0  
				SELECT @v_TemplastValueStr = ''/*WFS_8.0_120*/
				WHILE (@v_counter1 <= @v_counter) 
				BEGIN 
					IF (@v_counter1 = 0)  
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol1  
						SELECT @v_TempSortOrder = @v_innerOrderBySort1  
						SELECT @v_TempColumnVal = @v_innerOrderByVal1  
						SELECT @v_tempDataType = @v_innerOrderByType1  
					END 
					ELSE IF (@v_counter1 = 1)  
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol2  
						SELECT @v_TempSortOrder = @v_innerOrderBySort2 
						SELECT @v_TempColumnVal = @v_innerOrderByVal2 
						SELECT @v_tempDataType = @v_innerOrderByType2 
					END 
					ELSE IF (@v_counter1 = 2) 
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol3 
						SELECT @v_TempSortOrder = @v_innerOrderBySort3 
						SELECT @v_TempColumnVal = @v_innerOrderByVal3 
						SELECT @v_tempDataType = @v_innerOrderByType3 
					END 
					ELSE IF (@v_counter1 = 3) 
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol4 
						SELECT @v_TempSortOrder = @v_innerOrderBySort4 
						SELECT @v_TempColumnVal = @v_innerOrderByVal4 
						SELECT @v_tempDataType = @v_innerOrderByType4 
					END 
					ELSE IF (@v_counter1 = 4) 
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol5 
						SELECT @v_TempSortOrder = @v_innerOrderBySort5 
						SELECT @v_TempColumnVal = @v_innerOrderByVal5 
						SELECT @v_tempDataType = @v_innerOrderByType5 
					END  

					IF (@v_counter = @v_innerOrderByCount ) 
					BEGIN 
						IF (@v_counter1 < @v_counter) 
						BEGIN 
							IF (@v_TempColumnVal IS NULL) 
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' IS NULL ' 
							END 
							ELSE  
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' = ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
							END  
							SELECT @v_TemplastValueStr = @v_TemplastValueStr + ' AND '  
						END 
					END 
					ELSE 
					BEGIN 
						IF (@v_counter1 = @v_counter) 
						BEGIN 
							IF (@v_TempSortOrder = 'ASC') 
							BEGIN 
								IF (@v_TempColumnVal IS NOT NULL) 
								BEGIN 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' > ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
								END 
								ELSE 
								BEGIN 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' IS NOT NULL ' 
								END  
							END 
							ELSE  
							BEGIN 
								IF (@v_TempColumnVal IS NOT NULL)  
								BEGIN 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + '( '  
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' < ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + ' OR ' +  @v_TempColumnName + ' IS NULL )'  
								END 
								ELSE  
								BEGIN 
									SELECT @v_TemplastValueStr = NULL
								END 	
							END 
						END 
						ELSE  
						BEGIN 
							IF (@v_TempColumnVal IS NOT NULL)  
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' = ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
							END 
							ELSE  
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' IS NULL '  
							END   

							SELECT @v_TemplastValueStr = @v_TemplastValueStr + ' AND '  
						END  
					END 
					SELECT @v_counter1 = @v_counter1 + 1 
				END 

				IF (@v_TemplastValueStr IS NOT NULL) 
				BEGIN 
					IF (@v_counterCondition > 0) 
					BEGIN 
						SELECT @v_lastValueStr = @v_lastValueStr + ' OR ( ' 
					END  
					SELECT @v_lastValueStr = @v_lastValueStr + @v_TemplastValueStr 
					IF (@v_counterCondition > 0 AND @v_counter < @v_innerOrderByCount ) 
					BEGIN 
						SELECT @v_lastValueStr = @v_lastValueStr + ' )'  
					END  
					SELECT @v_counterCondition = @v_counterCondition + 1 
				END  
				SELECT @v_counter = @v_counter + 1  
			END  
			
			SELECT @v_lastValueStr = @v_lastValueStr + ' (  ( Processinstanceid = ' + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar  
			SELECT @v_lastValueStr = @v_lastValueStr + ' AND  WorkItemId ' + @v_op + CONVERT(NVarchar(10), (@DBlastWorkItem)) + ' )'  
			SELECT @v_lastValueStr = @v_lastValueStr + ' OR Processinstanceid' + @v_op + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar  
			SELECT @v_lastValueStr = @v_lastValueStr + ' ) )'  

			IF ( @v_counterCondition > 1 )  
			BEGIN 
				SELECT @v_lastValueStr = @v_lastValueStr + ' )'  
			END   
		END 
	END 
	
	IF(@DBStartingRecNo = 0)
		SELECT @v_RowIdQuery = ''
	ELSE
		SELECT @v_RowIdQuery = ' WHERE row_id > ' + CONVERT(NVarchar(10),@DBStartingRecNo)

	SELECT @v_WLTColStr = ' ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' ReferredByname, ReferredTo, Q_UserID, Q_StreamId, CollectFlag, ParentWorkItemId, ProcessedBy, LastProcessedBy,' + ' ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessVariantId, Q_DivertedByUserId,ActivityType,URN'		/*WFS_8.0_030*//*Process Variant Support Changes*/

	SELECT @v_WLTColStr1 = ' ProcessInstanceId, ' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' ReferredByname, ReferredTo, Q_UserID,  Q_StreamId, CollectFlag, ParentWorkItemId, ProcessedBy, LastProcessedBy,' + ' ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessVariantId, Q_DivertedByUserId,ActivityType,URN'									/*WFS_8.0_030*/
	/*Process Variant Support Changes*/
	
	SELECT @v_QDTColStr = ', VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8,' +' VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6,' + ' VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4, VAR_LONG5, VAR_LONG6,'+ ' VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8 , VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2 ' 

	SELECT @v_prefix = ' TOP  ' + CONVERT(NVarchar(10), @DBbatchSize + 1)

/*	SELECT @v_QueryStr1 = 'SELECT ' + ISNULL(@v_prefix,'') + @v_WLTColStr1 + @v_QDTColStr + ISNULL(@v_ExtAlias,'') + ' FROM (' +' SELECT ' + ' row_number() over ( ' + ISNULL(@v_orderByStr,'') + ' ) as row_id, Table9.* FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM Worklisttable, ProcessInstanceTable, QueueDatatable ' + @v_extTable_QDT_JoinStr + ' WHERE QueueDatatable.ProcessInstanceId = ProcessInstanceTable.ProcessInstanceId' + ' AND Worklisttable.ProcessInstanceId = QueueDatatable.ProcessInstanceId' + ' AND Worklisttable.Workitemid =QueueDatatable.Workitemid '  + ' ) Table9 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@v_ProcessFilter, '') + ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '')  + ISNULL(@v_lastValueStr ,'') + ') Table2'+ ISNULL(@v_orderByStr,'') + ISNULL(@v_RowIdQuery ,'') 
	*/
	
/* Commented for Code optimization 	
	SELECT @v_QueryStr1 = 'SELECT ' + ISNULL(@v_prefix,'') + @v_WLTColStr1 + @v_QDTColStr + ISNULL(@v_ExtAlias,'') + ' FROM (' +' SELECT ' + ' row_number() over ( ' + ISNULL(@v_orderByStr,'') + ' ) as row_id, Table9.* FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable ' + @v_extTable_QDT_JoinStr + ' WHERE '  + ' ) Table9 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@v_ProcessFilter, '') + ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '')  + ISNULL(@v_lastValueStr ,'') + ') Table2'+ ISNULL(@v_orderByStr,'') + ISNULL(@v_RowIdQuery ,'') 
	SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM ( SELECT * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM Worklisttable, ProcessInstanceTable, QueueDatatable '   + @v_extTable_QDT_JoinStr + ' WHERE QueueDatatableQueueDatatable.ProcessInstanceId = ProcessInstanceTable.ProcessInstanceId' + ' AND Worklisttable.ProcessInstanceId = QueueDatatable.ProcessInstanceId' + ' AND Worklisttable.Workitemid =QueueDatatable.Workitemid'  + ' ) Table9 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '') + ') Table2' 

	SELECT @v_QueryStr2 = ' '
	
	SELECT @v_QueryStr2 = ' UNION ALL SELECT ' + ISNULL(@v_prefix,'') + @v_WLTColStr1 + @v_QDTColStr + ISNULL(@v_ExtAlias,'') + ' FROM (' + ' SELECT ' + '  row_number() over ( ' + ISNULL(@v_orderByStr,'') + ' ) as row_id, Table3.* FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WorkInProcesstable, ProcessInstanceTable, QueueDatatable '  + @v_extTable_QDT_JoinStr + ' WHERE QueueDatatable.ProcessInstanceId = ProcessInstanceTable.ProcessInstanceId' + ' AND WorkInProcesstable.ProcessInstanceId = QueueDatatable.ProcessInstanceId' + ' AND WorkInProcesstable.Workitemid =QueueDatatable.Workitemid'  + ' ) Table3 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@v_ProcessFilter, '') + ISNULL(@DBuserFilterStr, '') + ISNULL(@v_filterStr, '') + ISNULL(@v_queryFilter, '') + ISNULL(@v_lastValueStr,'') + ') Table4' + ISNULL(@v_orderByStr,'') + ISNULL(@v_RowIdQuery ,'') 
	
	SELECT @v_CountStr2 = 'SELECT COUNT(*) FROM ( SELECT * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WorkInProcessTable Worklisttable, ProcessInstanceTable, QueueDatatable '  + @v_extTable_QDT_JoinStr + ' WHERE QueueDatatable.ProcessInstanceId = ProcessInstanceTable.ProcessInstanceId' + ' AND Worklisttable.ProcessInstanceId = QueueDatatable.ProcessInstanceId' + ' AND Worklisttable.Workitemid =QueueDatatable.Workitemid '  + ' ) Table9 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '') + ') Table2' 
*/

	SELECT @v_noOfCounters = 1 /* Bugzilla Bug 1703 */
--	SELECT @v_queryStr = @v_QueryStr1  

	SELECT @v_QueryStr3 = ' '
	IF (@DBqueueId = 0) 
	BEGIN 
--		SELECT @v_queryStr = @v_QueryStr + ' UNION ALL ' +  @v_QueryStr2 

	/*	SELECT @v_QueryStr3 = ' UNION ALL SELECT ' + ISNULL(@v_prefix,'') + @v_WLTColStr1 + @v_QDTColStr + ISNULL(@v_ExtAlias,'') + ' FROM (' + ' SELECT '+ ' row_number() over ( ' + ISNULL(@v_orderByStr,'') + ' ) as row_id, Table5.* FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM PendingWorkListTable, ProcessInstanceTable, QueueDatatable ' + @v_extTable_QDT_JoinStr + ' WHERE QueueDatatable.ProcessInstanceId = ProcessInstanceTable.ProcessInstanceId' + ' AND PendingWorkListTable.ProcessInstanceId = QueueDatatable.ProcessInstanceId' + ' AND PendingWorkListTable.Workitemid =QueueDatatable.Workitemid ' + 	' ) Table5 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@v_ProcessFilter, '')+ ISNULL(@DBuserFilterStr, '') + ISNULL(@v_filterStr, '') + ISNULL(@v_queryFilter, '') + ISNULL(@v_lastValueStr,'') + ') Table6' + ISNULL(@v_orderByStr,'')+ ISNULL(@v_RowIdQuery ,'') 
		SELECT @v_CountStr3 = 'SELECT COUNT(*) FROM ( SELECT * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM PendingWorkListTable Worklisttable, ProcessInstanceTable, QueueDatatable '   + @v_extTable_QDT_JoinStr + ' WHERE QueueDatatable.ProcessInstanceId = ProcessInstanceTable.ProcessInstanceId' + ' AND Worklisttable.ProcessInstanceId = QueueDatatable.ProcessInstanceId' + ' AND Worklisttable.Workitemid =QueueDatatable.Workitemid ' + ' ) Table9 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '') + ') Table2' */
		
--		SELECT @v_queryStr = @v_queryStr + ' UNION ALL ' +  @v_QueryStr3 
		
	/*	SELECT @v_noOfCounters = 3 *//* Bugzilla Bug 1703 */
		
		Select @routingFilterString = '   '
		
		
		/* Fetch from ROUTING STATUS AS 'r' or 'n' AND locked status as 'N' AS WELL */
	END
	ELSE IF (@DBFetchLockedFlag = N'Y')
	BEGIN
--		SELECT @v_queryStr = @v_QueryStr + ' UNION ALL ' +  @v_QueryStr2
		SELECT @v_noOfCounters = 2 /* Bugzilla Bug 1703 */
		/* Fetch from ROUTING STATUS AS 'n'  */
		--Select @routingFilterString = ' RoutingStatus = ' + @v_quoteChar + 'N'+ @v_quoteChar
		Select @routingFilterString = '   '
	END
	ELSE 
	BEGIN
		SELECT @v_QueryStr2 = ' '
		--Select @routingFilterString = ' AND LockStatus = ' + @v_quoteChar + 'N'+ @v_quoteChar 
		Select @routingFilterString = ' AND (LockStatus = ' + @v_quoteChar + 'N'+ @v_quoteChar + ' OR (LockStatus = ' + @v_quoteChar + 'Y' + @v_quoteChar + ' AND LockedByName = ' + @v_quoteChar + @v_UserName + @v_quoteChar + ')) '
	END

	/*SELECT @v_QueryStr1 = ' SELECT ' + ISNULL(@v_prefix,'') + @v_WLTColStr1 + @v_QDTColStr + ISNULL(@v_ExtAlias,'') + ' FROM (' + ' SELECT ' + '  row_number() over ( ' + ISNULL(@v_orderByStr,'') + ' ) as row_id, Table3.* FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable '  + @v_extTable_QDT_JoinStr + ' WHERE '  +  @routingFilterString +' ) Table3 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@v_ProcessFilter, '') + ISNULL(@DBuserFilterStr, '') + ISNULL(@v_filterStr, '') + ISNULL(@v_queryFilter, '') + ISNULL(@v_lastValueStr,'') + ') Table4' + ISNULL(@v_orderByStr,'') + ISNULL(@v_RowIdQuery ,'') */
	SELECT @v_QueryStr1 = ' SELECT ' + ISNULL(@v_prefix,'') + @v_WLTColStr1 + @v_QDTColStr + ISNULL(@v_ExtAlias,'') + ' FROM (' + ' SELECT '

	IF (@DBPagingFlag = N'Y')
	BEGIN
		SELECT @v_QueryStr1 = @v_QueryStr1 + ' row_number() over ( ' + ISNULL(@v_orderByStr,'') + ' ) as row_id,'
	END

	/*SELECT @v_QueryStr1 = @v_QueryStr1 + ' Table3.* FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK) '  + @v_extTable_QDT_JoinStr + ' WHERE 1=1 '  +  @routingFilterString +' ) Table3 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@v_ProcessFilter, '') + ISNULL(@DBuserFilterStr, '') + ISNULL(@v_filterStr, '') + ISNULL(@v_queryFilter, '') + ISNULL(@v_lastValueStr,'') + ') Table4' + ISNULL(@v_RowIdQuery ,'')  + ISNULL(@v_orderByStr,'') */
	
	/*SELECT @v_QueryStr1 = @v_QueryStr1 + ' Table3.* FROM  ( SELECT * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK) WHERE 1= 1 ' + @routingFilterString  
	SELECT @v_QueryStr1 = @v_QueryStr1 + ' ) WFInstrumentTable ' 

	IF(@v_queueFilterStr IS NULL OR @v_queueFilterStr = '')
	BEGIN
		SELECT @v_QueryStr1 = @v_QueryStr1+' WHERE 1=1 '+ ISNULL(@v_ProcessFilter, '') 
	END
	ELSE
	BEGIN
		SELECT @v_QueryStr1 = @v_QueryStr1 + ISNULL(@v_queueFilterStr,'')   + ISNULL(@v_ProcessFilter, '') 
	END*/
	SELECT @v_QueryStr1 = @v_QueryStr1 + ' Table3.* FROM  ( SELECT * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK) WHERE 1= 1 ' + @routingFilterString  
	SELECT @v_QueryStr1 = @v_QueryStr1 + ISNULL(@v_queueFilterStr1,'') +  ISNULL(@v_ProcessFilter, '')
	
	
	IF(@DBorderBy < 157 )BEGIN
		SELECT @v_QueryStr1 = @v_QueryStr1 + ISNULL(@v_lastValueStr,'') 
	END
	
	SELECT @v_QueryStr1 = @v_QueryStr1 + ' ) WFInstrumentTable '
	
	SELECT @v_QueryStr1 = @v_QueryStr1 +  ISNULL(@v_extTable_WFI_JoinStr,'') + ' ) Table3 WHERE 1=1 ' + ISNULL(@DBuserFilterStr, '') + ISNULL(@v_filterStr, '') + ISNULL(@v_queryFilter, '') 

	IF(@DBorderBy > 157 )BEGIN
		SELECT @v_QueryStr1 = @v_QueryStr1 + ISNULL(@v_lastValueStr,'') 
	END
	
	SELECT @v_QueryStr1 = @v_QueryStr1  + ') Table4' + ISNULL(@v_RowIdQuery ,'')  + ISNULL(@v_orderByStr,'') 
	
	--insert into testDebug values(1,@v_QueryStr1)
	/*SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM ( SELECT * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK) '  + @v_extTable_QDT_JoinStr + ' WHERE  1=1 '+ @routingFilterString  + '  ) Table9 WHERE ' + ISNULL(@v_queueFilterStr,'') + ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '') + ') Table2' */
	
	/*Bugzilla Id 70876*/
/*
	SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM ( SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK) WHERE 1=1 ' + @routingFilterString +  ISNULL(@v_queueFilterStr,'')  + ' ) WFInstrumentTable ' +  ISNULL(@v_extTable_WFI_JoinStr,'')  + '  ) Table9 WHERE 1=1 '+ ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '') + ') Table2' 
*/
	IF(@v_queueFilterStr IS NULL OR @v_queueFilterStr = '')

        BEGIN

            SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM ( SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK) WHERE 1=1 ' + @routingFilterString + ' ) WFInstrumentTable ' +  ISNULL(@v_extTable_WFI_JoinStr,'')  + '  ) Table9 WHERE 1=1 '+ ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '') + ') Table2'                  

        END

    ELSE

        BEGIN

            SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM ( SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFInstrumentTable (NOLOCK)  ' +@v_queueFilterStr + @routingFilterString + ' ) WFInstrumentTable ' +  ISNULL(@v_extTable_WFI_JoinStr,'')  + '  ) Table9 WHERE 1=1 '+ ISNULL(@DBuserFilterStr,'') + ISNULL(@v_filterStr,'') + ISNULL(@v_queryFilter, '') + ') Table2'   

        END

 

	/*Bugzilla Id 1680*/
	IF(@DBreturnParam = 1 OR @DBreturnParam = 2)
	BEGIN
		SELECT @v_counter = 0
		Select @v_noOfCounters = 1
		SELECT @v_returnCount = 0
		WHILE (@v_counter < @v_noOfCounters)
		BEGIN 
			SELECT @v_CountStr = @v_CountStr1
			/* Bugzilla Bug 1703 */
			/*IF (@v_counter = 0)
				SELECT @v_CountStr = @v_CountStr1
			ELSE IF (@v_counter = 1)
				SELECT @v_CountStr = @v_CountStr2
			ELSE IF (@v_counter = 2)
				SELECT @v_CountStr = @v_CountStr3			
			*/
			
			EXECUTE('DECLARE CountCursor CURSOR Fast_Forward FOR ' + @v_CountStr ) 
		
			OPEN CountCursor
			FETCH NEXT FROM CountCursor INTO @v_TempCount
			IF (@@FETCH_STATUS < 0) 
			BEGIN 
				SELECT @DBmainCode = 15 
				SELECT @DBsubCode = 802 
				SELECT @v_returnCount = 0
			END
			ELSE
			BEGIN
				SELECT @DBmainCode = 0 
				SELECT @DBsubCode = 0 
			END
			CLOSE CountCursor
			DEALLOCATE CountCursor

			SELECT @v_counter = @v_counter + 1
			SELECT @v_returnCount = @v_returnCount + @v_TempCount
		END
		SELECT MainCode = @DBmainCode, SubCode = @DBsubCode, ReturnCount = @v_returnCount , AliasProcessDefId = @v_outAliasProcessDefId
	END
        ELSE
	BEGIN
		SELECT MainCode = 0, SubCode = 0, ReturnCount = 0 , AliasProcessDefId = @v_outAliasProcessDefId
	END
	
	IF(@DBreturnParam = 0 OR @DBreturnParam = 2)
	BEGIN
		/* 18/12/2008, Bugzilla Bug 7374, query length was greater than 8000 hence truncated. - Ruhi Hira */
		EXECUTE(
		/*Process Variant Support Changes*/
		'SELECT ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' null as TurnaroundTime ,ReferredByname, ReferredTo as ReferTo, ExpectedWorkItemDelay, ProcessVariantId, ProcessedBy, Q_DivertedByUserId,ActivityType,URN ' + @v_ExtAlias + ' FROM ( ' 
		+ @v_QueryStr1 
		+ ' ) Table7 ')
        END 
	RETURN 
END  


go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
------------------------------------------------------------------------------------------------------
	Group				: Application â€“Products
	Product / Project		: WorkFlow 5.0
	Module				: Transaction Server
	File Name			: WFGetWorkitem.sql
	Author				: Ruhi Hira
	Date written (DD/MM/YYYY)	: 03/09/2005
	Description			: To lock the workitem and return the data [Bug # WFS_5_066].
------------------------------------------------------------------------------------------------------
			CHANGE HISTORY
------------------------------------------------------------------------------------------------------
 Date		Change By		Change Description (Bug No. (If Any))
26/09/2005	Ruhi Hira			Bug # WFS_5_067.
27/09/2005	Dinesh PArikh		Bug # WFS_5_068
16/11/2005	Ruhi Hira			Bug # WFS_5_077.
05/04/2006	Harmeet Kaur		Bug # WFS_5_115
10/04/2006	Harmeet Kaur		Bug # WFS_5_116
14/04/2006	Harmeet Kaur		WFS_5_113 Optimization for PCS
15/05/2006	Harmeet Kaur		WFS_5_121 - Open WIs in modify mode in search for WIs having filteroption=1
26/07/2006	Harmeet Kaur		WFS_5_127 Support for QueryFilter
01/08/2006	Harmeet Kaur		WFS_5_131 Sorting order changed for FIFO Queue
22/11/2006	Ruhi Hira			Bug # WFS_5_148.
27/12/2006	Ruhi Hira			Bug # WFS_5_149.
23/05/2007	Ashish Mangla		Bugzilla Bug 758, Bugzilla Bug 773, Bugzilla Bug 856, Bugzilla Bug 825
24/05/2007	Ruhi Hira			Bugzilla Bug 945.
20/06/2007	Ashish Mangla		Bugzilla Bug 1200 (In case of FIFO also, IF WI is not locked, try lock it also)
19/07/2007	Varun Bhansaly		Bugzilla Id 74 (Inconsistency in date-time)
17/09/2007	Varun Bhansaly		SrNo-1, Support for Complex filters and Generic Queue Filter.
08/01/2008	Ashish Mangla		Bugzilla Bug 1681 (UserName Marco support required)
16/01/2008	Varun Bhansaly		Support for Order By in Filters.
21/01/2008	Ruhi Hira			Bugzilla Bug 1721, error code 810.
22/01/2008	Ruhi Hira			Bugzilla Bug 3580, Unable to open fixed assigned workitems from search.
24/01/2008	Varun Bhansaly		Bugzilla Id 3584, orderby filter in fifo queue is not working properly
25/02/2008	Varun Bhansaly		Performance Optimization - Inherited from PRD Bug Solution WFS_5_212
17/03/2008	Ashish Mangla		Bugzilla Bug 3962 (In case of FIFO, UpdLock should be applied when selecting from workListtable)
30/04/2008	Sirish Gupta		Bugzilla Bug 4651.
16/12/2008	Ruhi Hira			Bugzilla Bug 7199, MainCode changed to Invalid_Workitem.
08/09/2009	Vikas Saraswat		WFS_8.0_031	Option  provided to view the workitem of a queue as read-only based on the rights of the queue for non-associated user instead of Query workstep rights.
06/10/2009	Preeti Awasthi		WFS_8.0_040 Support for filter using queue variables/aliases on Queue is No Assignment Type.	
28/10/2009	Saurabh Kamal		WFS_8.0_046 (In case user is member of multiple groups which are added to Queue, One group having no filter, then user should be able to view workitems considering no filter)
30/11/2009	Vikas Saraswat		WFS_8.0_066 LoggingFlag should be used in message for ActionID=200
11/12/2009	Preeti Awasthi		WFS_8.0_069 Workitem gets locked even user does not have rights on queue and workitem is opened from search in readonly mode.
27/01/2010	Preeti Awasthi		WFS_8.0_079 Participant tag is not coming in WFGetWorkitem API
10/11/2010  Saurabh Sinha       Bug #815 : Support for Previous Next in Introduction,FIFO and WIP
11/05/2010	Preeti Awasthi		WFS_8.0_101 Error â€œUser not authorized to view workitemâ€? in case user do not have rights on queue and group filter is set on queue
04/08/2010	Indraneel			WFS_8.0_121: Filter criteria applied by using query workstep should give the preference to the associated users rather than associated group.
11/11/2010	Preeti Awasthi		WFS_8.0_143: Error in opening workitem through search when aliases are present on queue for external variables
08/03/2010	Saurabh Kamal		WFS_8.0_153 Support of FUNCTION in QueryFilter
04/01/2011	Abhishek Gupta		WFS_8.0_147: User filter overridden by group filter if user filter blank.
01/07/2011	Saurabh Kamal		Bug 27393, In case of FIFO Queue, if a user is working on a workitem then it should get permanently assigned to the same user(Fixed Assignment).
11/01/2012	Preeti Awasthi		Bug 30420 - Issue in Getting next workitem in case of FIFO type queue
21/03/2012	Vikas Saraswat		Bug 30800 - sorting is not working on Prev next click after opening the workitem
10/04/2012	Preeti Awasthi		Bug 31025 - Filter on external variables is not working while opening workitems.
19/04/2012  Shweta Singhal		Bug 30894, Error while opening workitem.
04/01/2011	Abhishek Gupta		Bug 34307 - properties can not be verified because some data in property tab is incorrect[LockedTime not set in WorkInProcessTable].
17/05/2013	Shweta Singhal		Process Variant Support Changes	
23/12/2013	Sajid Khan			Message Agent Optiization.
31/12/2013	Kahkeshan			Code Optimization Changes
27/01/2014	Shweta Singhal		Left Outer Join is replaced with Inner Join	
28/01/2014	Shweta Singhal		UPDLock replaced with UPDLock, READPAST
02/06/2014	Anwar Danish		PRD Bug 43293 merged - Invalid column name ExpectedWorkItemDelay was displayed while clicking next button in webdesktop on a Queue at which a Filter on System variable ExpectedWorkItemDelay Alias is set. 
13/06/2014  Anwar Ali Danish    PRD Bug 38828 merged - Changes done for diversion requirement. CQRId CSCQR-00000000050705-Process  
20/08/2015	Mohnish Chopra		Changes for Case management -Returning error code 32 (By Pass Lock) for all tasks. By passing lock requirement in Task View 
06/11/2015	Mohnish Chopra		Changes for Case management -Can Initiate requirement 
27/11/2015	Mohnish Chopra		Bug 57980 - Jboss EAP : "Case modified by other user" message showing while changing value in case data
02/12/2015	Mohnish Chopra		Bug 58014 - show case visualization check box during assigning a task is not working according to specification
17/02/2017  RishiRam Meel		Changes done Handling for restricting FIFO workitem from opening in modify mode if fetched through advanced search by supplying queue name 	
05/04/2017	Sajid Khan			Bug 68080 - Error in execution of WFGetWorkitem if a function filter is applied in the queue filter provided no User or Group 	filter is applied.[MS SQL]
30/04/2017	Sajid Khan			Verious Bugs regarding Queue Filter and Query Filter solved.
09-05-2017	Sajid Khan			Queue Varaible Extension Enahncement
03/08/2017		Kumar Kimil     	Bug 70043 - Entry for action id 200 is getting inserted while performing the reassign operation from webdesktop
03/08/2017	Sajid Khan			Bug 70870 - Unable to Temporary Unhold a workitme which was temporarily holded from FIFO type of Queue
16-08-2017	Mohnish Chopra		Changes for Case Management - Queue variable header alias should allow spaces
17/10/2017	Mohnish Chopra		Case registeration Name changes requirement- Added URN in output of WFGetWorkItemDataExt API
02-11-2017	Shubhankur Manuja	Bug Merging - 70858
16-01-18	Ambuj Tripathi		Bug 73224 - The variable size which is used to hold user name should be sufficient
28-01-18	Sajid Khan			Bug 75488 -Arabic ibps 4: Getting error on creating new WI or while opening existing WI after creating aliases in Arabic 
06/04/2018  Kumar Kimil         Prev-Next Unlock Fixes
23/04/2018	Ambuj Tripathi		Bug 76864 - Getting error in WFGetWorkitem if filter length is too large - increased the variables lengths to max.
----------------------------------------------------------------------------------------------------*/

If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'WFGetWorkitem')
Begin
	Execute('DROP PROCEDURE WFGetWorkitem')
	Print 'Procedure WFGetWorkitem already exists, hence older one dropped ..... '
End

go


CREATE PROCEDURE WFGetWorkitem(
	@DBSessionId			Integer,
	@DBProcessInstanceId		NVarchar(64),
	@DBWorkItemId			Integer,
	@DBQueueId			Integer,
	@DBQueueType			NVarchar(1),		/* '' -> Search; 'F' -> FIFO; 'D', 'S', 'N' -> WIP */
	@DBLastProcessInstanceId	NVarchar(64),
	@DBLastWorkitemId		Integer,
	@DBGenerateLog			NVarchar(1),
	@DBOrderBy			Integer, /*Bug #815*/
	@DBSortOrder			NVarchar(64),
	@DBLastValue			NVarchar(1000),
	@DBAssignMe			NVarchar(1),
	@DBClientOrderFlag	NVarchar(1),
	@DBTaskId			INTEGER,
	@v_UtilityFlag 		NVARCHAR(1),
	@DBuserFilterStr		VARCHAR(MAX) 	
)
AS
Begin


	SET NOCOUNT ON

	/* Declare workitem data common in five tables and queueHistoryTable */
	Declare @ProcessInstanceId	NVARCHAR (63)
	Declare @WorkItemId		INT
	Declare @ProcessName 		NVARCHAR(30)
	Declare @ProcessVersion  	SMALLINT
	Declare @ProcessDefID 		INT
	Declare @LastProcessedBy 	INT
	Declare @ProcessedBy		NVARCHAR(63)
	DECLARE	@v_QueryStr			VARCHAR(MAX) 
	DECLARE	@v_counterCondition	INT 
	Declare @ActivityName 		NVARCHAR(30)
	DECLARE	@v_PositionComma	INT 
	Declare @ActivityId 		INT
	Declare @EntryDateTime 		DATETIME
	Declare @IntroductionDate 		DATETIME
	DECLARE @v_ProcessName		NVARCHAR(30)
	Declare @ParentWorkItemId	INT
	DECLARE	@v_TempColumnName	NVARCHAR(64) 
	DECLARE	@v_TempSortOrder	NVARCHAR(6) 	
	DECLARE	@v_orderByPos		INT 
	Declare @AssignmentType		NVARCHAR(1)
	Declare @CollectFlag		NVARCHAR(1)
	Declare @PriorityLevel		SMALLINT
	Declare @ValidTill		DATETIME
	Declare @Q_StreamId		INT
	Declare @Q_QueueId		INT
	Declare @Q_UserId		INT
	Declare @AssignedUser		NVARCHAR(63)
	Declare @FilterValue		INT
	Declare @CreatedDatetime	DATETIME
	Declare @WorkItemState		INT
	Declare @Statename 		NVARCHAR(255)
	Declare @ExpectedWorkitemDelay	DATETIME
	Declare @PreviousStage		NVARCHAR(30)
	Declare @LockedByName		NVARCHAR(63)
	Declare @LockStatus		NVARCHAR(1)
	Declare @LockedTime		DATETIME
	Declare @Queuename 		NVARCHAR(63)
	Declare @Queuetype 		NVARCHAR(1)
	Declare @NotifyStatus		NVARCHAR(1)
	Declare @RoutingStatus		NVARCHAR(1)
	Declare @v_QueryPreview		NVARCHAR(1)	/*WFS_8.0_031*/
	Declare @Q_DivertedByUserId INT 
	Declare @LastModifiedTime DATETIME
	Declare @v_URN			NVARCHAR (63)
	/* Declare output variables */
	Declare @lockFlag		NVARCHAR(1)
	Declare @MainCode		INT
	/*Bug #815*/
	Declare @DBSubCode		INT		
	DECLARE	@v_returnCount  INT

	/* Declare intermmediate variables */
	Declare @rowCount		INT
	Declare @found			NVARCHAR(1)
	Declare @canLock		NVARCHAR(1)
	Declare @userIndex		INT
	Declare @userName		NVARCHAR(63)
	Declare	@status			NVARCHAR(1)
	Declare @qdt_filterOption	INT

	Declare @queryStr		NVarchar(max)	/*WFS_8.0_040*/ 
	Declare @queryFilterStr		NVarchar(4000) 
	Declare @queryFilterStrInner	NVarchar(800) /*Bug #815*/
	Declare @queryFilterStr2	NVarchar(4000)
	Declare @orderByStr		NVarchar(200)
	Declare @toSearchStr		NVarchar(20)
	Declare @QueryFilter		Nvarchar(max)
	Declare @orderByPos		INT	
	Declare @counterInt		INT 	
	Declare @tempFilter		NVarchar(4000)
	Declare @tableStr		NVarchar(200)

	/*Query WorkStep Handling */
	Declare @QueueDataTableStr	NVarchar(50)
	Declare @tableName              NVarchar(256)
	Declare @CheckQueryWSFlag       NVarchar(1)
	Declare @bInQueue		NVarchar(1)
	Declare @QueryActivityId        INT
	/*Query WorkStep Handling */
	
	DECLARE	@v_FunctionPos		INT
	DECLARE	@v_funPos1			INT
	DECLARE	@v_funPos2			INT
	DECLARE	@v_FunValue			NVARCHAR(max)
	DECLARE	@queryFunStr		NVARCHAR(4000)
	DECLARE	@v_functionFlag		NVARCHAR(1)
	DECLARE	@v_prevFilter		NVARCHAR(4000)
	DECLARE	@v_funFilter		NVARCHAR(255)
	DECLARE	@v_postFilter		NVARCHAR(4000)
	DECLARE	@v_tempFunStr  		NVARCHAR(64)
	DECLARE	@v_FunLength		INT
	
	DECLARE	@v_AssignQ_QueueId	INT	
	DECLARE	@v_AssignFilterVal	INT
	DECLARE	@v_AssignWIState	INT
	DECLARE	@v_AssignQueueType	NVARCHAR(1)
	DECLARE	@v_AssignedUser		NVARCHAR(63)
	DECLARE	@v_AssignQueueName	NVARCHAR(100)


	/* WFS_5_131 */
	Declare @orderBy		NVarchar(200)
	Declare	@sortOrder    		NVarchar(1) /*Bug #815*/
	Declare @iOrder			INT
	Declare	@sortFieldStr		NVarchar(2000)
	Declare	@sortFieldStrCol	NVarchar(2000)
	Declare	@sortFieldStrValue	NVarchar(2000)
	DECLARE	@v_reverseOrder		INT 
	DECLARE	@v_innerOrderBy		NVARChar(200) 
	Declare @iFirstOrder		INT
	Declare @len			INT
	Declare @tempOrderStr		NVarchar(2000)
	/*Bug #815*/
	Declare @v_lastValueStr			NVarchar(1000)
	DECLARE	@v_TemplastValueStr		NVARCHAR(1000) 
	DECLARE	@v_innerLastValueStr	NVARCHAR(1000) 
	DECLARE	@v_innerOrderByCol1		NVARCHAR(64) 
	DECLARE	@v_innerOrderByCol2		NVARCHAR(64) 
	DECLARE	@v_innerOrderByCol3		NVARCHAR(64) 
	DECLARE	@v_innerOrderByCol4		NVARCHAR(64) 
	DECLARE	@v_innerOrderByCol5		NVARCHAR(64) 
	DECLARE	@v_innerOrderBySort1	NVARCHAR(6) 
	DECLARE	@v_innerOrderBySort2	NVARCHAR(6) 
	DECLARE	@v_innerOrderBySort3	NVARCHAR(6) 
	DECLARE	@v_innerOrderBySort4	NVARCHAR(6) 
	DECLARE	@v_innerOrderBySort5	NVARCHAR(6) 
	DECLARE	@v_innerOrderByVal1		NVARCHAR(256) 
	DECLARE	@v_innerOrderByVal2		NVARCHAR(256) 
	DECLARE	@v_innerOrderByVal3		NVARCHAR(256) 
	DECLARE	@v_innerOrderByVal4		NVARCHAR(256) 
	DECLARE	@v_innerOrderByVal5		NVARCHAR(256) 
	DECLARE	@v_innerOrderByType1	NVARCHAR(50) 
	DECLARE	@v_innerOrderByType2	NVARCHAR(50) 
	DECLARE	@v_innerOrderByType3	NVARCHAR(50) 
	DECLARE	@v_innerOrderByType4	NVARCHAR(50) 
	DECLARE	@v_innerOrderByType5	NVARCHAR(50) 
	DECLARE	@v_innerOrderByCount	INT 
	DECLARE	@v_CursorLastValue		INT 
	DECLARE @v_quoteChar 			CHAR(1) 
	DECLARE @tempQueryStr			NVarchar(1000)
	DECLARE	@v_rowCount				INT 
	DECLARE @v_TempColumnVal		NVarchar(500)
	/* WFS_5_131 */

	DECLARE	@v_ParsedQueryFilter NVARCHAR(4000)
	DECLARE	@v_groupID			INT 
	DECLARE	@v_QueueFilter			NVARCHAR(2000)
	DECLARE	@v_TempQueryFilter		NVARCHAR(2000)
	/* WFS_8.0_040 */
	DECLARE	@v_counter			INT 
	DECLARE	@v_tempFilter		NVARCHAR(4000) 
	DECLARE @v_QDTColStr		NVARCHAR(4000)
	DECLARE @v_AliasStr			NVARCHAR(4000)
	DECLARE	@v_PARAM1			NVARCHAR(255) 
	DECLARE	@v_ALIAS			NVARCHAR(255) 
	DECLARE	@v_ExtAlias			NVARCHAR(2000)
	DECLARE	@v_ToReturn			NVARCHAR(1) 
	DECLARE	@v_sortStr			NVARCHAR(6) 
	DECLARE	@v_QueryStr1		NVARCHAR(4000) 
	DECLARE	@v_WLTColStr1		NVARCHAR(4000) 
	DECLARE	@v_WLTColStr		NVARCHAR(4000)
	DECLARE	@v_VariableId1		INT
	DECLARE	@v_JoinExtTable		INT
	DECLARE	@v_op				CHAR(1) 
	DECLARE	@v_sortFieldStr		NVARCHAR(50) 
	DECLARE	@v_extTableName		NVARCHAR(50)
	DECLARE	@v_extTable_QDT_JoinStr		NVARCHAR(256)	
	DECLARE @v_tempQ_UserId			INT
	DECLARE	@v_QueryFilterQueue	Varchar(8000)
	DECLARE	@v_QueryFilterUG   Varchar(8000)
	/*Bug #815*/
	DECLARE @QDTColStr		NVarchar(1000)
	DECLARE @WLTColStr  		NVarchar(1000)
	DECLARE @v_counter1		INT
	DECLARE @v_CursorAlias		INT
	DECLARE @v_AliasStr1	NVarchar(1000)
	DECLARE	@v_PARAM2		NVARCHAR(64) 
	DECLARE	@v_ALIAS1		NVARCHAR(64) 
	DECLARE	@v_ToReturn1		NVARCHAR(1) 
	DECLARE @DATEFMT 		NVarchar(25)
	DECLARE @v_tempDataType		NVarchar(100) 
	DECLARE @qdtColString		NVarchar(1000)
	DECLARE @processVariantId	INT/*Process Variant Support Changes*/
	DECLARE @v_CanInitiate	NVarchar(1)
	DECLARE @v_showCaseVisual NVarchar(1)
	DECLARE @v_ActivityType INT 
	Declare @prevNextCase bit
	
	/* Initializations */
	Select @prevNextCase = 'false'
	Select	@found			= 'N'
	Select  @canLock		= 'N'
	Select	@lockFlag		= 'N'
	Select	@MainCode		= 0
	Select  @ProcessInstanceId	= @DBProcessInstanceId
	Select  @WorkitemId		= @DBWorkitemId
	Select	@Q_QueueId		= @DBQueueId
	Select @v_CanInitiate = 'Y'
	Select @v_showCaseVisual = 'Y'

	/*Query WorkStep Handling */
	Select  @QueueDataTableStr	= ''
    Select  @CheckQueryWSFlag       = 'N'
	Select  @tableName              = ''
	/*Query WorkStep Handling */
	SELECT @LastModifiedTime = ''
	Select @QDTColStr  =''
	Select @WLTColStr =''
	Select @v_AliasStr1  =''
	Select @v_lastValueStr		= '' 
	Select @orderByStr		= ''
	SELECT @v_VariableId1 = 0
	SELECT @v_JoinExtTable = 0 /*	Default 0 means External Table join not required.*/
	SELECT @v_quoteChar = CHAR(39)
	SELECT @sortFieldStrCol=''
	SELECT @DBClientOrderFlag='N'
	DECLARE @v_indexOfSeprator INT
	DECLARE	@v_genLog   Varchar(2)
	DECLARE	@v_WorkStartedLoggingEnabled   Varchar(2)
	/* Check session validity */
	Select	@userIndex	= userIndex,
		@userName	= userName,
		@status = statusFlag
	FROM	WFSessionView, WFUserView 
	WHERE	UserId		= UserIndex 
	AND	SessionID	= @DBSessionId 

	Select	@rowCount	= @@rowCount

	IF(@rowCount <= 0)
	Begin
		SELECT	@MainCode	= 11		/* Invalid Session Handle */
		Select	@MainCode	MainCode,
			@lockFlag	lockFlag
		RETURN
	End
	
	IF(@status = 'N')
	BEGIN
		Update WFSessionView set statusflag = 'Y' , AccessDateTime = GETDATE()
          WHERE SessionID = @DBSessionId
	END
	
	IF(@DBQueueId = 0 AND (@DBLastValue IS NOT NULL OR len(@DBLastValue)>0))/*Prev next featur will not work in case of myqueue and search*/
	BEGIN
		Select	@MainCode = 18
		Select	@MainCode	MainCode,
			@lockFlag	lockFlag
		Return
	END
	
	/* Fetch queue filter */ /* WFS_5_131 */
	If(@DBQueueId IS NOT NULL AND @DBQueueId > 0)	/*for FIFO case for getting new WorkItem append filter option also*/
	Begin
		SELECT @v_ProcessName = ProcessName	FROM QueueDeftable (NOLOCK) WHERE QueueID = @DBqueueId 
		SELECT @v_rowcount = @@ROWCOUNT 
		IF(@v_rowcount > 0)  
		BEGIN
			IF (@v_ProcessName IS NOT NULL) 
				Select @v_extTableName = TableName from ExtDbConfTable (NOLOCK)
				where ProcessDefId = (Select Max(ProcessDefId) from ProcessDefTable (NOLOCK) WHERE processName = @v_ProcessName) 
				and ExtObjId = 1
		END
	End
	/* WFS_5_131 */
	Select @queryFilterStr = ' WHERE '
	/* ProcessInstanceId will be NULL for FIFO only ..Bug #815. */
/*	Select @queryFilterStr = ' '*/
	If(@ProcessInstanceId IS NULL OR @ProcessInstanceId = ''  OR (Len(@ProcessInstanceId) <= 0))
	Begin
		/* Bug # WFS_5_067, Invalid column Name QueueId */
		Select @queryFilterStr	= @queryFilterStr + ' Q_QueueId = ' + convert(NVarchar(10), @DBQueueId)
	End
	Else
	Begin
		/* WFS_8.0_040 */
		Select @queryFilterStr	= @queryFilterStr + ' ProcessInstanceId = N''' + @ProcessInstanceId + 
						''' AND WorkitemId = ' + convert(NVarchar(10), @WorkitemId) 
	End
	IF(@DBLastValue IS NULL AND @DBLastProcessInstanceId is not null AND len(@DBLastProcessInstanceId) > 0 )
	Begin
		Select	@queryFilterStr = @queryFilterStr + ' AND NOT ( processInstanceId = N''' + @DBLastProcessInstanceId + ''' AND workitemId = ' + convert(NVarchar(4), @DBLastWorkitemId) + ' ) '
	End

	/*
		Some valisdations can also be put like in case of FIFO only, processInstanceId, WorkItemItem are not sent...
		If some validations are failing we can return Invalid paramater
		For the time being it is assumned that data will be send in proper case only......
	*/
	IF((@DBLastProcessInstanceId is not null AND len(@DBLastProcessInstanceId) > 0))
	BEGIN
		Select @prevNextCase = 'true'
	END
	
	IF(@DBQueueId < 0 OR (@prevNextCase=1))	/*Search case we have to find Q_QueueId for the workItem to find the QueryFilter condition*/
	Begin
	/*Process Variant Support Changes*/
		SELECT @Q_QueueId = Q_QueueId, @Queuetype = QueueType, @Q_UserId = Q_UserId, @RoutingStatus = RoutingStatus, @FilterValue = FilterValue, @ProcessDefID = ProcessDefId, @Queuename = QueueName, @LockedTime = LockedTime, @LockStatus = LockStatus, @LockedByName = LockedByName, @PreviousStage = PreviousStage, @ExpectedWorkitemDelay = ExpectedWorkitemDelay, @Statename = Statename, @WorkItemState = WorkItemState, @CreatedDatetime = CreatedDateTime, @AssignedUser = AssignedUser, @ValidTill = ValidTill, @PriorityLevel = PriorityLevel, @AssignmentType = AssignmentType, @EntryDateTime = EntryDateTime, @ActivityId = ActivityId, @ActivityName = ActivityName, @ProcessedBy = ProcessedBy, @ProcessVersion = ProcessVersion, @ProcessName = ProcessName,@processVariantId = ProcessVariantId, @Q_DivertedByUserId = Q_DivertedByUserId,@v_ActivityType= ActivityType,@LastModifiedTime =LastModifiedTime ,@v_URN = URN
		/*FROM (
			SELECT Q_QueueId, QueueType, Q_UserId, 'WorkListTable' tableName, FilterValue, ProcessDefId, QueueName, getdate() as LockedTime, LockStatus, LockedByName, PreviousStage, ExpectedWorkitemDelay, Statename, WorkItemState, CreatedDateTime, AssignedUser, ValidTill, PriorityLevel, AssignmentType, EntryDateTime, ActivityId, ActivityName, ProcessedBy, ProcessVersion, ProcessName, ProcessVariantId FROM WorkListTable (NOLOCK) WHERE ProcessInstanceId = @ProcessInstanceId AND WorkitemId = @WorkitemId
			UNION ALL
			SELECT Q_QueueId, QueueType, Q_UserId, 'WorkInProcessTable' tableName, FilterValue, ProcessDefId, QueueName, LockedTime, LockStatus, LockedByName, PreviousStage, ExpectedWorkitemDelay, Statename, WorkItemState, CreatedDateTime, AssignedUser, ValidTill, PriorityLevel, AssignmentType, EntryDateTime, ActivityId, ActivityName, ProcessedBy, ProcessVersion, ProcessName, ProcessVariantId FROM WorkInProcessTable (NOLOCK) WHERE ProcessInstanceId = @ProcessInstanceId AND WorkitemId = @WorkitemId
		)  WorkListView*/
		
		From WFInstrumentTable  where RoutingStatus = 'N' AND ProcessInstanceId = @ProcessInstanceId AND WorkitemId = @WorkitemId
		SELECT @rowCount = @@rowCount
		
		If(@rowCount > 0 OR (@prevNextCase=1)) /* Workitem found in WorkList or WorkInProcessTable for Given Negative Qid from input */
		Begin
			/** 22/01/2008, Bugzilla Bug 3580, Unable to open fixed assigned workitems from search - Ruhi Hira */
			If(@Q_QueueId IS NOT NULL AND @Q_QueueId > 0)
			Begin
				SELECT @bInQueue = 'Y'	
				IF(@v_UtilityFlag='N')
				BEGIN
					SELECT TOP 1 @qdt_filterOption = QueueDefTable.FilterOption, @v_QueueFilter = QueueFilter
					FROM	QueueDefTable, QUserGroupView 
					WHERE	QueueDefTable.QueueID = QUserGroupView.QueueID 
					AND	QueueDefTable.QueueID = @Q_QueueId
					AND	UserId = @userIndex
					Select	@rowCount = @@rowCount
				END
				ELSE
				BEGIN
					SELECT TOP 1 @qdt_filterOption = QueueDefTable.FilterOption, @v_QueueFilter = QueueFilter
					FROM	QueueDefTable WHERE QueueDefTable.QueueID = @Q_QueueId
					Select	@rowCount = @@rowCount
				END
				
				If(@rowCount > 0)
				Begin
					IF(@qdt_FilterOption = 0)
					BEGIN
						Select @qdt_FilterOption = NULL
					END
					If( NOT ( (@qdt_FilterOption = 2 AND @FilterValue = @userIndex) OR 
						(@qdt_FilterOption = 3 AND @FilterValue != @userIndex) OR
						(@qdt_FilterOption = 1)))	  /* WFS_5_121 */
					Begin
						Select	@canLock = 'N'
						Select	@CheckQueryWSFlag = 'Y'
					End
				End
				ELSE
				Begin
					Select	@canLock = 'N'
					Select	@CheckQueryWSFlag = 'Y'
				End
				IF (@ProcessName IS NOT NULL)
				BEGIN
					Select @v_extTableName = TableName from ExtDbConfTable (NOLOCK)
					where ProcessDefId = (Select Max(ProcessDefId) from ProcessDefTable (NOLOCK) WHERE processName = @ProcessName) and ExtObjId = 1
				END	
			End
		End
		ELSE
		Begin
			SELECT @bInQueue = 'N'
		End
	End
	
	/*Bug 655839  Issue in opening a workitem through search (workitem lying on a queue with filters of the form &<UseerIndex>& )*/
	IF (@v_QueueFilter IS NOT NULL) 
			BEGIN 
				SELECT @v_QueueFilter = REPLACE(@v_QueueFilter, '&<UserIndex>&', @userIndex) 
				SELECT @v_QueueFilter = REPLACE(@v_QueueFilter, '&<UserName>&', @userName) 
				EXECUTE WFParseQueryFilter @v_QueueFilter, N'U', @userIndex, @v_ParsedQueryFilter OUT
				/* As per specifications, User Filters will not contain &<GroupIndex.*>&. Hence ignored */
				SELECT @v_QueueFilter = @v_ParsedQueryFilter
				SELECT @v_orderByPos = CHARINDEX('ORDER BY', UPPER(@v_QueueFilter)) 
				IF (@v_orderByPos <> 0)  
				BEGIN 
					IF (@DBClientOrderFlag = N'N') 
						SELECT @v_innerOrderBy = SUBSTRING(@v_QueueFilter, @v_orderByPos + LEN('ORDER BY'), LEN(@v_QueueFilter))
					SELECT @v_QueueFilter = SUBSTRING(@v_QueueFilter, 1, @v_orderByPos - 1) 
				END  
			END  
	/* End*/
	
	/* WFS_8.0_04 */
	BEGIN
		SELECT @v_AliasStr = ''
		SELECT @queryStr = 'SELECT PARAM1, ALIAS, ToReturn, VariableId1 FROM VarAliasTable (NOLOCK) WHERE QueueId = ' + CONVERT(NVarchar(10), @Q_QueueId) + ' ORDER BY ID ASC' 
		EXECUTE ('DECLARE CursorAlias CURSOR Fast_Forward FOR ' + @queryStr) 
		OPEN CursorAlias 
		SELECT @v_counter = 0    
		FETCH NEXT FROM CursorAlias INTO @v_PARAM1, @v_ALIAS, @v_ToReturn, @v_VariableId1
		WHILE (@@FETCH_STATUS = 0)  
		BEGIN 
			SELECT @v_counter = @v_counter + 1 
			IF (@v_ToReturn = N'Y') 
			BEGIN 
				SELECT @v_AliasStr =  ISNULL(@v_AliasStr,'') + ', ' + @v_PARAM1 + ' AS  "' + @v_ALIAS +'"'    
				SELECT @v_ExtAlias =  ISNULL(@v_ExtAlias, '') + ', ' +'"' + @v_ALIAS +'"'  
			END 
			IF (@DBorderBy > 100)
				IF (@v_VariableId1 = @DBorderBy) 
				BEGIN
					SELECT @v_sortFieldStr = ' ' + @v_ALIAS + ' '
					SELECT @sortFieldStrCol = ',' +@v_ALIAS
					IF(LEN(@DBlastValue) > 0)  
					BEGIN
						SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar
					END
				END
			IF (@v_VariableId1 > 157 AND @v_extTableName IS NOT NULL) 
				SELECT @v_JoinExtTable = 1
				
			FETCH NEXT FROM CursorAlias INTO @v_PARAM1, @v_ALIAS, @v_ToReturn , @v_VariableId1
		END  
		CLOSE CursorAlias 
		DEALLOCATE CursorAlias 
	END
	IF (@v_JoinExtTable = 1)
	BEGIN
		SELECT @v_extTable_QDT_JoinStr = ' INNER JOIN ' + @v_extTableName + ' ON (WFInstrumentTable.VAR_REC_1 = ItemIndex AND WFInstrumentTable.VAR_REC_2 = ItemType) '
		
	END	
	ELSE	
	BEGIN
		SELECT @v_extTableName = ''
		SELECT @v_extTable_QDT_JoinStr = ''
	END

	/* Define sortOrder */ 
	
	IF(@DBsortOrder = 'D') 
	BEGIN 
		SELECT @v_reverseOrder = 1  
		SELECT @v_sortStr = ' DESC '  
		SELECT @v_op = '<'  
	END 
	Else /* IF(@DBsortOrder = 'A') */  
	BEGIN 
		SELECT @v_reverseOrder = 0  
		SELECT @v_sortStr = ' ASC '  
		SELECT @v_op = '>'  
	END   
	
	/*
		QueueId has been fetch for the WorkItem , 
		Find QueryFilter for the following cases :- 
			1. FIFO, have to find next WI and lock it (We will be needing QueryFilter for conditions and Order by)
			2. WIP, to check if teh WI has to be opened in writable modde or in Query WorkStep read only mode
	*/

	IF ((@DBQueueId > 0 AND (@ProcessInstanceId IS NULL OR @ProcessInstanceId = '') ) OR 
		( @DBQueueId < 0 AND @bInQueue = 'Y' AND (@Q_UserId IS NULL OR @userIndex != @Q_UserId)))
	Begin
		SELECT	@toSearchStr = 'ORDER BY'
		SELECT @tempOrderStr = ''
		SELECT @QueryFilter = QueryFilter 
		FROM QueueUserTable (NOLOCK)
		WHERE QueueId = @Q_QueueId AND UserId = @userIndex  AND AssociationType = 0
		Select	@rowCount = @@rowCount
		If(@rowCount > 0) /* WFS_8.0_147 */
		BEGIN
			If(@QueryFilter IS NOT NULL AND @QueryFilter != '') 
			BEGIN	/* As user specific filter exists so NO group filter considered. */
	/*			IF(@QueryFilter IS NOT NULL AND @QueryFilter != '')
				BEGIN*/
					SELECT @QueryFilter =  Ltrim(Rtrim(REPLACE(@QueryFilter ,'&<UserIndex>&',@userIndex+'')))
					SELECT @QueryFilter =  Ltrim(Rtrim(REPLACE(@QueryFilter ,'&<UserName>&',@userName+'')))
					SELECT @orderByPos = CHARINDEX(@toSearchStr,UPPER(@QueryFilter))
					IF(@orderByPos > 0)
					Begin
						IF (@DBClientOrderFlag = N'N') 
						BEGIN
							SELECT @v_innerOrderBy = SUBSTRING(@QueryFilter, @orderByPos + LEN('ORDER BY'), LEN(@QueryFilter))
						END
						SELECT @QueryFilter = SUBSTRING(@QueryFilter,0, @orderByPos - 1)
					End
					EXECUTE WFParseQueryFilter @QueryFilter, N'U', @userIndex, @v_ParsedQueryFilter OUT
					SELECT @QueryFilter = @v_ParsedQueryFilter
	/*			END*/
			END
		END
		ELSE /*  group filter present*/
		BEGIN
			SELECT @queryStr = ''
			SELECT @queryStr = ' Select QueryFilter, GroupId ' +
				    ' From Qusergroupview ' +
				    ' Where GroupId IS NOT NULL ' +
				    ' AND QueueId  = ' + convert(nvarchar(10),@Q_QueueId) +
				    ' AND UserId = ' +convert(nvarchar(10),@userIndex) 

			EXECUTE (' DECLARE FilterCur CURSOR FAST_FORWARD FOR ' + @queryStr) 
			OPEN FilterCur 
			FETCH NEXT FROM FilterCur INTO @QueryFilter, @v_groupID
			SELECT @counterInt = 1
			WHILE(@@FETCH_STATUS <> -1)
			BEGIN
				IF (@@FETCH_STATUS <> -2)
				BEGIN
					SELECT @QueryFilter =  Ltrim(Rtrim(REPLACE(@QueryFilter ,'&<UserIndex>&',@userIndex+'')))
					SELECT @QueryFilter =  Ltrim(Rtrim(REPLACE(@QueryFilter ,'&<UserName>&',@userName+'')))
					IF @QueryFilter != ''
					BEGIN
						SELECT @orderByPos = CHARINDEX(@toSearchStr,UPPER(@QueryFilter))
						IF (@orderByPos > 0)					
						Begin
							IF (@DBClientOrderFlag = N'N') 
								SELECT @v_innerOrderBy = SUBSTRING(@QueryFilter, @orderByPos + LEN('ORDER BY'), LEN(@QueryFilter))
								
							SELECT @QueryFilter = SUBSTRING(@QueryFilter,0, @orderByPos - 1)
						End
						EXECUTE WFParseQueryFilter @QueryFilter, N'U', @userIndex, @v_ParsedQueryFilter OUT
						SELECT @QueryFilter = @v_ParsedQueryFilter
						EXECUTE WFParseQueryFilter @QueryFilter, N'G', @v_groupID, @v_ParsedQueryFilter OUT
						SELECT @QueryFilter = @v_ParsedQueryFilter
						IF (LEN(@queryFilter) > 0)
						BEGIN
							SELECT @queryFilter = '(' + @queryFilter + ')'
							IF @counterInt = 1
								SELECT @tempFilter =  @QueryFilter 
							ELSE
								SELECT @tempFilter  = @tempFilter + ' OR ' + @QueryFilter 
							SELECT @counterInt = @counterInt + 1
						END
					END
					/*WFS_8.0_046 */
					ELSE
					BEGIN
						SELECT @tempFilter = ''
						BREAK
					END
				END
				FETCH NEXT FROM FilterCur  INTO @QueryFilter, @v_groupID 
			END
			CLOSE FilterCur  
			DEALLOCATE FilterCur  
			SELECT @QueryFilter = @tempFilter

		END

		IF ((@QueryFilter = '' OR @QueryFilter IS NULL) AND (@Queuetype = N'N')) /* Check For Queue Filter for Search Case */
		BEGIN
			SELECT @v_queueFilter = QueueFilter From QueueDefTable (NOLOCK) where QueueId = @Q_QueueId
			SELECT @v_orderByPos = CHARINDEX('ORDER BY', UPPER(@v_queueFilter)) 
			IF (@v_orderByPos <> 0)  
			BEGIN 
				IF (@DBClientOrderFlag = N'N') 
					SELECT @v_innerOrderBy = SUBSTRING(@v_queueFilter, @v_orderByPos + LEN('ORDER BY'), LEN(@v_queueFilter))
				SELECT @v_queueFilter = SUBSTRING(@v_queueFilter, 1, @v_orderByPos - 1) 
			END 
			IF (@v_queueFilter IS NOT NULL AND LEN(@v_queueFilter) > 0)
			BEGIN
				SELECT @QueryFilter = @v_QueueFilter
				SELECT @QueryFilter =  Ltrim(Rtrim(REPLACE(@QueryFilter ,'&<UserIndex>&',@userIndex+'')))
				SELECT @QueryFilter =  Ltrim(Rtrim(REPLACE(@QueryFilter ,'&<UserName>&',@userName+'')))
				SELECT @orderByPos = CHARINDEX(@toSearchStr,UPPER(@QueryFilter))
				IF (@orderByPos > 0)					
				BEGIN
					IF (@DBClientOrderFlag = N'N') 
						SELECT @v_innerOrderBy = SUBSTRING(@QueryFilter, @orderByPos + LEN('ORDER BY'), LEN(@QueryFilter))
					SELECT @QueryFilter = SUBSTRING(@QueryFilter,0, @orderByPos - 1)
				END
				EXECUTE WFParseQueryFilter @QueryFilter, N'U', @userIndex, @v_ParsedQueryFilter OUT
				SELECT @QueryFilter = @v_ParsedQueryFilter
				SELECT @v_TempQueryFilter = @QueryFilter
				SELECT @queryStr = ' Select GroupId ' + ' From Qusergroupview ' + ' Where GroupId IS NOT NULL ' + ' AND QueueId  = ' + CONVERT(nvarchar(10),@Q_QueueId) +
					' AND UserId = ' + CONVERT(nvarchar(10),@userIndex) 
				EXECUTE (' DECLARE FilterCur CURSOR FAST_FORWARD FOR ' + @queryStr) 
				OPEN FilterCur 
				FETCH NEXT FROM FilterCur INTO @v_groupID
				SELECT @counterInt = 1
				WHILE(@@FETCH_STATUS <> -1)
				BEGIN
					IF (@@FETCH_STATUS <> -2)
					BEGIN
						SELECT @QueryFilter = @v_TempQueryFilter 
						EXECUTE WFParseQueryFilter @QueryFilter, N'G', @v_groupID, @v_ParsedQueryFilter OUT
						SELECT @QueryFilter = @v_ParsedQueryFilter
						IF (LEN(@queryFilter) > 0)
						BEGIN
							SELECT @queryFilter = '(' + @queryFilter + ')'
							IF @counterInt = 1
								SELECT @tempFilter =  @QueryFilter 
							ELSE
								SELECT @tempFilter  = @tempFilter + ' OR ' + @QueryFilter 
							SELECT @counterInt = @counterInt + 1
						END
					END
					FETCH NEXT FROM FilterCur  INTO @v_groupID 
				END
				CLOSE FilterCur  
				DEALLOCATE FilterCur  
				IF(@tempFilter IS NOT NULL 	AND LEN(LTRIM(RTRIM(@tempFilter))) > 0)
					SELECT @QueryFilter = @tempFilter
			END
		END
		
		IF (@QueryFilter IS NOT NULL AND LEN(LTRIM(RTRIM(@QueryFilter))) > 0)  
		BEGIN			
			SELECT @v_FunctionPos = CHARINDEX('&<FUNCTION>&', @QueryFilter)
			IF(@v_FunctionPos <> 0)
			BEGIN	
			SELECT @v_FunLength = LEN('&<FUNCTION>&')
			SELECT @v_functionFlag = 'Y'
			WHILE(@v_functionFlag = 'Y')
				BEGIN					
					SELECT @v_prevFilter = SUBSTRING(@QueryFilter, 0, @v_FunctionPos-1)
					SELECT @v_funPos1 = CHARINDEX('{', @QueryFilter)			
					
					SELECT @v_tempFunStr = SUBSTRING(@QueryFilter, @v_FunctionPos + @v_FunLength, @v_funPos1 - (@v_FunctionPos + @v_FunLength))
					SELECT @v_tempFunStr = LTRIM(RTRIM(@v_tempFunStr));					
					
					IF (@v_tempFunStr IS NULL OR LEN(@v_tempFunStr) = 0)
					BEGIN
						SELECT @v_funPos2 = CHARINDEX('}', @QueryFilter)
						SELECT @v_funFilter = SUBSTRING(@QueryFilter, @v_funPos1 + 1, @v_funPos2 - @v_funPos1 -1)
						
						SELECT @v_postFilter = STUFF(@QueryFilter, 1, @v_funPos2 + 1, NULL)
						SELECT @queryFunStr  = 'SELECT @v_FunValue = dbo.' + @v_funFilter				
						
						EXEC SP_EXECUTESQL
							@query = @queryFunStr, 
							@params = N'@v_FunValue VARCHAR(MAX) OUTPUT', 
							@v_FunValue = @v_FunValue OUTPUT						
						
						SELECT @QueryFilter = @v_prevFilter + ' ' + @v_FunValue + ' ' + @v_postFilter
					END	
					ELSE
					BEGIN
						BREAK
					END							
					SELECT @v_FunctionPos = CHARINDEX('&<FUNCTION>&', @QueryFilter)					
					IF(@v_FunctionPos = 0)
					BEGIN
						SELECT @v_functionFlag = 'N'
					END					
				END				
			END
		END

		IF (@QueryFilter IS NULL AND LEN(LTRIM(RTRIM(@QueryFilter))) <= 0)
		Begin
			SELECT @v_QueueFilter =''
			SELECT @queryFilterStr2 = ISNULL(@queryFilterStr2,'') + ' AND ' + @QueryFilter 
		End
	END
	
	IF ((@v_innerOrderBy is NULL) OR  (@ProcessInstanceId IS NOT NULL AND @ProcessInstanceId != ''))  
	BEGIN 
		IF(@DBorderBy = 1)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar   
			END  
			SELECT @v_sortFieldStr = ' PriorityLevel '  
		END  
		ElSE IF(@DBorderBy = 2)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0 )  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ProcessInstanceId ' 
		END  
		ElSE IF(@DBorderBy = 3)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END  
			SELECT @v_sortFieldStr = ' ActivityName ' 
		END 
		ElSE IF(@DBorderBy = 4)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' LockedByName ' 
		END 
		ElSE IF(@DBorderBy = 5) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' IntroducedBy ' 
		END 
		ElSE IF(@DBorderBy = 6)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END 	 
			SELECT @v_sortFieldStr = ' InstrumentStatus ' 
		END 
		ElSE IF(@DBorderBy = 7)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END  
			SELECT @v_sortFieldStr = ' CheckListCompleteFlag '  
		END 
		ElSE IF(@DBorderBy = 8)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' LockStatus ' 
		END 
		ElSE IF(@DBorderBy = 9)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @DBlastValue 
			END  
			SELECT @v_sortFieldStr = ' WorkItemState ' 
		END 
		ElSE IF(@DBorderBy = 10) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' EntryDateTime ' 
		END 
		ElSE IF(@DBorderBy = 11)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ValidTill ' 
		END 
		ElSE IF(@DBorderBy = 12)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END 
			SELECT @v_sortFieldStr = ' LockedTime ' 
		END 
		ElSE IF(@DBorderBy = 13)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END 	 
			SELECT @v_sortFieldStr = ' IntroductionDateTime ' 
		END 
		ElSE IF(@DBorderBy = 17)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' Status ' 
		END 
		ElSE IF(@DBorderBy = 18) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' CreatedDateTime ' 
		END 
		ElSE IF(@DBorderBy = 19) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ExpectedWorkItemDelay ' 
		END 		/* Sorting On Alias */
		ElSE IF(@DBorderBy = 20) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ProcessedBy ' 
		END 		/* Sorting On Alias */

		
		IF(@DBLastProcessInstanceId IS NOT NULL AND @DBLastProcessInstanceId !='')
		BEGIN 		
			SELECT @v_TempColumnVal = @v_lastValueStr 

			IF(@DBlastValue IS NOT NULL) 
			BEGIN 
				SELECT @v_lastValueStr = ' AND ( ( ' + @v_sortFieldStr + @v_op + @v_TempColumnVal + ') '   
				SELECT @v_lastValueStr = @v_lastValueStr + ' OR ( ' + @v_sortFieldStr + ' = ' + @v_TempColumnVal 
			END 
			ELSE 
			BEGIN 
				SELECT @v_lastValueStr = ' AND  ( ( ' + @v_sortFieldStr + ' IS NULL '  
			END

			SELECT @v_lastValueStr = @v_lastValueStr + ' AND (  ' 
			SELECT @v_lastValueStr = @v_lastValueStr + ' ( Processinstanceid = N' + @v_quoteChar + @DBLastProcessInstanceId + @v_quoteChar + ' AND  WorkItemId ' + @v_op + CONVERT(NVarchar(10), (@DBLastWorkitemId)) + ' )' 
			SELECT @v_lastValueStr = @v_lastValueStr + ' OR Processinstanceid' + @v_op +'N'+ @v_quoteChar + @DBLastProcessInstanceId + @v_quoteChar  
			SELECT @v_lastValueStr = @v_lastValueStr + ' ) '  

			IF(@DBlastValue IS NOT NULL) 
			BEGIN 
				IF (@DBsortOrder = N'A') 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE  
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NULL )'  
				END
				SELECT @v_lastValueStr = @v_lastValueStr + ') '
			END 
			ELSE  
			BEGIN 
				IF (@DBsortOrder = N'D') 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NOT NULL )'  
				END
				SELECT @v_lastValueStr = @v_lastValueStr + ') '
			END 
		END
		IF (@DBorderBy = 2) 
		BEGIN 
			SELECT @orderByStr = ' ORDER BY ProcessInstanceID ' + @v_sortStr + ', WorkItemID ' + @v_sortStr 
		END 
		ELSE  
		BEGIN 
			SELECT @orderByStr = ' ORDER BY ' + @v_sortFieldStr + @v_sortStr + ', ProcessInstanceID ' + @v_sortStr + ', WorkItemID ' + @v_sortStr 
		END  
	END
	ELSE 
	BEGIN 
		SELECT @orderByStr = ' ORDER BY '  
		SELECT @v_innerOrderBy = @v_innerOrderBy + ','  

		SELECT @v_PositionComma = CHARINDEX (',', @v_innerOrderBy)  
		SELECT @v_innerOrderByCount = 0  

		WHILE (@v_PositionComma > 0) 
		BEGIN 
			SELECT @v_innerOrderByCount = @v_innerOrderByCount + 1  
			SELECT @v_TempColumnName = SUBSTRING(@v_innerOrderBy, 1 , @v_PositionComma - 1)  

			SELECT @v_orderByPos = CHARINDEX( 'ASC',UPPER(@v_TempColumnName)) 
			IF (@v_orderByPos > 0)  
			BEGIN 
				SELECT @v_TempSortOrder = 'ASC' 
				SELECT @v_TempColumnName = RTRIM(SUBSTRING(@v_TempColumnName, 1, @v_orderByPos -1))  
			END 
			ELSE  
			BEGIN 
				SELECT @v_orderByPos = CHARINDEX( 'DESC',UPPER(@v_TempColumnName)) 
				IF (@v_orderByPos > 0) 
				BEGIN 
					SELECT @v_TempSortOrder = 'DESC' 
					SELECT @v_TempColumnName = RTRIM(SUBSTRING(@v_TempColumnName, 1, @v_orderByPos -1)) 
				END 
				ELSE  
				BEGIN 
					SELECT @v_TempSortOrder = 'ASC'  
				END  
			END  

			IF (@v_reverseOrder = 1)  
			BEGIN 
				IF (@v_TempSortOrder = 'ASC')  
				BEGIN 
					SELECT @v_TempSortOrder = 'DESC'  
				END 
				ELSE  
				BEGIN 
					SELECT @v_TempSortOrder = 'ASC' 
				END   
			END   

			IF (@v_innerOrderByCount = 1)  
			BEGIN 
				SELECT @v_innerLastValueStr = @v_TempColumnName  
				SELECT @orderByStr = @orderByStr + @v_TempColumnName + ' ' + @v_TempSortOrder 
			END 
			ELSE  
			BEGIN 
				SELECT @v_innerLastValueStr = @v_innerLastValueStr +  ', ' + @v_TempColumnName  
				SELECT @orderByStr = @orderByStr + ', ' + @v_TempColumnName + ' ' + @v_TempSortOrder  
			END  
			
			IF (@v_innerOrderByCount = 1 )  
			BEGIN 
				SELECT @v_innerOrderByCol1 = @v_TempColumnName  
				SELECT @v_innerOrderBySort1 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 2 )  
			BEGIN 
				SELECT @v_innerOrderByCol2 = @v_TempColumnName  
				SELECT @v_innerOrderBySort2 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 3 ) 
			BEGIN 
				SELECT @v_innerOrderByCol3 = @v_TempColumnName  
				SELECT @v_innerOrderBySort3 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 4 )  
			BEGIN 
				SELECT @v_innerOrderByCol4 = @v_TempColumnName  
				SELECT @v_innerOrderBySort4 = @v_TempSortOrder 
			END 
			ELSE IF (@v_innerOrderByCount = 5 )  
			BEGIN 
				SELECT @v_innerOrderByCol5 = @v_TempColumnName 
				SELECT @v_innerOrderBySort5 = @v_TempSortOrder  
			END  
			SELECT @v_innerOrderBy = SUBSTRING(@v_innerOrderBy, @v_PositionComma + 1, LEN(@v_innerOrderBy)) 
			SELECT @v_PositionComma = CHARINDEX (',',@v_innerOrderBy)  
			
		END  
		SELECT @orderByStr = @orderByStr + ', ' + 'ProcessInstanceID' + @v_sortStr + ', WorkItemID ' + @v_sortStr  	
		 
		IF(@DBLastProcessInstanceId IS NOT NULL AND len(@DBLastProcessInstanceId) > 0)  
		BEGIN 
			SELECT @v_counter = 0  

			WHILE (@v_counter < @v_innerOrderByCount)  
			BEGIN 
				SELECT @v_counter = @v_counter + 1  
				IF (@v_counter = 1 )  
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol1 
				END 
				ELSE IF (@v_counter = 2 )  
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol2 
				END 
				ELSE IF (@v_counter = 3 ) 
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol3 
				END 
				ELSE IF (@v_counter = 4 )  
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol4 
				END 
				ELSE IF (@v_counter = 5 ) 
				BEGIN 
					SELECT @v_sortFieldStr = @v_innerOrderByCol5  
				END  

				IF (@v_counter = 1 ) 
				BEGIN 
					SELECT @v_innerOrderByType1 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 2 ) 
				BEGIN 
					SELECT @v_innerOrderByType2 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 3 )  
				BEGIN 
					SELECT @v_innerOrderByType3 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 4 )  
				BEGIN 
					SELECT @v_innerOrderByType4 = @v_tempDataType 
				END 
				ELSE IF (@v_counter = 5 )  
				BEGIN 
					SELECT @v_innerOrderByType5 = @v_tempDataType  
				END  
			END  

			IF (@v_innerOrderByCount > 0 )  
			BEGIN 
				SELECT @v_counter = 5 - @v_innerOrderByCount  

				WHILE (@v_counter > 0) 
				BEGIN 
					select @v_innerLastValueStr = @v_innerLastValueStr +  ', NULL'  
					select @v_counter = @v_counter - 1 
				END  
			END  

			BEGIN 
				/*select @v_QueryStr = 'SELECT ' +  @v_innerLastValueStr + ' FROM (SELECT QUEUEDATATABLE.* ' + ISNULL(@v_AliasStr,'') + ' FROM QUEUEDATATABLE ' + @v_extTable_QDT_JoinStr + ' WHERE PROCESSINSTANCEID = ' + @v_quoteChar + @DBLastProcessInstanceId + @v_quoteChar + ' AND WORKITEMID = ' + CONVERT(NVarchar(10), (@DBLastWorkitemId)) + ') Table0' */
				
                                select @qdtColString = 'ProcessInstanceId, WorkItemId, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4, VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8, VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, InstrumentStatus ,CheckListCompleteFlag ,
				SaveStage, HoldStatus, Status, ReferredTo, ReferredToName, ReferredBy, ReferredByName, ChildProcessInstanceId ChildWorkitemId, ParentWorkItemID, CalendarName'
				
				select @v_QueryStr = 'SELECT ' +  @v_innerLastValueStr + ' FROM (SELECT '+ @qdtColString + ISNULL(@v_AliasStr,'') + ' FROM WFINSTRUMENTTABLE ' + @v_extTable_QDT_JoinStr + ' WHERE PROCESSINSTANCEID = N' + @v_quoteChar + @DBLastProcessInstanceId + @v_quoteChar + ' AND WORKITEMID = ' + CONVERT(NVarchar(10), (@DBLastWorkitemId)) + ') Table0' 

				EXECUTE ('DECLARE CursorLastValue CURSOR Fast_Forward FOR ' + @v_QueryStr) 
				
				OPEN CursorLastValue 
				SELECT @v_counter = 0
				
				FETCH NEXT FROM CursorLastValue INTO @v_innerOrderByVal1, @v_innerOrderByVal2, @v_innerOrderByVal3, @v_innerOrderByVal4, @v_innerOrderByVal5  

				WHILE (@@FETCH_STATUS = 0)  
				BEGIN  
					FETCH NEXT FROM CursorLastValue INTO @v_innerOrderByVal1, @v_innerOrderByVal2, @v_innerOrderByVal3, @v_innerOrderByVal4, @v_innerOrderByVal5  
				END 
				/* Close and DeAllocate the cursor */  
				CLOSE CursorLastValue 
				DEALLOCATE CursorLastValue 					
			END

			SELECT @v_counter = 0 
			SELECT @v_counterCondition = 0  
			SELECT @v_lastValueStr = ' AND ( '  
			WHILE (@v_counter < @v_innerOrderByCount + 1 ) 
			BEGIN 
				SELECT @v_counter1 = 0  
				SELECT @v_TemplastValueStr = ''/*WFS_8.0_120*/
				WHILE (@v_counter1 <= @v_counter) 
				BEGIN 
					IF (@v_counter1 = 0)  
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol1  
						SELECT @v_TempSortOrder = @v_innerOrderBySort1  
						SELECT @v_TempColumnVal = @v_innerOrderByVal1  
						SELECT @v_tempDataType = @v_innerOrderByType1  
					END 
					ELSE IF (@v_counter1 = 1)  
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol2  
						SELECT @v_TempSortOrder = @v_innerOrderBySort2 
						SELECT @v_TempColumnVal = @v_innerOrderByVal2 
						SELECT @v_tempDataType = @v_innerOrderByType2 
					END 
					ELSE IF (@v_counter1 = 2) 
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol3 
						SELECT @v_TempSortOrder = @v_innerOrderBySort3 
						SELECT @v_TempColumnVal = @v_innerOrderByVal3 
						SELECT @v_tempDataType = @v_innerOrderByType3 
					END 
					ELSE IF (@v_counter1 = 3) 
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol4 
						SELECT @v_TempSortOrder = @v_innerOrderBySort4 
						SELECT @v_TempColumnVal = @v_innerOrderByVal4 
						SELECT @v_tempDataType = @v_innerOrderByType4 
					END 
					ELSE IF (@v_counter1 = 4) 
					BEGIN 
						SELECT @v_TempColumnName = @v_innerOrderByCol5 
						SELECT @v_TempSortOrder = @v_innerOrderBySort5 
						SELECT @v_TempColumnVal = @v_innerOrderByVal5 
						SELECT @v_tempDataType = @v_innerOrderByType5 
					END  

					IF (@v_counter = @v_innerOrderByCount ) 
					BEGIN 
						IF (@v_counter1 < @v_counter) 
						BEGIN 
							IF (@v_TempColumnVal IS NULL) 
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' IS NULL ' 
							END 
							ELSE  
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' = ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
							END  
							SELECT @v_TemplastValueStr = @v_TemplastValueStr + ' AND '  
						END 
					END 
					ELSE 
					BEGIN 
						IF (@v_counter1 = @v_counter) 
						BEGIN 
							IF (@v_TempSortOrder = 'ASC') 
							BEGIN 
								IF (@v_TempColumnVal IS NOT NULL) 
								BEGIN 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' > ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
								END 
								ELSE 
								BEGIN 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' IS NOT NULL ' 
								END  
							END 
							ELSE  
							BEGIN 
								IF (@v_TempColumnVal IS NOT NULL)  
								BEGIN 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + '( '  
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' < ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
									SELECT @v_TemplastValueStr = @v_TemplastValueStr + ' OR ' +  @v_TempColumnName + ' IS NULL )'  
								END 
								ELSE  
								BEGIN 
									SELECT @v_TemplastValueStr = NULL
								END 	
							END 
						END 
						ELSE  
						BEGIN 
							IF (@v_TempColumnVal IS NOT NULL)  
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' = ' + @v_quoteChar + @v_TempColumnVal + @v_quoteChar 
							END 
							ELSE  
							BEGIN 
								SELECT @v_TemplastValueStr = @v_TemplastValueStr + @v_TempColumnName + ' IS NULL '  
							END   

							SELECT @v_TemplastValueStr = @v_TemplastValueStr + ' AND '  
						END  
					END 
					SELECT @v_counter1 = @v_counter1 + 1 
				END 

				IF (@v_TemplastValueStr IS NOT NULL) 
				BEGIN 
					IF (@v_counterCondition > 0) 
					BEGIN 
						SELECT @v_lastValueStr = @v_lastValueStr + ' OR ( ' 
					END  
					SELECT @v_lastValueStr = @v_lastValueStr + @v_TemplastValueStr 
					IF (@v_counterCondition > 0 AND @v_counter < @v_innerOrderByCount ) 
					BEGIN 
						SELECT @v_lastValueStr = @v_lastValueStr + ' )'  
					END  
					SELECT @v_counterCondition = @v_counterCondition + 1 
				END  
				SELECT @v_counter = @v_counter + 1  
			END  
			
			SELECT @v_lastValueStr = @v_lastValueStr + ' (  ( Processinstanceid = N' + @v_quoteChar + @DBLastProcessInstanceId + @v_quoteChar  
			SELECT @v_lastValueStr = @v_lastValueStr + ' AND  WorkItemId ' + @v_op + CONVERT(NVarchar(10), (@DBLastWorkitemId)) + ' )'  
			SELECT @v_lastValueStr = @v_lastValueStr + ' OR Processinstanceid' + @v_op +'N'+ @v_quoteChar + @DBLastProcessInstanceId + @v_quoteChar  
			SELECT @v_lastValueStr = @v_lastValueStr + ' ) )'  
			
			IF ( @v_counterCondition > 1 )  
			BEGIN 
				SELECT @v_lastValueStr = @v_lastValueStr + ' )'  
			END   
		END 
	END

	/*Todo Also check if DBQueueId < 0, and bINQueue = 'Y' then if tableName was not WorkInProcessTable...*/


	IF((@DBQueueId > 0 AND (@ProcessInstanceId IS NOT NULL OR @ProcessInstanceId != '')) OR @DBQueueId <=0)
		SELECT @canLock  = 'Y'
	IF((@canLock  = 'Y' AND (@ProcessInstanceId is not null AND len(@ProcessInstanceId) > 0 )) OR 
		(@ProcessInstanceId is null OR @ProcessInstanceId = ''))
	Begin
		/* WFS_8.0_04 */
		/* SELECT @v_WLTColStr = ' QueueDataTable.ProcessInstanceId, QueueDataTable.ProcessInstanceId as ProcessInstanceName,' + ' ProcessInstanceTable.ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, ProcessInstanceTable.CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime,  getdate() as LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser, FilterValue, ' + ' QueueDataTable.WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, NotifyStatus, Status, Q_QueueID,' + ' ReferredByname, ReferredTo, Q_UserID, Q_StreamId, CollectFlag, QueueDataTable.ParentWorkItemId, ProcessedBy, LastProcessedBy,' + ' ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessInstanceTable.ProcessVariantId'/*Process Variant Support Changes*/ */

		SELECT @v_WLTColStr = ' ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime,  getdate() as LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser, FilterValue, ' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, NotifyStatus, Status, Q_QueueID,' + ' ReferredByname, ReferredTo, Q_UserID, Q_StreamId, CollectFlag, ParentWorkItemId, ProcessedBy, LastProcessedBy,' + ' ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessVariantId, Q_DivertedByUserId,ActivityType,LastModifiedTime,URN'/*Process Variant Support Changes*/
		SELECT @v_WLTColStr1 = ' ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, ProcessDefId,  LastProcessedBy, ProcessedBy, ActivityName, ActivityId,  EntryDateTime,IntroductionDateTime,  ParentWorkItemId, AssignmentType,  CollectFlag, PriorityLevel, ValidTill,  Q_StreamId, Q_QueueID, Q_UserID,  AssignedUser, FilterValue, CreatedDateTime, WORKITEMSTATE,  Statename, ExpectedWorkItemDelay, PREVIOUSSTAGE,  LockedByName, LockStatus, LockedTime, QueueName, QueueType, NotifyStatus, ProcessVariantId, Q_DivertedByUserId,ActivityType,LastModifiedTime ,URN ' /*Process Variant Support Changes*/

		SELECT @v_QDTColStr = ', VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8,' +' VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6,' + ' VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4, VAR_LONG5, VAR_LONG6,'+ ' VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8, VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20' 

		
		IF((@ProcessInstanceId is null OR @ProcessInstanceId = '') AND @DBQueueType = N'F')
		Begin
			SELECT @queryStr = @queryStr + ' WITH (UPDLOCK,READPAST) '
		End
	   
	    IF (((@QueryFilter IS NULL OR @QueryFilter = '' ) AND (@v_QueueFilter IS NULL OR @v_QueueFilter = '') AND (@DBorderBy < 3)) 
		AND (@DBuserFilterStr IS NULL OR @DBuserFilterStr = ''))
		BEGIN
			/*Process Variant Support Changes*/
			/*SELECT @queryStr = 'Select TOP 1 ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, ProcessDefID, LastProcessedBy, ProcessedBy, ActivityName,ActivityId, EntryDateTime, WorkListTable.ParentWorkItemId, AssignmentType, CollectFlag, PriorityLevel, ValidTill, Q_StreamId, Q_QueueId, 	Q_UserId, AssignedUser, FilterValue, CreatedDateTime, WorkItemState, Statename, ExpectedWorkitemDelay, PreviousStage, LockedByName, LockStatus, 		LockedTime, Queuename, Queuetype, NotifyStatus, ProcessVariantId From WorkListTable ' */
			
			SELECT @queryStr = 'Select TOP 1 ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, ProcessDefID, LastProcessedBy, ProcessedBy, ActivityName,ActivityId, EntryDateTime,IntroductionDateTime, ParentWorkItemId, AssignmentType, CollectFlag, PriorityLevel, ValidTill, Q_StreamId, Q_QueueId, 	Q_UserId, AssignedUser, FilterValue, CreatedDateTime, WorkItemState, Statename, ExpectedWorkitemDelay, PreviousStage, LockedByName, LockStatus, 		LockedTime, Queuename, Queuetype, NotifyStatus, ProcessVariantId, Q_DivertedByUserId,ActivityType,LastModifiedTime,URN From WFINSTRUMENTTABLE  '
			
			IF((@ProcessInstanceId is null OR @ProcessInstanceId = '') AND @DBQueueType = N'F') 
			Begin 
				SELECT @queryStr = @queryStr + ' WITH (UPDLOCK,READPAST) ' 
			End 
			ELSE
			BEGIN
				SELECT @queryStr = @queryStr + ' WITH (UPDLOCK,ROWLOCK)  ' 
			END
			 /*Bug #815 */
			/*SELECT @queryStr = @queryStr + @queryFilterStr + ISNULL(@v_lastValueStr,'')+ @orderByStr */
			/*SELECT @queryStr = @queryStr + @queryFilterStr + ISNULL(@v_lastValueStr,'')+ @orderByStr */
			IF(@DBTaskId > 0) 
			BEGIN
				SELECT @queryStr = @queryStr + @queryFilterStr + ' AND 1=2 And RoutingStatus = ''N'' AND Lockstatus = ''N''' +ISNULL(@v_lastValueStr,'')+ @orderByStr
			END
			ELSE
			BEGIN	
			SELECT @queryStr = @queryStr + @queryFilterStr + ' And RoutingStatus = ''N'' AND Lockstatus = ''N''' +ISNULL(@v_lastValueStr,'')+ @orderByStr
			END
		END
		ELSE 
		BEGIN
			/*IF(@DBOrderBy > 100 AND (@v_sortFieldStr IS NOT NULL OR @v_sortFieldStr != ''))
				SELECT @queryStr = 'SELECT TOP 1 '+ @v_WLTColStr1 + @sortFieldStrCol + ' FROM ( SELECT TOP 1 * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM Worklisttable '
			ELSE
				SELECT @queryStr = 'SELECT TOP 1 '+ @v_WLTColStr1 + ' FROM ( SELECT TOP 1 * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM Worklisttable '*/
			
			IF(@DBOrderBy > 100 AND (@v_sortFieldStr IS NOT NULL OR @v_sortFieldStr != ''))
				SELECT @queryStr = 'SELECT TOP 1 '+ @v_WLTColStr1 + @sortFieldStrCol + ' FROM ( SELECT TOP 1 * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFINSTRUMENTTABLE  '
			ELSE
				SELECT @queryStr = 'SELECT TOP 1 '+ @v_WLTColStr1 + ' FROM ( SELECT TOP 1 * FROM (SELECT ' + @v_WLTColStr + @v_QDTColStr + ISNULL(@v_AliasStr,'') + ' FROM WFINSTRUMENTTABLE '

			IF((@QueryFilter IS NOT NULL AND LEN(LTRIM(RTRIM(@QueryFilter))) > 0) AND (@v_QueueFilter IS NOT NULL AND LEN(LTRIM(RTRIM(@v_QueueFilter))) > 0 ))
			BEGIN
				SELECT @v_QueueFilter = ' AND (' +@QueryFilter+')'
			END
			ELSE IF(@QueryFilter IS NULL OR @QueryFilter = '' )
			BEGIN
				IF(@v_QueueFilter IS NOT NULL AND LEN(LTRIM(RTRIM(@v_QueueFilter))) > 0 )  
					SELECT @v_QueueFilter = ' AND ' + @v_QueueFilter 
			END
			ELSE
			BEGIN
				SELECT @queryFilterStr2 = ISNULL(@queryFilterStr2,'') + ' AND ' + '('+@QueryFilter+')'
				SELECT @v_QueueFilter = ''
			END
			IF((@ProcessInstanceId is null OR @ProcessInstanceId = '') AND @DBQueueType = N'F')
			Begin
				SELECT @queryStr = @queryStr + ' WITH (UPDLOCK,READPAST) '
			End
			ELSE
			BEGIN
				SELECT @queryStr = @queryStr + ' WITH (UPDLOCK,ROWLOCK) ' 
			
			END
			/*SELECT @queryStr = @queryStr + ', ProcessInstanceTable, QueueDatatable '+ @v_extTable_QDT_JoinStr +' WHERE QueueDatatable.ProcessInstanceId = ProcessInstanceTable.ProcessInstanceId AND Worklisttable.ProcessInstanceId = QueueDatatable.ProcessInstanceId AND Worklisttable.Workitemid =QueueDatatable.Workitemid ) Table1 ' + ISNULL(@queryFilterStr,'')+ ISNULL(@v_lastValueStr,'') + ISNULL(@queryFilterStr2,'') + ISNULL(@v_QueueFilter,'') + ISNULL(@orderByStr,'') + ') Table2' 	*/
			
			IF(@DBTaskId > 0)
			BEGIN 
			SELECT @queryStr = @queryStr + @v_extTable_QDT_JoinStr +' WHERE 1=2 AND RoutingStatus = ''N'' AND LockStatus = ''N'') Table1 ' + ISNULL(@queryFilterStr,'')+ ISNULL(@v_lastValueStr,'') + ISNULL(@queryFilterStr2,'') + ISNULL(@v_QueueFilter,'') + ISNULL(@orderByStr,'') + ') Table2' 
			END
			ELSE
			BEGIN
			SELECT @queryStr = @queryStr + @v_extTable_QDT_JoinStr +' WHERE RoutingStatus = ''N'' AND LockStatus = ''N'') Table1 ' + ISNULL(@queryFilterStr,'')+ ISNULL(@v_lastValueStr,'') + ISNULL(@queryFilterStr2,'') + ISNULL(@v_QueueFilter,'') +ISNULL(@DBuserFilterStr,'')+ ISNULL(@orderByStr,'') + ') Table2' 
			END

		END

		Begin Transaction LockWI

		EXECUTE (' DECLARE LockCur CURSOR FAST_FORWARD FOR ' + @queryStr ) 
		OPEN LockCur
		IF(@DBOrderBy > 100 AND (@v_sortFieldStr IS NOT NULL OR @v_sortFieldStr != ''))
		FETCH NEXT FROM LockCur INTO 
			@ProcessInstanceId, @WorkItemId, @ProcessName, @ProcessVersion,
			@ProcessDefID, @LastProcessedBy, @ProcessedBy, @ActivityName,
			@ActivityId, @EntryDateTime,@IntroductionDate, @ParentWorkItemId, @AssignmentType,
			@CollectFlag, @PriorityLevel, @ValidTill, @Q_StreamId,
			@Q_QueueId, @Q_UserId, @AssignedUser, @FilterValue,
			@CreatedDateTime, @WorkItemState, @Statename, @ExpectedWorkitemDelay,
			@PreviousStage, @LockedByName, @LockStatus, @LockedTime,
			@Queuename, @Queuetype, @NotifyStatus, @processVariantId, @Q_DivertedByUserId,@v_ActivityType,@LastModifiedTime,@sortFieldStrValue,@v_URN /*Process Variant Support Changes*/
		ELSE
		FETCH NEXT FROM LockCur INTO 
			@ProcessInstanceId, @WorkItemId, @ProcessName, @ProcessVersion,
			@ProcessDefID, @LastProcessedBy, @ProcessedBy, @ActivityName,
			@ActivityId, @EntryDateTime,@IntroductionDate, @ParentWorkItemId, @AssignmentType,
			@CollectFlag, @PriorityLevel, @ValidTill, @Q_StreamId,
			@Q_QueueId, @Q_UserId, @AssignedUser, @FilterValue,
			@CreatedDateTime, @WorkItemState, @Statename, @ExpectedWorkitemDelay,
			@PreviousStage, @LockedByName, @LockStatus, @LockedTime,
			@Queuename, @Queuetype, @NotifyStatus, @processVariantId, @Q_DivertedByUserId,@v_ActivityType,@LastModifiedTime,@v_URN  /*Process Variant Support Changes*/
		SELECT @v_tempQ_UserId = @Q_UserId
		IF(@@Fetch_Status = 0)
		Begin

			Select	@found	= 'Y'
			IF (@CheckQueryWSFlag = 'N')
				Select	@canLock = 'Y'
			ELSE
				Select	@canLock = 'N'  /*WFS_8.0_069*/
			/* TODO - should we check for workitem state to make canLock -> Y 
				  change maincode to no authorization - when workitem state is not valid */
			BEGIN
			IF(@DBorderBy = 1)  
			BEGIN  
				SELECT @sortFieldStrValue =@PriorityLevel
			END  
			ElSE IF(@DBorderBy = 2)  
			BEGIN  
					SELECT @sortFieldStrValue =@ProcessInstanceId  
			END  
			ElSE IF(@DBorderBy = 3)  
			BEGIN  
					SELECT @sortFieldStrValue =@ActivityName 
			END 
			ElSE IF(@DBorderBy = 4)  
			BEGIN 
					SELECT @sortFieldStrValue =@LockedByName  
			END
			ElSE IF(@DBorderBy = 8)  
			BEGIN 
					SELECT @sortFieldStrValue = @LockStatus  
			END 
			ElSE IF(@DBorderBy = 9)  
			BEGIN 
					SELECT @sortFieldStrValue = @WorkItemState 
			END 
			ElSE IF(@DBorderBy = 10) 
			BEGIN 
--					SELECT @sortFieldStrValue =@EntryDateTime
				SELECT @sortFieldStrValue =CONVERT(VARCHAR, @EntryDateTime,21)					
			END 
			ElSE IF(@DBorderBy = 11)  
			BEGIN 
					SELECT @sortFieldStrValue = CONVERT(VARCHAR, @ValidTill,21)
			END 
			ElSE IF(@DBorderBy = 12)  
			BEGIN 
					SELECT @sortFieldStrValue = CONVERT(VARCHAR, @LockedTime,21)
			END
			ElSE IF(@DBorderBy = 13)  
			BEGIN 
					SELECT @sortFieldStrValue = CONVERT(VARCHAR, @IntroductionDate,21)
			END
			ElSE IF(@DBorderBy = 17)  
			BEGIN 
				SELECT @sortFieldStrValue =@Status  
			END 
			ElSE IF(@DBorderBy = 18) 
			BEGIN 
				SELECT @sortFieldStrValue = CONVERT(VARCHAR, @CreatedDateTime,21)
			END 
			ElSE IF(@DBorderBy = 19) 
			BEGIN 
				SELECT @sortFieldStrValue = CONVERT(VARCHAR, @ExpectedWorkItemDelay,21)
			END 		/* Sorting On Alias */
			ElSE IF(@DBorderBy = 20) 
			BEGIN
					SELECT @sortFieldStrValue = @ProcessedBy
			END
		END	
		End
		/*Else IF (@bInQueue = 'Y' AND @tableName = 'WorkListTable') */
		Else IF (@bInQueue = 'Y' AND @RoutingStatus = 'N' and @LockStatus = 'N')
		BEGIN
			Select @CheckQueryWSFlag = 'Y'
			Select @canLock = 'N'
			Rollback Transaction LockWI
		END
		ELSE
			Rollback Transaction LockWI
		CLOSE LockCur
		DEALLOCATE LockCur
	End
	IF(@DBTaskId > 0) 
	BEGIN
		Select @found	= 'N'
	END		
	IF(@found = 'Y')
	Begin

		/* Condition modified as assignmentType can be null - Ruhi Hira */
		If(@canLock = 'Y' AND (@AssignmentType IS NULL OR @AssignmentType = '' OR 
			NOT (@AssignmentType = 'F' OR @AssignmentType = 'E' OR @AssignmentType = 'A')))
		Begin

			IF(@DBQueueId >= 0 AND @DBQueueId != @Q_QueueId)
			Begin
				Rollback Transaction LockWI
				/* Bug # WFS_5_116, so that WI is not available to any user in a dynamic queue after one user has performed done operation */
				Select	@MainCode = 810 /* Workitem not in the queue specified. */
				Select	@MainCode	MainCode,
					@lockFlag	lockFlag
				Return
			End
		END
		Else
		Begin
			/* Bug # WFS_5_068 */
			/* Modified on : 27/12/2006, Bug # WFS_5_149 - Ruhi Hira */			
			IF (@userIndex = @Q_UserId OR @v_UtilityFlag='Y')
				Select	@canLock = 'Y'
			ELSE 
			Begin
				Rollback Transaction LockWI
				Select	@canLock = 'N'
			End
		End

		If(@canLock = 'Y')
		Begin
				If(@AssignmentType IS NULL)
				Begin
					Select	@AssignmentType = 'S'
				End
				Select	@Q_UserId	= @userIndex
				Select	@AssignedUser	= @userName
				Select	@WorkitemState	= 2
				Select	@StateName	= 'RUNNING'
				Select	@LockedByName	= @userName
				Select	@LockStatus	= 'Y'
				Select	@LockedTime	= getDate()
				Select @v_AssignQ_QueueId = @Q_QueueId				
				Select @v_AssignFilterVal = @FilterValue				
				Select @v_AssignQueueType = @Queuetype
				Select @v_AssignedUser = @AssignedUser
				Select 	@v_AssignQueueName = @Queuename
				
				If(@DBQueueType = N'F' AND @DBAssignMe = 'Y')				
				BEGIN
					Select @AssignmentType = 'F'				
					Select @v_AssignQ_QueueId = 0					
					Select @v_AssignFilterVal = NULL				
					Select @v_AssignQueueType = 'U'
					Select @v_AssignQueueName = @userName + '''s MyQueue'
					
				END	

				/*Delete	From WorkListTable
				Where	ProcessInstanceID = @ProcessInstanceId
				AND	WorkItemID = @WorkitemId*/
				
				/*Select	@rowCount = @@rowCount */

					/*Insert Into WorkInProcessTable 
					Select @ProcessInstanceId, @WorkItemId, @ProcessName, @ProcessVersion,
						@ProcessDefID, @LastProcessedBy, @ProcessedBy, @ActivityName,
						@ActivityId, @EntryDateTime, @ParentWorkItemId, @AssignmentType,
						@CollectFlag, @PriorityLevel, @ValidTill, @Q_StreamId,
						@v_AssignQ_QueueId, @Q_UserId, @AssignedUser, @v_AssignFilterVal,
						@CreatedDateTime, @WorkItemState, @Statename, @ExpectedWorkitemDelay,
						@PreviousStage, @LockedByName, @LockStatus, @LockedTime,
						@v_AssignQueueName, @v_AssignQueueType, @NotifyStatus, NULL, @processVariantId //Process Variant Support Changes */
				If(@Queuetype != 'F' OR(@Queuetype = 'F' AND @DBQueueId > 0 AND @v_tempQ_UserId = @userIndex) OR (@Queuetype = 'F' AND @DBQueueId > 0 AND (@DBProcessInstanceId IS NULL OR @DBProcessInstanceId = ''  OR (Len(@DBProcessInstanceId) <= 0))) OR 
				(@Queuetype = 'F' AND @AssignmentType = 'H') )
				BEGIN
					Select	@rowCount = 1
				END
				Else
				BEGIN
					Select	@rowCount = 0
				END	
				If(@rowcount > 0)
				BEGIN
					Update WFInstrumentTable Set AssignmentType = @AssignmentType , Q_QueueId = @v_AssignQ_QueueId,
					Q_UserId = @Q_UserId, AssignedUser = @AssignedUser , FilterValue = @v_AssignFilterVal ,
					WorkItemState = @WorkItemState,Statename = @Statename,LockedByName = @LockedByName , LockStatus =
					@LockStatus,LockedTime = @LockedTime, Queuename = @v_AssignQueueName,Queuetype = @v_AssignQueueType ,Guid = null , Q_DivertedByUserId = @Q_DivertedByUserId where ProcessInstanceId = @ProcessInstanceId and WorkItemId = @WorkItemId  
					Select	@rowCount = @@rowCount

					If(@rowcount > 0)
					Begin
						Commit Transaction LockWI
						Select	@lockFlag = 'Y'
					End
					Else
					Begin
						Rollback Transaction LockWI
					End
				END
				
			Select @v_indexOfSeprator = CHARINDEX(',', @DBGenerateLog)
			If(@v_indexOfSeprator = 0)
			Begin
				
				Select @v_genLog = @DBGenerateLog
				Select @v_WorkStartedLoggingEnabled = @DBGenerateLog
			End
			Else
			Begin
				Select @v_genLog = SUBSTRING(@DBGenerateLog , 1, @v_indexOfSeprator-1)
				Select @v_WorkStartedLoggingEnabled = SUBSTRING(@DBGenerateLog , @v_indexOfSeprator+1 , LEN(@DBGenerateLog))
			End
			
			If(@lockFlag = 'Y' AND @v_genLog = 'Y' )
			Begin
			
				/* Logging for Locking workitem */
				/* Bug # WFS_5_077, Logging for Lock workitem */
				/* Changed By Varun Bhansaly 0n 19/07/2007 for Bugzilla Bug 74 */
				/*Insert Into WFMessageTable(message, status, ActionDateTime)
				VALUES	('<Message><ActionId>7</ActionId><UserId>' + convert(varchar, @userIndex) + 
						'</UserId><ProcessDefId>' + convert(varchar, @ProcessDefId) + 
						'</ProcessDefId><ActivityId>' + convert(varchar, @ActivityId) + 
						'</ActivityId><QueueId>0</QueueId><UserName>' + @userName + '</UserName><ActivityName>' + @ActivityName + 
						'</ActivityName><TotalWiCount>0</TotalWiCount><TotalDuration>0</TotalDuration><ActionDateTime>' +
						convert(varchar(22), getDate(), 20) + '</ActionDateTime><EngineName></EngineName><ProcessInstance>' + 
						@ProcessInstanceId + '</ProcessInstance><FieldId>' + convert(varchar, @Q_QueueId) + 
						'</FieldId><FieldName>' + @Queuename + '</FieldName><WorkitemId>' + convert(varchar, @WorkitemId) + 
						'</WorkitemId><TotalPrTime>0</TotalPrTime>' +
						'<DelayTime>0</DelayTime><WKInDelay>0</WKInDelay><ReportType>D</ReportType><LoggingFlag>1</LoggingFlag></Message>',	
					N'N', GETDATE())*/
					Insert into WFCurrentRouteLogTable (ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId, AssociatedFieldName, ActivityName, UserName, NewValue, QueueId, ProcessVariantId,URN) 
					values(@ProcessDefId,@ActivityId,@ProcessInstanceId,@WorkitemId,@userIndex,7,getDate(),null,@Q_QueueId,@Queuename, @ActivityName,@userName,null,0,
				@processVariantId,@v_URN) 
				/* Logging for work started */
				/* Changed By Varun Bhansaly 0n 19/07/2007 for Bugzilla Bug 74 */
				/*Insert Into WFMessageTable(message, status, ActionDateTime)
				VALUES	('<Message><ActionId>200</ActionId><UserId>' + convert(varchar, @userIndex) + 
						'</UserId><ProcessDefId>' + convert(varchar, @ProcessDefId) + 
						'</ProcessDefId><ActivityId>' + convert(varchar, @ActivityId) + '</ActivityId><QueueId>' + convert(varchar, @Q_QueueId) + 
						'</QueueId><UserName>' + @userName + '</UserName><ActivityName>' + @ActivityName + 
						'</ActivityName><TotalWiCount>0</TotalWiCount><TotalDuration>0</TotalDuration><ActionDateTime>' +
						convert(varchar(22), getDate(), 20) + '</ActionDateTime><EngineName></EngineName><ProcessInstance>' + 
						@ProcessInstanceId + '</ProcessInstance><FiledId></FiledId><WorkitemId>' + convert(varchar, @WorkitemId) + 
						'</WorkitemId><TotalPrTime>0</TotalPrTime>' +
						'<DelayTime>0</DelayTime><WKInDelay>0</WKInDelay><ReportType>D</ReportType><LoggingFlag>1</LoggingFlag></Message>', 
					N'N', GETDATE())*/
					-- Insert into WFCurrentRouteLogTable (ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId, AssociatedFieldName, ActivityName, UserName, NewValue, QueueId, ProcessVariantId) 
					-- values(@ProcessDefId,@ActivityId,@ProcessInstanceId,@WorkitemId,@userIndex,200,getDate(),null,0,null, @ActivityName,@userName,null,@Q_QueueId,
					-- @processVariantId) 
			End
			Else If (@lockFlag = 'N')
			Begin
				SELECT	@MainCode	= 16		/* WorkItem was locked by some other unlucky user who will worko it. */
			End
		End
		ELSE IF (@userIndex = @Q_DivertedByUserId)
		BEGIN
			Select	@MainCode = 16
		END
		Else
		Begin
			Select	@CheckQueryWSFlag = 'Y'
			Select	@MainCode = 300	/* no authorization */
		End
	End
	Else IF (@CheckQueryWSFlag = 'N')
	Begin
		If(@DBTaskId > 0)
			Begin
			Select	@ProcessInstanceId	= ProcessInstanceId,
				@WorkItemId		= WorkItemId,
				@ProcessName		= ProcessName,
				@ProcessVersion		= ProcessVersion,
				@ProcessDefID		= ProcessDefID,
				@LastProcessedBy	= LastProcessedBy,
				@ProcessedBy		= ProcessedBy,
				@ActivityName		= ActivityName,
				@ActivityId		= ActivityId,
				@EntryDateTime		= EntryDateTime,
				@ParentWorkItemId	= ParentWorkItemId,
				@AssignmentType		= AssignmentType,
				@CollectFlag		= CollectFlag,
				@PriorityLevel		= PriorityLevel,
				@ValidTill		= ValidTill,
				@Q_StreamId		= Q_StreamId,
				@Q_QueueId		= Q_QueueId,
				@Q_UserId		= Q_UserId,
				@AssignedUser		= AssignedUser,
				@FilterValue		= FilterValue,
				@CreatedDateTime	= CreatedDateTime,
				@WorkItemState		= WorkItemState,
				@Statename		= Statename,
				@ExpectedWorkitemDelay	= ExpectedWorkitemDelay,
				@PreviousStage		= PreviousStage,
				@LockedByName		= LockedByName,
				@LockStatus		= LockStatus,
				@LockedTime		= LockedTime,
				@Queuename		= Queuename,
				@Queuetype		= Queuetype,
				@NotifyStatus		= NotifyStatus,
				@processVariantId = ProcessVariantId,
				@LastModifiedTime =LastModifiedTime,
				@v_URN = URN
			/*FROM	WorkInProcessTable (NOLOCK) */
			From WFInstrumentTable (NOLOCK) 
			WHERE	ProcessInstanceID = @ProcessInstanceId
			AND	WorkItemID = @WorkitemId
			AND RoutingStatus = 'N'
			
			Select	@rowcount = @@rowcount
			IF(@v_ActivityType=32) 
			 BEGIN
				Select @v_CanInitiate= max(CanInitiate) ,@v_showCaseVisual = max(ShowCaseVisual)
				FROM    WFTaskStatusTable (NOLOCK)
				WHERE    ProcessInstanceID = @ProcessInstanceId
				AND    WorkItemID = @WorkitemId
				AND ActivityId = @ActivityId   
				AND AssignedTo =@userName
				AND TASKSTATUS!=4
			END
		End
		ELSE If(@processInstanceId is not null AND len(@processInstanceId) > 0)
		Begin
			Select	@ProcessInstanceId	= ProcessInstanceId,
				@WorkItemId		= WorkItemId,
				@ProcessName		= ProcessName,
				@ProcessVersion		= ProcessVersion,
				@ProcessDefID		= ProcessDefID,
				@LastProcessedBy	= LastProcessedBy,
				@ProcessedBy		= ProcessedBy,
				@ActivityName		= ActivityName,
				@ActivityId		= ActivityId,
				@EntryDateTime		= EntryDateTime,
				@ParentWorkItemId	= ParentWorkItemId,
				@AssignmentType		= AssignmentType,
				@CollectFlag		= CollectFlag,
				@PriorityLevel		= PriorityLevel,
				@ValidTill		= ValidTill,
				@Q_StreamId		= Q_StreamId,
				@Q_QueueId		= Q_QueueId,
				@Q_UserId		= Q_UserId,
				@AssignedUser		= AssignedUser,
				@FilterValue		= FilterValue,
				@CreatedDateTime	= CreatedDateTime,
				@WorkItemState		= WorkItemState,
				@Statename		= Statename,
				@ExpectedWorkitemDelay	= ExpectedWorkitemDelay,
				@PreviousStage		= PreviousStage,
				@LockedByName		= LockedByName,
				@LockStatus		= LockStatus,
				@LockedTime		= LockedTime,
				@Queuename		= Queuename,
				@Queuetype		= Queuetype,
				@NotifyStatus		= NotifyStatus,
				@processVariantId = ProcessVariantId,
				@LastModifiedTime =LastModifiedTime,
				@v_URN = URN
			/*FROM	WorkInProcessTable (NOLOCK) */
			From WFInstrumentTable (NOLOCK) 
			WHERE	ProcessInstanceID = @ProcessInstanceId
			AND	WorkItemID = @WorkitemId
			AND RoutingStatus = 'N'
			AND LockStatus = 'Y'
			
			Select	@rowcount = @@rowcount
			
			IF(@v_ActivityType=32) 
			 BEGIN
				Select @v_CanInitiate= max(CanInitiate) ,@v_showCaseVisual = max(ShowCaseVisual)
				FROM    WFTaskStatusTable (NOLOCK)
				WHERE    ProcessInstanceID = @ProcessInstanceId
				AND    WorkItemID = @WorkitemId
				AND ActivityId = @ActivityId   
				AND AssignedTo =@userName
				AND TASKSTATUS!=4
			END
		End
		Else	/* For FIFO when workitem not in WorkListTable and some workitem is locked in WorkInProcessTable */
		Begin

			Select	TOP 1 
				@ProcessInstanceId	= ProcessInstanceId,
				@WorkItemId		= WorkItemId,
				@ProcessName		= ProcessName,
				@ProcessVersion		= ProcessVersion,
				@ProcessDefID		= ProcessDefID,
				@LastProcessedBy	= LastProcessedBy,
				@ProcessedBy		= ProcessedBy,
				@ActivityName		= ActivityName,
				@ActivityId		= ActivityId,
				@EntryDateTime		= EntryDateTime,
				@ParentWorkItemId	= ParentWorkItemId,
				@AssignmentType		= AssignmentType,
				@CollectFlag		= CollectFlag,
				@PriorityLevel		= PriorityLevel,
				@ValidTill		= ValidTill,
				@Q_StreamId		= Q_StreamId,
				@Q_QueueId		= Q_QueueId,
				@Q_UserId		= Q_UserId,
				@AssignedUser		= AssignedUser,
				@FilterValue		= FilterValue,
				@CreatedDateTime	= CreatedDateTime,
				@WorkItemState		= WorkItemState,
				@Statename		= Statename,
				@ExpectedWorkitemDelay	= ExpectedWorkitemDelay,
				@PreviousStage		= PreviousStage,
				@LockedByName		= LockedByName,
				@LockStatus		= LockStatus,
				@LockedTime		= LockedTime,
				@Queuename		= Queuename,
				@Queuetype		= Queuetype,
				@NotifyStatus		= NotifyStatus,
				@processVariantId = ProcessVariantId,/*Process Variant Support Changes*/
				@LastModifiedTime =LastModifiedTime,
				@v_URN = URN
			/*FROM	WorkInProcessTable (NOLOCK)*/
			FROM	WFInstrumentTable (NOLOCK)
			/*WHERE	LockedByName		= @userName*/
			WHERE RoutingStatus =' N' 
			AND LockStatus = 'Y'
			AND LockedByName		= @userName
			AND	Q_QueueId		= @DBQueueId
			AND	NOT ( processInstanceId = @DBLastProcessInstanceId 
					AND workitemId	= @DBLastWorkitemId )
		Select	@rowcount = @@rowcount
			
		End

--		Select	@rowcount = @@rowcount
		IF (@rowcount > 0)
		Begin
			If(NOT (@LockedByName = @userName))
			Begin
				Select	@MainCode = 16		/* Workitem locked, when workitem locked by some other user */
				Select @CheckQueryWSFlag = 'N'
			End
			ELSE IF(@DBTaskId>0)
			BEGIN
				Select @MainCode = 32			/* Workitem locked, when workitem locked by some other user */
				Select @CheckQueryWSFlag ='N'
			END;
			ELSE
			Begin
				If(@DBQueueType = N'F' AND @DBAssignMe = 'Y' AND NOT(@AssignmentType = 'F'))
				Begin
					Select @v_AssignQueueName = @userName + '''s MyQueue'
					/*Update WorkInProcessTable Set AssignmentType = N'F', QueueType = N'U', Q_QueueId = 0, QueueName = @v_AssignQueueName, FilterValue = NULL*/
					Update WFInstrumentTable Set AssignmentType = N'F', QueueType = N'U', Q_QueueId = 0, QueueName = @v_AssignQueueName, FilterValue = NULL
					WHERE	LockedByName		= @userName
					AND	Q_QueueId = @DBQueueId
					AND processInstanceId = @ProcessInstanceId 
							AND workitemId	= @WorkItemId 
				End			
			End
		End
		ELSE
		Begin
			IF(@processInstanceId is not null AND len(@processInstanceId) > 0)
			Begin
				Select @CheckQueryWSFlag = 'Y'
				Select	@MainCode = 300		/* NO Authorization */

				Select	@ProcessInstanceId	= ProcessInstanceId,
					@WorkItemId		= WorkItemId,
					@ProcessName		= ProcessName,
					@ProcessVersion		= ProcessVersion,
					@ProcessDefID		= ProcessDefID,
					@LastProcessedBy	= LastProcessedBy,
					@ProcessedBy		= ProcessedBy,
					@ActivityName		= ActivityName,
					@ActivityId		= ActivityId,
					@EntryDateTime		= EntryDateTime,
					@ParentWorkItemId	= ParentWorkItemId,
					@AssignmentType		= AssignmentType,
					@CollectFlag		= CollectFlag,
					@PriorityLevel		= PriorityLevel,
					@ValidTill		= ValidTill,
					@Q_StreamId		= Q_StreamId,
					@Q_QueueId		= Q_QueueId,
					@Q_UserId		= Q_UserId,
					@AssignedUser		= AssignedUser,
					@FilterValue		= NULL,
					@CreatedDateTime	= CreatedDateTime,
					@WorkItemState		= WorkItemState,
					@Statename		= Statename,
					@ExpectedWorkitemDelay	= NULL,
					@PreviousStage		= PreviousStage,
					@LockedByName		= LockedByName,
					@LockStatus		= LockStatus,
					@LockedTime		= LockedTime,
					@Queuename		= Queuename,
					@Queuetype		= Queuetype,
					@NotifyStatus		= NULL,
					@processVariantId = ProcessVariantId,
					@LastModifiedTime =LastModifiedTime,
					@v_URN = URN/*Process Variant Support Changes*/
				FROM	QueueHistoryTable (NOLOCK)
				WHERE	ProcessInstanceID = @ProcessInstanceId
				AND	WorkItemID = @WorkitemId

				Select	@rowCount = @@rowCount

				IF(@rowcount < 1)
				Begin
					Select	@ProcessInstanceId	= ProcessInstanceId,
						@WorkItemId		= WorkItemId,
						@ProcessName		= ProcessName,
						@ProcessVersion		= ProcessVersion,
						@ProcessDefID		= ProcessDefID,
						@LastProcessedBy	= LastProcessedBy,
						@ProcessedBy		= ProcessedBy,
						@ActivityName		= ActivityName,
						@ActivityId		= ActivityId,
						@EntryDateTime		= EntryDateTime,
						@ParentWorkItemId	= ParentWorkItemId,
						@AssignmentType		= AssignmentType,
						@CollectFlag		= CollectFlag,
						@PriorityLevel		= PriorityLevel,
						@ValidTill		= ValidTill,
						@Q_StreamId		= Q_StreamId,
						@Q_QueueId		= Q_QueueId,
						@Q_UserId		= Q_UserId,
						@AssignedUser		= AssignedUser,
						@FilterValue		= FilterValue,
						@CreatedDateTime	= CreatedDateTime,
						@WorkItemState		= WorkItemState,
						@Statename		= Statename,
						@ExpectedWorkitemDelay	= ExpectedWorkitemDelay,
						@PreviousStage		= PreviousStage,
						@LockedByName		= LockedByName,
						@LockStatus		= LockStatus,
						@LockedTime		= LockedTime,
						@Queuename		= Queuename,
						@Queuetype		= Queuetype,
						@NotifyStatus		= NotifyStatus,
						@RoutingStatus  = RoutingStatus,
						@processVariantId = ProcessVariantId,/*Process Variant Support Changes*/
						@v_ActivityType	=ActivityType,
						@LastModifiedTime = LastModifiedTime,
						@v_URN = URN
					/*FROM	PendingWorkListTable (NOLOCK)*/
					FROM WFINSTRUMENTTABLE (NOLOCK)
					WHERE	ProcessInstanceID = @ProcessInstanceId
					AND	WorkItemID = @WorkitemId

					Select	@rowCount = @@rowCount

					IF(@rowcount > 0 ) 
					Begin
						IF(@RoutingStatus = 'R')
						Begin
							If(@Q_UserId = @userIndex)
							Begin
								Select @CheckQueryWSFlag = 'N'
								Select	@MainCode = 16		/* Open WorkItem in Read only mode */
							End
						End
					End
					Else 
					Begin
						IF(@rowcount < 1)
							Begin
								Select	@MainCode = 22 /* Bugzilla Bug 7199, MainCode changed to Invalid_Workitem. */
								Select	@MainCode	MainCode,
									@lockFlag	lockFlag
								Return
							End
					End
					/*IF(@rowcount > 0)
					Begin
						If(@Q_UserId = @userIndex)
						Begin
							Select @CheckQueryWSFlag = 'N'
							Select	@MainCode = 16		// Open WorkItem in Read only mode 
						End 
					End */
					/*ELSE
					Begin
						Select	@ProcessInstanceId	= ProcessInstanceId,
							@WorkItemId		= WorkItemId,
							@ProcessName		= ProcessName,
							@ProcessVersion		= ProcessVersion,
							@ProcessDefID		= ProcessDefID,
							@LastProcessedBy	= LastProcessedBy,
							@ProcessedBy		= ProcessedBy,
							@ActivityName		= ActivityName,
							@ActivityId		= ActivityId,
							@EntryDateTime		= EntryDateTime,
							@ParentWorkItemId	= ParentWorkItemId,
							@AssignmentType		= AssignmentType,
							@CollectFlag		= CollectFlag,
							@PriorityLevel		= PriorityLevel,
							@ValidTill		= ValidTill,
							@Q_StreamId		= Q_StreamId,
							@Q_QueueId		= Q_QueueId,
							@Q_UserId		= Q_UserId,
							@AssignedUser		= AssignedUser,
							@FilterValue		= FilterValue,
							@CreatedDateTime	= CreatedDateTime,
							@WorkItemState		= WorkItemState,
							@Statename		= Statename,
							@ExpectedWorkitemDelay	= ExpectedWorkitemDelay,
							@PreviousStage		= PreviousStage,
							@LockedByName		= LockedByName,
							@LockStatus		= LockStatus,
							@LockedTime		= LockedTime,
							@Queuename		= Queuename,
							@Queuetype		= Queuetype,
							@NotifyStatus		= NotifyStatus,
							@processVariantId = ProcessVariantId //Process Variant Support Changes
						FROM	WorkDonetable (NOLOCK)
						WHERE	ProcessInstanceID = @ProcessInstanceId
						AND	WorkItemID = @WorkitemId

						Select	@rowCount = @@rowCount

						IF(@rowcount < 1)
						Begin
							Select	@ProcessInstanceId	= ProcessInstanceId,
								@WorkItemId		= WorkItemId,
								@ProcessName		= ProcessName,
								@ProcessVersion		= ProcessVersion,
								@ProcessDefID		= ProcessDefID,
								@LastProcessedBy	= LastProcessedBy,
								@ProcessedBy		= ProcessedBy,
								@ActivityName		= ActivityName,
								@ActivityId		= ActivityId,
								@EntryDateTime		= EntryDateTime,
								@ParentWorkItemId	= ParentWorkItemId,
								@AssignmentType		= AssignmentType,
								@CollectFlag		= CollectFlag,
								@PriorityLevel		= PriorityLevel,
								@ValidTill		= ValidTill,
								@Q_StreamId		= Q_StreamId,
								@Q_QueueId		= Q_QueueId,
								@Q_UserId		= Q_UserId,
								@AssignedUser		= AssignedUser,
								@FilterValue		= FilterValue,
								@CreatedDateTime	= CreatedDateTime,
								@WorkItemState		= WorkItemState,
								@Statename		= Statename,
								@ExpectedWorkitemDelay	= ExpectedWorkitemDelay,
								@PreviousStage		= PreviousStage,
								@LockedByName		= LockedByName,
								@LockStatus		= LockStatus,
								@LockedTime		= LockedTime,
								@Queuename		= Queuename,
								@Queuetype		= Queuetype,
								@NotifyStatus		= NotifyStatus,
								@processVariantId = ProcessVariantId //Process Variant Support Changes
							FROM	WorkWithPSTable (NOLOCK)
							WHERE	ProcessInstanceID = @ProcessInstanceId
							AND	WorkItemID = @WorkitemId

							Select	@rowCount = @@rowCount

							// Modified on : 22/11/2006, Bug # WFS_5_148 - Ruhi Hira 
							IF(@rowcount < 1)
							Begin
								Select	@MainCode = 22 // Bugzilla Bug 7199, MainCode changed to Invalid_Workitem. 
								Select	@MainCode	MainCode,
									@lockFlag	lockFlag
								Return
							End
						End 
					End */
				End
			End 
			Else
			Begin
				Select	@MainCode = 18			/* NO more data for FIFO when only queueId is given */
				Select	@MainCode	MainCode,
					@lockFlag	lockFlag
				Return
			End
		End /* Else workitem found in WorkInProcessTable */
	End

	IF(@CheckQueryWSFlag = 'Y' )	/*Query WorkStep Handling */
	BEGIN
		/* 21/01/2008, Bugzilla Bug 1721, error code 810 - Ruhi Hira */
		IF(@DBQueueId >= 0 AND ( (@Q_QueueId IS NULL) OR (@DBQueueId != @Q_QueueId)) )
		Begin
			Select	@MainCode = 810 /* Workitem not in the queue specified. */
			Select	@MainCode	MainCode,
				@lockFlag	lockFlag
			Return
		End
		/* ActivityType 11 is for query workstep */
		/*WFS_8.0_031,WFS_8.0_121*/
		IF(@v_UtilityFlag = 'N')	
		BEGIN
			Select Top 1 @QueryActivityId = ActivityTable.ActivityId,
			@v_QueryPreview = QUSERGROUPVIEW.QueryPreview
			FROM ActivityTable (NOLOCK), QueueStreamTable (NOLOCK), QUSERGROUPVIEW (NOLOCK)
			WHERE ActivityTable.ProcessDefId = QueueStreamTable.ProcessDefId
			AND ActivityTable.ActivityId = QueueStreamTable.ActivityId
			AND QUSERGROUPVIEW.QueueId = QueueStreamTable.QueueId
			AND ActivityTable.ActivityType = 11
			AND ActivityTable.ProcessDefId = @ProcessDefID
			AND QUSERGROUPVIEW.UserId = @userIndex
			ORDER BY QUSERGROUPVIEW.UserId DESC
			Select @rowCount = @@rowCount
			If(@rowCount <= 0)
			Begin
				Select Top 1 @QueryActivityId = ActivityTable.ActivityId,
				@v_QueryPreview = QUSERGROUPVIEW.QueryPreview
				FROM ActivityTable (NOLOCK), QueueStreamTable (NOLOCK), QUSERGROUPVIEW (NOLOCK)
				WHERE ActivityTable.ProcessDefId = QueueStreamTable.ProcessDefId
				AND ActivityTable.ActivityId = QueueStreamTable.ActivityId
				AND QUSERGROUPVIEW.QueueId = QueueStreamTable.QueueId
				AND ActivityTable.ActivityType = 11
				AND ActivityTable.ProcessDefId = @ProcessDefID
				AND QUSERGROUPVIEW.UserId = @userIndex
				AND QUSERGROUPVIEW.groupid IS NOT NULL
				ORDER BY QUSERGROUPVIEW.UserId DESC
			Select @rowCount = @@rowCount
			If(@rowCount <= 0)	
				Begin
				
					IF(@v_ActivityType = 32)
						BEGIN
							Select @v_CanInitiate= max(CanInitiate)	,@v_showCaseVisual = max(ShowCaseVisual)
							FROM	WFTaskStatusTable (NOLOCK)
							WHERE	ProcessInstanceID = @ProcessInstanceId
							AND	WorkItemID = @WorkitemId
							AND ActivityId = @ActivityId	
							AND AssignedTo =@userName 
							AND TASKSTATUS!=4
							Select @rowCount = @@rowCount
							if(@rowCount <= 0)
								begin
									Select @MainCode = 300 /*No Authorization*/
									Select @MainCode	MainCode,
										   @lockFlag	LockFlag
									Return
								end
							else 
								begin
									Select @MainCode = 16 /*No Authorization*/
								end	
							

						END
					ELSE
						BEGIN
							Select @MainCode = 300 /*No Authorization*/
							Select @MainCode	MainCode,
									@lockFlag	LockFlag
							Return
						END	
				End
				Else
				Begin
					/*WFS_8.0_031*/
					Select @MainCode = 16
					IF(@v_QueryPreview = 'Y' OR @v_QueryPreview IS NULL)
					BEGIN
						Select @ActivityId = @QueryActivityId
					END
				End
			END
			ELSE
			BEGIN
				Select @MainCode = 16 /*To be shown in Read only mode*/
				IF(@v_QueryPreview = 'Y' OR @v_QueryPreview IS NULL)
				BEGIN
					Select @ActivityId = @QueryActivityId
				END
			END	
		END
		END

		If((@LockedByName = @userName) AND @v_ActivityType=32)
			Begin
				Select @v_CanInitiate = 'Y'		
				Select @v_showCaseVisual = 'Y'
			End
		IF((@MainCode = 0 OR @MainCode = 16 OR @MainCode = 401)  AND @v_genLog = 'Y' AND @v_WorkStartedLoggingEnabled = 'Y')

		BEGIN
			Insert into WFCurrentRouteLogTable (ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId, AssociatedFieldName, ActivityName, UserName, NewValue, QueueId,URN) values(@ProcessDefId,@ActivityId,@ProcessInstanceId,@WorkitemId,@userIndex,200,getDate(),null,0,null, @ActivityName,@userName,null,@Q_QueueId,@v_URN)
		END
	
	/* OUTPUT ResultSet1 -> MainCode, lockFlag */
	Select	@MainCode	MainCode, 
		@lockFlag	LockFlag

	/* OUTPUT ResultSet2 -> WorkitemData */
	Select	@userIndex		UserIndex,
		getDate()		CurrentDateTime,
		@ProcessInstanceId	ProcessInstanceId,
		@WorkItemId		WorkItemId,
		@ProcessName		ProcessName,
		@ProcessVersion		ProcessVersion,
		@ProcessDefID		ProcessDefID,
		@ProcessedBy		ProcessedBy,
		@ActivityName		ActivityName,
		@ActivityId		ActivityId,
		@EntryDateTime		EntryDateTime,
		@AssignmentType		AssignmentType,
		@PriorityLevel		PriorityLevel,
		@ValidTill		ValidTill,
		@Q_QueueId		Q_QueueId,
		@Q_UserId		Q_UserId,
		@AssignedUser		AssignedUser,
		@CreatedDateTime	CreatedDateTime,
		@WorkItemState		WorkItemState,
		@Statename		Statename,
		@ExpectedWorkitemDelay	ExpectedWorkitemDelay,
		@PreviousStage		PreviousStage,
		@LockedByName		LockedByName,
		@LockStatus		LockStatus,
		@LockedTime		LockedTime,
		@Queuename		Queuename,
		@Queuetype		Queuetype,
		@userName		UserName,
		@sortFieldStrValue         SortedOn,
		@processVariantId	ProcessVariantId,/*Process Variant Support Changes*/
		@v_CanInitiate CanInitiate,
		@v_showCaseVisual ShowCaseVisual,
		@LastModifiedTime LastModifiedTime,
		@v_URN URN
End

go

Print 'Stored Procedure WFGetWorkitem compiled successfully ........'

go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
------------------------------------------------------------------------------------------------------
	Group				: Application –Products
	Product / Project		: WorkFlow 5.0.1
	Module				: Transaction Server
	File Name			: WFGetWorkitemData.sql
	Author				: Ruhi Hira
	Date written (DD/MM/YYYY)	: 02/09/2005
	Description			: Returns the workitem data [Bug # WFS_5_066].
------------------------------------------------------------------------------------------------------
			CHANGE HISTORY
------------------------------------------------------------------------------------------------------
 Date		Change By		Change Description (Bug No. (If Any))
 29/09/2005	Ruhi Hira		Bug # WFS_5_069.
 20/10/2005	Harmeet Kaur		WFS_5_074 - Sr No. 1 - Document Order and Sort Order for GetDocumentList 						configurable
 24/10/2005	Harmeet Kaur		WFS_5_075 - Sr No. 2 - Object Type in Preferences configurable
 16/02/2006	Sumit Aggarwal		WFS_5_104	Comment Field is required from pdbdocument table in wfgetworkitemdataext call
 13/04/2006	Harmeet Kaur		WFS_5_117 - Document Size to be fetched in GetDocumentList
 30/01/2007	Umesh Sehgal		WFS_5_157 Opening workitem on custom workstep gives error:"numeric value error"
 24/05/2007	Ruhi Hira		    Bugzilla Bug 945.
 13/09/2007	Varun Bhansaly		SrNo-1, All data related to Comments 
 14/12/2007	Varun Bhansaly		(NOLOCK) added to Query on WFCommentsTable and Ordering of operands in Where condition changed
 17/03/2008	Shweta Tyagi		Bugzilla bug 3919 return new tag ownerindex in WFGetWorkitemDataExt
 14/06/2008	Ishu Saraf		    Bugzilla bug 5091 returning more than one rows because of complex type structure
 03/07/2008	Ishu Saraf		    Bugzilla Bug 5426, 5493
 26/08/2008	Varun Bhansaly		SrNo-2, Complex type support. Donot query QueueDataTable/ QueueHistoryTable/ External Table
 05/11/2008	Ashish Mangla		Bugzilla Bug 6893 (1 less resultset returns in case var_rec_1 is null, bean treats resultset6 as resultset5 and so on)
 19/04/2010	Saurabh Kamal		Bugzilla Bug 12114, Exception Sequence should be in order of ActionDateTime instead of ActionId
 10/11/2010  Saurabh Sinha      Bug #815 : Support for Previous Next in Introduction,FIFO and WIP
 18/07/2012	Abhishek Gupta		Bug 33200 and 30984 : RevisedDateTime returned in Document information.
 22/12/2013 Kahkeshan			Code Optimization Changes
 05/05/2015	Mohnish Chopra		Changes for Case Management - New parameters DBTaskId and DBSubTaskId added and 
								returning task specific data in ResultSet 8
11/08/2015	Mohnish Chopra		Changes for Data Locking issue in Case Management -Returning ActivityType and LastModifiedTime
18/08/2015	Mohnish Chopra		Changes for Case View in Case Management -Returning InitiatedBy and InitiatedOn 
05-05-2017	Sajid Khan			Merging Bug 58399 - Need an option to view refer, reassign and ad-hoc routing comments in workitem properties
09-05-2017	Sajid Khan			Queue Varaible Extension Enahncement
02-08-2017	Shubhankur Manuja		Merging Bug - 70260 - NOLOCK Missing with WFCommentsTable in a query while opening workitem
18/09/2017    Kumar Kimil       Tasktype and TaskMode added in Output of WFGetWorkitemDataExt
---------------------------------------------------------------------------------------------------*/


If Exists (Select * from SysObjects (NOLOCK) Where xType = 'P' and name = 'WFGetWorkitemData')
Begin
	Execute('DROP PROCEDURE WFGetWorkitemData')
	Print 'Procedure WFGetWorkitemData already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFGetWorkitemData(
	@DBProcessInstanceId		NVarchar(64),
	@DBWorkItemId			Integer,
	@DBProcessDefId			Integer,
	@DBActivityId			Integer,
	@DBUserIndex			Integer,
	@DBDocumentOrderBy		NVarchar(510) = 'Name',		/* Sr No. 1 */
	@DBDocumentSortOrder		Char(4)	= 'ASC',		/* Sr No. 1 */
	@DBObjectPreferenceList		NVarchar(25) = '''W'' , ''D''',	/* Sr No. 2 */
	@DBISSharePoint			NVarchar(1),
	@DBTaskId				Integer,
	@DBSubTaskId			Integer
)
AS
Begin
	/* Declaration of queue variables */

	SET NOCOUNT ON

	Declare @extTableName		NVarchar(256)	  /* Bugzilla Bug 5426, 5493 */
	
	Declare @ReferByName		NVarchar(30)
	Declare @ReferTo		INT
	Declare @CheckListCompleteFlag	NVarchar(1)
	Declare @HoldStatus		INT
	Declare @InstrumentStatus	NVarchar(1)
	Declare @ParentWorkItemID	INT
	Declare @ProcessInstanceId	NVARCHAR(63)
	Declare @SaveStage		NVARCHAR(30)
	Declare @Status			NVARCHAR(255)
	Declare @VAR_DATE1		DATETIME /* Bug #815 */
	Declare @VAR_DATE2 		DATETIME
	Declare @VAR_DATE3 		DATETIME
	Declare @VAR_DATE4 		DATETIME
	Declare @VAR_DATE5 		DATETIME
	Declare @VAR_DATE6 		DATETIME
	Declare @VAR_FLOAT1		NUMERIC(15, 2)
	Declare @VAR_FLOAT2		NUMERIC(15, 2)
	Declare @VAR_INT1		Smallint 
	Declare @VAR_INT2		Smallint 
	Declare @VAR_INT3		Smallint 
	Declare @VAR_INT4		Smallint 
	Declare @VAR_INT5		Smallint 
	Declare @VAR_INT6		Smallint 
	Declare @VAR_INT7		Smallint 
	Declare @VAR_INT8		Smallint 
	Declare @VAR_LONG1		INT
	Declare @VAR_LONG2		INT
	Declare @VAR_LONG3		INT
	Declare @VAR_LONG4		INT
	Declare @VAR_LONG5		INT
	Declare @VAR_LONG6		INT
	Declare @VAR_REC_1		NVARCHAR(255)
	Declare @VAR_REC_2		NVARCHAR(255)
	Declare @VAR_REC_3		NVARCHAR(255)
	Declare @VAR_REC_4		NVARCHAR(255)
	Declare @VAR_REC_5		NVARCHAR(255)
	Declare @VAR_STR1		NVARCHAR(255)
	Declare @VAR_STR2		NVARCHAR(255)
	Declare @VAR_STR3		NVARCHAR(255)
	Declare @VAR_STR4		NVARCHAR(255)
	Declare @VAR_STR5		NVARCHAR(255)
	Declare @VAR_STR6		NVARCHAR(255)
	Declare @VAR_STR7		NVARCHAR(255)
	Declare @VAR_STR8		NVARCHAR(255)
	Declare @VAR_STR9		NVARCHAR(255)
	Declare @VAR_STR10		NVARCHAR(255)
	Declare @VAR_STR11		NVARCHAR(255)
	Declare @VAR_STR12		NVARCHAR(255)
	Declare @VAR_STR13		NVARCHAR(255)
	Declare @VAR_STR14		NVARCHAR(255)
	Declare @VAR_STR15		NVARCHAR(255)
	Declare @VAR_STR16		NVARCHAR(255)
	Declare @VAR_STR17		NVARCHAR(255)
	Declare @VAR_STR18		NVARCHAR(255)
	Declare @VAR_STR19		NVARCHAR(255)
	Declare @VAR_STR20		NVARCHAR(255)

	Declare @queryStr		NVARCHAR(1000)

	/* Declaration of process variables */

	Declare @CreatedByName		NVARCHAR(63)
	Declare @CreatedDatetime	DATETIME
	Declare @Introducedby		NVARCHAR(63)
	Declare @IntroductionDateTime	DATETIME
	Declare @ProcessInstanceState 	INT
	Declare @ExpectedProcessDelay   DATETIME
	Declare	@ActivityType 			INT
	Declare	@LastModifiedTime		DATETIME


	/*Document Order supported only on fields - Name, RevisedDateTime, DocumentSize, CreatedByApplication, Name, NoOfPages, Owner, DocumentOrderNo) */
	/* Begin Sr No. 1 */
	IF NOT ((UPPER(@DBDocumentOrderBy) = UPPER('Name')) OR (UPPER(LTRIM(RTRIM(@DBDocumentOrderBy))) = UPPER('RevisedDateTime')) OR (UPPER(LTRIM(RTRIM(@DBDocumentOrderBy))) = UPPER('DocumentSize')) OR (UPPER(LTRIM(RTRIM(@DBDocumentOrderBy))) = UPPER('CreatedByApplication')) OR (UPPER(LTRIM(RTRIM(@DBDocumentOrderBy))) = UPPER('NoOfPages')) OR (UPPER(LTRIM(RTRIM(@DBDocumentOrderBy))) = UPPER('Owner')) OR (UPPER(LTRIM(RTRIM(@DBDocumentOrderBy))) = UPPER('DocumentOrderNo')))
	BEGIN	
		SELECT @DBDocumentOrderBy = 'Name'		
	END


	/* End Sr No. 1 */

	/* For inermmediate results */
	/*WFS_5_157*/
	Declare @objectName		NVarchar(255)
	IF (@DBTaskId >0) 
	BEGIN
	Select	@objectName	= convert(NVarchar(4), @DBProcessDefId) + '@' + convert(NVarchar(4), @DBActivityId)+'#'+ convert(NVarchar(4), @DBTaskId)
	END
	ELSE
	BEGIN
	Select	@objectName	= convert(NVarchar(4), @DBProcessDefId) + '@' + convert(NVarchar(4), @DBActivityId)
	END 
	/* OUTPUT : ResultSet1 -> User Preferences */
	

/*	Select ObjectId, ObjectName, ObjectType, NotifyByEmail, Data 
	From	UserPreferencesTable (NOLOCK)
	Where	userId	= @DBUserIndex 
	AND	ObjectName = @objectName 
	AND	ObjectType in (@DBObjectPreferenceList) */
	
	/* For intermmediate results */

	/* Begin Sr No. 2 */	
	Declare @tempUserIndex		NVarchar(10)

	Select @tempUserIndex = convert(NVarchar(10), @DBUserIndex)

	Select @queryStr = ' Select ObjectId, ObjectName, ObjectType, NotifyByEmail, Data ' +
			' From	UserPreferencesTable (NOLOCK) ' +
			' Where	userId	= ' + @tempUserIndex +
			' AND	ObjectName =  ''' + @objectName +
			''' AND	ObjectType in ( ' + @DBObjectPreferenceList + ' )' 

	Execute (@queryStr)
	/* End Sr No. 2 */	

	Select  @ReferByName		= ReferredByName,
		@ReferTo		= ReferredTo,
		@CheckListCompleteFlag	= CheckListCompleteFlag, 
		@HoldStatus		= HoldStatus, 
		@InstrumentStatus	= InstrumentStatus, 
		@ParentWorkItemID	= ParentWorkItemID,
		@ProcessInstanceId	= ProcessInstanceId, 
		@SaveStage		= SaveStage, 
		@Status			= Status,
		@VAR_DATE1		= VAR_DATE1, /* Bug #815 */
		@VAR_DATE2		= VAR_DATE2, 
		@VAR_DATE3		= VAR_DATE3, 
		@VAR_DATE4		= VAR_DATE4,
		@VAR_DATE5		= VAR_DATE5,
		@VAR_DATE6		= VAR_DATE6,
		@VAR_FLOAT1		= VAR_FLOAT1,
		@VAR_FLOAT2		= VAR_FLOAT2, 
		@VAR_INT1		= VAR_INT1, 
		@VAR_INT2		= VAR_INT2, 
		@VAR_INT3		= VAR_INT3,
		@VAR_INT4		= VAR_INT4, 
		@VAR_INT5		= VAR_INT5, 
		@VAR_INT6		= VAR_INT6, 
		@VAR_INT7		= VAR_INT7,
		@VAR_INT8		= VAR_INT8, 
		@VAR_LONG1		= VAR_LONG1, 
		@VAR_LONG2		= VAR_LONG2, 
		@VAR_LONG3		= VAR_LONG3,
		@VAR_LONG4		= VAR_LONG4,
		@VAR_LONG5		= VAR_LONG5,
		@VAR_LONG6		= VAR_LONG6,
		@VAR_REC_1		= VAR_REC_1, 
		@VAR_REC_2		= VAR_REC_2, 
		@VAR_REC_3		= VAR_REC_3,
		@VAR_REC_4		= VAR_REC_4, 
		@VAR_REC_5		= VAR_REC_5, 
		@VAR_STR1		= VAR_STR1, 
		@VAR_STR2		= VAR_STR2,
		@VAR_STR3		= VAR_STR3, 
		@VAR_STR4		= VAR_STR4, 
		@VAR_STR5		= VAR_STR5, 
		@VAR_STR6		= VAR_STR6,
		@VAR_STR7		= VAR_STR7, 
		@VAR_STR8		= VAR_STR8,
		@VAR_STR9		= VAR_STR9,
		@VAR_STR10		= VAR_STR10,
		@VAR_STR11		= VAR_STR11,
		@VAR_STR12		= VAR_STR12,
		@VAR_STR13		= VAR_STR13,
		@VAR_STR14		= VAR_STR14,
		@VAR_STR15		= VAR_STR15,
		@VAR_STR16		= VAR_STR16,
		@VAR_STR17		= VAR_STR17,
		@VAR_STR18		= VAR_STR18,
		@VAR_STR19		= VAR_STR19,
		@VAR_STR20		= VAR_STR20,
		@CreatedByName		= CreatedByName, 
		@Createddatetime	= Createddatetime, 
		@ExpectedProcessDelay	= ExpectedProcessDelay, 
		@Introducedby		= Introducedby, 
		@IntroductionDatetime	= IntroductionDatetime, 
		@ProcessInstanceState	= ProcessInstanceState,
		@ActivityType 			= ActivityType,
		@LastModifiedTime		= LastModifiedTime
	From	WFInstrumentTable (NOLOCK)
	Where	ProcessInstanceId	= @DBProcessInstanceId
	And	WorkitemId		= @DBWorkitemId
	
	
	If (@@rowcount <= 0)
	Begin
		Select  @ReferByName		= ReferredByName,
			@ReferTo		= ReferredTo,
			@CheckListCompleteFlag	= CheckListCompleteFlag, 
			@HoldStatus		= HoldStatus, 
			@InstrumentStatus	= InstrumentStatus, 
			@ParentWorkItemID	= ParentWorkItemID,
			@ProcessInstanceId	= ProcessInstanceId, 
			@SaveStage		= SaveStage, 
			@Status			= Status, 
			@VAR_DATE1		= VAR_DATE1, /* Bug #815 */
			@VAR_DATE2		= VAR_DATE2, 
			@VAR_DATE3		= VAR_DATE3, 
			@VAR_DATE4		= VAR_DATE4,
			@VAR_DATE5		= VAR_DATE5,
			@VAR_DATE6		= VAR_DATE6,
			@VAR_FLOAT1		= VAR_FLOAT1,
			@VAR_FLOAT2		= VAR_FLOAT2, 
			@VAR_INT1		= VAR_INT1, 
			@VAR_INT2		= VAR_INT2, 
			@VAR_INT3		= VAR_INT3,
			@VAR_INT4		= VAR_INT4, 
			@VAR_INT5		= VAR_INT5, 
			@VAR_INT6		= VAR_INT6, 
			@VAR_INT7		= VAR_INT7,
			@VAR_INT8		= VAR_INT8, 
			@VAR_LONG1		= VAR_LONG1, 
			@VAR_LONG2		= VAR_LONG2, 
			@VAR_LONG3		= VAR_LONG3,
			@VAR_LONG4		= VAR_LONG4,
			@VAR_LONG5		= VAR_LONG5,
			@VAR_LONG6		= VAR_LONG6,			
			@VAR_REC_1		= VAR_REC_1, 
			@VAR_REC_2		= VAR_REC_2, 
			@VAR_REC_3		= VAR_REC_3,
			@VAR_REC_4		= VAR_REC_4, 
			@VAR_REC_5		= VAR_REC_5, 
			@VAR_STR1		= VAR_STR1, 
			@VAR_STR2		= VAR_STR2,
			@VAR_STR3		= VAR_STR3, 
			@VAR_STR4		= VAR_STR4, 
			@VAR_STR5		= VAR_STR5, 
			@VAR_STR6		= VAR_STR6,
			@VAR_STR7		= VAR_STR7, 
			@VAR_STR8		= VAR_STR8,
			@VAR_STR9		= VAR_STR9,
			@VAR_STR10		= VAR_STR10,
			@VAR_STR11		= VAR_STR11,
			@VAR_STR12		= VAR_STR12,
			@VAR_STR13		= VAR_STR13,
			@VAR_STR14		= VAR_STR14,
			@VAR_STR15		= VAR_STR15,
			@VAR_STR16		= VAR_STR16,
			@VAR_STR17		= VAR_STR17,
			@VAR_STR18		= VAR_STR18,
			@VAR_STR19		= VAR_STR19,
			@VAR_STR20		= VAR_STR20,
			@CreatedByName		= CreatedByName, 
			@Createddatetime	= Createddatetime, 
			@ExpectedProcessDelay	= NULL, 
			@Introducedby		= Introducedby, 
			@IntroductionDatetime	= IntroductionDatetime, 
			@ProcessInstanceState	= ProcessInstanceState,
			@ActivityType 			= ActivityType,
			@LastModifiedTime		= LastModifiedTime
		From	QueueHistoryTable (NOLOCK)
		Where	ProcessInstanceId	= @DBProcessInstanceId
		And	WorkitemId		= @DBWorkitemId 	

		/* OUTPUT : ResultSet2 -> Process variables */

		/*Select  @CreatedByName		  CreatedByName, 
			@ExpectedProcessDelay	  ExpectedProcessDelay, 
			@Introducedby		  Introducedby, 
			@IntroductionDatetime	  IntroductionDatetime, 
			@ProcessInstanceState	  ProcessInstanceState */

	End
	/* Else
	Begin
		OUTPUT : ResultSet2 -> Process variables 
		
		Select	CreatedByName, ExpectedProcessDelay, Introducedby, IntroductionDatetime, ProcessInstanceState
		From	ProcessInstanceTable (NOLOCK) 
		Where	processInstanceId	= @DBProcessInstanceId 
	End */
	
	/* Process variables fetched from WFInstrumentTable / QueueHistory Table */
	Select  @CreatedByName		  CreatedByName, 
			@ExpectedProcessDelay	  ExpectedProcessDelay, 
			@Introducedby		  Introducedby, 
			@IntroductionDatetime	  IntroductionDatetime, 
			@ProcessInstanceState	  ProcessInstanceState
	
	/* OUTPUT : ResultSet3 -> Queue Variables FROM WFInstrumentTable / QueueHistoryTable */

	Select	@ReferByName	 ReferredByName,
		@ReferTo	  ReferredTo,
		@CheckListCompleteFlag	 CheckListCompleteFlag, 
		@HoldStatus		  HoldStatus, 
		@InstrumentStatus	  InstrumentStatus, 
		@ParentWorkItemID	  ParentWorkItemID,
		@ProcessInstanceId	  ProcessInstanceId, 
		@SaveStage		  SaveStage, 
		@Status			  Status, 
		@ActivityType 	  ActivityType,
		@LastModifiedTime LastModifiedTime,
		@VAR_DATE1		  VAR_DATE1, /* Bug #815 */
		@VAR_DATE2		  VAR_DATE2, 
		@VAR_DATE3		  VAR_DATE3,	
		@VAR_DATE4		  VAR_DATE4,
		@VAR_DATE5		  VAR_DATE5,
		@VAR_DATE6		  VAR_DATE6,
		@VAR_FLOAT1		  VAR_FLOAT1,
		@VAR_FLOAT2		  VAR_FLOAT2, 
		@VAR_INT1		  VAR_INT1, 
		@VAR_INT2		  VAR_INT2, 
		@VAR_INT3		  VAR_INT3,
		@VAR_INT4		  VAR_INT4, 
		@VAR_INT5		  VAR_INT5, 
		@VAR_INT6		  VAR_INT6, 
		@VAR_INT7		  VAR_INT7,
		@VAR_INT8		  VAR_INT8, 
		@VAR_LONG1		  VAR_LONG1, 
		@VAR_LONG2		  VAR_LONG2, 
		@VAR_LONG3		  VAR_LONG3,
		@VAR_LONG4		  VAR_LONG4,
		@VAR_LONG5		  VAR_LONG5,
		@VAR_LONG6		  VAR_LONG6,
		@VAR_REC_1		  VAR_REC_1, 
		@VAR_REC_2		  VAR_REC_2, 
		@VAR_REC_3		  VAR_REC_3,
		@VAR_REC_4		  VAR_REC_4, 
		@VAR_REC_5		  VAR_REC_5, 
		@VAR_STR1		  VAR_STR1, 
		@VAR_STR2		  VAR_STR2,
		@VAR_STR3		  VAR_STR3, 
		@VAR_STR4		  VAR_STR4, 
		@VAR_STR5		  VAR_STR5, 
		@VAR_STR6		  VAR_STR6,
		@VAR_STR7		  VAR_STR7, 
		@VAR_STR8		  VAR_STR8,
		@VAR_STR9		  VAR_STR9,
		@VAR_STR10		  VAR_STR10,
		@VAR_STR11		  VAR_STR11,
		@VAR_STR12		  VAR_STR12,
		@VAR_STR13		  VAR_STR13,
		@VAR_STR14		  VAR_STR14,
		@VAR_STR15		  VAR_STR15,
		@VAR_STR16		  VAR_STR16,
		@VAR_STR17		  VAR_STR17,
		@VAR_STR18		  VAR_STR18,
		@VAR_STR19		  VAR_STR19,
		@VAR_STR20		  VAR_STR20
	/* OUTPUT : ResultSet4 -> Documents */

	/* Bug # WFS_5_069, Case specific to IGATE, when processInstance is not having any folder 
			that time ItemIndex contains processInstanceId and ItemType = 'N' inplace of 'F' - Ruhi Hira */
	
	IF(@DBISSharePoint = N'N')
	BEGIN
		Select @queryStr = ' ' 	
		Select @queryStr = 'Select PDBDocument.DocumentIndex DocumentIndex, VersionNumber, Name, Owner, ' + /*bug 3919*/
				' CreatedDateTime, Comment, AppName CreatedByApplication, ImageIndex, ' +
				' VolumeId, DocumentType, CheckoutStatus, ' +
				' CheckoutByUser, NoOfPages, DocumentSize, RevisedDateTime' + /* WFS_5_117 */
				' From PDBDocument (NOLOCK) Inner Join PDBDocumentContent (NOLOCK) ' +
				' ON PDBDocument.documentIndex	= PDBDocumentContent.documentIndex ' +
				' AND parentFolderIndex	= ' + ISNULL(@VAR_REC_1, '-9999') +			 
				' AND ''' + @VAR_REC_2 + ''' = ''F''' +
				' ORDER BY ' + @DBDocumentOrderBy +
				' ' + @DBDocumentSortOrder			/* Sr No. 1 */

		EXEC (@queryStr)
	END


/*	 OUTPUT : ResultSet5 -> ToDo items*/

	Select	ToDoValue 
	FROM	ToDoStatusView (NOLOCK) 
	WHERE	ProcessInstanceid = @DBProcessInstanceId

	/* OUTPUT : ResultSet6 -> ToDo items*/

	SELECT	ExceptionId, excpseqid, ActionId, 
		activitytable.ActivityName ActivityName, UserName, ActionDateTime, 
		ExceptionName, ExceptionComments, FinalizationStatus
	FROM	exceptiontable (NOLOCK) , activitytable (NOLOCK) 
	WHERE	exceptiontable.processdefid	= @DBProcessDefId
	AND	activitytable.activityId	= ExceptionTable.activityId
	AND	activitytable.ProcessDefId	= ExceptionTable.ProcessDefId
	AND	processinstanceid		= @DBProcessInstanceId
	ORDER BY exceptionid, excpseqid, ActionDateTime ASC

	/* OUTPUT : ResultSet7 -> Comments Data */
	/*Execute ('Select Comments, CommentsBy, CommentsByName, CommentsTo, CommentsToName, CommentsType, ActionDateTime From WFCommentsTable (NOLOCK) Where ProcessInstanceId = N''' +  @DBProcessInstanceId + ''' and ActivityId = ' + @DBActivityId + ' Order By CommentsId DESC')*/
	
	Execute ('Select WFCommentsTable.Comments, WFCommentsTable.CommentsBy, WFCommentsTable.CommentsByName, WFCommentsTable.CommentsTo, WFCommentsTable.CommentsToName, WFCommentsTable.CommentsType, WFCommentsTable.ActionDateTime, ActivityTable.ActivityName From WFCommentsTable (NOLOCK) , ActivityTable (NOLOCK) Where WFCommentsTable.ProcessDefId = ActivityTable.ProcessDefId AND WFCommentsTable.ActivityId = ActivityTable.ActivityId AND WFCommentsTable.ProcessInstanceId = N''' +  @DBProcessInstanceId + ''' Order By WFCommentsTable.CommentsId DESC')
	/* OUTPUT : ResultSet8 -> Task Data */
	IF (@DBTaskId >0) 
	BEGIN
		Select AssignedBy,ActionDateTime,AssignedTo, duedate,TaskType,TaskMode
		from WFTaskStatusTable S(NOLOCK) INNER JOIN WFTaskDefTable T (NOLOCK) 
		on processinstanceid		= @DBProcessInstanceId
		and workitemid = @DBWorkItemId
		and activityid= @DBActivityId
		and S.taskid = @DBTaskId
		and subtaskid = @DBSubTaskId
		and T.taskid=S.Taskid
		and T.ProcessDefId=S.ProcessDefId
	END 
	
End
go

Print 'Stored Procedure WFGetWorkitemData compiled successfully ........'

go

/*--------------------------------------------------------------------------------------------
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
----------------------------------------------------------------------------------------------
	Group				: Application – Products
	Product / Project		: WorkFlow 6.0
	Module				: Transaction Server
	File Name			: WFEscalateWorkitem.sql [MSSQL Server]
	Author				: Ruhi Hira
	Date written (DD/MM/YYYY)	: 17/08/2005
	Description			: To be scheduled on database server, this will 
					  move candidate records [escalation mail item] from
					  WFEscalationTable to WFMailQueueTable.
----------------------------------------------------------------------------------------------
				CHANGE HISTORY
----------------------------------------------------------------------------------------------
Date			Change By		Change Description (Bug No. (If Any))
25/08/2005		Ruhi Hira		Bug # WFS_6.1_029.
15/02/2007		Varun Bhansaly		Bugzilla Id 74 (Inconsistency in date-time)
24/05/2007		Ruhi Hira		Bugzilla Bug 945.
23/08/2012		Abhishek Gupta	Change for added columns zipFlag, zipName, maxZipSize, alternateMessage in WFMAILQUEUETABLE.
11/03/2013      Kahkeshan       Changes corresponding to mailBCC field added in WFMailQueueTable
01/05/2013      Kahkeshan       Bug 39079 - EscalateToWithTrigger Feature requirement
28/01/2014		Shweta Singhal	UPDLock replaced with UPDLock, READPAST
10-02-2014		Sajid Khan		Changes done for Mesage Agent Optimization.
27/05/2014      Kanika Manik    PRD Bug 42494 - BCC support at each email sending modules
10/08/2016		Ambuj Triapthi		Added changes for the task Escalation feature in Case Management
25/08/2017		Sajid Khan		PRDP Bug 69029 - Need to send escalation mail after every defined time
31/08/2016		Ambuj Triapthi		Added UT bug fixes for task Escalation feature in Case Management
14/09/2017      Kumar Kimil         Handling of Expired flag and Escalated flag	
26/09/2017      Ambuj Tripathi  UT Bug#72140 fixed
----------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFEscalateWorkitem')
Begin
	Execute('DROP PROCEDURE WFEscalateWorkitem')
	Print 'Procedure WFEscalateWorkitem already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFEscalateWorkitem As
Begin

	Declare @escalateId		Int
	Declare @processDefId		Int
	Declare @activityId		Int
	Declare @activityName		NVarchar(30)
	Declare @processInstanceId	NVarchar(64)
	Declare @workitemId		Int
	Declare @ConcernedAuthInfo	NVarchar(255)
	Declare @fieldName	NVARCHAR(255)
	Declare @actionId		Int
	DECLARE @EscalationType NVARCHAR(1)
	DECLARE @ResendDurationMinutes INT
	Declare @taskId			Int
	Declare @taskName		NVarchar(30)
	Declare @isValidTask	Int

	/* Bug # Bug # WFS_6.1_029 , delete from WFEscInProcessTable in the beginning only - Ruhi Hira*/ 
	Delete From WFEscInProcessTable

	Insert Into WFEscInProcessTable
	Select * 
	From WFEscalationTable
	Where	Upper(RTRIM(EscalationMode)) = N'MAIL'
	And	ScheduleTime <= getDate()

	Declare Escalate_cur CURSOR FAST_FORWARD FOR
		Select	escalationId, processDefid, activityId, processInstanceId, workitemId, ConcernedAuthInfo, EscalationType, ResendDurationMinutes, ISNULL(TaskId, 0)
		From WFEscInProcessTable
	Open Escalate_Cur

	Fetch Next From Escalate_Cur Into 
		@escalateId, @processDefid, @activityId, @processInstanceId, @workitemId, @ConcernedAuthInfo,@EscalationType, @ResendDurationMinutes,@taskId
	WHILE (@@FETCH_STATUS <> -1)
	BEGIN
		IF (@@FETCH_STATUS <> -2) 
		BEGIN
			/*Changes done for task expiry*/
			IF(@activityId < 0)
				BEGIN
					/*Check if this is valid escalation case, Bug#72140*/
					select @isValidTask = 0
					select @isValidTask=1 from wftaskstatustable (NOLOCK) where ProcessInstanceId = @processInstanceId and WorkitemId = @workitemId and ProcessDefId = @processDefid and ActivityId = -@activityId and TaskId = @taskId and TaskStatus in (2, 6)
					IF(@isValidTask = 0)
						BEGIN
						Fetch Next From Escalate_Cur Into 
							@escalateId, @processDefid, @activityId, @processInstanceId, @workitemId, @ConcernedAuthInfo,@EscalationType, 
							@ResendDurationMinutes, @taskId
						CONTINUE
						END
					ELSE
						BEGIN
					Select @activityId = -@activityId
					Select @actionId = 711
					Select @taskName = TaskName from Wftaskdeftable (NOLOCK) where ProcessDefId = @processDefid and TaskId = @taskId
					BEGIN
					UPDATE WFTaskStatusTable SET EscalatedFlag='Y' where processInstanceId=@processInstanceId and ProcessDefId = @processDefid and TaskId = @taskId and activityId=@activityId
				    END
						END
					/*Check if this is valid escalation case, Bug#72140 ends here*/
				END;
			ELSE
				BEGIN
					Select @actionId = 73
				END;
			/*Changes done for task expiry till here*/
			Select @activityName = activityName From ActivityTable (NOLOCK)
			Where	ProcessDefId = @processDefid
			And	ActivityId = @activityId
			Begin Transaction E_TRANS
				Insert Into WFMailQueueTable(mailFrom, mailTo,mailCC,mailBCC,mailSubject,mailMessage,mailContentType,attachmentISINDEX,attachmentNames,attachmentExts,mailPriority,mailStatus,statusComments,lockedBy,successTime,LastLockTime,insertedBy,mailActionType,insertedTime,processDefId,processInstanceId,workitemId,activityId,noOfTrials,zipFlag,zipName,maxZipSize,alternateMessage)
				Select FromId, ConcernedAuthInfo, CCId, BCCId, Comments,
					message, 'text/html', null, null,
					null, 1, N'N', null,
					null, null, null, 'SYSTEM',
					'ESCALATIONRULE', getDate(), processDefId, processInstanceId,
					workitemId, -activityId, 0 ,'N',null,0,'' /* Changes corresponding to mailBCC field added in WFMailQueueTable */
				From WFEscInProcessTable WITH (UPDLOCK,READPAST)
				WHERE EscalationId = @escalateId
				
				IF(@EscalationType = 'R' AND @ResendDurationMinutes IS NOT NULL AND @ResendDurationMinutes <> 0)
				BEGIN
					UPDATE WFEscalationTable SET ScheduleTime = DATEADD(mi, @ResendDurationMinutes, GETDATE()) WHERE EscalationId = @escalateId
				END
				ELSE
				BEGIN
					Delete From WFEscalationTable Where EscalationId = @escalateId
				END
				--Delete From WFEscalationTable Where EscalationId = @escalateId
				/* Changed By Varun Bhansaly On 15/02/2007 For Bugzilla Bug Id 74*/
				/*Insert Into WFMessageTable (message, status, ActionDateTime)
				values ('<Message><ActionId>73</ActionId><UserId>0</UserId><ProcessDefId>' + 
					convert(varchar, @processDefId) + '</ProcessDefId><ActivityId>' + 
					convert(varchar, @activityId) + 
					'</ActivityId><QueueId>0</QueueId><UserName>System</UserName><ActivityName>' +
					@activityName + '</ActivityName>' + 
					'<TotalWiCount>0</TotalWiCount><TotalDuration>0</TotalDuration><ActionDateTime>' + 
					convert(varchar(22), getDate(), 20) + 
					'</ActionDateTime><EngineName></EngineName><ProcessInstance>' + @processInstanceId + 
					'</ProcessInstance><FiledId>0</FiledId><FieldName><Mode>MAIL</Mode><ConcernedAuthInfo>' +
					@ConcernedAuthInfo + '</ConcernedAuthInfo></FieldName><WorkitemId>' + 
					convert(varchar, @workitemId) + 
					'</WorkitemId><TotalPrTime>0</TotalPrTime><DelayTime>0</DelayTime><WKInDelay>0</WKInDelay>' + 
					'<ReportType>D</ReportType><LoggingFlag>1</LoggingFlag></Message>',
					N'N', GETDATE()*/
					set @fieldName =   '<Mode>MAIL</Mode><ConcernedAuthInfo>' +
					@ConcernedAuthInfo + '</ConcernedAuthInfo>'
				Insert into WFCurrentRouteLogTable (ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId,AssociatedFieldName, ActivityName, UserName, NewValue, QueueId, ProcessVariantId, TaskId) 
				values(@processDefId,@activityId,@processInstanceId,@workitemId,0,@actionId,getDate(),null,0,@fieldName, @activityName,'System',@taskName,0,
				0, @taskId) 
				

			Commit Transaction E_TRANS
		END
		Fetch Next From Escalate_Cur Into 
			@escalateId, @processDefid, @activityId, @processInstanceId, @workitemId, @ConcernedAuthInfo,@EscalationType, 
			@ResendDurationMinutes, @taskId
	END

	CLOSE Escalate_cur
	DEALLOCATE Escalate_cur

End

go

/*-----------------------------------------------------------------------------------------------
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
-------------------------------------------------------------------------------------------------
	Group				: Application – Products
	Product / Project		: WorkFlow 5.0
	Module				: Transaction Server
	File Name			: WFTransferData.sql
	Author				: Rahul Mehta
	Date written (DD/MM/YYYY)	: 19/07/2005
	Description			: Script to move data to history tables for workitems
						- Reached exit workstep
						- Aborted
						- Discarded
-------------------------------------------------------------------------------------------------
				CHANGE HISTORY
-------------------------------------------------------------------------------------------------

Date			Change By		Change Description (Bug No. (If Any))
24/05/2007		Ruhi Hira		Bugzilla Bug 945.
08/02/2008		Ashish Mangla	Bugzilla Bug 3326 (ProcessInstanceState for Discarded Workitems was going as that of completed)
29/05/2008		Varun Bhansaly	Optimization of SP - 
								Earlier scenario - 
									1. Query CurrentRouteLogTable and iterate over its results. Extract ProcessInstanceId for ActionIds 3, 5, 20.
									2. Prepare a JOIN of PendingWorkListTable, WorkListTable, ProcessInstanceTable.
								Optimized scenario - 
									1. Donot perform STEP 1 of Earlier scenario.
									2. Perform STEP 2 of Earlier scenario for for ProcessInstanceState 4, 5, 6
										4 - Terminated.
										5 - Aborted.
										6 - Completed.
									& iterate over the results.
09/09/2009		Indraneel Dasgupta WFS_8.0_032	Error "table or view doesnot exists " while compiling stored procedure
15/02/2013		Neeraj Sharma   Bug id : 328250 History of the workitems was not generated when cabinet is upgraded from OF versions 6.2 to higher version Of 9.0. 
30/04/2013		Preeti Awasthi	Bug 39067 - Support of <ExternalTable_Name>_History Table in Search Workitem API
19/12/2013		Sweta Bansal	Bug 42747 - In all product tables, type of column, that contains UserIndex is changed from SmallInt to Int as user is unable to login into OmniFlow and OmniDoc as its userindex is greater than the range of SmallInt.
11/08/2014		Kahkeshan		Optimization Changes .
11/08/2014		Kahkeshan 		Merging of PRD Bugs 44945,44946,44670
08/10/2014      Kanika Manik 	PRD Bug 50463 - WFTransferData is not moving the data of External Table into ExternalTable_History table even though value of input parameter TransferHistoryData is 'Y'
07/07/2015		Ashutosh Pandey	Replicating from OF9 to OF10.x Bug 55753 - Provided option to add Comments while ad-hoc routing of Work Item in process manager
17/11/2015		Gourav Chadha	Bug 56325 - Observations and error handling in Audit Archive Service
23/12/2015		Ashutosh Pandey	Replicating Bug 58399 - Need an option to view refer, reassign and ad-hoc routing comments in workitem properties
28/07/2016		Kahkeshan		Bug 63161 - Changes required in archival scripts to be provide the support of archival post running WFTransferData
25/10/2016		Kahkeshan		Check for ActionId removed for transferring data
25/11/2016		Gourav Chadha	Bug 65678 - Increment Of Queue Variables 26 to 42
06/01/2017      Anju Gupta      Bug 66599 - Support to purge/move the Report Data from Product tables by using WFPurgeReportData.sql and WFTransferData.sql
17/05/2017      Kumar Kimil     Transfer Data for IBPS(Transaction Tables including Case Management)
22/09/2017      Kumar Kimil     TransferData changes for Ibps3.2
08/11/2017		Ambuj Tripathi	Changes to add URN in TransferData for Case Registration changes.
22/04/2018  Ambuj Tripathi		Bug 76862 - Remove the db console messages from all procedures
-------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFTransferData')
Begin
	Execute('DROP PROCEDURE WFTransferData')
	Print 'Procedure WFTransferData already exists, hence older one dropped ..... '
End

go

If Not Exists (Select * from SysObjects Where xType = 'U' and name = 'SuccessLogTable')
Begin
	create table SuccessLogTable(
	LogId INT,
	ProcessINstanceId NVARCHAR(4000))
	--Print 'SuccessLogTable created successfully ....................'
End

go

If Not Exists (Select * from SysObjects Where xType = 'U' and name = 'FailureLogTable')
Begin
	create table FailureLogTable(
	LogId INT,
	ProcessINstanceId NVARCHAR(4000))
	--Print 'Failure LogTable created successfully ....................'
End

go

CREATE PROCEDURE WFTransferData( 
--@TransferHistoryData	char(1) = 'N',
@DBRowsToProcess		INT		= 0, /*Its value should be multiple of 100*/
@NoOfDays				INT		= 0
)
AS    
BEGIN
	DECLARE @v_ProcessDefId					INT
	DECLARE @v_ProcessName					NVARCHAR(30)
	DECLARE @v_ProcessVersion				SMALLINT
	DECLARE @v_ProcessInstanceId			NVARCHAR(63)
	DECLARE @v_ActivityId					INT
	DECLARE @v_ActivityName					NVARCHAR(30)
	DECLARE @v_ParentWorkItemId				INT
	DECLARE @v_WorkItemId					INT
	DECLARE @v_WorkItemState				INT
	DECLARE @v_ProcessInstanceState			INT
	DECLARE @v_StateName					NVARCHAR(50)
	DECLARE @v_QueueName					NVARCHAR(63)
	DECLARE @v_QueueType					NVARCHAR(1)
	DECLARE @v_AssignedUser					NVARCHAR(63)
	DECLARE @v_AssignmentType				NVARCHAR(1)
	DECLARE @v_InstrumentStatus				NVARCHAR(1)
	DECLARE @v_CheckListCompleteFlag		NVARCHAR(1)
	DECLARE @v_IntroductionDateTime			DATETIME
	DECLARE @v_CreatedDateTime				DATETIME
	DECLARE @v_IntroducedBy					NVARCHAR(63)
	DECLARE @v_CreatedByName				NVARCHAR(63)
	DECLARE @v_EntryDateTime				DATETIME
	DECLARE @v_LockStatus					NVARCHAR(1)
	DECLARE @v_HoldStatus					SMALLINT
	DECLARE @v_PriorityLevel				SMALLINT
	DECLARE @v_LockedByName					NVARCHAR(63)
	DECLARE @v_LockedTime					DATETIME
	DECLARE @v_ValidTill					DATETIME
	DECLARE @v_SaveStage					NVARCHAR(30)
	DECLARE @v_PreviousStage				NVARCHAR(30)
	DECLARE @v_ExpectedWorkItemDelayTime	DATETIME
	DECLARE @v_ExpectedProcessDelayTime		DATETIME
	DECLARE @v_Status						NVARCHAR(50)
	DECLARE @v_VAR_INT1						SMALLINT
	DECLARE @v_VAR_INT2						SMALLINT
	DECLARE @v_VAR_INT3						SMALLINT
	DECLARE @v_VAR_INT4						SMALLINT
	DECLARE @v_VAR_INT5						SMALLINT
	DECLARE @v_VAR_INT6						SMALLINT
	DECLARE @v_VAR_INT7						SMALLINT
	DECLARE @v_VAR_INT8						SMALLINT
	DECLARE @v_VAR_FLOAT1					NUMERIC
	DECLARE @v_VAR_FLOAT2					NUMERIC
	DECLARE @v_VAR_DATE1					DATETIME
	DECLARE @v_VAR_DATE2					DATETIME
	DECLARE @v_VAR_DATE3					DATETIME
	DECLARE @v_VAR_DATE4					DATETIME
	DECLARE @v_VAR_DATE5					DATETIME
	DECLARE @v_VAR_DATE6					DATETIME
	DECLARE @v_VAR_LONG1					INT
	DECLARE @v_VAR_LONG2					INT
	DECLARE @v_VAR_LONG3					INT
	DECLARE @v_VAR_LONG4					INT
	DECLARE @v_VAR_LONG5					INT
	DECLARE @v_VAR_LONG6					INT
	DECLARE @v_VAR_STR1						NVARCHAR(255)
	DECLARE @v_VAR_STR2						NVARCHAR(255)
	DECLARE @v_VAR_STR3						NVARCHAR(255)
	DECLARE @v_VAR_STR4						NVARCHAR(255)
	DECLARE @v_VAR_STR5						NVARCHAR(255)
	DECLARE @v_VAR_STR6						NVARCHAR(255)
	DECLARE @v_VAR_STR7						NVARCHAR(255)
	DECLARE @v_VAR_STR8						NVARCHAR(255)
	DECLARE @v_VAR_STR9						NVARCHAR(255)
	DECLARE @v_VAR_STR10					NVARCHAR(255)
	DECLARE @v_VAR_STR11					NVARCHAR(255)
	DECLARE @v_VAR_STR12					NVARCHAR(255)
	DECLARE @v_VAR_STR13					NVARCHAR(255)
	DECLARE @v_VAR_STR14					NVARCHAR(255)
	DECLARE @v_VAR_STR15					NVARCHAR(255)
	DECLARE @v_VAR_STR16					NVARCHAR(255)
	DECLARE @v_VAR_STR17					NVARCHAR(255)
	DECLARE @v_VAR_STR18					NVARCHAR(255)
	DECLARE @v_VAR_STR19					NVARCHAR(255)
	DECLARE @v_VAR_STR20					NVARCHAR(255)
	DECLARE @v_VAR_REC_1					NVARCHAR(255)
	DECLARE @v_VAR_REC_2					NVARCHAR(255)
	DECLARE @v_VAR_REC_3					NVARCHAR(255)
	DECLARE @v_VAR_REC_4					NVARCHAR(255)
	DECLARE @v_VAR_REC_5					NVARCHAR(255)
	DECLARE @v_Q_StreamId					INT
	DECLARE @v_Q_QueueId					INT
	DECLARE @v_Q_UserID						INT
	DECLARE @v_LastProcessedBy				INT
	DECLARE @v_ProcessedBy					NVARCHAR(63)
	DECLARE @v_ReferredTo					INT
	DECLARE @v_ReferredToName				NVARCHAR(63)
	DECLARE @v_ReferredBy					INT
	DECLARE @v_ReferredByName				NVARCHAR(63)
	DECLARE @v_CollectFlag					NVARCHAR(1)
	DECLARE @v_newCab						NVARCHAR(2)
	DECLARE @ExtTableName					NVARCHAR(510)
	DECLARE @ExtTableString					NVARCHAR(2000)
	DECLARE @pos1				int 
	DECLARE @pos2				int
	DECLARE @v_queryStr						VARCHAR(1000)
	--DECLARE	@v_rowCount						INT
	DECLARE @row_present					INT 	
	DECLARE	@v_Count						INT
	DECLARE @v_rowProcessStr				VARCHAR(200)
	DECLARE @v_conditionStr				VARCHAR(200)
	
	DECLARE @v_ActivityType					SMALLINT  --Added by Kimil for New Column-ActivityType
	DECLARE @v_lastModifiedTime             DATETIME  --Added by Kimil for New Column-lastModifiedTime
	DECLARE @v_ChildProcessInstanceId       NVARCHAR(63)--Added by Kimil for New Column-ChildProcessInstanceId
    DECLARE @v_ChildWorkitemId				INT--Added by Kimil for New Column-ChildWorkitemId
	DECLARE @v_FilterValue					INT		--Added by Kimil for New Column-FilterValue	
	DECLARE @v_Guid 						BIGINT  --Added by Kimil for New Column-Guid 
	DECLARE @v_NotifyStatus				NVARCHAR(1)--Added by Kimil for New Column-NotifyStatus
	DECLARE @v_Q_DivertedByUserId   		INT   --Added by Kimil for New Column-Q_DivertedByUserId
	DECLARE @v_RoutingStatus				NVARCHAR(1) --Added by Kimil for New Column-RoutingStatus
	DECLARE @v_NoOfCollectedInstances		INT --Added by Kimil for New Column-NoOfCollectedInstances
	DECLARE @v_IsPrimaryCollected			NVARCHAR(1)	--Added by Kimil for New Column-IsPrimaryCollected
	DECLARE	@v_ExportStatus					NVARCHAR(1)--Added by Kimil -ExportStatus
	DECLARE	@v_ProcessVariantId 			INT --Added by Kimil for New Column-ProcessVariantId
	DECLARE @TransferHistoryData	char(1)
	DECLARE @v_Introducedbyid				INT		 
	DECLARE	@v_IntroducedAt				NVARCHAR(30)	
	DECLARE	@v_Createdby					INT		
	DECLARE @v_URN						NVARCHAR(63)	
	SET @TransferHistoryData='Y'
	IF @TransferHistoryData = 'Y'  -- WFS_6.2_044 : Tirupati Srivastava 
	BEGIN
		SELECT 	@ExtTableString	= '' 

		DECLARE ext_cursor CURSOR FAST_FORWARD FOR  
		SELECT PROCESSDEFID, TABLENAME FROM Extdbconftable (NOLOCK) WHERE EXTOBJID = 1

		OPEN ext_cursor  

		FETCH NEXT FROM ext_cursor INTO @v_ProcessDefId, @ExtTableName  

		IF (@@Fetch_Status = -1 OR  @@Fetch_Status = -2)  
		BEGIN				
			CLOSE ext_cursor   
			DEALLOCATE ext_cursor  
		END  

		WHILE(@@FETCH_STATUS  <> -1)  
		BEGIN   
			IF(@@FETCH_STATUS <> -2)  
			BEGIN  
				SELECT @ExtTableString = @ExtTableString + LTRIM(RTRIM(@v_ProcessDefId)) + CHAR(21) + LTRIM(RTRIM(@ExtTableName)) + CHAR(25)  
			END  
			FETCH NEXT FROM ext_cursor INTO @v_ProcessDefId, @ExtTableName  
		END  

		CLOSE ext_cursor  
		DEALLOCATE ext_cursor  
	END
	/*insert into atable values('a-'+isnull(@ExtTableString,''))*/
/*	SELECT @v_newCab = 'Y'
	
	If Exists (SELECT * FROM sysObjects WHERE UPPER(NAME) =UPPER('CurrentRouteLogTable') and xtype='U')
	BEGIN
		SET @v_newCab = 'N'
	END */
	SELECT @v_newCab = 'Y'
	SET @v_Count = 0
	
	SET @v_rowProcessStr = ''
	IF (@DBRowsToProcess > 0 AND @DBRowsToProcess < 100)
	BEGIN
		SET @v_rowProcessStr = @v_rowProcessStr + 'TOP ' + CONVERT(VARCHAR,@DBRowsToProcess)
	END
	ELSE
	BEGIN
		SET @v_rowProcessStr = @v_rowProcessStr + 'TOP 100'
	END
	
	SET @v_conditionStr = ''
	IF(@NoOfDays > 0)
	BEGIN
		SET @v_conditionStr = @v_conditionStr + ' AND ENTRYDATETIME < (GETDATE() - ' + CONVERT(VARCHAR(5),@NoOfDays) + ')'
	END		
		
		
	WHILE ((@DBRowsToProcess > 0 AND @v_Count < @DBRowsToProcess) OR (@DBRowsToProcess = 0 AND 1 = 1))
	BEGIN
		SET @row_present = 0
		EXECUTE('DECLARE v_transferCursor CURSOR FAST_FORWARD FOR
		SELECT  ' + @v_rowProcessStr +
				' ProcessDefId, ProcessName, ProcessVersion, ProcessInstanceId, ProcessInstanceId, 
				ActivityId, ActivityName, ParentWorkItemId, WorkItemId, ProcessInstanceState, 
				WorkItemState, StateName, QueueName, QueueType, AssignedUser, 
				AssignmentType, InstrumentStatus, CheckListCompleteFlag, IntroductionDateTime, CreatedDateTime, 
				IntroducedBy, CreatedByName, EntryDateTime, LockStatus, HoldStatus,
				PriorityLevel, LockedByName, LockedTime, ValidTill, SaveStage, 
				PreviousStage, ExpectedWorkItemDelay, ExpectedProcessDelay, Status, VAR_INT1, 
				VAR_INT2, VAR_INT3,	VAR_INT4, VAR_INT5, VAR_INT6,
				VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1,
				VAR_DATE2, VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6, VAR_LONG1,	VAR_LONG2, 
				VAR_LONG3, VAR_LONG4, VAR_LONG5, VAR_LONG6, VAR_STR1,	VAR_STR2, VAR_STR3, 
				VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8, VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, 
				VAR_REC_1, VAR_REC_2, VAR_REC_3, VAR_REC_4, VAR_REC_5, 
				Q_StreamId, Q_QueueId, Q_UserID, LastProcessedBy, ProcessedBy, 
				ReferredTo, ReferredToName, ReferredBy,	ReferredByName, CollectFlag,ActivityType,lastModifiedTime,ChildProcessInstanceId,ChildWorkitemId,FilterValue,Guid,NotifyStatus,Q_DivertedByUserId,RoutingStatus,NoOfCollectedInstances,IsPrimaryCollected,ExportStatus,ProcessVariantId,Introducedbyid,IntroducedAt,Createdby,URN 
		FROM    WFInstrumentTable 
		WHERE   WorkitemId = 1 AND ProcessInstanceState IN (4, 5, 6)' + @v_conditionStr)

		OPEN v_transferCursor
		FETCH   v_transferCursor 
		INTO    @v_ProcessDefId, @v_ProcessName, @v_ProcessVersion, @v_ProcessInstanceId, @v_ProcessInstanceId, 
				@v_ActivityId, @v_ActivityName, @v_ParentWorkItemId, @v_WorkItemId, @v_ProcessInstanceState,
				@v_WorkItemState, @v_StateName, @v_QueueName, @v_QueueType, @v_AssignedUser,
				@v_AssignmentType, @v_InstrumentStatus, @v_CheckListCompleteFlag, @v_IntroductionDateTime, @v_CreatedDateTime, 
				@v_IntroducedBy, @v_CreatedByName, @v_EntryDateTime, @v_LockStatus, @v_HoldStatus,
				@v_PriorityLevel, @v_LockedByName, @v_LockedTime, @v_ValidTill, @v_SaveStage,
				@v_PreviousStage, @v_ExpectedWorkItemDelayTime, @v_ExpectedProcessDelayTime, @v_Status,	@v_VAR_INT1, 
				@v_VAR_INT2, @v_VAR_INT3, @v_VAR_INT4,	@v_VAR_INT5, @v_VAR_INT6, 
				@v_VAR_INT7, @v_VAR_INT8, @v_VAR_FLOAT1, @v_VAR_FLOAT2, @v_VAR_DATE1, 
				@v_VAR_DATE2, @v_VAR_DATE3, @v_VAR_DATE4, @v_VAR_DATE5, @v_VAR_DATE6, @v_VAR_LONG1, @v_VAR_LONG2, 
				@v_VAR_LONG3, @v_VAR_LONG4, @v_VAR_LONG5, @v_VAR_LONG6, @v_VAR_STR1, @v_VAR_STR2, @v_VAR_STR3, 
				@v_VAR_STR4, @v_VAR_STR5, @v_VAR_STR6, @v_VAR_STR7, @v_VAR_STR8, @v_VAR_STR9, @v_VAR_STR10, @v_VAR_STR11, @v_VAR_STR12,
				@v_VAR_STR13, @v_VAR_STR14, @v_VAR_STR15, @v_VAR_STR16, @v_VAR_STR17, @v_VAR_STR18, @v_VAR_STR19, @v_VAR_STR20,
				@v_VAR_REC_1, @v_VAR_REC_2, @v_VAR_REC_3, @v_VAR_REC_4,	@v_VAR_REC_5, 
				@v_Q_StreamId, @v_Q_QueueId, @v_Q_UserID,	@v_LastProcessedBy, @v_ProcessedBy, 
				@v_ReferredTo, @v_ReferredToName, @v_ReferredBy, @v_ReferredByName, @v_CollectFlag ,@v_ActivityType,@v_lastModifiedTime,
				@v_ChildProcessInstanceId,@v_ChildWorkitemId,@v_FilterValue,@v_Guid,@v_NotifyStatus,@v_Q_DivertedByUserId,@v_RoutingStatus,@v_NoOfCollectedInstances,@v_IsPrimaryCollected,@v_ExportStatus,@v_ProcessVariantId,@v_Introducedbyid,@v_IntroducedAt,@v_Createdby,@v_URN 

		IF (@@FETCH_STATUS = -1 OR @@FETCH_STATUS = -2)
		BEGIN				
			CLOSE v_transferCursor
			DEALLOCATE v_transferCursor
			RETURN
		END

		WHILE (@@FETCH_STATUS  <> -1)
		BEGIN
			IF (@@FETCH_STATUS <> -2)
			BEGIN
				BEGIN TRANSACTION TRANDATA 
					/*IF @v_newCab = 'Y'
					BEGIN
						SET @v_queryStr = 'Select 1 from WFCurrentRouteLogTable where ProcessInstanceId = ''' + @v_ProcessInstanceId + ''' AND (ActionId = 20 OR ActionId = 3 OR ActionId = 127)'
					END
					ELSE IF @v_newCab = 'N'
					BEGIN
						SET @v_queryStr = 'Select 1 from CurrentRouteLogTable where ProcessInstanceId = ''' + @v_ProcessInstanceId + ''' AND (ActionId = 20 OR ActionId = 3 OR ActionId = 127)'
					END
					
					EXECUTE(@v_queryStr)
					SELECT @v_rowcount = @@ROWCOUNT
					
					IF @v_rowcount > 0
					BEGIN*/
					SET @row_present = 1
					INSERT INTO QueueHistoryTable
					(
						ProcessDefId, ProcessName, ProcessVersion, ProcessInstanceId, 
						ProcessInstanceName, ActivityId, ActivityName, ParentWorkItemId, 
						WorkItemId, ProcessInstanceState, WorkItemState, Statename, 
						QueueName, QueueType, AssignedUser, AssignmentType, InstrumentStatus, 
						CheckListCompleteFlag, IntroductionDateTime, CreatedDateTime, 
						IntroducedBy, CreatedByName, EntryDateTime, LockStatus, HoldStatus, 
						PriorityLevel, LockedByName, LockedTime, ValidTill, SaveStage, 
						PreviousStage, ExpectedWorkItemDelayTime, ExpectedProcessDelayTime, 
						Status, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, 
						VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, 
						VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, 
						VAR_LONG3, VAR_LONG4, VAR_LONG5, VAR_LONG6, 
						VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, 
						VAR_STR8, VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14,
						VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2, VAR_REC_3, 
						VAR_REC_4, VAR_REC_5, 
						Q_StreamId, Q_QueueId, Q_UserID, LastProcessedBy, ProcessedBy, ReferredTo, 
						ReferredToName, ReferredBy, ReferredByName, CollectFlag, CompletionDateTime,ActivityType,lastModifiedTime,ChildProcessInstanceId,ChildWorkitemId,FilterValue,Guid,NotifyStatus,Q_DivertedByUserId,RoutingStatus,NoOfCollectedInstances,IsPrimaryCollected,
						ExportStatus,ProcessVariantId,Introducedbyid,IntroducedAt,Createdby,URN  
					)    VALUES  (
						@v_ProcessDefId, @v_ProcessName, @v_ProcessVersion, @v_ProcessInstanceId,
						@v_ProcessInstanceId, @v_ActivityId, @v_ActivityName, @v_ParentWorkItemId,
						@v_WorkItemId, 6, @v_WorkItemState, @v_StateName, @v_QueueName,
						@v_QueueType, @v_AssignedUser, @v_AssignmentType, @v_InstrumentStatus,
						@v_CheckListCompleteFlag, @v_IntroductionDateTime, @v_CreatedDateTime, @v_IntroducedBy,
						@v_CreatedByName, @v_EntryDateTime, @v_LockStatus, @v_HoldStatus,
						@v_PriorityLevel, @v_LockedByName, @v_LockedTime, @v_ValidTill,
						@v_SaveStage, @v_PreviousStage, @v_ExpectedWorkItemDelayTime, @v_ExpectedProcessDelayTime,
						@v_Status, @v_VAR_INT1, @v_VAR_INT2, @v_VAR_INT3,
						@v_VAR_INT4, @v_VAR_INT5, @v_VAR_INT6, @v_VAR_INT7,
						@v_VAR_INT8, @v_VAR_FLOAT1, @v_VAR_FLOAT2, @v_VAR_DATE1,
						@v_VAR_DATE2, @v_VAR_DATE3, @v_VAR_DATE4, @v_VAR_DATE5, @v_VAR_DATE6, @v_VAR_LONG1,
						@v_VAR_LONG2, @v_VAR_LONG3, @v_VAR_LONG4, @v_VAR_LONG5, @v_VAR_LONG6, @v_VAR_STR1,
						@v_VAR_STR2, @v_VAR_STR3, @v_VAR_STR4, @v_VAR_STR5,
						@v_VAR_STR6, @v_VAR_STR7, @v_VAR_STR8, @v_VAR_STR9, @v_VAR_STR10, 
						@v_VAR_STR11, @v_VAR_STR12, @v_VAR_STR13, @v_VAR_STR14, @v_VAR_STR15, 
						@v_VAR_STR16, @v_VAR_STR17, @v_VAR_STR18, @v_VAR_STR19, @v_VAR_STR20, @v_VAR_REC_1,
						@v_VAR_REC_2, @v_VAR_REC_3, @v_VAR_REC_4, @v_VAR_REC_5,
						@v_Q_StreamId, @v_Q_QueueId, @v_Q_UserID, @v_LastProcessedBy,
						@v_ProcessedBy, @v_ReferredTo, @v_ReferredToName, @v_ReferredBy,
						@v_ReferredByName, @v_CollectFlag, NULL,@v_ActivityType,@v_lastModifiedTime,
				        @v_ChildProcessInstanceId,@v_ChildWorkitemId,@v_FilterValue,@v_Guid,@v_NotifyStatus,@v_Q_DivertedByUserId,@v_RoutingStatus,
						@v_NoOfCollectedInstances,@v_IsPrimaryCollected,@v_ExportStatus,@v_ProcessVariantId,@v_Introducedbyid,@v_IntroducedAt,@v_Createdby,@v_URN
					)

					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					
					DELETE FROM WFInstrumentTable WHERE ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					--PRINT 'Queuhistory Insert Succesfull'
					INSERT INTO EXCEPTIONHISTORYTABLE
						SELECT ProcessDefId, ExcpSeqId, WorkitemId, Activityid, ActivityName, 
							ProcessInstanceId, UserId, UserName, ActionId, ActionDateTime, ExceptionId,
							ExceptionName, FinalizationStatus, ExceptionComments
						FROM EXCEPTIONTABLE
						WHERE EXCEPTIONTABLE.ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					
					DELETE from EXCEPTIONTABLE
					where 
					ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					--PRINT 'EXCEPTIONHISTORYTABLE Insert Succesfull'
					INSERT INTO TODOSTATUSHISTORYTABLE
						SELECT ProcessDefId, ProcessInstanceId, ToDoValue
						FROM TODOSTATUSTABLE
						WHERE TODOSTATUSTABLE.ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					
					DELETE FROM TODOSTATUSTABLE	WHERE ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					--PRINT 'TODOSTATUSHISTORYTABLE Insert Succesfull'
					INSERT INTO WFREPORTDATAHISTORYTABLE
						SELECT ProcessInstanceId, WorkitemId, ProcessDefId, Activityid, UserId, 
						TotalProcessingTime,ProcessVariantId
						FROM WFREPORTDATATABLE
						WHERE WFREPORTDATATABLE.ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					
					DELETE from WFREPORTDATATABLE
					where 
					ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
					BEGIN
						ROLLBACK TRANSACTION TRANDATA
						INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
						CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
					END
					--PRINT 'WFREPORTDATAHISTORYTABLE Insert Succesfull'
					IF(@v_newCab = 'Y')
					BEGIN
						INSERT INTO WFHistoryRouteLogTable SELECT LogId, ProcessDefId, ActivityId, ProcessInstanceId, 
							WorkItemId, UserId, ActionId, ActionDateTime, AssociatedFieldId, 
							AssociatedFieldName, ActivityName, UserName,NewValue,AssociatedDateTime,QueueID,ProcessVariantId,TaskId,SubTaskId,URN	
						FROM WFCurrentRouteLogTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
						END
					
						DELETE FROM WFCurrentRouteLogTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
						DEALLOCATE v_transferCursor
						Return
						END
					END

					--PRINT 'WFHistoryRouteLogTable Insert Succesfull'
				/*	ELSE
					BEGIN
						INSERT INTO HistoryRouteLogTable SELECT LogId, ProcessDefId, ActivityId, ProcessInstanceId, 
							WorkItemId, UserId, ActionId, ActionDateTime, AssociatedFieldId, 
							AssociatedFieldName, ActivityName, UserName	
						FROM CurrentRouteLogTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							GOTO ProcessNext
						END
					
						DELETE FROM CurrentRouteLogTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							GOTO ProcessNext
						END
					END*/
						IF @TransferHistoryData = 'Y'	-- WFS_6.2_044 : Tirupati Srivastava 
						BEGIN
							SELECT @pos1 = CHARINDEX(CONVERT(Nvarchar(512), @v_ProcessDefId), @ExtTableString) 

							IF @pos1 <> 0
							BEGIN
								SELECT @pos1 = CHARINDEX(CHAR(21), @ExtTableString, @pos1)  
								SELECT @pos2 = CHARINDEX(CHAR(25), @ExtTableString, @pos1)  

								SELECT @ExtTableName = RTRIM(SUBSTRING(@ExtTableString, @pos1+1, (@pos2-@pos1)-1))  

								IF Exists (SELECT * FROM SysObjects WHERE name = @ExtTableName+'_History')  
								BEGIN  
									IF (@v_VAR_REC_1 IS NOT NULL AND @v_VAR_REC_1 > '0')  
									BEGIN  
										SELECT @v_VAR_REC_1 = CHAR(39) + @v_VAR_REC_1 + CHAR(39)
										SELECT @v_VAR_REC_2 = CHAR(39) + @v_VAR_REC_2 + CHAR(39)

										EXECUTE('INSERT INTO '+@ExtTableName+'_History SELECT * from '+@ExtTableName+' (NOLOCK)'+
											' WHERE ITEMINDEX = N' + @v_VAR_REC_1 + ' AND ITEMTYPE = N' + @v_VAR_REC_2 )  
										IF @@ERROR <> 0  
										BEGIN  
											ROLLBACK TRANSACTION TRANDATA  
											INSERT INTO FailureLogTable Values (0, @v_ProcessInstanceId)
											CLOSE v_transferCursor
											DEALLOCATE v_transferCursor
											Return
										END  

										EXECUTE('DELETE FROM '+@ExtTableName+' WHERE ItemIndex = N'+@v_VAR_REC_1+' AND ITEMTYPE = N'+@v_VAR_REC_2)
										IF @@ERROR <> 0  
										BEGIN	 
											ROLLBACK TRANSACTION TRANDATA			
											INSERT INTO FailureLogTable Values (0, @v_ProcessInstanceId)		
											CLOSE v_transferCursor
											DEALLOCATE v_transferCursor
											Return 
										END  
									END  						
								END  
							END
					END	
					--PRINT '@ExtTableName Insert Succesfull'+@ExtTableName
					BEGIN
						INSERT INTO WFCommentsHistoryTable(ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, CommentsBy, CommentsByName, CommentsTo, CommentsToName, Comments, ActionDateTime, CommentsType,ProcessVariantId,TaskId,SubTaskId ) SELECT ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, CommentsBy, CommentsByName, CommentsTo, CommentsToName, Comments, ActionDateTime, CommentsType,ProcessVariantId,TaskId,SubTaskId FROM WFCommentsTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					
						DELETE FROM WFCommentsTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					END
					--PRINT 'WFCommentsHistoryTable Insert Succesfull'
					--Case Management TABLES
					BEGIN
						INSERT INTO WFtaskstatusHistorytable SELECT ProcessInstanceId,WorkItemId,ProcessDefId,ActivityId,TaskId,SubTaskId,TaskStatus,AssignedBy,AssignedTo,Instructions,ActionDateTime,DueDate,Priority,ShowCaseVisual,ReadFlag,CanInitiate,Q_DivertedByUserId,LockStatus,InitiatedBy,TaskEntryDateTime,ValidTill,ApprovalRequired,ApprovalSentBy,	AllowReassignment,AllowDecline,EscalatedFlag FROM WFtaskstatustable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					
						DELETE FROM WFtaskstatustable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					END
					--PRINT 'WFtaskstatusHistorytable Insert Succesfull'
					BEGIN
						INSERT INTO WFRTTASKINTFCASSOCHISTORY SELECT ProcessInstanceId,WorkItemId,ProcessDefId,ActivityId,TaskId,InterfaceId,InterfaceType,Attribute FROM WFRTTaskInterfaceAssocTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					
						DELETE FROM WFRTTaskInterfaceAssocTable WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					END
					--PRINT 'WFRTTASKINTFCASSOCHISTORY Insert Succesfull'
					BEGIN
						INSERT INTO RTACTIVITYINTFCASSOCHISTORY SELECT ProcessInstanceId,WorkItemId,ProcessDefId,ActivityId,ActivityName,InterfaceElementId,InterfaceType,Attribute,TriggerName,ProcessVariantId FROM RTACTIVITYINTERFACEASSOCTABLE WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					
						DELETE FROM RTACTIVITYINTERFACEASSOCTABLE WHERE ProcessInstanceId = @v_ProcessInstanceId
						IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
					END
					--PRINT 'RTACTIVITYINTFCASSOCHISTORY Insert Succesfull'
				BEGIN
					INSERT INTO WFATTRIBUTEMESSAGEHISTORYTABLE(ProcessDefId,ProcessVariantId, ProcessInstanceId, WorkItemId,MessageId,Message,LockedBy,Status,ActionDateTime) SELECT  ProcessDefId,ProcessVariantId, ProcessInstanceId, WorkItemId,MessageId,Message,LockedBy,Status,ActionDateTime FROM WFATTRIBUTEMESSAGETABLE WHERE ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
						
					DELETE FROM WFATTRIBUTEMESSAGETABLE WHERE ProcessInstanceId = @v_ProcessInstanceId	
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
				END;
				
				--PRINT 'WFATTRIBUTEMESSAGEHISTORYTABLE Insert Succesfull'
				--IBPS 3.2 release changes start
				BEGIN
					INSERT INTO WFCaseSummaryDetailsHistory(ProcessInstanceId,WorkItemId, ProcessDefId, ActivityId,ActivityName,Status,NoOfRetries,EntryDateTime,LockedBy) SELECT  ProcessInstanceId,WorkItemId, ProcessDefId, ActivityId,ActivityName,Status,NoOfRetries,EntryDateTime,LockedBy FROM WFCaseSummaryDetailsTable WHERE ProcessInstanceId = @v_ProcessInstanceId 
					
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
						
					DELETE FROM WFCaseSummaryDetailsTable  WHERE ProcessInstanceId = @v_ProcessInstanceId 
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
				END;
				
				--PRINT 'WFCaseSummaryDetailsHistory Insert Succesfull'
				BEGIN
					INSERT INTO WFCaseDocStatusHistory(ProcessInstanceId,WorkItemId, ProcessDefId, ActivityId,TaskId,SubTaskId,DocumentType,DocumentIndex,ISIndex,CompleteStatus) SELECT  ProcessInstanceId,WorkItemId, ProcessDefId, ActivityId,TaskId,SubTaskId,DocumentType,DocumentIndex,ISIndex,CompleteStatus FROM WFCaseDocStatusTable WHERE ProcessInstanceId = @v_ProcessInstanceId 
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
						
					DELETE FROM WFCaseDocStatusTable WHERE ProcessInstanceId = @v_ProcessInstanceId	
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
				END;
				
				--PRINT 'WFCaseDocStatusHistory Insert Succesfull'
				BEGIN
					INSERT INTO WFTaskPreCondResultHistory(ProcessInstanceId,WorkItemId, ActivityId, TaskId,Ready,Mandatory) SELECT  ProcessInstanceId,WorkItemId, ActivityId, TaskId,Ready,Mandatory FROM WFTaskPreConditionResultTable WHERE ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
						
					DELETE FROM WFTaskPreConditionResultTable WHERE ProcessInstanceId = @v_ProcessInstanceId	
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
				END;
				
				--PRINT 'WFTaskPreCondResultHistory Insert Succesfull'
				BEGIN
					INSERT INTO WFTaskPreCheckHistory(ProcessInstanceId, WorkItemId,ActivityId,checkPreCondition) SELECT  ProcessInstanceId, WorkItemId,ActivityId,checkPreCondition FROM WFTaskPreCheckTable WHERE ProcessInstanceId = @v_ProcessInstanceId
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
						
					DELETE FROM WFTaskPreCheckTable WHERE ProcessInstanceId = @v_ProcessInstanceId	
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TRANDATA
							INSERT INTO FailureLogTable VALUES (0, @v_ProcessInstanceId)
							CLOSE v_transferCursor
							DEALLOCATE v_transferCursor
							Return
						END
				END;
				
				--PRINT 'WFTaskPreCheckHistory Insert Succesfull'
				--IBPS 3.2 release changes end
				INSERT INTO SuccessLogTable VALUES (0, @v_ProcessInstanceId)
					SET @v_Count = @v_Count + 1
					END
				COMMIT TRANSACTION TRANDATA
			--END
			--PRINT 'WFRTTaskInterfaceAssocHistoryTable Insert Succesfull'
			ProcessNext:
			FETCH NEXT FROM v_transferCursor INTO    
				@v_ProcessDefId, @v_ProcessName, @v_ProcessVersion, @v_ProcessInstanceId, @v_ProcessInstanceId, 
				@v_ActivityId, @v_ActivityName, @v_ParentWorkItemId, @v_WorkItemId, @v_ProcessInstanceState,
				@v_WorkItemState, @v_StateName, @v_QueueName, @v_QueueType, @v_AssignedUser,
				@v_AssignmentType, @v_InstrumentStatus, @v_CheckListCompleteFlag, @v_IntroductionDateTime, @v_CreatedDateTime, 
				@v_IntroducedBy, @v_CreatedByName, @v_EntryDateTime, @v_LockStatus, @v_HoldStatus,
				@v_PriorityLevel, @v_LockedByName, @v_LockedTime, @v_ValidTill, @v_SaveStage,
				@v_PreviousStage, @v_ExpectedWorkItemDelayTime, @v_ExpectedProcessDelayTime, @v_Status,	@v_VAR_INT1, 
				@v_VAR_INT2, @v_VAR_INT3, @v_VAR_INT4,	@v_VAR_INT5, @v_VAR_INT6, 
				@v_VAR_INT7, @v_VAR_INT8, @v_VAR_FLOAT1, @v_VAR_FLOAT2, @v_VAR_DATE1, 
				@v_VAR_DATE2, @v_VAR_DATE3, @v_VAR_DATE4, @v_VAR_DATE5, @v_VAR_DATE6, @v_VAR_LONG1, @v_VAR_LONG2, 
				@v_VAR_LONG3, @v_VAR_LONG4, @v_VAR_LONG5, @v_VAR_LONG6, @v_VAR_STR1, @v_VAR_STR2, @v_VAR_STR3, 
				@v_VAR_STR4, @v_VAR_STR5, @v_VAR_STR6, @v_VAR_STR7, @v_VAR_STR8, @v_VAR_STR9,
		        @v_VAR_STR10, @v_VAR_STR11, @v_VAR_STR12, @v_VAR_STR13, @v_VAR_STR14, 
				@v_VAR_STR15, @v_VAR_STR16, @v_VAR_STR17, @v_VAR_STR18, @v_VAR_STR19, @v_VAR_STR20,		
				@v_VAR_REC_1, @v_VAR_REC_2, @v_VAR_REC_3, @v_VAR_REC_4,	@v_VAR_REC_5, 
				@v_Q_StreamId, @v_Q_QueueId, @v_Q_UserID,	@v_LastProcessedBy, @v_ProcessedBy, 
				@v_ReferredTo, @v_ReferredToName, @v_ReferredBy, @v_ReferredByName, @v_CollectFlag ,@v_ActivityType,@v_lastModifiedTime,
				@v_ChildProcessInstanceId,@v_ChildWorkitemId,@v_FilterValue,@v_Guid,@v_NotifyStatus,@v_Q_DivertedByUserId,@v_RoutingStatus,
				@v_NoOfCollectedInstances,@v_IsPrimaryCollected,@v_ExportStatus,@v_ProcessVariantId,@v_Introducedbyid,@v_IntroducedAt,@v_Createdby,@v_URN
			IF (@@ERROR <> 0)
			BEGIN
				BREAK
			END
		END
		CLOSE v_transferCursor
		DEALLOCATE v_transferCursor
		IF @row_present = 0
		BEGIN
			RETURN
		END
	END
END

go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group				: Application ï¿½ Products
	Product / Project		: WorkFlow 5.0
	Module				: Transaction Server
	File Name			: WFUploadWorkitem.sql
	Author				: Dinesh Parikh.
	Date written (DD/MM/YYYY)	:
	Description			: Stored procedure to upload workitems
					  (invoked from WMMiscelleneous.java).

______________________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________________
 Date		Change By		Change Description (Bug No. (If Any))
 28/02/2005	Ruhi Hira		SrNo-1.
 12/05/2005	Rahul Mehta		SrNo-2.
 5/08/2005	Mandeep Kaur		SRNo-3 (Bug Ref No WFS_5_056)
 5/08/2005	Mandeep Kaur		SRNo-4 (Bug Ref No WFS_5_055)
 22/02/2006	Ruhi Hira		Bug No WFS_6.1.2_059.
 10/05/2006	Ahsan Javed		BUG # WFS_5_091.
 23/10/2006	Virochan Dev		Bugzilla Bug 265 - FolderIndex returned
 23/10/2006	Virochan Dev		Bugzilla Bug 270 - For multiple introduction worksteps
 02/02/2007	Varun Bhansaly		Extra Parameter added for Calendar Support and insert statement modified
 08/02/2007	Varun Bhansaly		Bugzilla Id 74 (Inconsistency in date-time)
 05/04/2007	Tirupati Srivastava	Bugzilla Id 529 (UploadWorkItem)
 11/04/2007	Varun Bhansaly		Bugzilla Id 532
					(In case of Stored Procedure for WFUploadWorkItem written in MSSQL, 
						JAVA style syntax is being used to check for a NULL)
 03/05/2007	Tirupati Srivastava	Bugzilla Id 676 (UploadWorkItem) (In case a user is added to introduction queue as well as group is 									asdded to Introduction Queue of which user is alsoa amember, err 																		comes in Oracle)
 24/05/2007	Ruhi Hira		Bugzilla Bug 945.
 25/07/2007	Varun Bhansaly		Bugzilla Id 1544 ([Jboss 3.2.7] [MSSQL 2005] [omniflow 7.0 Japanese] wfuploadworkitem gives error)
 25/07/2007	Tirupati Srivastava		Bugzilla Id 1447 (Introduce WorkItem from Webdesktop using Single Call WFUploadWorkItem)
 25/02/2008	Varun Bhansaly	WFS_5_169 Handling of errors while inserting in tables. - Code Inherited from 5.0
 25/02/2008	Varun Bhansaly	Bugzilla Bug Id 3129 (Support for multiple document types)
 05/03/2008	Varun Bhansaly	Coded backward compatibility for Bugzilla Id 3129
 11/04/2008	Ashish Mangla		Bugzilla Bug 4078 GenerateName making call slow, to be used only when required
 22/05/2008	Varun Bhansaly		WFS_6.2_005, (Error in WFUploadWorkitem when attribute value contains single quote as data)
 22/05/2008	Varun Bhansaly		WFS_5_236, Support for text attribute values upto length 8000 provided
 28/08/2008	Varun Bhansaly		Optimization in WFUploadWorkItem, query strings will be generated and passed from API.
								Oracle SP parameters donot have restriction on size. Hence unnecessary parameters removed.
 08/12/2008	Ashish Mangla		Bugzilla Bug 7193 (special char mu creating problem while being executed Post.sql execution)
 23/03/2009	Ashish Mangla		Bugzilla Bug 7891 (Error in Upload in case complex structure as well as external table defined)
 26/06/2009	Saurabh Kamal		WFS_8.0_010 , If else for InitiateAlso = 'N'
 26/06/2009	Ishu Saraf		SrNo-5 Unicode support in Document, Attributes and external table variables.
 4/7/2009	Preeti Awasthi		WFS_8.0_013 - Support for adding documents actual name(Harddisk name) in Comment column .
 03/07/2009	Indraneel dasgupta	WFS_7.1_033 ( User that do not have rights on an introduction queue got error "Process definition id invalid" on uploading workitem.Rather it should be No Authorization error)
 30/09/2009 Saurabh Kamal       Bugzilla bug 10941 (Not working in MSSQL2000 error while executing SUBSTRING function )
 30/09/2009 Saurabh Kamal       WFS_8.0_037 Message entry in WFMessageTable in case of add document
 05/06/2009 Saurabh Kamal		Bug 31357 - Queue Name not visible in workitem property
 17/05/2013	Shweta Singhal		Process Variant Support Changes
 23/12/2013	Shweta Singhal		Changes for Code Optimization
 23/12/2013	Sajid Khan			Message Agent Optimization.
 19-02-2014	Sajid Khan			Entries made into WFCurrentRouteLogTable for ActionId 1 and 2 for each execution.
 28-03-2014	Sajid Khan			Bug 43710 - While create a WI with html form, an error is generated (All types of queue vars are defined in this process.
_07.04-2014 Kanika Manik        Bug 44270 Initiation Agent utility is not working either with POP3 or IMAP Mail Protocol.
29/05/2014  Kanika Manik        PRD Bug 40306 - 1.Incorrect handling for the case when Subject,From,Date of the mail is null in Initiation Agent. 2. Size of comment field is small 
                                in WFUploadWorkitem Stored Procedure due to which string get truncated.
16-06-2014	Sajid Khan			Bug 46240 - Arabic: Default value for text type queue variable is not showing proper in Workitem 
17-06-2014	Sajid Khan			Bug 46391 - Arabic: Process Name, Queue Name & Created User name is not showing proper in Workitem Properties.
23-06-2014	Kahkeshan			Bug 46379 - Arabic: While create a new workitem, an error is generated
29-09-2014	Mohnish Chopra		Bug 50438 - WI properties showing 2 start Events
11/08/2015	Mohnish Chopra		Changes for Data Locking issue in Case Management -ActivityType added in WFInstrumentTable
01-05-2017	Sajid Khan			Merging Bug 58270 - Auditing of Attribute set is not being done through WFUPloadWorkitem API
04-05-2017	Sajid Khan			Bug 66075 - When a new workitem is created in webdesktop of name that already present in OD workflow folder then no new workitem is created
05/05/2017	Mohnish Chopra		Prdp Bug 56471 - Support in WFUploadWorkitem to provide document type also in input xml 
08/05/2017	Kumar Kimil 	    Bug 55927 - Support for API Wise Synchronous Routing.
07/06/2017  Kumar Kimil         Bug 70065 - Attachment name gets truncated by WFUploadworkitem SP.
17/07/2017	Mohnish Chopra 		PRDP Bug 69312 - Workitems created through initiation agent pending for PS are visible on queue click . 
24/10/2017        Kumar Kimil         Case Registration requirement--Upload Workitem changes
29/12/2017  Kumar Kimil         Bug 74441 - PNG File handling through Initiation Agent and 0KB file Handling for ESPN
 ___________________________________________________________________________________________________*/


If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFUploadWorkItem')
Begin
	Execute('DROP PROCEDURE WFUploadWorkItem')
	Print 'Procedure WFUploadWorkItem already exists, hence older one dropped ..... '
End

go

CREATE  PROCEDURE WFUploadWorkItem(
		@DBUserId				INTEGER,
		@ProcessInstanceId		nvarchar(1000),
		@DBProcessDefId			int,
		/* ______________________________________________________________________________________
		// Changed On  : 28/02/2005
		// Changed By  : Ruhi Hira
		// Description : SrNo-1, Omniflow 6.0, Feature: Multiple Introduction, New input
		//				parameters added.
		// ____________________________________________________________________________________*/
		@ActivityId				INTEGER,
		@ActivityName			NVARCHAR(60),
		@ValidataionReqd		varchar(1000)	= null,
		@DBDataDefinitionIndex	INT,
		/*BUG # WFS_5_091.----------------------------Begin*/
		@DBDataList1	ntext		= null,
		@DBDataList2	ntext		= null,
		@DBDataList3	ntext		= null,
		@DBDataList4	ntext		= null,
		@DBDataList5	ntext		= null,
		@DBDataList6	ntext		= null,
		@DBDataList7	ntext		= null,
		@DBDataList8	ntext		= null,
		@DBDataList9	ntext		= null,
		@DBDataList10	ntext		= null,
		@DBDocList1		ntext		= null,
		@DBDocList2		ntext		= null,
		@DBDocList3		ntext		= null,
		@DBDocList4		ntext		= null,
		@DBDocList5		ntext		= null,
		@DBPriorityLevel	INT			= null,
		/*BUG # WFS_5_091.----------------------------End*/
		@DBGenerateLog		NCHAR(1)		= null,
		/* Changed By Varun Bhansaly On 02/02/2007 */
		@DBExpectedProcessDelay	DATETIME	= null,
		/* ______________________________________________________________________________________
		// Changed On  : 25/07/2007
		// Changed By  : Tirupati Srivastava
		// Description : New input parameter added.Bugzilla Id 1447
		// ____________________________________________________________________________________*/
		@DBInitiateAlso		NCHAR(1)	= NULL,
		@DBQDTColumnList	NTEXT		= NULL,
		@DBQDTValueList		NTEXT		= NULL,
		@DBEXTColumnList1	NTEXT		= NULL,
		@DBEXTColumnList2	NTEXT		= NULL,
		@DBEXTColumnList3	NTEXT		= NULL,
		@DBEXTValueList1	NTEXT		= NULL,
		@DBEXTValueList2	NTEXT		= NULL,
		@DBEXTValueList3	NTEXT		= NULL,
		@DBRouteLogList1	NTEXT		= NULL,
		@DBRouteLogList2	NTEXT		= NULL,
		@DBRouteLogList3	NTEXT		= NULL,
		@DBRouteLogList4	NTEXT		= NULL,
		@DBRouteLogList5	NTEXT		= NULL,
		@DBRouteLogList6	NTEXT		= NULL,
		@DBRouteLogList7	NTEXT		= NULL,
		@DBRouteLogList8	NTEXT		= NULL,
		@ValidateQuery		VARCHAR(1000)		= NULL,	
		@MainGroupId		INT,
		@DBParentFolderId	INT, 
		@ProcessName		NVARCHAR(64),
		@ProcessVersion		INT,
		@QueueId			INT,
		@QueueName			NVARCHAR(64),
		@StreamId			INT,
		@DBProcessVariantId	INT/*Process Variant Support Changes*/,
		@DBSetAttributeLoggingEnabled		NVARCHAR(1),
		@DBSynchronousRouting	NVARCHAR(1),
		@Urn                Nvarchar(126)
	)
	AS

	SET NOCOUNT ON


	/*DECLARE @DBParentFolderId       int*/
	DECLARE @TMPDBFolderName        varchar(255)
	DECLARE @DBFolderName           nvarchar(255)
	DECLARE @DBAccessType           char(1)
	DECLARE @DBImageVolumeIndex     int
	DECLARE @DBFolderType           char(1)
        DECLARE @DBVersionFlag          char(1)
	DECLARE @DBComment              char(255)
	DECLARE @DBOwner		int
	DECLARE @DBExpiryDateTime	char(50)
	DECLARE @NameLength		int
	DECLARE @LimitCount		int
	DECLARE @DBEnableFTS		char(1)
	DECLARE @DuplicateNameFlag	char(1)
	DECLARE	@fieldId			INT
    	/* Declare Variables	*/
	/*DECLARE @DBDataDefinitionIndex  int */
	DECLARE @DBLocation             char
	Declare @DBUserRights      	char(10)
	Declare @FolderLock		char(1)
	Declare @FinalizedFlag		char(1)
	Declare @EnableVersion		char(1)
	Declare @UpdateList varchar(255)
 	Declare  @DBStatus              int
	/*Declare  @DBUserId        	int*/
  	Declare  @Rights    		char
  	Declare  @NewFolderIndex	int
  	Declare  @iCount 		int
	Declare  @DBFlag		char
	/* Changed By Varun Bhansaly On 02/02/2007 */
    /*    DECLARE @ProcessTurnAroundTime	int */
	DECLARE  @DBFieldName		char(64)
	Declare  @TempUser			int
	Declare  @AccessType		char(1)
	Declare  @ACLMore		char(1)
	Declare  @ACLstr		char(255)
	/*DECLARE  @MainGroupId		smallint*/
	DECLARE  @IsAdmin 		char(1)
	DECLARE  @ExpiryDateTime	DATETIME
	DECLARE  @ParentEnableFTS 	char(1)
	DECLARE  @ParentFolderType	CHAR(1)
	DECLARE @LockByUser		varchar(255)
	DECLARE @EffectiveLockByUser	int
	DECLARE @LockMessage		varchar(255)
	DECLARE @LockedObject		int
	Declare @FolderLevel 		int
	DECLARE @FolLock		char(1)
	DECLARE @FolLockByUser		varchar(255)
	DECLARE @Hierarchy		varchar(4000)
	DECLARE @ProcessState		varchar(10)
	DECLARE @RegPrefix		varchar(20)
	DECLARE @RegSuffix		varchar(20)
	DECLARE @RegStartingNo		int
	DECLARE @RegSeqLength		int
	DECLARE @TableViewName		nvarchar(255)
	DECLARE @DataClassFlag		char(1)
	DECLARE @Length		int
	/*DECLARE @ProcessInstanceId	varchar(255)*/

	DECLARE @ColumnList		varchar(8000)
	DECLARE @ValueList		varchar(8000)
	DECLARE @WhileCounter		int
	DECLARE @DDTTableName		varchar(255)
	/*DECLARE @QueueName		varchar(255)
	DECLARE @QueueId		int
	DECLARE @StreamId		int
	DECLARE @ActivityId		smallint
	DECLARE @ActivityName		varchar(30)*/
	DECLARE @UserName		nvarchar(64)
	DECLARE @UpdateStr		varchar(8000)
	DECLARE @UpdateFlag		char(1)
	DECLARE @UpdateDFlag		char(1)
	DECLARE @SystemDefinedName	varchar(50)
	DECLARE @VariableType		smallint
	DECLARE @DefaultValue		varchar(255)
	DECLARE @DBDDIDataList		varchar(8000)
	DECLARE @ParseCount		int
	DECLARE @pos1			int
	DECLARE @TempStr		Nvarchar(4000)	 /*SrNo-5*/
	DECLARE @TempFieldName		varchar(100)
	DECLARE @TempFieldValue		varchar(4000)
	DECLARE @TempFieldId		int
	DECLARE @TempDataFieldType	char(1)
	DECLARE @DBDocumentList		varchar(8000)	 /*SrNo-5*/
	DECLARE @DocumentName		Nvarchar(255)	 /*SrNo-5*/
	DECLARE @ISIndexStr		varchar(50)
	DECLARE @ImageIndex 		int
	DECLARE @VolumeIndex 		int
	DECLARE @CurrDate 		DATETIME
	DECLARE @NextOrder 		int
	DECLARE @NewDocumentIndex	int
	DECLARE @NoOfPage 		int
	DECLARE @DocumentSize 		int

	DECLARE @DocumentType		char(1)
	DECLARE @AppType		varchar(50)	
	DECLARE @Comment		varchar(500)	/*WFS_8.0_013*/
    DECLARE @FieldName      varchar(100)/*xyz*/
	DECLARE	@AttributeName		varchar(50)
	DECLARE @AttributeType		char(1)
	DECLARE @AttributeValue		varchar(500)

	/*DECLARE @TempTableName		varchar(255)
	DECLARE @TempColumnName		varchar(255)
	DECLARE @TempColumnType		varchar(10)
	DECLARE @TempValue		varchar(500)*/
	DECLARE	@DBAttributeList	varchar(8000)

	DECLARE	@UserDefinedName	nvarchar(50)
	DECLARE	@ExtObjID		smallint

	DECLARE	@Rec1 			varchar(255)
	DECLARE	@Var_Rec_1 		varchar(255)
	DECLARE	@Rec2			varchar(255)
	DECLARE	@Var_Rec_2		varchar(255)
	DECLARE	@Rec3			varchar(255)
	DECLARE	@Var_Rec_3		varchar(255)
	DECLARE	@Rec4			varchar(255)
	DECLARE	@Var_Rec_4		varchar(255)
	DECLARE	@Rec5			varchar(255)
	DECLARE	@Var_Rec_5 		varchar(255)
	DECLARE @TempVar		varchar(4000)
	DECLARE @AttributeNameStr	varchar(8000)
	DECLARE @UpdateColumnStr	varchar(8000)
	DECLARE @UpdateValueStr		varchar(8000)
	DECLARE @QueryStr		varchar(8000)
	DECLARE @Pattern		varchar(400)
	DECLARE @atempstr		varchar(8000)
	DECLARE @Posi1			int
	DECLARE @Posi2			int
	DECLARE @yesValue		varchar(8000)
	DECLARE @InsertExtColumnStr	nvarchar(1024)
	DECLARE @InsertExtValueStr	nvarchar(1024)
	DECLARE @TempExtObjID		int
	/*DECLARE @Temp			smallint */
	DECLARE @DBProcessDefIdStr 	varchar(10)
	DECLARE @ActivityIdStr 	   	varchar(10)
	DECLARE @ValidTill		datetime
	DECLARE @AttributeRouteStr	varchar(8000)
	/*DECLARE @ProcessName		varchar(64)
	DECLARE	@ProcessVersion 	smallint*/
	DECLARE @PriorityLevel		varchar(5)

	DECLARE @DBTotalDuration	int
	DECLARE @DBTotalPrTime		int

	DECLARE @UniqueNameString	varchar(8000)
	/*BUG # WFS_5_091.----------------------------Begin*/
	DECLARE @DBDDIDataList1		varchar(8000)
	DECLARE @DBDDIDataList2		varchar(8000)
	DECLARE @DBDDIDataList3		varchar(8000)
	DECLARE @DBDDIDataList4		varchar(8000)
	DECLARE @DBDDIDataList5		varchar(8000)
	DECLARE @DBDDIDataList6		varchar(8000)
	DECLARE @DBDDIDataList7		varchar(8000)
	DECLARE @DBDDIDataList8		varchar(8000)
	DECLARE @DBDDIDataList9		varchar(8000)
	DECLARE @DBDDIDataList10	varchar(8000)
	DECLARE @DBDocumentList1	varchar(8000)	 /*SrNo-5*/
	DECLARE @DBDocumentList2	varchar(8000)	 /*SrNo-5*/
	DECLARE @DBDocumentList3	varchar(8000)	 /*SrNo-5*/
	DECLARE @DBDocumentList4	varchar(8000)	 /*SrNo-5*/
	DECLARE @DBDocumentList5	varchar(8000)	 /*SrNo-5*/
	DECLARE @QDTColumnList		VARCHAR(8000)
	DECLARE @QDTValueList		NVARCHAR(4000)	 /*SrNo-5*/
	DECLARE @EXTColumnList1		VARCHAR(8000)
	DECLARE @EXTColumnList2		VARCHAR(8000)
	DECLARE @EXTColumnList3		VARCHAR(8000)
	DECLARE @EXTValueList1		NVARCHAR(4000)	 /*SrNo-5*/
	DECLARE @EXTValueList2		NVARCHAR(4000)	 /*SrNo-5*/
	DECLARE @EXTValueList3		NVARCHAR(4000)	 /*SrNo-5*/
	DECLARE @RouteLogList1		VARCHAR(8000)
	DECLARE @RouteLogList2		VARCHAR(8000)
	DECLARE @RouteLogList3		VARCHAR(8000)
	DECLARE @RouteLogList4		VARCHAR(8000)
	DECLARE @RouteLogList5		VARCHAR(8000)
	DECLARE @RouteLogList6		VARCHAR(8000)
	DECLARE @RouteLogList7		VARCHAR(8000)
	DECLARE @RouteLogList8		VARCHAR(8000)
	DECLARE @quoteChar			VARCHAR(1)
	DECLARE @Prefix				VARCHAR(5)
	DECLARE @strQuery			nvarchar(4000)
	Declare @UrnDup             NVarchar(126)
	SELECT  @quoteChar			= CHAR(39)
	SELECT  @Prefix				= @quoteChar + 'N'
	SELECT  @DBDDIDataList1		= CONVERT(varchar(8000), @DBDataList1)
	SELECT  @DBDDIDataList2		= CONVERT(varchar(8000), @DBDataList2)
	SELECT  @DBDDIDataList3		= CONVERT(varchar(8000), @DBDataList3)
	SELECT  @DBDDIDataList4		= CONVERT(varchar(8000), @DBDataList4)
	SELECT  @DBDDIDataList5		= CONVERT(varchar(8000), @DBDataList5)
	SELECT  @DBDDIDataList6		= CONVERT(varchar(8000), @DBDataList6)
	SELECT  @DBDDIDataList7		= CONVERT(varchar(8000), @DBDataList7)
	SELECT  @DBDDIDataList8		= CONVERT(varchar(8000), @DBDataList8)
	SELECT  @DBDDIDataList9		= CONVERT(varchar(8000), @DBDataList9)
	SELECT  @DBDDIDataList10	= CONVERT(varchar(8000), @DBDataList10)
	SELECT  @DBDocumentList1	= CONVERT(varchar(8000), @DBDocList1)	 /*SrNo-5*/
	SELECT  @DBDocumentList2	= CONVERT(varchar(8000), @DBDocList2)	 /*SrNo-5*/
	SELECT  @DBDocumentList3	= CONVERT(varchar(8000), @DBDocList3)	 /*SrNo-5*/
	SELECT  @DBDocumentList4	= CONVERT(varchar(8000), @DBDocList4)	 /*SrNo-5*/
	SELECT  @DBDocumentList5	= CONVERT(varchar(8000), @DBDocList5)	 /*SrNo-5*/
	SELECT  @QDTColumnList		= CONVERT(VARCHAR(8000), @DBQDTColumnList)
	SELECT  @QDTValueList		= CONVERT(NVARCHAR(4000), @DBQDTValueList)	 /*SrNo-5*/
	SELECT  @EXTColumnList1		= CONVERT(VARCHAR(8000), @DBEXTColumnList1)
	SELECT  @EXTColumnList2		= CONVERT(VARCHAR(8000), @DBEXTColumnList2)
	SELECT  @EXTColumnList3		= CONVERT(VARCHAR(8000), @DBEXTColumnList3)
	SELECT  @EXTValueList1		= CONVERT(NVARCHAR(4000), @DBEXTValueList1)	 /*SrNo-5*/
	SELECT  @EXTValueList2		= CONVERT(NVARCHAR(4000), @DBEXTValueList2)	 /*SrNo-5*/
	SELECT  @EXTValueList3		= CONVERT(NVARCHAR(4000), @DBEXTValueList3)	 /*SrNo-5*/
	SELECT  @RouteLogList1		= CONVERT(VARCHAR(8000), @DBRouteLogList1)
	SELECT  @RouteLogList2		= CONVERT(VARCHAR(8000), @DBRouteLogList2)
	SELECT  @RouteLogList3		= CONVERT(VARCHAR(8000), @DBRouteLogList3)
	SELECT  @RouteLogList4		= CONVERT(VARCHAR(8000), @DBRouteLogList4)
	SELECT  @RouteLogList5		= CONVERT(VARCHAR(8000), @DBRouteLogList5)
	SELECT  @RouteLogList6		= CONVERT(VARCHAR(8000), @DBRouteLogList6)
	SELECT  @RouteLogList7		= CONVERT(VARCHAR(8000), @DBRouteLogList7)
	SELECT  @RouteLogList8		= CONVERT(VARCHAR(8000), @DBRouteLogList8)
	SELECT  @RouteLogList1		= ISNULL(@RouteLogList1, '')
	SELECT  @RouteLogList2		= ISNULL(@RouteLogList2, '')
	SELECT  @RouteLogList3		= ISNULL(@RouteLogList3, '')
	SELECT  @RouteLogList4		= ISNULL(@RouteLogList4, '')
	SELECT  @RouteLogList5		= ISNULL(@RouteLogList5, '')
	SELECT  @RouteLogList6		= ISNULL(@RouteLogList6, '')
	SELECT  @RouteLogList7		= ISNULL(@RouteLogList7, '')
	SELECT  @RouteLogList8		= ISNULL(@RouteLogList8, '')
	SELECT  @InsertExtColumnStr	= ''
	SELECT  @InsertExtValueStr	= ''

	/*BUG # WFS_5_091.----------------------------End*/
	SELECT	@FolLock		= 'N'
	SELECT	@FolLockByUser		= NULL
	SELECT	@DBUserRights		= ''
	SELECT	@DBStatus              = -1
	select @UpdateFlag = 'n'

	SELECT @TempStr		= ''
	SELECT @UrnDup=''
	/* Check Validity of User	*/
	/*EXECUTE PRTCheckUser @DBConnectId, @DBHostName, @DBUserId OUT, @MainGroupId OUT, @DBStatus OUT
	IF (@DBStatus <> 0)
	BEGIN
		SELECT Status = @DBStatus
		RETURN
	END*/

	/*IF @ValidataionReqd IS NOT NULL
	BEGIN
		SELECT @pos1 		= CHARINDEX(CHAR(21), @ValidataionReqd)
		SELECT @TempTableName 	= SUBSTRING(@ValidataionReqd, 1, @pos1-1)
		SELECT @ValidataionReqd = STUFF(@ValidataionReqd, 1, @pos1, NULL)
		SELECT @pos1 		= CHARINDEX(CHAR(21), @ValidataionReqd)
		SELECT @TempColumnName 	= SUBSTRING(@ValidataionReqd, 1, @pos1-1)
		SELECT @ValidataionReqd = STUFF(@ValidataionReqd, 1, @pos1, NULL)
		SELECT @pos1 		= CHARINDEX(CHAR(25), @ValidataionReqd)
		SELECT @TempValue 	= RTRIM(SUBSTRING(@ValidataionReqd, 1, @pos1-1))

		SELECT 	@TempColumnType = DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
		WHERE  	TABLE_NAME 	= @TempTableName
		AND 	COLUMN_NAME 	= @TempColumnName

		IF @TempColumnType IN ('varchar', 'char', 'datetime')
			SELECT @TempValue = CHAR(39) + @TempValue + CHAR(39)

		EXECUTE (' DECLARE valcur CURSOR FAST_FORWARD FOR ' +
			' SELECT 1 FROM ' + @TempTableName +
			' WHERE ' + @TempColumnName + ' = ' + @TempValue)
		SELECT @DBStatus = @@ERROR
		IF (@DBStatus <> 0)
		BEGIN*/
			/* Added By Dinesh Parikh  */
			/* In case of any SQL Error */
			/*SELECT  Status = 15
			RETURN
		END
		OPEN valcur
		SELECT @DBStatus = @@ERROR
		IF (@DBStatus <> 0)
		BEGIN
			CLOSE valcur
			DEALLOCATE valcur
			SELECT 	Status = 15
			RETURN
		END
		FETCH NEXT FROM valcur INTO @Temp
		IF @@FETCH_STATUS = 0
		BEGIN
			SELECT @DBStatus =  50
			SELECT Status = @DBStatus
			CLOSE valcur
			DEALLOCATE valcur
			RETURN
		END
		CLOSE valcur
		DEALLOCATE valcur
	END*/

	/* ______________________________________________________________________________________
	// Changed On  : 28/02/2005
	// Changed By  : Ruhi Hira
	// Description : SrNo-1, Omniflow 6.0, Feature: Multiple Introduction,
	//			Introduction activity in use changed, if provided in input.
	// ____________________________________________________________________________________*/
	/* Changed By Varun Bhansaly On 11/04/2007 for Bugzilla Id 532 */
	/*If (@DBInitiateFromActivityId > 0)
	Begin
		SELECT	@ActivityId = ActivityId,
			@ActivityName  = ActivityName
		FROM	ActivityTable
		WHERE	ProcessDefID = @DBProcessDefId
		AND	ActivityType = 1
		AND	ActivityId = @DBInitiateFromActivityId
		If(@@ERROR > 0 OR @@ROWCOUNT <= 0)
		Begin
			SELECT @DBStatus =  603
			SELECT Status = @DBStatus
			Return
		End
	End
	Else
	Begin*/
		/* Changed By Varun Bhansaly On 11/04/2007 for Bugzilla Id 532 */
		/*If(@DBInitiateFromActivityName IS NOT NULL AND LEN(RTRIM(@DBInitiateFromActivityName)) > 0 )
		Begin
			SELECT	@ActivityId = ActivityId,
				@ActivityName  = ActivityName
			FROM	ActivityTable
			WHERE	ProcessDefID = @DBProcessDefId
			AND	ActivityType = 1
			AND	ActivityName = RTRIM(@DBInitiateFromActivityName)
			If(@@ERROR > 0 OR @@ROWCOUNT <= 0)
			Begin
				SELECT @DBStatus =  603
				SELECT Status = @DBStatus
				Return
			End
		End
		Else
		Begin
			SELECT	@ActivityId = ActivityId,
				@ActivityName  = ActivityName
			FROM	ActivityTable
			WHERE	ProcessDefID = @DBProcessDefId
			AND	ActivityType = 1
			AND	PrimaryActivity = 'Y'	*/	/* Default Introduction workstep */
		/*End
	End */

	SELECT 	@TableViewName = TableName
	FROM 	ExtDBConfTable (NOLOCK)
	WHERE 	ProcessDefId = @DBProcessDefId AND ExtObjId = 1

	SELECT 	@UpdateColumnStr 		= ''
	SELECT 	@UpdateValueStr 		= ''
	IF(@Urn IS NULL)
	BEGIN
	Select @Urn=NULL
	Select @UrnDup=NULL
	END
	else
	BEGIN
	Select @UrnDup=@Urn
	Select @Urn=@quoteChar+@Urn+@quoteChar
	END
	/*IF @DataDefinitionName IS NOT NULL  AND @DataClassFlag = 'Y' */
	/*BEGIN
		SELECT 	@DBDataDefinitionIndex = DataDefIndex
		FROM 	PDBDataDefinition
		WHERE 	DataDefName = @DataDefinitionName
		AND 	GroupId = @MainGroupId
		IF @@ROWCOUNT <= 0
		BEGIN
    		   	EXECUTE PRTRaiseError  'PRT_ERR_DDI_Not_Exist', @DBStatus OUT
			SELECT 	Status = @DBStatus
			RETURN
		END
		SELECT @DDTTableName = 'DDT_' + CONVERT(varchar(10), @DBDataDefinitionIndex)
	END
	ELSE
		SELECT @DBDataDefinitionIndex  = 0 */

	IF( @DBDataDefinitionIndex <> 0)
	BEGIN
		SELECT @WhileCounter = 1
		SELECT @ColumnList   = ''
		SELECT @ValueList    = ''

		WHILE @WhileCounter <= 10
		BEGIN
			IF @WhileCounter = 1
				SELECT @DBDDIDataList = @DBDDIDataList1
			ELSE IF @WhileCounter = 2
				SELECT @DBDDIDataList = @DBDDIDataList2
			ELSE IF @WhileCounter = 3
				SELECT @DBDDIDataList = @DBDDIDataList3
			ELSE IF @WhileCounter = 4
				SELECT @DBDDIDataList = @DBDDIDataList4
			ELSE IF @WhileCounter = 5
				SELECT @DBDDIDataList = @DBDDIDataList5
			ELSE IF @WhileCounter = 6
				SELECT @DBDDIDataList = @DBDDIDataList6
			ELSE IF @WhileCounter = 7
				SELECT @DBDDIDataList = @DBDDIDataList7
			ELSE IF @WhileCounter = 8
				SELECT @DBDDIDataList = @DBDDIDataList8
			ELSE IF @WhileCounter = 9
				SELECT @DBDDIDataList = @DBDDIDataList9
			ELSE IF @WhileCounter = 10
				SELECT @DBDDIDataList = @DBDDIDataList10


			SELECT @ParseCount = 1
			SELECT @TempStr = ''
   			WHILE LEN(@DBDDIDataList) > 0
			BEGIN
				IF(@ParseCount = 1)
				BEGIN
					SELECT @pos1 = CHARINDEX(CHAR(21), @DBDDIDataList)
					IF (@pos1 = 0)
					BEGIN
						SELECT @TempStr = SUBSTRING(@DBDDIDataList, 1, 8000)
						SELECT @DBDDIDataList = NULL
						BREAK
					END
					ELSE
					BEGIN
						SELECT @TempFieldName = RTRIM(@TempStr) + SUBSTRING(@DBDDIDataList, 1, @pos1-1)
						SELECT @DBDDIDataList = STUFF(@DBDDIDataList, 1, @pos1, NULL)
						SELECT @ParseCount = 2
						SELECT @TempStr = ' '
					END
				END
				IF(@ParseCount = 2)
				BEGIN
					SELECT @pos1 = CHARINDEX(CHAR(25), @DBDDIDataList)
					IF (@pos1 = 0)
					BEGIN
						SELECT @TempStr = SUBSTRING(@DBDDIDataList, 1, 8000)
						SELECT @DBDDIDataList = NULL
						BREAK
					END
					ELSE
					BEGIN
						SELECT @TempFieldValue	= RTRIM(@TempStr) + SUBSTRING(@DBDDIDataList, 1, @pos1-1)
						SELECT @DBDDIDataList = STUFF(@DBDDIDataList,1,@pos1,null)
						SELECT @ParseCount = 1
						SELECT @TempStr = ' '
						SELECT	@TempFieldId 		= A.DataFieldIndex,
							@TempDataFieldType	= DataFieldType
						FROM PDBGlobalIndex A (NOLOCK), PDBDataFieldsTable B (NOLOCK)
						WHERE A.DataFieldIndex = B.DataFieldIndex
						AND   B.DataDefIndex = @DBDataDefinitionIndex
						AND   A.DataFieldName = @TempFieldName

						IF @@ROWCOUNT > 0
						BEGIN
							SELECT @ColumnList =  RTRIM(@ColumnList) + ', Field_' + CONVERT(varchar(10), @TempFieldId)
							IF (LTRIM(RTRIM(@TempFieldValue)) = CHAR(181) OR DATALENGTH(LTRIM(RTRIM(@TempFieldValue))) = 0)
								SELECT @TempFieldValue = 'NULL'

							IF(@TempFieldValue = 'NULL')
							BEGIN
								IF @TempDataFieldType = 'B'
									SELECT @TempFieldValue = '0'
								SELECT @ValueList = RTRIM(@ValueList) + ',' + LTRIM(RTRIM(@TempFieldValue))
							END
							ELSE IF (@TempDataFieldType = 'S')
							BEGIN
								/* replace every single quote with two single quotes */
								SELECT @TempFieldValue = REPLACE(@TempFieldValue, CHAR(39), CHAR(39) + CHAR(39))
								SELECT @ValueList = RTRIM(@ValueList) + ',' + CHAR(39) + RTRIM(@TempFieldValue) + CHAR(39)
							END
							ELSE IF (@TempDataFieldType = 'D')
							BEGIN
								SELECT @ValueList = RTRIM(@ValueList) + ',' + CHAR(39) + RTRIM(@TempFieldValue) + CHAR(39)
							END
							ELSE IF (@TempDataFieldType	= 'I' OR
								@TempDataFieldType	= 'L' OR
								@TempDataFieldType	= 'F' OR
								@TempDataFieldType	= 'B' OR
								@TempDataFieldType	= 'X')
							BEGIN
								SELECT @ValueList = RTRIM(@ValueList) + ',' + LTRIM(RTRIM(@TempFieldValue))
							END
							EXECUTE CheckData  'F', @NewFolderIndex, @DDTTableName, @TempFieldId, @TempDataFieldType, @TempFieldValue, @DBStatus OUTPUT
							IF (@DBStatus <> 0)
							BEGIN
								SELECT Status = @DBStatus
								RETURN
							END
						END
					END
				END
			END
			SELECT @WhileCounter = @WhileCounter + 1
		END
	END

	SELECT 	@DBAccessType		= ISNULL(@DBAccessType, 'S'),
        	@DBFolderType		= ISNULL(@DBFolderType, 'G'),
        	@DBComment		= ISNULL(@DBComment,	'Not Defined'),
		@DuplicateNameFlag	= ISNULL(@DuplicateNameFlag, 'Y')

	SELECT @CurrDate = GETDATE()
	IF @DBExpiryDateTime IS NULL
	BEGIN
		/* Changed By Varun Bhansaly On 25/07/2007 for Bugzilla Id 1544 */
		SELECT @ExpiryDateTime = CONVERT(DATETIME, '2099-12-31 00:00:00.000')
	END
	ELSE
	BEGIN
		SELECT @ExpiryDateTime = CONVERT(DATETIME, @DBExpiryDateTime)
	END


	SELECT 	@UserName = UserName
	FROM 	PDBUser (NOLOCK)
	WHERE 	UserIndex = @DBUserId


	/*SELECT @DBParentFolderId = WorkFlowFolderId
	FROM   RouteFolderDefTable
	WHERE  ProcessDefId = @DBProcessDefId
	IF @@ROWCOUNT <= 0
	BEGIN
	       	EXECUTE PRTRaiseError  'PRT_ERR_Invalid_Parameter', @DBStatus OUT
		SELECT 	Status = @DBStatus
		RETURN
	END */

/*
	SELECT @DataClassFlag = 'N'
	SELECT @TableViewName = TableName
	FROM ExtDBConfTable
	WHERE ProcessDefId = @DBProcessDefId
	IF @@ROWCOUNT > 0
	BEGIN
		SELECT	@DDTTableName = TABLE_NAME
		FROM	INFORMATION_SCHEMA.VIEW_TABLE_USAGE
		WHERE	VIEW_NAME = @TableViewName
		IF @@ROWCOUNT > 0
			SELECT @DataClassFlag = 'Y'
	END
*/

	/* ______________________________________________________________________________________
	// Changed On  : 28/02/2005
	// Changed By  : Ruhi Hira
	// Description : SrNo-1, Omniflow 6.0, Feature: Multiple Introduction,
	//			ActivityId filter added to query.
	// ____________________________________________________________________________________*/
	/* changed by Tirupati srivastava on 3/5/2007 for Bugzilla Id 676 */
	/*SELECT  TOP 1 @QueueName	  = QUEUEDEFTABLE.QUEUENAME,
		@QueueId	= QUEUEDEFTABLE.QUEUEID,
		@StreamId	= QUEUESTREAMTABLE.STREAMID
	FROM 	QUEUESTREAMTABLE, QUserGroupView , ACTIVITYTABLE , QUEUEDEFTABLE
	WHERE 	ACTIVITYTABLE.PROCESSDEFID 	= @DBProcessDefId
	AND 	ACTIVITYTABLE.ACTIVITYTYPE 	= 1
	AND 	ACTIVITYTABLE.PROCESSDEFID 	= QUEUESTREAMTABLE.PROCESSDEFID
	AND 	ACTIVITYTABLE.ACTIVITYID	= QUEUESTREAMTABLE.ACTIVITYID
	AND 	ACTIVITYTABLE.ACTIVITYID	= @ActivityId
	AND 	QUEUESTREAMTABLE.QUEUEID 	= QUserGroupView.QUEUEID
	AND 	QUEUEDEFTABLE.QUEUEID 		= QUserGroupView.QUEUEID
	AND 	QUEUETYPE 			= 'I'
	AND 	USERID 				= @DBUserId

	IF @@ROWCOUNT <= 0
	BEGIN
		SELECT @DBStatus = 300	*//*WFS_7.1_033*/
		/*SELECT 	Status   = @DBStatus
		RETURN
	END */

	/*BEGIN TRANSACTION TranWorkItem
	UPDATE 	ProcessDefTable
	SET 	RegStartingNo 	= RegStartingNo + 1
	WHERE 	ProcessDefID 	= @DBProcessDefId

	SELECT	@ProcessState	= ProcessState,
		@RegPrefix	= RegPrefix,
		@RegSuffix	= RegSuffix,
		@RegStartingNo	= RegStartingNo,
		@RegSeqLength	= RegSeqLength,
		@ProcessName	= ProcessName,
		@ProcessVersion = VersionNo
	FROM	ProcessDefTable
	WHERE	ProcessDefID	= @DBProcessDefId
	COMMIT TRANSACTION TranWorkItem*/

	/*IF @ProcessState <> 'Enabled'
	BEGIN
		SELECT @DBStatus = 2
		SELECT 	Status   = @DBStatus
		RETURN
	END

	SELECT @RegStartingNo	= @RegStartingNo
	SELECT @RegPrefix	= @RegPrefix + '-'
	SELECT @RegSuffix	= '-' + @RegSuffix


	IF LEN(@RegStartingNo) > @RegSeqLength - LEN(@RegPrefix) - LEN(@RegSuffix)
	BEGIN
		SELECT @DBStatus = 19
		SELECT 	Status   = @DBStatus
		RETURN
	END

	SELECT	@Length			= @RegSeqLength - LEN(@RegPrefix) - LEN(@RegSuffix)
	SELECT	@ProcessInstanceId	= REPLICATE('0', @Length)
	SELECT 	@ProcessInstanceId	= @RegPrefix + SUBSTRING(@ProcessInstanceId,1, LEN(@ProcessInstanceId) - LEN(@RegStartingNo)) + CONVERT(varchar(10), @RegStartingNo) + @RegSuffix */
	SELECT 	@DBFolderName		= @ProcessInstanceId

/*	BEGIN TRANSACTION TranWorkItem	*/

	SELECT 	@FolderLock		= FolderLock,
		@FinalizedFlag 		= FinalizedFlag,
		@DBLocation 		= Location,
		@ParentFolderType	= FolderType,
		@DBImageVolumeIndex	= ISNULL(@DBImageVolumeIndex, ImageVolumeIndex),
		@TempUser 		= Owner,
		@AccessType 		= AccessType,
		@ACLMore 		= ACLMoreFlag,
		@ACLstr			= ACL,
		@EnableVersion		= EnableVersion,
		@ParentEnableFTS	= EnableFTS,
		@MainGroupId		= MainGroupId,
		@LockMessage		= LockMessage,
		@LockByUser		= LockByUser,
		@FolderLevel		= FolderLevel,
		@Hierarchy		= Hierarchy
	FROM PDBFolder (NOLOCK) /* (UPDLOCK) */
	WHERE FolderIndex 		= @DBParentFolderId
	AND (@MainGroupId = 0 OR MainGroupId = @MainGroupId)

	IF @@ROWCOUNT <= 0
	BEGIN
/*		ROLLBACK TRANSACTION TranWorkItem	*/
	       	EXECUTE PRTRaiseError  'PRT_ERR_Folder_Not_Exist', @DBStatus OUT
		SELECT 	Status = @DBStatus
		RETURN
	END
	ELSE
	IF (NOT(@DBLocation IN ('R','G','A') and @DBFolderType IN ('G','A')))
	BEGIN
/*		ROLLBACK TRANSACTION TranWorkItem	*/
		EXECUTE PRTRaiseError  'PRT_ERR_Cannot_AddFolder', @DBStatus OUT
		SELECT Status = @DBStatus
		RETURN
	END
	ELSE
	IF @ParentFolderType  = 'A' AND @DBFolderType <> 'A'
	BEGIN
/*		ROLLBACK TRANSACTION TranWorkItem	*/
		EXECUTE PRTRaiseError  'PRT_ERR_Cannot_AddFolder', @DBStatus OUT
		SELECT 	Status = @DBStatus
		RETURN
	END
	ELSE
	IF (@FolderLock = 'Y')
	BEGIN
		/* Fetch effective lock by user and lock message */
		EXECUTE CheckLock	'F', @DBParentFolderId, @LockByUser, @FolderLock, @EffectiveLockByUser OUT,
					@LockMessage OUT, @LockedObject OUT, @DBStatus OUT
		IF @EffectiveLockByUser <> @DBUserId
		BEGIN
/*			ROLLBACK TRANSACTION TranWorkItem */
			EXECUTE PRTRaiseError 'PRT_ERR_Folder_Locked', @DBStatus OUT
			SELECT 	Status = @DBStatus
			RETURN
		END
		SELECT	@FolLock		= 'Y'
		SELECT	@FolLockByUser		= @LockByUser
	END
	ELSE IF (@FinalizedFlag = 'Y')
	BEGIN
/*		ROLLBACK TRANSACTION TranWorkItem	*/
		EXECUTE PRTRaiseError 'PRT_ERR_Finalised_Folder', @DBStatus OUT
		SELECT 	Status = @DBStatus
		RETURN
	END
	ELSE
	BEGIN
		SELECT @DBStatus = 0
	END

	IF @Folderlevel >= 255
	BEGIN
/*		ROLLBACK TRANSACTION TranWorkItem	*/
		EXECUTE PRTRaiseError 'PRT_ERR_Max_Level_Count_Reached', @DBStatus OUT
		SELECT 	Status = @DBStatus
		RETURN
	END

	IF @LimitCount IS NOT NULL
	BEGIN
		IF ((SELECT COUNT(*) FROM PDBFolder (NOLOCK)
			WHERE ParentFolderIndex = @DBParentFolderId
			AND AccessType = @DBAccessType) >= @LimitCount)
		BEGIN
/*			ROLLBACK TRANSACTION TranWorkItem	*/
			EXECUTE PRTRaiseError 'PRT_ERR_Max_Folder_Count_Reached', @DBStatus OUT
			SELECT 	Status = @DBStatus
			RETURN
		END
	END

	/* Generate the name of the folder if the foldername given is NULL*/
	IF @DBFolderName IS NULL 
	BEGIN
		EXECUTE PRTGenerateDefaultName 'F',@DBParentFolderId, NULL, NULL, @MainGroupId, @DBFolderName OUT,
						@DBStatus OUT
		IF (@DBStatus <> 0)
		BEGIN
/*			ROLLBACK TRANSACTION TranWorkItem	*/
			SELECT 	Status = @DBStatus
			RETURN
		END
	END

	ELSE	/* Check for the uniqueness of the folder	*/
	BEGIN
	/* ______________________________________________________________________________________
	// Changed On  : 12/05/2005
	// Changed By  : Rahul Mehta
	// Description : SrNo-2, GENERATENAME SP previously had 10 parameters but currently it has 12 parameters
	//		(Parameter values added are for 9th and 10th parameter)
	// ____________________________________________________________________________________*/
		EXECUTE GenerateName	'F' , @DBFolderName, @DBParentFolderId, NULL, NULL, @NameLength, @MainGroupId,
					@DuplicateNameFlag,NULL,'N', @TMPDBFolderName OUT, @DBStatus OUT
		IF @DBStatus <> 0
		BEGIN
/*			ROLLBACK TRANSACTION TranWorkItem	*/
			SELECT 	Status = 	@DBStatus
			RETURN
		END
	END


	SELECT @Hierarchy = ISNULL(RTRIM(@Hierarchy), '') + RTRIM(CONVERT(varchar(10), @DBParentFolderId)) + '.'
	
	/* Changed By Varun Bhansaly On 25/07/2007 for Bugzilla Id 1544 */
	--BEGIN TRANSACTION TranWorkItem
	INSERT INTO PDBFolder(ParentFolderIndex, Name, Owner, CreatedDatetime, RevisedDateTime,
		AccessedDateTime, DataDefinitionIndex, AccessType, ImageVolumeIndex,
		FolderType, FolderLock, LockByUser, Location, DeletedDateTime,
		EnableVersion, ExpiryDateTime, Comment, UseFulData, ACL, FinalizedFlag,
		FinalizedDateTime, FinalizedBy, ACLMoreFlag, MainGroupId, EnableFTS, LockMessage,
		Folderlevel, Hierarchy)
	VALUES ( @DBParentFolderId, @TMPDBFolderName, @DBUserId, @CurrDate, @CurrDate,
		@CurrDate, @DBDataDefinitionIndex, @DBAccessType, @DBImageVolumeIndex,
		@DBFolderType, @FolLock, @FolLockByUser, @ParentFolderType, CONVERT(DATETIME, '2099-12-31 00:00:00.000'),
		ISNULL(@DBVersionFlag, @EnableVersion), @ExpiryDateTime, ISNULL(@DBComment,''), NULL, NULL, 'N',
		CONVERT(datetime,'2099-12-31 00:00:00.000'), 0, 'N', @MainGroupId, ISNULL(@DBEnableFTS, @ParentEnableFTS),
		@LockMessage, @Folderlevel + 1, @Hierarchy)
	SELECT @NewFolderIndex = @@IDENTITY

	IF( @DBDataDefinitionIndex > 0)
	BEGIN
		IF LEN(@ColumnList) > 0
		BEGIN
			SELECT @ColumnList   = ' FoldDocIndex, FoldDocFlag' + @ColumnList
			SELECT @ValueList    = CONVERT(varchar(10), @NewFolderIndex) + ',' + CHAR(39) + 'F' + CHAR(39) + @ValueList
			EXECUTE ('INSERT INTO ' + @DDTTableName + ' ( ' + @ColumnList + ' ) VALUES ( ' +
				@ValueList + ')')
			IF(@@ERROR <> 0 OR @@ROWCOUNT = 0)  /* WFS_5_169 */
			BEGIN
				--ROLLBACK TRANSACTION TranWorkItem
				SELECT 	Status = 15
				RETURN
			END
		END
		EXECUTE PRTBuildUseFulDataString @NewFolderIndex, 'F', @DBDataDefinitionIndex, @DBStatus OUT
	END

	SELECT @WhileCounter = 1
	SELECT @NextOrder = 0
	SELECT @UniqueNameString = ';'
	WHILE  @WhileCounter <= 5
	BEGIN
		IF @WhileCounter = 1
			SELECT @DBDocumentList = @DBDocumentList1
		ELSE IF @WhileCounter = 2
			SELECT @DBDocumentList = @DBDocumentList2
		ELSE IF @WhileCounter = 3
			SELECT @DBDocumentList = @DBDocumentList3
		ELSE IF @WhileCounter = 4
			SELECT @DBDocumentList = @DBDocumentList4
		ELSE IF @WhileCounter = 5
			SELECT @DBDocumentList = @DBDocumentList5
		SELECT @TempStr = ''
		WHILE LEN(@DBDocumentList) > 0
		BEGIN
			SELECT @pos1 = CHARINDEX(CHAR(25), @DBDocumentList)
			IF @pos1 = 0
			BEGIN
				SELECT @TempStr = SUBSTRING(@DBDocumentList, 1, 8000) /*Bugzilla bug 10941*/
				SELECT @DBDDIDataList = NULL
				BREAK
			END
			ELSE
			BEGIN
				/** Sample Format - 
				  *   Select Name,DocumentIndex,ImageIndex,VolumeId,NoOfPages,DocumentSize,AppName,DocumentType,Comment from *   Pdbdocument where documentindex = <DocumentIndex for document>
				  *
				  *	  Name+((char)21) + ImageIndex#VolumeId + ((char)21) +NoOfPages + (char(21)) +  DocumentSize + ((char(21)) 
				  *		+ AppName + (char(21))  + DocumentType + ((char21)) +  comment    +  ((char)25)
				  *	IDProof1880#11100071jpgIIDProof[CHAR25--EM]
				  *	 Added by Mohnish Chopra
				 **/
				SELECT @TempStr 	= RTRIM(@TempStr) + RTRIM(SUBSTRING(@DBDocumentList, 1, @pos1-1))
				SELECT @DBDocumentList 	= STUFF(@DBDocumentList, 1, @pos1, NULL)

				SELECT @pos1 		= CHARINDEX(CHAR(21), @TempStr)
				SELECT @DocumentName 	= RTRIM(SUBSTRING(@TempStr, 1, @pos1-1))
				SELECT @TempStr 	= STUFF(@TempStr, 1, @pos1, NULL)

				SELECT @pos1 		= CHARINDEX(CHAR(21), @TempStr)
				SELECT @ISIndexStr 	= RTRIM(SUBSTRING(@TempStr, 1, @pos1-1))
				SELECT @TempStr 	= STUFF(@TempStr, 1, @pos1, NULL)

				SELECT @pos1 		= CHARINDEX(CHAR(21), @TempStr)
				SELECT @NoOfPage 	= CONVERT(int, RTRIM(SUBSTRING(@TempStr, 1, @pos1-1)))
				SELECT @TempStr 		= STUFF(@TempStr, 1, @pos1, NULL) 

				SELECT @pos1 			= CHARINDEX(CHAR(21), @TempStr)				
				IF @pos1 > 1 
			        BEGIN 
					
					SELECT @DocumentSize 	= CONVERT(int, RTRIM(SUBSTRING(@TempStr, 1, @pos1-1)))

					SELECT @TempStr		=  STUFF(@TempStr, 1, @pos1, NULL)
					SELECT @pos1 		= CHARINDEX(CHAR(21), @TempStr)
					/*WFS_8.0_013*/
					IF @pos1 > 1 --Document contains AppTYpe also
					BEGIN
						SELECT @AppType		= RTRIM(SUBSTRING(@TempStr, 1, @pos1-1))
						SELECT @TempStr		=  STUFF(@TempStr, 1, @pos1, NULL)
						SELECT @pos1 		= CHARINDEX(CHAR(21), @TempStr)
						IF @pos1 = 2 --It seems DocumentType is also sent,Ncomment_str, pos for CHAR(21) = 2 if DocType is also sent 
						BEGIN
							SELECT @DocumentType = RTRIM(SUBSTRING(@TempStr,1, @pos1-1))
							SELECT @Comment 	= RTRIM(SUBSTRING(@TempStr, @pos1+1,LEN(@TempStr)-3))--Excluding first two and last one NAK character
						END
						ELSE --No DocumnetType is sent in Documents tag
						BEGIN
							SELECT @Comment 	= RTRIM(SUBSTRING(@TempStr, 1,LEN(@TempStr)))
						END
					END
					ELSE
					BEGIN
						SELECT @AppType		= STUFF(@TempStr, 1, @pos1, NULL)
						SELECT @Comment		= ''
					END
					/*WFS_8.0_013*/
				END
				ELSE
				BEGIN
					SELECT @DocumentSize 	= CONVERT(int, RTRIM(STUFF(@TempStr, 1, @pos1, NULL))) 
					SELECT @AppType		= 'TIF'
					SELECT @Comment		= ''
				END

				/* Bug No WFS_6.1.2_059 hash symbol replaced by chr(35) - Ruhi Hira */
				SELECT @pos1 		= CHARINDEX(char(35), @ISIndexStr)
				SELECT @ImageIndex 	= CONVERT(int, LTRIM(RTRIM(SUBSTRING(@ISIndexStr, 1, @pos1-1))))
				SELECT @VolumeIndex 	= CONVERT(int, LTRIM(RTRIM(STUFF(@ISIndexStr, 1, @pos1, null))))

				SELECT @TempStr = ''
	            IF(@AppType = 'tif' OR @AppType = 'tiff' OR @AppType = 'bmp' OR @AppType = 'jpeg' OR @AppType = 'jpg' OR @AppType = 'jif' OR @AppType = 'gif' OR @AppType = 'png')
					SELECT  @DocumentType = 'I'
				ELSE 
					SELECT @DocumentType = 'N'

				/* ______________________________________________________________________________________
				// Changed On  : 12/05/2005
				// Changed By  : Rahul Mehta
				// Description : SrNo-2, GENERATENAME SP previously had 10 parameters but currently it has 12 parameters
				//		(Parameter values added are for 9th and 10th parameter)
				// ____________________________________________________________________________________*/
				SELECT @pos1 = CHARINDEX(';' + @DocumentName + '.' + @AppType + ';', @UniqueNameString)
				IF(@pos1 > 0)
				BEGIN
					EXECUTE GenerateName 'D', @DocumentName, @NewFolderIndex, @DocumentType, @AppType, 255, @MainGroupId, 'Y',NULL,'N', @DocumentName OUT, @DBStatus OUT
					IF @DBStatus <> 0
					BEGIN
						--ROLLBACK TRANSACTION TranWorkItem
						SELECT 	Status = 	@DBStatus
						RETURN
					END
				END
				ELSE
				BEGIN
					SELECT @UniqueNameString = @UniqueNameString + @DocumentName + '.' + @AppType + ';'
				END

				/* Changed By Varun Bhansaly On 25/07/2007 for Bugzilla Id 1544 */
				INSERT INTO PDBDocument(VersionNumber, VersionComment,
					Name, Owner, CreatedDateTime, RevisedDateTime,
					AccessedDateTime, DataDefinitionIndex,
					Versioning, AccessType, DocumentType,
					CreatedbyApplication, CreatedbyUser,
					ImageIndex, VolumeId, NoOfPages, DocumentSize,
					FTSDocumentIndex, ODMADocumentIndex,
					HistoryEnableFlag, DocumentLock, LockByUser,
					Comment, Author, TextImageIndex, TextVolumeId,
					FTSFlag, DocStatus, ExpiryDateTime,
					FinalizedFlag, FinalizedDateTime, FinalizedBy,
					CheckOutstatus, CheckOutbyUser,	UseFulData,
					ACL, PhysicalLocation, ACLMoreFlag, AppName,
					MainGroupId, PullPrintFlag, ThumbNailFlag,
					LockMessage)
				 VALUES ( 1.0,	'Original',
					@DocumentName, @DBUserId, @CurrDate, @CurrDate,
					@CurrDate, 0,
					@EnableVersion, 'I', @DocumentType,
					0, @DBUserId,
					@ImageIndex, @VolumeIndex, @NoOfPage, @DocumentSize,
					0, 'not defined',
					'N', 'N', NULL,
					@Comment, @UserName, 0, 0, 
					'XX', 'A', convert(datetime, '2099-12-12 00:00:00.000'),
					'N', convert(datetime, '2099-12-12 00:00:00.000'), 0,
					'N', 0, NULL,
					NULL, 'not defined', 'N', @AppType,
					@MainGroupId, 'N', 'N', NULL)
				SELECT @DBStatus = @@ERROR
				IF (@DBStatus <> 0)
				BEGIN
					--ROLLBACK TRANSACTION TranWorkItem
					SELECT 	Status = 	15
					RETURN
				END

				SELECT 	@NewDocumentIndex = @@IDENTITY
				SELECT  @NextOrder = @NextOrder + 1
				INSERT INTO PDBDocumentContent(
					ParentFolderIndex, DocumentIndex,
					FiledBy, FiledDatetime,
					DocumentOrderNo, RefereceFlag)
				 VALUES(@NewFolderIndex, @NewDocumentindex,
					@DBUserId, @CurrDate, @NextOrder , 'O')
				Select @DBStatus = @@ERROR
				IF (@DBStatus <> 0)
				BEGIN
					--ROLLBACK TRANSACTION TranWorkItem
					SELECT 	Status = 	15
					RETURN
				END
                /*WFS_8.0_037*/
                IF(@Comment = '')
                BEGIN
                    SELECT @FieldName = @DocumentName
                END
                ELSE
                BEGIN
                    SELECT @FieldName = @DocumentName + '(' + @Comment+ '.' + @AppType + ')'
                END
                /*Insert Into WFMessageTable (message, status,ActionDateTime)
                values('<Message><ActionId>18</ActionId><UserId>' + convert(varchar,@DBUserId) +
                '</UserId><ProcessDefId>' + convert(varchar,@DBProcessDefId) +
                '</ProcessDefId><ActivityId>' + convert(varchar,@ActivityId) +
                '</ActivityId><QueueId>'+ convert(varchar, @QueueId) +
                '</QueueId><UserName>' + @UserName +
                '</UserName><ActivityName>' + @ActivityName +
                '</ActivityName><TotalWiCount>1</TotalWiCount><TotalDuration>0</TotalDuration><ProcessInstance>' + @ProcessInstanceId +
                '</ProcessInstance><FieldId>' + convert(varchar,@QueueId) +
                '</FieldId><WorkitemId>1</WorkitemId><TotalPrTime>0</TotalPrTime><DelayTime>0</DelayTime><WKInDelay>0</WKInDelay><ReportType>D</ReportType><LoggingFlag>1</LoggingFlag><FieldName>' +
                @FieldName + '</FieldName></Message>',
                N'N', GETDATE())*/
				Insert into WFCurrentRouteLogTable (URN,ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId, AssociatedFieldName, ActivityName, UserName, NewValue, QueueId, ProcessVariantId) 
				values(@UrnDup,@DBProcessDefId,@ActivityId,@ProcessInstanceId,1
				,@DBUserId,18,getDate(),null,@QueueId,@FieldName,
				 @ActivityName,@UserName,null,@QueueId,
				@DBProcessVariantId) 
			END
		END
		SELECT @WhileCounter = @WhileCounter + 1
	END

	DECLARE sysattrcur CURSOR FAST_FORWARD FOR
		SELECT 	A.UserDefinedName, A.SystemDefinedName, A.VariableType
		FROM 	VarMappingTable A (NOLOCK), RecordMappingTable B (NOLOCK)
		WHERE 	A.ProcessDefId 	= @DBProcessDefId
		AND 	A.ProcessDefId 	= B.ProcessDefId
		AND 	VariableScope 	= 'M'
		AND 	(A.UserDefinedName = B.REC1 OR A.UserDefinedName = B.REC2 OR A.UserDefinedName = B.REC3 OR A.UserDefinedName = B.REC4 OR A.UserDefinedName = B.REC5)
	OPEN sysattrcur
	FETCH NEXT FROM sysattrcur INTO @UserDefinedName, @SystemDefinedName, @VariableType
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @UserDefinedName = 'ItemIndex'
		BEGIN
			SELECT @Var_Rec_1 	= CONVERT(varchar(10), @NewFolderIndex)
			IF @UpdateFlag = 'Y'
			BEGIN
				SELECT @UpdateColumnStr	= RTRIM(@UpdateColumnStr) + ',' + @SystemDefinedName
				SELECT @UpdateValueStr = @UpdateValueStr + ',' + CHAR(39) + RTRIM(@Var_Rec_1) + CHAR(39)
				
			END
			ELSE
			BEGIN
				SELECT @UpdateFlag = 'Y'
				SELECT @UpdateColumnStr	= RTRIM(@SystemDefinedName)
				SELECT @UpdateValueStr = CHAR(39) + RTRIM(@Var_Rec_1) + CHAR(39)
			
			END
		END
		ELSE IF @UserDefinedName = 'ItemType'
		BEGIN
			SELECT @Var_Rec_1 	= CHAR(39) + 'F' + CHAR(39)
			IF @UpdateFlag = 'Y'
			BEGIN
				SELECT @UpdateColumnStr	= RTRIM(@UpdateColumnStr) + ',' + @SystemDefinedName
				SELECT @UpdateValueStr = @UpdateValueStr + ','  + RTRIM(@Var_Rec_1)
			
			END
			ELSE
			BEGIN
				SELECT @UpdateFlag = 'Y'
				SELECT @UpdateColumnStr	= RTRIM(@SystemDefinedName)
				SELECT @UpdateValueStr = RTRIM(@Var_Rec_1)
				
			END
		END
		ELSE
		BEGIN
			SELECT @Var_Rec_1 = ' NULL '
		END
		SELECT @InsertExtColumnStr = @InsertExtColumnStr + ',' + @UserDefinedName
		SELECT @InsertExtValueStr  = @InsertExtValueStr + ',' + @Var_Rec_1
		FETCH NEXT FROM sysattrcur INTO @UserDefinedName, @SystemDefinedName, @VariableType
	END
	CLOSE 		sysattrcur
	DEALLOCATE 	sysattrcur
	/* Changed By : Varun Bhansaly On 02/02/2007 */
	/*
	SELECT  @ProcessTurnAroundTime  =  ProcessTurnAroundTime
	FROM PROCESSDEFTABLE A, ACTIVITYTABLE B
	WHERE 	A.ProcessDefId = B.ProcessDefId
	AND 	B.ProcessDefId = @DBProcessDefId
	AND	ActivityId = @ActivityId */ /* Bugzilla Bug 270 - For multiple introduction worksteps */
	
	/* ______________________________________________________________________________________
	// Changed On  : 12/05/2005
	// Changed By  : Rahul Mehta
	// Description : SrNo-2, Intially "ValidTill" is always null
	// ____________________________________________________________________________________*/

	Select @ValidTill = null
	IF @QDTColumnList is null 
	BEGIN
		SELECT @QDTColumnList = ''
	END	

	/* ______________________________________________________________________________________
	// Changed On  : 5/08/2005
	// Changed By  : Mandeep Kaur
	// Description : SRNo-3, ExpectedProcessDelay is set as 1900-01-01 00:00:00.000 in uploadWorkitem;
	                         it should be ProcessTurnAroundTime + currentDate rather than 0
	// ____________________________________________________________________________________*/

	/* Changed By : Varun Bhansaly On 02/02/2007 */
	/* ______________________________________________________________________________________
		// Changed On  : 26/05/2009
		// Changed By  : Saurabh Kamal
		// Description : WFS_8.0_010, IF-ELSE added.Inserting ProcessInstanceState as 1 and 
		//		 IntroducedByID, IntroducedBy,IntroductionDatetime as NULL	
		// ____________________________________________________________________________________*/
	
	IF @DBInitiateAlso = N'Y' AND @DBSynchronousRouting != N'Y'
		BEGIN
			SELECT @strQuery = 'Insert Into WFInstrumentTable (URN,ProcessInstanceId, ProcessDefID,Createdby,CreatedDatetime,ProcessinstanceState, 
				CreatedByName,IntroducedByID, IntroducedBy,IntroductionDatetime,ExpectedProcessDelay,IntroducedAt,WorkItemId, ProcessName,ProcessVersion,LastProcessedBy,ProcessedBy,ActivityName,ActivityId,ActivityType,EntryDateTime,AssignmentType,
				CollectFlag,PriorityLevel,ValidTill,Q_StreamId,Q_QueueId,Q_UserId,AssignedUser,FilterValue,WorkItemState,Statename,
				ExpectedWorkitemDelay,PreviousStage,LockedByName,LockStatus,LockedTime,Queuename,Queuetype,NotifyStatus,
				RoutingStatus,ProcessVariantId,SaveStage, InstrumentStatus, CheckListCompleteFlag'+@QDTColumnList+','+ @UpdateColumnStr+')
			Values (N'+ISNULL(@Urn,'''''')+',N'+@quoteChar+ @ProcessInstanceId +@quoteChar+', '+CONVERT(VARCHAR,@DBProcessDefId)+', '+CONVERT(VARCHAR,@DBUserId)+', GETDATE(),2, N'+@quoteChar+ @UserName +@quoteChar+','+CONVERT(VARCHAR,@DBUserId)+',N'+@quoteChar+ @UserName +@quoteChar+',GETDATE(),'+CONVERT(VARCHAR,ISNULL('NULL',@DBExpectedProcessDelay))+',N'+@quoteChar+@ActivityName +@quoteChar+' ,1,N'+@quoteChar+ @ProcessName +@quoteChar+','+CONVERT(VARCHAR,@ProcessVersion)+' , '+CONVERT(VARCHAR,@DBUserId)+',N'+@quoteChar+@UserName +@quoteChar+', N'+@quoteChar+@ActivityName +@quoteChar+', '+CONVERT(VARCHAR,@ActivityId)+',1, GETDATE(),N'+@quoteChar+ 'Y' +@quoteChar+',N'+@quoteChar+ 'N' +@quoteChar+','+CONVERT(VARCHAR,@DBPriorityLevel)+','+CONVERT(VARCHAR,ISNULL('NULL',@ValidTill))+',0,0,NULL,NULL,NULL,6,N'+@quoteChar+ 'COMPLETED' +@quoteChar+',NULL,N'+@quoteChar+@ActivityName +@quoteChar+',NULL, N'+@quoteChar+ 'N' +@quoteChar+',GETDATE(),NULL,NULL,NULL, N'+@quoteChar+ 'Y' +@quoteChar+', '+CONVERT(VARCHAR,@DBProcessVariantId)+', N'+@quoteChar+ @ActivityName +@quoteChar+' , N'+@quoteChar+ 'N' +@quoteChar+', N'+@quoteChar+ 'N' + @quoteChar +ISNULL(@QDTValueList,'')+'  ,'+@UpdateValueStr+')'
			
		END
	ELSE
		BEGIN
			SELECT @strQuery = 'Insert Into WFInstrumentTable (URN,ProcessInstanceId, ProcessDefID, Createdby, CreatedDatetime,ProcessinstanceState,CreatedByName,IntroducedByID, IntroducedBy,IntroductionDatetime,ExpectedProcessDelay, IntroducedAt,WorkItemId, ProcessName,ProcessVersion,LastProcessedBy,ProcessedBy,ActivityName,ActivityId,ActivityType,EntryDateTime,AssignmentType,CollectFlag,PriorityLevel,ValidTill,Q_StreamId,Q_QueueId,Q_UserId,AssignedUser,FilterValue,WorkItemState,Statename, ExpectedWorkitemDelay,PreviousStage,LockedByName,LockStatus,LockedTime,Queuename,Queuetype,NotifyStatus,				RoutingStatus,ProcessVariantId,SaveStage, InstrumentStatus, CheckListCompleteFlag '+@QDTColumnList+','+ @UpdateColumnStr+')
			Values 
			(N'+ISNULL(@Urn,'''''')+',N'+@quoteChar+ @ProcessInstanceId +@quoteChar+', '+CONVERT(VARCHAR,@DBProcessDefId)+', '+CONVERT(VARCHAR,@DBUserId)+', GETDATE(),1, N'+@quoteChar+ @UserName +@quoteChar+',NULL,NULL,NULL,'+CONVERT(VARCHAR,ISNULL('NULL',@DBExpectedProcessDelay))+',N'+@quoteChar+ @ActivityName +@quoteChar+' ,1,N'+@quoteChar+ @ProcessName +@quoteChar+','+CONVERT(VARCHAR,@ProcessVersion)+','+CONVERT(VARCHAR,@DBUserId)+',N'+@quoteChar+ @UserName +@quoteChar+', N'+@quoteChar+ @ActivityName +@quoteChar+', '+CONVERT(VARCHAR,@ActivityId)+',1, GETDATE(),N''S'', N''N'','+CONVERT(VARCHAR,@DBPriorityLevel)+','+CONVERT(VARCHAR,ISNULL('NULL',@ValidTill))+','+CONVERT(VARCHAR,@StreamId)+','+CONVERT(VARCHAR,@QueueId)+',NULL,NULL,NULL,1,N''NOTSTARTED'',NULL,N'+@quoteChar+ @ActivityName +@quoteChar+',NULL,N''N'',NULL,N'+@quoteChar+ @QueueName +@quoteChar+', N''I'',NULL, N''N'','+CONVERT(VARCHAR,@DBProcessVariantId)+', N'+@quoteChar+ @ActivityName +@quoteChar+' , N''N'', N'+@quoteChar+ 'N' +@quoteChar +ISNULL(@QDTValueList,'')+'  ,'+@UpdateValueStr+')'
				
			commit
			
		END
	Execute(@strQuery)	
	IF(@@ERROR <> 0 OR @@ROWCOUNT = 0)  /* WFS_5_169 */
	BEGIN
		--ROLLBACK TRANSACTION TranWorkItem
		SELECT 	Status = 15
		RETURN
	END

	/* ______________________________________________________________________________________
		// Changed On  : 25/07/2007
		// Changed By  : Tirupati Srivastava
		// Description : IF-ELSE added.Bugzilla Id 1447
		// ____________________________________________________________________________________*/
	/* ______________________________________________________________________________________
		// Changed On  : 26/05/2009
		// Changed By  : Saurabh Kamal
		// Description : WFS_8.0_010, IF InitiateAlso != Y Insert AssignmentType = 'S'				 
		// ____________________________________________________________________________________*/

	/*IF @DBInitiateAlso = N'Y'
		BEGIN
			Insert Into workdonetable
			(ProcessInstanceId,WorkItemId,ProcessName,ProcessVersion,ProcessDefID,LastProcessedBy,
			ProcessedBy,ActivityName,ActivityId,EntryDateTime,ParentWorkItemId,AssignmentType,
			CollectFlag,PriorityLevel,ValidTill,Q_StreamId,Q_QueueId,Q_UserId,AssignedUser,
			FilterValue, CreatedDateTime,WorkItemState,Statename,ExpectedWorkitemDelay,PreviousStage,
			LockedByName,LockStatus,LockedTime,Queuename,Queuetype,NotifyStatus, ProcessVariantId)
			Values(@ProcessInstanceId, 1, @ProcessName, @ProcessVersion, @DBProcessDefId, @DBUserId,
			@UserName, @ActivityName, @ActivityId, @CurrDate, 0,'Y','N',@DBPriorityLevel,@ValidTill,
			@StreamId,@QueueId,NULL,NULL,NULL,@CurrDate,6,'COMPLETED',NULL,@ActivityName,NULL,'N',@CurrDate,
			@QueueName, 'I',NULL, @DBProcessVariantId)
		END
	ELSE
		BEGIN
			Insert Into WorkListTable  
			(ProcessInstanceId,WorkItemId,ProcessName,ProcessVersion,ProcessDefID,LastProcessedBy, 
			ProcessedBy,ActivityName,ActivityId,EntryDateTime,ParentWorkItemId,AssignmentType, 
			CollectFlag,PriorityLevel,ValidTill,Q_StreamId,Q_QueueId,Q_UserId,AssignedUser, 
			FilterValue, CreatedDateTime,WorkItemState,Statename,ExpectedWorkitemDelay,PreviousStage, 
			LockedByName,LockStatus,LockedTime,Queuename,Queuetype,NotifyStatus, ProcessVariantId) 
			Values(@ProcessInstanceId, 1, @ProcessName, @ProcessVersion, @DBProcessDefId, @DBUserId, 
			@UserName, @ActivityName, @ActivityId, @CurrDate, 0,'S','N',@DBPriorityLevel,@ValidTill,
			@StreamId,@QueueId,NULL,NULL,NULL,@CurrDate,1,'NOTSTARTED',NULL,@ActivityName,NULL,'N',NULL, 
			@QueueName, 'I',NULL, @DBProcessVariantId) 
		END

	IF(@@ERROR <> 0 OR @@ROWCOUNT = 0) 
	BEGIN
		--ROLLBACK TRANSACTION TranWorkItem
		SELECT 	Status = 15
		RETURN
	END
	Execute('INSERT INTO QueueDataTable (ProcessInstanceID, WorkItemID, SaveStage, InstrumentStatus, CheckListCompleteFlag' + @QDTColumnList + ', ' + @UpdateColumnStr + ') VALUES (N' + @quoteChar +  @ProcessInstanceId + @quoteChar + ', 1, N' + @quoteChar + @ActivityName + @quoteChar + ', N' + @quoteChar + 'N' + @quoteChar + ', N' + @quoteChar + 'N' + @quoteChar + @QDTValueList + ',' + @UpdateValueStr + ')')
	IF(@@ERROR <> 0 OR @@ROWCOUNT = 0)  
	BEGIN
		--ROLLBACK TRANSACTION TranWorkItem
		SELECT 	Status = 15
		RETURN
	END*/
	IF LEN(@InsertExtColumnStr) > 0 AND LEN(@TableViewName) > 0
	BEGIN
		IF @EXTColumnList1 IS NULL /** This check is sufficient as its not possible that @EXTColumnList1 is null and @EXTColumnList2 is not null. */
		BEGIN
			SELECT @InsertExtColumnStr = SUBSTRING(@InsertExtColumnStr,2, 1024)
			SELECT @InsertExtValueStr  = SUBSTRING(@InsertExtValueStr, 2, 1024)
		END
		EXECUTE('INSERT INTO ' + @TableViewName + ' ( ' + @EXTColumnList1 + @EXTColumnList2 + @EXTColumnList3 + @InsertExtColumnStr + ' ) VALUES ( ' + @EXTValueList1 + @EXTValueList2 + @EXTValueList3 + @InsertExtValueStr + ' ) ')
		IF(@@ERROR <> 0 OR @@ROWCOUNT = 0)  /* WFS_5_169 */
		BEGIN
			--ROLLBACK TRANSACTION TranWorkItem
			SELECT 	Status = 15
			RETURN
		END
	END


	/* ______________________________________________________________________________________
	// Changed On  : 5/08/2005
	// Changed By  : Mandeep Kaur
	// Description : SRNo-4, Optimizations in UploadWorkitem to add messages in place
	                 of insert record in CurrentRouteLogTable and SummaryTable
	// ____________________________________________________________________________________*/
	/* Changed By Varun Bhansaly 0n 08/02/2007 for Bugzilla Bug 74 */
	/* Changed By Tirupati Srivastava 0n 05/04/2007 for Bugzilla Bug 529 */
	/*Changes for Bug 50438 - WI properties showing 2 start Events--ActivityId should not be 0 in Message xml*/
	Insert Into WFMessageTable (message, status,ActionDateTime)
	values	('<Message><ActionId>1</ActionId><UserId>' + convert(varchar,@DBUserId) +
			'</UserId><ProcessDefId>' + convert(varchar,@DBProcessDefId) +
			'</ProcessDefId><ActivityId>' + convert(varchar,@ActivityId) +	
			'</ActivityId><QueueId>0</QueueId><UserName>' +
			@UserName + '</UserName><ActivityName>' + @ActivityName +
			'</ActivityName><TotalWiCount>1</TotalWiCount><TotalDuration>0</TotalDuration><ActionDateTime>'
			+ convert(varchar(22), getDate(), 20) +
			'</ActionDateTime><EngineName></EngineName><ProcessInstance>' + @ProcessInstanceId +
			'</ProcessInstance><FieldId>' + convert(varchar,@QueueId) + '</FieldId><WorkitemId>1</WorkitemId><TotalPrTime>0</TotalPrTime><DelayTime>0</DelayTime><WKInDelay>0</WKInDelay><ReportType>D</ReportType><LoggingFlag>3</LoggingFlag></Message>',
		N'N', GETDATE()
	)
		/*Changes for Bug 50438 - WI properties showing 2 start Events--ActivityId should not be 0 here*/
		Insert into WFCurrentRouteLogTable (URN,ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, 		AssociatedFieldId, AssociatedFieldName, ActivityName, UserName, NewValue, QueueId, ProcessVariantId) 
		values(@UrnDup,@DBProcessDefId,@ActivityId,@ProcessInstanceId,1,@DBUserId,1,getDate(),null,@QueueId,null, @ActivityName,@UserName,null,0,
					@DBProcessVariantId) 

	IF(@@ERROR <> 0 OR @@ROWCOUNT = 0) /* WFS_5_169 */
	BEGIN
		--ROLLBACK TRANSACTION TranWorkItem
		SELECT 	Status = 15
		RETURN
	END
	/*Insert Data into WFCurrentRouteLogTable For ActionId = 75 and WFAttributeMessageTable for the actual data being set*/
	IF(@DBSetAttributeLoggingEnabled = 'Y' AND @DBRouteLogList1 IS NOT NULL )
	BEGIN
		--Insert data into WFAttributeMessageTable
		Insert into WFAttriButeMessageTable (ProcessDefId,ProcessInstanceId,WorkitemId,message, status, ActionDateTime) Values (@DBProcessDefId,@ProcessInstanceId,1,
		@RouteLogList1 + @RouteLogList2 + @RouteLogList3 + @RouteLogList4 + @RouteLogList5 + @RouteLogList6 + @RouteLogList7 + @RouteLogList8,N'N',GETDATE())
		
		SELECT @fieldId = @@IDENTITY
		
		IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = 'CurrentRouteLogTable')
		BEGIN
			Insert into CurrentRouteLogTable (ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime,  AssociatedFieldId, AssociatedFieldName, ActivityName, UserName) 
			values(@DBProcessDefId,@ActivityId,@ProcessInstanceId,1,@DBUserId,75,getDate(),@fieldId,null, @ActivityName,@UserName) 
		END
		ELSE
		BEGIN
			Insert into WFCurrentRouteLogTable (URN,ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId, AssociatedFieldName, ActivityName, UserName, NewValue, QueueId) 
			values(@UrnDup,@DBProcessDefId,@ActivityId,@ProcessInstanceId,1,@DBUserId,75,getDate(),null,@fieldId,null, @ActivityName,@UserName,null,0) 
		END
	END
	/*INSERT INTO WFMessageTable (message, status, ActionDateTime) VALUES ('<Message><ActionId>16</ActionId><UserId>' + convert(varchar,@DBUserId) +	'</UserId><ProcessDefId>' + convert(varchar,@DBProcessDefId) + '</ProcessDefId><ActivityId>' + convert(varchar,@ActivityId) + '</ActivityId><QueueId>0</QueueId><UserName>' + @UserName + '</UserName><ActivityName>' + @ActivityName + '</ActivityName><TotalWiCount>1</TotalWiCount><TotalDuration>0</TotalDuration><ActionDateTime>'	+ convert(varchar(22), getDate(), 20) + '</ActionDateTime><EngineName></EngineName><ProcessInstance>' + @ProcessInstanceId + '</ProcessInstance><FieldId>0</FieldId><FieldName><Attributes>' + @RouteLogList1 + 
	@RouteLogList2 + @RouteLogList3 + @RouteLogList4 + @RouteLogList5 + @RouteLogList6 + @RouteLogList7 + @RouteLogList8 + '</Attributes></FieldName><WorkitemId>1</WorkitemId><TotalPrTime>0</TotalPrTime><DelayTime>0</DelayTime><WKInDelay>0</WKInDelay><ReportType>D</ReportType><LoggingFlag>1</LoggingFlag></Message>', N'N', GETDATE())*/

      /* ______________________________________________________________________________________
	// Changed On  : 5/08/2005
	// Changed By  : Mandeep Kaur
	// Description : SRNo-4, Optimizations in UploadWorkitem to add messages in place
	                 of insert record in CurrentRouteLogTable and SummaryTable
	// ____________________________________________________________________________________*/
	/* Changed By Varun Bhansaly 0n 08/02/2007 for Bugzilla Bug 74 */
	/* Changed By Tirupati Srivastava 0n 05/04/2007 for Bugzilla Bug 529 */
	/* ______________________________________________________________________________________
		// Changed On  : 25/07/2007
		// Changed By  : Tirupati Srivastava
		// Description : IF-ELSE added.Bugzilla Id 1447
		// ____________________________________________________________________________________*/
	IF @DBInitiateAlso = N'Y' AND @DBSynchronousRouting != N'Y'
	BEGIN
		Select @DBTotalDuration = Datediff(ss, createdDateTime, getDate()),@DBTotalPrTime = Datediff(ss, lockedTime, getDate())
		from WFINSTRUMENTTABLE (NOLOCK)
		where processInstanceId = @ProcessInstanceId
		AND RoutingStatus = 'Y' 
		AND LockStatus = 'N'
		
		BEGIN
			Insert Into WFMessageTable (message, status,ActionDateTime)
			values('<Message><ActionId>2</ActionId><UserId>' + convert(varchar,@DBUserId) +
			'</UserId><ProcessDefId>' + convert(varchar,@DBProcessDefId) +
			'</ProcessDefId><ActivityId>' + convert(varchar,@ActivityId) +
			'</ActivityId><QueueId>'+ convert(varchar, @QueueId) +
			'</QueueId><UserName>' + @UserName +
			'</UserName><ActivityName>' + @ActivityName +
			'</ActivityName><TotalWiCount>1</TotalWiCount><TotalDuration>' +
			convert(varchar, @DBTotalDuration) +'</TotalDuration><ActionDateTime>'
			+ convert(varchar(22), getDate(), 20) + '</ActionDateTime><EngineName></EngineName><ProcessInstance>' + @ProcessInstanceId +
			'</ProcessInstance><FieldId>' + convert(varchar,@QueueId) +
			'</FieldId><WorkitemId>1</WorkitemId><TotalPrTime>' +
			convert(varchar, @DBTotalPrTime) +
			'</TotalPrTime><DelayTime>0</DelayTime><WKInDelay>0</WKInDelay><ReportType>D</ReportType><LoggingFlag>3</LoggingFlag></Message>',
			N'N', GETDATE() ) 
			
			Insert into WFCurrentRouteLogTable (URN,ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, 		AssociatedFieldId, AssociatedFieldName, ActivityName, UserName, NewValue, QueueId, ProcessVariantId) 
			values(@UrnDup,@DBProcessDefId,@ActivityId,@ProcessInstanceId,1,@DBUserId,2,getDate(),null,@QueueId,null, @ActivityName,@UserName,null,@QueueId,
			@DBProcessVariantId) 
		END


		IF(@@ERROR <> 0 OR @@ROWCOUNT = 0) /* WFS_5_169 */
		BEGIN
			--ROLLBACK TRANSACTION TranWorkItem
			SELECT 	Status = 15
			RETURN
		END
	END
	SELECT @DBStatus = 0
	IF (@ValidataionReqd IS NOT NULL AND @ValidateQuery IS NOT NULL AND LEN(@ValidateQuery) > 0 )
	BEGIN
		EXECUTE ( @ValidateQuery)
		SELECT @DBStatus = @@ERROR
		IF @DBStatus <> 0
		BEGIN
			--ROLLBACK TRANSACTION TranWorkItem
			SELECT 	Status = 15
			RETURN
		END
	END 

--	COMMIT TRANSACTION TranWorkItem
	SELECT 	Status 		= @DBStatus,
		DBFolderName 	= @DBFolderName,
		CurrDate	= @CurrDate,
		FolderIndex = @NewFolderIndex /* Bugzilla Bug 265 - FolderIndex returned */
go

Print 'Stored Procedure WFUploadWorkItem compiled successfully ........'

go

/*--------------------------------------------------------------------------------------------
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
----------------------------------------------------------------------------------------------
	Group				: Application – Products
	Product / Project		: WorkFlow 5.1
	Module				: Transaction Server
	File Name			: WFGetUsersForRole.sql
	Author				: Ruhi Hira
	Date written (DD/MM/YYYY)	: 05/01/2005
	Description			: Returns user for Role (WMUser.java), for mssql server only.

----------------------------------------------------------------------------------------------
				CHANGE HISTORY
----------------------------------------------------------------------------------------------

Date			Change By		Change Description (Bug No. (If Any))
24/05/2007		Ruhi Hira		Bugzilla Bug 945.



----------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFGetUsersForRole')
Begin
	Execute('DROP PROCEDURE WFGetUsersForRole')
	Print 'Procedure WFGetUsersForRole already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFGetUsersForRole(
	@sessionId	INT,
	@objectName	NVARCHAR(50),	/* userName if objectType is U, groupName if objectType is G */
	@objectType	CHAR(1),	/* Either 'U' (for user) or 'G' (for group) */
	@roleName	NVARCHAR(50)	/* Role Name */
)
AS    
SET NOCOUNT ON    
BEGIN

	Declare @DBStatus		INT
	Declare @tempGroupIndex		INT
	Declare @objectIndex		INT
	Declare @roleIndex		INT

	Select @DBStatus = 0

	/* Check session validity */
	IF NOT EXISTS (
		Select UserID
		FROM WFSessionView, WFUserView 
		WHERE UserId = UserIndex AND SessionID = @sessionId 
		UNION All Select PSID AS UserId
		FROM PSRegisterationTable 
		WHERE SessionID = @sessionId
	)
	Begin
		SELECT @DBStatus = 11		/* Invalid Session Handle */
		SELECT Status = @DBStatus
		RETURN
	End

	/* Check for the existance of user */
	IF (@objectType = 'U')
	Begin
		Select @objectIndex = userIndex FROM PDBUser(NOLOCK) Where userName = @objectName
		If(@@rowcount <= 0 or @@error <> 0)
		Begin
			EXECUTE PRTRaiseError 'PRT_ERR_Target_User_Not_Exist', @DBStatus OUT
			SELECT Status = @DBStatus
			RETURN
		End
	End

	/* Check for the existance of group */
	IF (@objectType = 'G')
	Begin
		Select @objectIndex = groupIndex FROM PDBGroup(NOLOCK) WHERE groupName = @objectName
		If(@@rowcount <= 0 or @@error <> 0)
		Begin
			EXECUTE PRTRaiseError 'PRT_ERR_Group_Not_Found', @DBStatus OUT
			SELECT Status = @DBStatus
			RETURN
		End
	End

	/* Check for the existance of role */
	Select @roleIndex = roleIndex FROM PDBRoles(NOLOCK) WHERE roleName = @roleName
	If(@@rowcount <= 0 or @@error <> 0)
	Begin
		EXECUTE PRTRaiseError 'PRT_ERR_Role_Not_Exist', @DBStatus OUT
		SELECT Status = @DBStatus
		RETURN
	End

	IF (@objectType = 'U')
	Begin
		SELECT @tempGroupIndex = ParentGroupIndex FROM PDBUser 
			WHERE UserIndex = @objectIndex
	End
	Else
	Begin
		SELECT @tempGroupIndex = @objectIndex
	End

	/* Find users who are assigned this role in parent hierarchy */
	WHILE (1 = 1)
	BEGIN
		IF EXISTS (SELECT UserIndex FROM PDBGroupRoles(NOLOCK) WHERE 
				RoleIndex = @roleIndex
				AND GroupIndex  = @tempGroupIndex)
		BEGIN
			SELECT Status = @DBStatus
			SELECT A.UserIndex, B.UserName, C.GroupIndex, C.GroupName 
				FROM PDBGroupRoles A, PDBUser B, PDBGroup C
				WHERE A.RoleIndex = @roleIndex
				AND A.GroupIndex = @tempGroupIndex
				AND A.UserIndex = B.UserIndex
				AND A.GroupIndex = C.GroupIndex
			RETURN
		END
		ELSE
		BEGIN
			IF (@tempGroupIndex = 0)
			BEGIN
				BREAK
			END
			SELECT @tempGroupIndex = ParentGroupIndex FROM PDBGroup(NOLOCK) WHERE GroupIndex = @tempGroupIndex
		END
	END

	EXECUTE PRTRaiseError 'PRT_ERR_No_User_Associated_With_Role', @DBStatus OUT
	SELECT Status = @DBStatus
	RETURN

END

go

Print 'Stored Procedure WFGetUsersForRole compiled successfully ........'

go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group				: Application –Products
	Product / Project		: WorkFlow
	Module				: Transaction Server
	File Name			: WFLockWorkItem.sql
	Programmer			: Ruhi Hira
	Date written (DD/MM/YYYY)	: Sep 30th 2004
	Last Modified By (DD/MM/YYYY)	: Ruhi Hira
	Last Modified On (DD/MM/YYYY)	: Oct 4th 2004
	Description			: Stored Procedure called from 
					  class	 - WMWorkItem.java, method - WFFetchWorkItemsWithLock.
					  This stored procedure first checks workInProcessTable for
					  locked workitems (considering batch size), If records fetched
					  are lesser than (batchSize + 1), workListTable is queried again
					  for workitems.
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
				CHANGE HISTORY
------------------------------------------------------------------------------------------------------

Date			Change By		Change Description (Bug No. (If Any))
29/01/2005		Ruhi Hira		Bug # WFS_5.1_005, failed for queueId greater than 999
						(three digit number).
24/05/2007		Ruhi Hira		Bugzilla Bug 945.
17/05/2013		Shweta Singhal	Process Variant Support Changes
8/01/2014       Anwar Ali Danish  Changes done for code optimization

------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFLockWorkItem')
Begin
	Execute('DROP PROCEDURE WFLockWorkItem')
	Print 'Procedure WFLockWorkItem already exists, hence older one dropped ..... '
End

go

Create Procedure WFLockWorkItem(
	@sessionId			Int,
	@queueId			Int,
	@sortOrder			Char(1),
	@orderBy			Int,
	@batchSize			Int,
	@lastWorkItem			Int,
	@lastProcessInstance		NVarchar(63),
	@lastValue			NVarchar(63),
	@userFilterStr			NVarchar(500)
)	
AS
Begin
	Set NoCount On
	
	If(@batchSize <= 0)
	Begin
		Select MainCode = 18, SubCode = 0, NoOfRecordsFetched = 0, TotalNoOfRecords = 0 -- No more data, as batch size <= 0
		Return
	End

	-- Variables declared .....
	Declare @filterValue		NVarchar(63)
	Declare @filterOption		Int
	Declare @lockedById		Int
	Declare @lockedByName		NVarchar(63)
  	Declare @WF_EQUAL		Int
	Declare @WF_NOTEQ		Int
	Declare @filterStr		NVarchar(300)
	Declare @queueFilterStr		NVarchar(300)
	Declare @lastValueStr		NVarchar(1000)
	Declare @sortFieldStr		NVarchar(50)
	Declare @quoteChar		Char(1)
	Declare @cnt			Int
	Declare @totalNoOfRec		Int
	Declare @sortStr		NVarchar(6)
	Declare @orderByStr		NVarchar(1000)
	Declare @op			Char(1)
	Declare @fetchSize		Varchar(3)
	Declare @processInstanceId	NVarchar(63)
	Declare @workItemId		Int
	Declare @alias			NVarchar(63)
	Declare @toBeFetched		Int

	Set @WF_EQUAL = 2
	Set @WF_NOTEQ = 3
	Set @quoteChar = Char(39)
	Set @queueFilterStr = ''
	Set @fetchSize = 0
	Set @orderByStr = ''
	Set @filterValue = ''
	Set @filterStr = ''
	Set @queueFilterStr = ''
	Set @lastValueStr = ''
	Set @sortFieldStr = ''

	-- Check for validity of session ...
	Select @lockedById = UserID, @lockedByName = UserName From WFSessionView, WFUserView 
	Where UserId = UserIndex And SessionID = @sessionId

	If(@@ERROR <> 0 OR @@ROWCOUNT <= 0)
	Begin
		Select MainCode = 11, SubCode = 0, NoOfRecordsFetched = 0, TotalNoOfRecords = 0 -- Invalid Session
		Return
	End

	-- Add filer on the basis of queue ...
	If (@queueId > 0)
	Begin
		Set @queueFilterStr = ' And q_queueId = ' + Convert(varchar(10), @queueId)
		If(Not Exists(Select * from QUserGroupView where QueueId = @queueId and UserId = @lockedById))
		Begin
			Select MainCode = 18, SubCode = 810, NoOfRecordsFetched = 0, TotalNoOfRecords = 0 -- No queue
			Return
		End
		-- todo : can add check for queueType - D
		Select @filterOption = filterOption, @filterValue = filterValue From QueueDeftable (NOLOCK) Where QueueID = @queueId
		If(@@ROWCOUNT > 0)
		Begin
			If(@filterOption = @WF_EQUAL)
				Set @filterStr = ' And ' + @filterValue + ' = ' + convert(nvarchar(10), @lockedById)
			Else If(@filterOption = @WF_NOTEQ)
				Set @filterStr = ' And ' + @filterValue + ' != ' + convert(nvarchar(10), @lockedById)
		End
	End

	-- Define sortOrder, default is Ascending .... 
	If(@sortOrder = 'D')
	Begin
		Set @sortStr = ' DESC '
		Set @op = '<'
	End
	Else -- If(@sortOrder = 'A')
	Begin
		Set @sortStr = ' ASC '
		Set @op = '>'
	End

	/*
	 Initialize sort order String, Default is PriorityLevel, Assumption : lastValue will be provided by client 
	 (generally 1 for priority level).
	*/
	Set @sortFieldStr = ' PriorityLevel '
	If(@orderBy = 1)
	Begin
		Set @lastValueStr = @lastValue 
		Set @sortFieldStr = ' PriorityLevel '
	End
	Else If(@orderBy = 2)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' ProcessInstanceId '
	End
	Else If(@orderBy = 3)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' ActivityName '
	End
	Else If(@orderBy = 4)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' LockedByName '
	End
	Else If(@orderBy = 5)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' IntroducedBy '
	End
	Else If(@orderBy = 6)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' InstrumentStatus '
	End
	Else If(@orderBy = 7)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' CheckListCompleteFlag '
	End
	Else If(@orderBy = 8)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' LockStatus '
	End
	Else If(@orderBy = 9)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @lastValue
		Set @sortFieldStr = ' WorkItemState '
	End
	Else If(@orderBy = 10)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' EntryDateTime '
	End
	Else If(@orderBy = 11)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' ValidTill '
	End
	Else If(@orderBy = 12)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' LockedTime '
	End
	Else If(@orderBy = 13)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' IntroductionDateTime '
	End
	Else If(@orderBy = 17)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar +  @lastValue + @quoteChar
		Set @sortFieldStr = ' Status '
	End
	Else If(@orderBy = 18)
	Begin
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar + @lastValue + @quoteChar
		Set @sortFieldStr = ' CreatedDateTime '
	End
	Else If(@orderBy > 100) -- todo : do we need to add check for queueId > 0
	Begin
		Execute('Declare VarAliasTable_cur CURSOR FAST_FORWARD FOR ' + 
			' Select alias From VarAliasTable (NOLOCK) Where queueId = ' + @queueId
			)
		Open VarAliasTable_cur
		-- todo : for optimization, dynamic cursor can b used here with fetch absolute........
		--	Generally it is not the case.
		Fetch Next From VarAliasTable_cur Into @alias 
		Set @toBeFetched = 1
		While (@@fetch_status <> -1 OR (@toBeFetched < (@orderBy - 100)))
		Begin
			Set @toBeFetched = @toBeFetched + 1
			Fetch Next From VarAliasTable_cur Into @alias
		End
		Close VarAliasTable_cur
		Deallocate VarAliasTable_cur
		If(@toBeFetched != (@orderBy - 100))
		Begin
			Select MainCode = 800, SubCode = 802, NoOfRecordsFetched = 0, TotalNoOfRecords = 0 -- Illegal parameters
			Return
		End
		If(len(@lastValue) > 0)
			Set @lastValueStr = @quoteChar +  @lastValue + @quoteChar
		Set @sortFieldStr = @alias
	End

	Set @cnt = 0
	Set @totalNoOfRec = 0

	If(@orderBy = 2)
		Set @orderByStr = ' ORDER BY ProcessInstanceID ' + @sortStr + ', WorkItemID ' + @sortStr
	Else 
		Set @orderByStr = ' ORDER BY ' + @sortFieldStr + @sortStr + ', ProcessInstanceID ' + @sortStr 
			+ ', WorkItemID ' + @sortStr
	If(len(@lastProcessInstance) > 0)
	Begin
		If(len(@lastValue) > 0)
			Set @orderByStr = ' AND ( ( ' + @sortFieldStr + ' = ' + @lastValueStr + ' AND ProcessInstanceID = ' + 
					@quoteChar + @lastProcessInstance + @quoteChar + ' AND WorkItemID ' + @op + ' ' + 
					convert(varchar(10), @lastWorkItem) + ' ) OR  ( ' + @sortFieldStr + ' = ' + @lastValueStr +
					' AND ProcessInstanceID ' + @op + @quoteChar + @lastProcessInstance + @quoteChar + 
					'  ) OR ( ' + @sortFieldStr + @op + @lastValueStr + ' ) ) ' + @orderByStr
		Else If(@sortOrder = 'A') 
			Set @orderbyStr = ' AND ( ( ' + @sortFieldStr + ' is null AND ProcessInstanceID = ' +
					@quoteChar + @lastProcessInstance + @quoteChar + ' AND WorkItemID ' + @op + 
					convert(varchar(10), @lastWorkItem) + ' ) OR  ( ' + @sortFieldStr + ' is null AND ProcessInstanceID ' + @op + 
					@quoteChar + @lastProcessInstance + @quoteChar + '  ) OR ( ' +
					@sortFieldStr + ' is not null ) ) ' + @orderByStr
		Else 
			Set @orderbyStr = ' AND ( ( ' + @sortFieldStr + ' is null AND ProcessInstanceID = ' + 
					@quoteChar + @lastProcessInstance + @quoteChar + ' AND WorkItemID ' + @op + 
					convert(varchar(10), @lastWorkItem) + ' ) OR  ( ' + @sortFieldStr + ' is null AND ProcessInstanceID ' + @op + 
					@quoteChar + @lastProcessInstance + @quoteChar + ' )) ' + @orderByStr

	End
	
	-- tempTable created to hold processInstanceId and workItemId of workitems to move
	-- Important : drop the table before returning !!!
	Create Table #tempTable(
		processInstanceId		NVarchar(63),
		workItemId				Int
	)
	
	Set @fetchSize = Convert(Varchar(10), (@batchSize + 1))
	
	/*Execute ('Declare WorkItem_Cur CURSOR FAST_FORWARD FOR ' +
		' Select TOP ' + @fetchSize + 
		' processInstanceId, workItemId ' + ' From WorkInProcessTable Where LockedByName = ' + 
		@quoteChar + @lockedByName + @quoteChar + @queuefilterStr + @filterStr + @userFilterStr + @orderbyStr
		)*/
	Execute ('Declare WorkItem_Cur CURSOR FAST_FORWARD FOR ' +
		' Select TOP ' + @fetchSize + 
		' processInstanceId, workItemId ' + ' From WFINSTRUMENTTABLE Where '
		+'LockStatus = ''Y'' AND RoutingStatus = ''N'' AND LockedByName = ' + 
		@quoteChar + @lockedByName + @quoteChar + @queuefilterStr + @filterStr + @userFilterStr + @orderbyStr
		)
	Open WorkItem_cur
	Fetch Next From WorkItem_cur Into @processinstanceid, @workitemid
	While (@@fetch_status <> -1)
	Begin
		If (@@fetch_status <> -2)
		Begin
			If(@cnt < @batchSize)
			Begin
				Insert into #tempTable values (@processInstanceId, @workitemId)
				If(@@error <> 0)
				Begin
					Execute('Drop table #tempTable')
					Return
				End
				Set @cnt = @cnt + 1
			End
			Set @totalNoOfRec = @totalNoOfRec + 1
		End
		Fetch Next From Workitem_cur Into @processInstanceId, @workitemId
	End
	Close WorkItem_cur
	Deallocate WorkItem_cur

	If(@totalNoOfRec <= @batchSize)
	Begin
		Begin Transaction WorkList_To_WorkInProcess
			Set @fetchSize = Convert(Varchar(10), (@batchSize + 1 - @cnt))

			-- todo : to be reviewed
			-- Important : Query modified, q_userId check was not there previously in java file...
			Execute ('Declare WorkItem_Cur CURSOR FAST_FORWARD FOR ' + 
				' Select TOP ' + @fetchSize + ' processInstanceId, workItemId ' + 
				' From WFINSTRUMENTTABLE Where ( WorkItemState < 4 OR WorkItemState > 6 ) ' + 
				@queueFilterStr + @filterStr + @userFilterStr + 
				' And (q_userId is null OR q_userId in ( 0, ' + @lockedById + ' ) )' + @orderbyStr
				)
			OPEN WorkItem_Cur
			Fetch Next From Workitem_cur Into @processInstanceId, @workitemId
			WHILE (@@FETCH_STATUS <> -1)
			BEGIN
				IF (@@FETCH_STATUS <> -2) 
				BEGIN
					Set @totalNoOfRec = @totalNoOfRec + 1
					If(@cnt < @batchSize)
					Begin
						Insert into #tempTable values (@processInstanceId, @workitemId)
						Set @cnt = @cnt + 1
						/*Process Variant Support Changes*/
						/*Insert into WorkInProcessTable(
							ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, 
							ProcessDefID, LastProcessedBy, ProcessedBy, ActivityName, 
							ActivityId, EntryDateTime, ParentWorkItemId, AssignmentType,
							CollectFlag, PriorityLevel, ValidTill, Q_StreamId, 
							Q_QueueId, Q_UserId, AssignedUser, FilterValue, 
							CreatedDateTime, WorkItemState, Statename, ExpectedWorkitemDelay, 
							PreviousStage, LockedByName, LockStatus, LockedTime, 
							Queuename, Queuetype, NotifyStatus, Guid, ProcessVariantId
							) 
							Select 
							ProcessInstanceId, WorkItemId, ProcessName, ProcessVersion, 
							ProcessDefID, LastProcessedBy, ProcessedBy, ActivityName,
							ActivityId, EntryDateTime, ParentWorkItemId, AssignmentType,
							CollectFlag, PriorityLevel, ValidTill, Q_StreamId, 
							Q_QueueId, @lockedById, AssignedUser, FilterValue, 
							CreatedDateTime, 2, Statename, ExpectedWorkitemDelay, 
							PreviousStage, @lockedByName, 'Y', getDate(), 
							Queuename, Queuetype, NotifyStatus, null, ProcessVariantId
							From Worklisttable Where ProcessInstanceID = RTrim(LTrim(@processInstanceId))
							and WorkItemID = convert(int, @workItemId)*/
							
						Update WFINSTRUMENTTABLE set Q_UserId = @lockedById , WorkItemState = 2 , LockedByName = @lockedByName , LockStatus = 'Y' , LockedTime = getDate() , Guid = null Where ProcessInstanceID = RTrim(LTrim(@processInstanceId))
						and WorkItemID = convert(int, @workItemId) and LockStatus = 'N' and RoutingStatus = 'N'
							

						If( @@Error <> 0 OR @@rowcount <= 0 )
						Begin
							RollBack Transaction WorkList_To_WorkInProcess
							Execute('Drop table #tempTable')
							-- Fatal Error, Operation failed
							Select MainCode = 825, SubCode = 400, NoOfRecordsFetched = 0, TotalNoOfRecords = 0
							Return 
						End

						/*Delete From WorkListTable Where ProcessInstanceID = RTrim(LTrim(@processInstanceId)) 
							and WorkItemID = convert(int, @workItemId)
						If( @@Error <> 0 OR @@rowcount <= 0 )
						Begin
							RollBack Transaction WorkList_To_WorkInProcess
							Execute('Drop table #tempTable')
							-- Fatal Error, Operation failed
							Select MainCode = 825, SubCode = 400, NoOfRecordsFetched = 0, TotalNoOfRecords = 0
							Return 
						End*/
					End
				End
				Fetch Next From Workitem_cur Into @processInstanceId, @workitemId
			End
			Close Workitem_cur
			Deallocate Workitem_cur

		Commit Transaction WorkList_To_WorkInProcess
	End
	-- Success !! Fetching data to return ...
	Select MainCode = 0, SubCode = 0, NoOfRecordsFetched = @cnt, TotalNoOfRecords = @totalNoOfRec
	/*Execute('Select * from wfWorkListView_' + @queueId + 
		' Inner Join #tempTable ON wfWorkListView_' + @queueId + '.processInstanceId = #tempTable.processInstanceId ' +
		' and wfWorkListView_' + @queueId + '.workItemId = #tempTable.workItemId ' 
		)*/
	Execute('Select * from(select ProcessInstanceId,ProcessInstanceId as 
		ProcessInstanceName,ProcessDefId,ProcessName,ActivityId,ActivityName,PriorityLevel,InstrumentStatus,LockStatus,LockedByName,ValidTill,CreatedByName,CreatedDateTime,Statename,CheckListCompleteFlag,EntryDateTime,LockedTime,IntroductionDateTime,IntroducedBy,AssignedUser, WorkItemId,QueueName,AssignmentType,ProcessInstanceState,QueueType,Status,Q_QueueID, DATEDIFF(HH,entrydatetime, ExpectedWorkItemDelay) as TurnaroundTime,ReferredByname, 0 as ReferTo, Q_UserID,FILTERVALUE,Q_StreamId,CollectFlag,ParentWorkItemId,ProcessedBy,LastProcessedBy,ProcessVersion,
		WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkitemDelay,VAR_INT1,VAR_INT2,VAR_INT3,VAR_INT4,VAR_INT5,VAR_INT6,VAR_INT7,VAR_INT8,VAR_LONG1,VAR_LONG2,VAR_LONG3,VAR_LONG4 from WFINSTRUMENTTABLE where Q_QueueId = ' + 
		@queueId +' and RoutingStatus = ''N'')tmp 
		Inner Join #tempTable ON tmp.ProcessInstanceId = #tempTable.processInstanceId and
		tmp.workItemId = #tempTable.workItemId ')
		
	Execute('Drop Table #tempTable')
	Return
End

go

Print 'Stored Procedure WFLockWorkItem compiled successfully ........'

go

/*____________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
______________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: WorkFlow 6.2 
	Module				: WorkFlow Server 
	File Name			: WFSearchMove.sql [SQL Server] 
	Author				: Vikram Kumbhar
	Date written (DD/MM/YYYY)	: 28/05/2008 
	Description			: Stored procedure for Optimized Search to move records 
					  from all tables that satisfying specified condition  
					  into WFTempSearchTable which is a global temporary 
					  table. (WFS_6.2_023)
______________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________ 
Date			Change By		Change Description (Bug No. (If Any)) 
08/10/2009		Nishant Singh		Adavance search giving error after clicking next and previous batch. final string size become more than declared size variable in this SP.
23/11/2015		Mohnish Chopra	Changes for Bug 57633 - view is not proper while opening any workitem from quick search result.
								Sending ActivityType in SearchWorkItemList API so that Case view can be opened for ActivityType 32.
09-05-2017	Sajid Khan			Queue Varaible Extension Enahncement
28/12/2017    Kumar Kimil     Bug 74287-EAP6.4+SQL: Search on URN is not working proper
28/12/2017    Kumar Kimil     Bug 72882-WBL+Oracle: Incorrect workitem count is showing in quick search result.
______________________________________________________________________________________________ 
____________________________________________________________________________________________*/ 

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFSearchMove') 
Begin 
	Execute('DROP PROCEDURE WFSearchMove') 
	Print 'Procedure WFSearchMove already exists, hence older one dropped ..... ' 
End 

go 

CREATE PROCEDURE WFSearchMove(
	@DBQueryStr			ntext
)
AS     
BEGIN
	DECLARE @DBStatus		INT
	DECLARE @ProcessInstanceId	NVARCHAR (63)
	DECLARE @URN	NVARCHAR (63)
	DECLARE @ProcessdefId		INT
	DECLARE @ProcessName		NVARCHAR(30)
	DECLARE @ActivityId		INT
	DECLARE @ActivityName		NVARCHAR(30)
	DECLARE @PriorityLevel		SMALLINT
	DECLARE @InstrumentStatus	NVARCHAR(1)
	DECLARE @LockStatus		NVARCHAR(1)
	DECLARE @LockedByName		NVARCHAR(63)
	DECLARE @ValidTill		DATETIME
	DECLARE @CreatedByName		NVARCHAR(63)
	DECLARE @CreatedDateTime	DATETIME
	DECLARE @StateName		NVARCHAR(255)
	DECLARE @CheckListCompleteFlag	NVARCHAR(1)
	DECLARE @EntryDateTime		DATETIME
	DECLARE @LockedTime		DATETIME
	DECLARE @IntroductionDateTime	DATETIME
	DECLARE @IntroducedBy		NVARCHAR(63)
	DECLARE @AssignedUser		NVARCHAR(63)
	DECLARE @WorkitemId		INT
	DECLARE @QueueName		NVARCHAR(63)
	DECLARE @AssignmentType		NVARCHAR(1)
	DECLARE @ProcessInstanceState	INT
	DECLARE @QueueType		NVARCHAR(1)
	DECLARE @Status			NVARCHAR(255)
	DECLARE @Q_QueueId		INT
	DECLARE @TurnAroundTime		INT
	DECLARE @ReferredBy		INT
	DECLARE @ReferredTo		INT
	DECLARE @Q_UserId		INT
	DECLARE @ParentWorkitemId	INT
	DECLARE @ProcessedBy		NVARCHAR(63)
	DECLARE @ProcessVersion		SMALLINT
	DECLARE @WorkItemState		INT
	DECLARE @ExpectedProcessDelay	DATETIME
	DECLARE @ExpectedWorkItemDelay	DATETIME

	DECLARE @VAR_INT1		SMALLINT
	DECLARE @VAR_INT2		SMALLINT
	DECLARE @VAR_INT3		SMALLINT
	DECLARE @VAR_INT4		SMALLINT
	DECLARE @VAR_INT5		SMALLINT
	DECLARE @VAR_INT6		SMALLINT
	DECLARE @VAR_INT7		SMALLINT
	DECLARE @VAR_INT8		SMALLINT
	DECLARE @VAR_FLOAT1		NUMERIC(15, 2)
	DECLARE @VAR_FLOAT2		NUMERIC(15, 2)
	DECLARE @VAR_DATE1		DATETIME
	DECLARE @VAR_DATE2		DATETIME
	DECLARE @VAR_DATE3		DATETIME
	DECLARE @VAR_DATE4		DATETIME
	DECLARE @VAR_DATE5		DATETIME
	DECLARE @VAR_DATE6		DATETIME
	DECLARE @VAR_LONG1		INT
	DECLARE @VAR_LONG2		INT
	DECLARE @VAR_LONG3		INT
	DECLARE @VAR_LONG4		INT
	DECLARE @VAR_LONG5		INT
	DECLARE @VAR_LONG6		INT
	DECLARE @VAR_STR1		NVARCHAR(255)
	DECLARE @VAR_STR2		NVARCHAR(255)
	DECLARE @VAR_STR3		NVARCHAR(255)
	DECLARE @VAR_STR4		NVARCHAR(255)
	DECLARE @VAR_STR5		NVARCHAR(255)
	DECLARE @VAR_STR6		NVARCHAR(255)
	DECLARE @VAR_STR7		NVARCHAR(255)
	DECLARE @VAR_STR8		NVARCHAR(255)
	DECLARE @VAR_STR9		NVARCHAR(255)
	DECLARE @VAR_STR10		NVARCHAR(255)
	DECLARE @VAR_STR11		NVARCHAR(255)
	DECLARE @VAR_STR12		NVARCHAR(255)
	DECLARE @VAR_STR13		NVARCHAR(255)
	DECLARE @VAR_STR14		NVARCHAR(255)
	DECLARE @VAR_STR15		NVARCHAR(255)
	DECLARE @VAR_STR16		NVARCHAR(255)
	DECLARE @VAR_STR17		NVARCHAR(255)
	DECLARE @VAR_STR18		NVARCHAR(255)
	DECLARE @VAR_STR19		NVARCHAR(255)
	DECLARE @VAR_STR20		NVARCHAR(255)
	DECLARE @VAR_REC1		NVARCHAR(255)
	DECLARE @VAR_REC2		NVARCHAR(255)
	DECLARE @VAR_REC3		NVARCHAR(255)
	DECLARE @VAR_REC4		NVARCHAR(255)
	DECLARE @VAR_REC5		NVARCHAR(255)
	DECLARE @ActivityType		INT

	EXECUTE ('DECLARE CursorSearchTable CURSOR FAST_FORWARD FOR ' + @DBQueryStr)

	OPEN	CursorSearchTable 

	FETCH	CursorSearchTable 
	INTO	@PROCESSINSTANCEID, @QUEUENAME, @PROCESSNAME, @PROCESSVERSION,  
		@ACTIVITYNAME, @STATENAME, @CHECKLISTCOMPLETEFLAG, @ASSIGNEDUSER, 
		@ENTRYDATETIME, @VALIDTILL, @WORKITEMID, @PRIORITYLEVEL, 
		@PARENTWORKITEMID, @PROCESSDEFID, @ACTIVITYID, @INSTRUMENTSTATUS, 
		@LOCKSTATUS, @LOCKEDBYNAME, @CREATEDBYNAME, @CREATEDDATETIME, 
		@LOCKEDTIME, @INTRODUCTIONDATETIME, @INTRODUCEDBY, @ASSIGNMENTTYPE, 
		@PROCESSINSTANCESTATE, @QUEUETYPE, @STATUS, @Q_QUEUEID, @TURNAROUNDTIME,
		@REFERREDBY, @REFERREDTO, @ExpectedProcessDelay, @ExpectedWorkitemDelay,
		@PROCESSEDBY, @Q_USERID, @WORKITEMSTATE, @ActivityType,@URN,@VAR_INT1, @VAR_INT2, @VAR_INT3,
		@VAR_INT4, @VAR_INT5, @VAR_INT6, @VAR_INT7, @VAR_INT8, @VAR_FLOAT1,
		@VAR_FLOAT2, @VAR_DATE1, @VAR_DATE2, @VAR_DATE3, @VAR_DATE4,@VAR_DATE5, @VAR_DATE6, @VAR_LONG1,
		@VAR_LONG2, @VAR_LONG3, @VAR_LONG4,@VAR_LONG5, @VAR_LONG6, @VAR_STR1, @VAR_STR2, @VAR_STR3,
		@VAR_STR4, @VAR_STR5, @VAR_STR6, @VAR_STR7, @VAR_STR8,@VAR_STR9, @VAR_STR10, @VAR_STR11,@VAR_STR12, @VAR_STR13, @VAR_STR14, @VAR_STR15, @VAR_STR16, @VAR_STR17, @VAR_STR18, @VAR_STR19, @VAR_STR20, @VAR_REC1, 
		@VAR_REC2, @VAR_REC3, @VAR_REC4, @VAR_REC5

	IF (@@Fetch_Status = -1 OR  @@Fetch_Status = -2) 
	BEGIN 
		CLOSE CursorSearchTable 
		DEALLOCATE CursorSearchTable 
		RETURN 
	END 

	WHILE(@@FETCH_STATUS <> -1) 
	BEGIN 
		IF(@@FETCH_STATUS <> -2) 
		BEGIN
			INSERT INTO #TempSearchTable 
			VALUES (@PROCESSINSTANCEID, @QUEUENAME, @PROCESSNAME, @PROCESSVERSION, 
				@ACTIVITYNAME, @STATENAME, @CHECKLISTCOMPLETEFLAG, @ASSIGNEDUSER, 
				@ENTRYDATETIME, @VALIDTILL, @WORKITEMID, @PRIORITYLEVEL, 
				@PARENTWORKITEMID, @PROCESSDEFID, @ACTIVITYID, @INSTRUMENTSTATUS, 
				@LOCKSTATUS, @LOCKEDBYNAME, @CREATEDBYNAME, @CREATEDDATETIME, 
				@LOCKEDTIME, @INTRODUCTIONDATETIME, @INTRODUCEDBY, @ASSIGNMENTTYPE, 
				@PROCESSINSTANCESTATE, @QUEUETYPE, @STATUS, @Q_QUEUEID, 
				@TURNAROUNDTIME, @REFERREDBY, @REFERREDTO, @ExpectedProcessDelay, 
				@ExpectedWorkitemDelay, @PROCESSEDBY, @Q_USERID, @WORKITEMSTATE,
				@ActivityType,@URN,@VAR_INT1, @VAR_INT2, @VAR_INT3, @VAR_INT4, @VAR_INT5, @VAR_INT6,
				@VAR_INT7, @VAR_INT8, @VAR_FLOAT1, @VAR_FLOAT2, @VAR_DATE1,
				@VAR_DATE2 ,@VAR_DATE3, @VAR_DATE4,@VAR_DATE5, @VAR_DATE6, @VAR_LONG1, @VAR_LONG2,
				@VAR_LONG3, @VAR_LONG4,@VAR_LONG5, @VAR_LONG6, @VAR_STR1, @VAR_STR2, @VAR_STR3, @VAR_STR4,
				@VAR_STR5, @VAR_STR6, @VAR_STR7, @VAR_STR8,@VAR_STR9, @VAR_STR10, @VAR_STR11,@VAR_STR12, @VAR_STR13, @VAR_STR14, @VAR_STR15, @VAR_STR16, @VAR_STR17, @VAR_STR18, @VAR_STR19, @VAR_STR20, @VAR_REC1, @VAR_REC2,
				@VAR_REC3, @VAR_REC4, @VAR_REC5)
			IF (@@ERROR <> 0 OR @@ROWCOUNT = 0)
			BEGIN
				SELECT @DBStatus = 1
			END
		END

		FETCH	CursorSearchTable 
		INTO	@PROCESSINSTANCEID, @QUEUENAME, @PROCESSNAME, @PROCESSVERSION,  
			@ACTIVITYNAME, @STATENAME, @CHECKLISTCOMPLETEFLAG, @ASSIGNEDUSER, 
			@ENTRYDATETIME, @VALIDTILL, @WORKITEMID, @PRIORITYLEVEL, 
			@PARENTWORKITEMID, @PROCESSDEFID, @ACTIVITYID, @INSTRUMENTSTATUS, 
			@LOCKSTATUS, @LOCKEDBYNAME, @CREATEDBYNAME, @CREATEDDATETIME, 
			@LOCKEDTIME, @INTRODUCTIONDATETIME, @INTRODUCEDBY, @ASSIGNMENTTYPE, 
			@PROCESSINSTANCESTATE, @QUEUETYPE, @STATUS, @Q_QUEUEID, @TURNAROUNDTIME,
			@REFERREDBY, @REFERREDTO, @ExpectedProcessDelay, @ExpectedWorkitemDelay,
			@PROCESSEDBY, @Q_USERID, @WORKITEMSTATE,@ActivityType,@URN, @VAR_INT1, @VAR_INT2, @VAR_INT3,
			@VAR_INT4, @VAR_INT5, @VAR_INT6, @VAR_INT7, @VAR_INT8, @VAR_FLOAT1,
			@VAR_FLOAT2, @VAR_DATE1, @VAR_DATE2, @VAR_DATE3, @VAR_DATE4,@VAR_DATE5, @VAR_DATE6, @VAR_LONG1,
			@VAR_LONG2, @VAR_LONG3, @VAR_LONG4,@VAR_LONG5, @VAR_LONG6, @VAR_STR1, @VAR_STR2, @VAR_STR3,
			@VAR_STR4, @VAR_STR5, @VAR_STR6, @VAR_STR7, @VAR_STR8,@VAR_STR9, @VAR_STR10, @VAR_STR11,@VAR_STR12, @VAR_STR13, @VAR_STR14, @VAR_STR15, @VAR_STR16, @VAR_STR17, @VAR_STR18, @VAR_STR19, @VAR_STR20, @VAR_REC1, 
			@VAR_REC2, @VAR_REC3, @VAR_REC4, @VAR_REC5
		IF @@ERROR <> 0 
		BEGIN 
			CLOSE CursorSearchTable 
			DEALLOCATE CursorSearchTable 
			RETURN 
		END 
	END 
	CLOSE CursorSearchTable 
	DEALLOCATE CursorSearchTable
END

go 

Print 'Stored Procedure WFSearchMove compiled successfully ........'

go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group				: Phoenix
	Product / Project		: OmniFlow 7.2
	Module				: Transaction Server
	File Name			: WFLockMessage.sql (MSSQL)
	Author				: Ashish Mangla
	Date written (DD/MM/YYYY)	: 11/07/2008
	Description			: Stored procedure to lock message
					  (invoked from WFInternal.java).
______________________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________________
 Date		Change By		Change Description (Bug No. (If Any))
 28/01/2014		Shweta Singhal	UPDLock replaced with UPDLock, READPAST
 03-05-2014		Sajid Khan		Bug 44499 - INT to BIGINT changes for Audit Tables.
____________________________________________________________________________________________________*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFLockMessage')
Begin
	Execute('DROP PROCEDURE WFLockMessage')
	Print 'Procedure WFLockMessage already exists, hence older one dropped ..... '
End

go

CREATE  PROCEDURE WFLockMessage(
	@UtilId			NVARCHAR(65),  
	@messageCount		INT
)     
AS     
SET NOCOUNT ON     
BEGIN  
	DECLARE @quoteChar			char(1)  
	SET @quoteChar = char(39)  
 
	Select TOP 1 messageId, ActionDateTime, message From WFMessageInProcessTable with (NOLOCK)  
	where lockedBy = @utilId  

	IF(@@ROWCOUNT <= 0)  
	BEGIN  
		declare @messId_temp bigint  
		declare @messageIdStr varchar(8000)  
		declare @cntr int  
		declare @firstMessageId bigint  
		set @cntr = 0  
		set @messageIdStr = ''  
		set @firstMessageId = 0  
		BEGIN TRANSACTION LOCK  
			 EXECUTE('DECLARE message_cur CURSOR FAST_FORWARD FOR  
				 Select Top ' + @messageCount + ' messageId ' +  
				' From WFMessageTable WITH (UPDLOCK,READPAST)')  
				OPEN message_cur  
			IF @@Error <> 0  
			BEGIN  
				ROLLBACK TRANSACTION LOCK  
				SELECT 0, getDate(), 'Cursor Failed.'  
				RETURN  
			END  
			FETCH NEXT FROM message_cur INTO @messId_temp  
			WHILE(@@FETCH_STATUS <> -1)  
			BEGIN  
				IF (@@FETCH_STATUS <> -2)  
				BEGIN  
					if(@cntr > 0)  
					begin  
						set @messageIdStr = @messageIdStr + ', '  
					end  
					else  
					begin  
						set @firstMessageId = @messId_temp  
					end  
					set @messageIdStr = @messageIdStr + convert(varchar(12), @messId_temp)  
					set @cntr = @cntr + 1  
				END  
				FETCH NEXT FROM message_cur INTO @messId_temp  
			END  
			CLOSE message_cur  

			DEALLOCATE message_cur  
			IF(@cntr <= 0)  
			BEGIN  
				ROLLBACK TRANSACTION LOCK  
				SELECT 0, getDate(), 'NO_MORE_DATA'  
				RETURN  
			END  

			EXECUTE ('Insert into WFMessageInProcessTable Select messageId, message, '   
				+ @quoteChar + @UtilId + @quoteChar  
				+ ', ''L'', ActionDateTime From WFMessageTable (NOLOCK) where messageId in ( ' + @messageIdStr + ' )')  
			IF @@Error <> 0   
			BEGIN  
				ROLLBACK TRANSACTION LOCK  
				SELECT 0, getDate(), 'Insert Failed.'  
				RETURN  
			END  
			EXECUTE ('Delete From WFMessageTable Where messageId in ( ' + @messageIdStr + ' )')  
			IF @@Error <> 0   
			BEGIN  
				ROLLBACK TRANSACTION LOCK  
				SELECT 0, getDate(), 'Delete Failed.'  
				RETURN  
			END  
		COMMIT TRANSACTION LOCK  
		Select messageId, ActionDateTime, message From WFMessageInProcessTable where messageId = @firstMessageId  
	END  
	ELSE  
	RETURN  
END
		
go

Print 'Stored Procedure WFLockMessage compiled successfully ........'

go

/*__________________________________________________________________________________________________________________-
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
____________________________________________________________________________________________________________________-
	Group				: Application – Products
	Product / Project		: WorkFlow 5.0
	Module				: Transaction Server
	File Name			: WFProcessMessageExt.sql
	Author				: Ruhi Hira
	Date written (DD/MM/YYYY)	: 02/08/2004
	Description			: This stored procedure is called from WFProcessNextMessage (WFIneternal.java).

______________________________________________________________________________________________________________________-
				CHANGE HISTORY
______________________________________________________________________________________________________________________-

Date			Change By		Change Description (Bug No. (If Any))
20/09/2004		Ruhi Hira		Queries rectified.
20/10/2004		Ruhi Hira		- Changes made for diversion.
						- Bug related to ActionId 8, (TotalWICount to be inserted should be 1).
25/10/2004		Harmeet			Bug related to Exception report generation, rectified (action Id 9).
28/10/2004		Ashish Mangla		AssociatedFieldName length increased
1/11/2004		Ruhi Hira		ActionId to be inserted should be 27 in case of 8 in SummaryTable.
1/11/2004		Ruhi Hira		- No need to insert into QueueHistoryTable in case of actionId 25.
						- AssociatedFieldId inserted in case of actionId 9 and 10.
09/11/2004		Krishan			DelayTime report bug for ProcessInstance rectified.
02/06/2005		Harmeet Kaur		Bug No WFS_6_013.
05/08/2005              Mandeep Kaur		SRNo-1(Bug Ref No WFS_5_047)
08/08/2005              Mandeep Kaur		SRNo-2(Bug Ref No WFS_5_053)
18/08/2005		Ruhi Hira		SrNo-3.
16/05/2006		Ashish Mangla		Support for Hourly Report
30/01/2007		Ruhi Hira		Bugzilla Id 460.
08/02/2007		Varun Bhansaly		Bugzilla Id 74 (Inconsistency in date-time)
15/03/2007		Ashish Mangla		Processing time should be added in summrytable / new table WFActivitytyReportTable when WI completes 
						- Till that time keep the processing time spent by a user in a separate table 
							that to be deleted when the WI completes
23/05/2007		Ruhi Hira		Bugzilla Bug 918, No more managed connection.
24/05/2007		Ruhi Hira		Bugzilla Bug 945.
29/01/2008		Varun Bhansaly	Bugzilla Id 74
17/05/2013		Shweta Singhal	Process Variant Support Changes
19/06/2013		Sajid Khan		Bug 39903 - Summary table queries and indexes to be modified 
23/12/2013		Sajid Khan		Message Agent Optimizaion.
03-05-2014		Sajid Khan		Bug 44499 - INT to BIGINT changes for Audit Tables.
10/08/2015		Anwar Danish	PRD Bug 51267 merged - Handling of new ActionIds and optimize usage of current ActionIds regarding OmniFlow Audit Logging functionality.
10/03/2017                 Sajid Khan             Bug 67568 - Deletion of Audit Logs after audit trail archieve.
______________________________________________________________________________________________________________________-
____________________________________________________________________________________________________________________-*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFProcessMessageExt')
Begin
	Execute('DROP PROCEDURE WFProcessMessageExt')
	Print 'Procedure WFProcessMessageExt already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFProcessMessageExt( 
	@DBActionId		SMALLINT,     
	@DBUserId		INT, 
	@DBProcessDefId		INT,    
	@DBActivityId		INT,    
	@DBQueueId		INT,    
	@DBUserName		NVARCHAR(63), 
	@DBActivityName		NVARCHAR(30), 
	@DBSummaryActId		INT,
	@DBSummaryActName	NVARCHAR(30), 
	@DBTotalWiCount		INT,    
	@DBTotalDuration	INT,    
	@DBProcessInstance	NVARCHAR(65),     
	@DBFieldId		INT,     
	@DBFlag			INT,    
	@DBWorkitemId		INT,    
	@DBTotalPrTime		INT,    
	@DBFieldName		NVARCHAR(2000), 
	@DBNewValue		NVARCHAR(2000), 
	@DBActionDateTime	NVARCHAR(50),      
	@DBAssociatedDateTime	NVARCHAR(50),      
	@DBDelayTime		INT,    
	@DBWKInDelay		INT,    
	@DBReportType		NVARCHAR(1),    
	@msgId			BigInt,    
	@UtilId			NVARCHAR(65), 
	@deleteFlag		INT	,	/* 1 record to be deleted from wfmessageTable , 2 not to be deleted	*/
						/* placed for case setAttribute(more than one in single message)	*/
	@ProcessVariantId	INT					/*Process Variant Support Changes*/
)    
AS    
SET NOCOUNT ON    
BEGIN 
	Declare @QuoteChar		CHAR
	DECLARE @TotPrTimeTillNow	INT 
	DECLARE @TotPrTimeActivity	INT 
	DECLARE @rst			INT    

	declare @fieldIdValue	NVARCHAR(50)
	declare @wherestr NVARCHAR(150)
	declare @vDBActivityId int
	declare @vDBUserId int
	declare @vDBQueueId int
	declare @vActionDateTimeStart	NVARCHAR(50)
	declare @vActionDateTimeEnd	NVARCHAR(50)      	
	


	SET @vDBActivityId = @DBSummaryActId
	SET @vDBUserId = @DBUserId
	SET @vDBQueueId = @DBQueueId
	SET @wherestr = null
	SET @fieldIdValue = null

	select  @rst = 0 
	SELECT	@QuoteChar = char(39)


      /* @DBFlag = 1 entry Only in currentroutelogtable
	 @DBFlag = 2 entry only in summaryTable
	 @DBFlag = 3 entry in both currentRouteLogTable and SummaryTable
	*/
--	 IF (@deleteFlag = 1) 
--	 BEGIN
		Begin Transaction PROCESS	/*Otherwise transaction has been opened in API itself e.g. setAttribute...*/
--	 END

	/* SrNo-3, Omniflow 6.0 Feature : Escalation - Ruhi Hira */
	

	/*IF (@DBFlag = 1 OR @DBFlag = 3)	For insertion in currentRouteLogTable
	BEGIN
		Insert into WFCurrentRouteLogTable (ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, 
			ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId, AssociatedFieldName, ActivityName, 
			UserName, NewValue, QueueId, ProcessVariantId) 
		values (@DBProcessDefId, @DBActivityId, @DBProcessInstance, @DBWorkitemId, @DBUserId, 
			@DBActionId, @DBActionDateTime, @DBAssociatedDateTime, @DBFieldId, @DBFieldName, @DBActivityName, 
			@DBUserName, @DBNewValue, @DBQueueId, @ProcessVariantId)
		
		IF(@@rowcount <= 0)  
		BEGIN 
			ROLLBACK TRANSACTION PROCESS 
		/* SRNo-1 Insert on MessageTable taking time   -By Mandeep Kaur */
		/* Changed By Varun Bhansaly On 08/02/2007 For Bugzilla Bug Id 74*/
			BEGIN TRANSACTION FAILED 
				Insert Into WFFailedMessageTable(MessageId,Message,lockedBy,status,failuretime,actiondatetime)  
					Select messageId, message, null, 'F', getDate(), ActionDateTime 
					From WFMessageInProcessTable  
					Where MessageId = @msgid 
				Delete From WFMessageInProcessTable Where MessageId = @msgid 
			COMMIT TRANSACTION FAILED 
			SELECT 0, 'Insert Failed 1.' 
			RETURN 
		END 
	END*/
	
	If(@DBActionId = 20 OR @DBActionId = 3 ) 
	Begin 
		update wfaudittraildoctable set status = 'R' 
		Where processInstanceId = coalesce(@DBProcessInstance, '') 
		AND workitemId = coalesce(@DBWorkitemId, 0) 
	End
		
	IF (@DBFlag = 2 OR @DBFlag = 3)	/*For insertion in SummaryTable*/
	BEGIN    
		IF(@DBActionId  = 8)    /* Total WI count should not be increased for processing time addition in SummaryTable */
		BEGIN    
			UPDATE WFReportDataTable SET 
				totalprocessingtime = totalprocessingtime + @DBTotalPrTime 
			WHERE processInstanceId = @DBProcessInstance 
				AND workitemId = @DBWorkitemId 
				AND processdefid =  @DBProcessDefId 
				AND activityid = @DBSummaryActId 
				AND Userid = @DBUserId 

			IF @@ROWCOUNT = 0 
			BEGIN 
				INSERT INTO WFReportDataTable 
					(processInstanceId, workitemId, processdefid, activityid, userid, totalprocessingtime, processvariantid) 
				VALUES 
					(@DBProcessInstance, @DBWorkitemId, @DBProcessDefId, @DBSummaryActId, @DBUserId, @DBTotalPrTime, @ProcessVariantId) /*Process Variant Support Changes*/
				IF(@@rowcount <= 0) 
				BEGIN 
					ROLLBACK TRANSACTION PROCESS 
					BEGIN TRANSACTION FAILED 
						Insert Into WFFailedMessageTable(MessageId,Message,lockedBy,status,failuretime,actiondatetime) 
							Select messageId, message, null, 'F', getDate(), ActionDateTime 
							From WFMessageInProcessTable  
							Where MessageId = @msgid 
						Delete From WFMessageInProcessTable Where MessageId = @msgid 
					COMMIT TRANSACTION FAILED 
					SELECT 0, 'Insert Failed 5.' 
					RETURN 
				END 
			END 
		END    
		ELSE
		BEGIN
			IF(@DBActionId  = 2 OR  @DBActionId  = 27) 
			BEGIN 
				SELECT	@TotPrTimeTillNow = TotalProcessingTime 
				FROM	WFReportDataTable 
				WHERE	processInstanceId = @DBProcessInstance 
				AND	workitemId = @DBWorkitemId 
				AND	processdefid =  @DBProcessDefId 
				AND	activityid = @DBSummaryActId 
				AND	Userid = @DBUserId 
				AND processvariantId = @ProcessVariantId/*Process Variant Support Changes*/
				
				If(@@ERROR > 0 OR @@ROWCOUNT <= 0) 
				Begin 
					SELECT @TotPrTimeTillNow =  0 
				End 

				SELECT	@TotPrTimeActivity = coalesce(SUM(TotalProcessingTime), 0) 
				FROM	WFReportDataTable 
				WHERE	processInstanceId = @DBProcessInstance 
					AND processdefid =  @DBProcessDefId 
					AND activityid = @DBSummaryActId
					AND processvariantId = @ProcessVariantId/*Process Variant Support Changes*/
						/* WorkItemId Check intentionally left for refer case*/ 

				SELECT	@TotPrTimeActivity = @DBTotalPrTime + @TotPrTimeActivity 
				Select @DBTotalPrTime = @DBTotalPrTime + @TotPrTimeTillNow 
			END 

			IF(@DBActionId = 2 OR @DBActionId = 27 OR @DBActionId = 3 OR @DBActionId = 5 OR @DBActionId = 28 OR @DBActionId = 45) 
			BEGIN 
				DELETE FROM WFReportDataTable  
				WHERE processInstanceId = @DBProcessInstance 
					AND processdefid =  @DBProcessDefId 
					AND activityid = @DBSummaryActId 
					AND processvariantId = @ProcessVariantId/* WorkItemId Check intentionally left for refer case*/ /*Process Variant Support Changes*/
			END 

			IF @DBDelayTime > 0     
			BEGIN    
				select @DBWKInDelay = 1    
			END    
			ELSE    
			BEGIN     
				select @DBWKInDelay = 0    
				select @DBDelayTime = 0 
			END     

			IF(@DBActionId = 1 OR @DBActionId = 2 OR @DBActionId = 27)
			BEGIN
				set @wherestr = 'and activityId = ' + convert(varchar(10), @vDBActivityId) + ' and userid = ' +  convert(varchar(10), @vDBUserId) + ' and queueid = ' + convert(varchar(10), @vDBQueueId)
			END

			IF(@DBActionId = 3 OR @DBActionId = 5 OR @DBActionId = 20)
			BEGIN
				set @wherestr = null
				set @vDBActivityId = 0
				set @vDBUserId = 0
				set @vDBQueueId = 0
			END

			IF(@DBActionId = 4 OR @DBActionId = 6)
			BEGIN
				set @wherestr = 'and activityId = ' + convert(varchar(10), @vDBActivityId) + ' and queueid = ' + convert(varchar(10), @vDBQueueId)
				set @vDBUserId = 0
			END

			IF(@DBActionId = 9 OR @DBActionId = 10)
			BEGIN
				SET @fieldIdValue = @DBFieldId
				set @wherestr = 'and activityId = ' + convert(varchar(10), @vDBActivityId) + ' and AssociatedFieldId = ' + convert(varchar(10), @DBFieldId)
				set @vDBUserId = 0
				set @vDBQueueId = 0
			END

			IF(@DBActionId = 28)
			BEGIN
				set @wherestr = 'and activityId = ' + convert(varchar(10), @vDBActivityId)
				set @vDBUserId = 0
				set @vDBQueueId = 0
			END

			IF(@DBActionId = 45)
			BEGIN
				set @wherestr = 'and activityId = ' + convert(varchar(10), @vDBActivityId) + ' and userid = ' + convert(varchar(10), @vDBUserId)
				set @vDBQueueId = 0
			END

			set @vActionDateTimeStart = convert(varchar(13), coalesce(@DBActionDateTime, getdate()), 20) + ':00:00.000'
			--set @vActionDateTimeEnd  = convert(varchar(13), coalesce(@DBActionDateTime, getdate()), 20) + ':59:59.999'

	/*	EXECUTE('UPDATE summarytable set' +
				' totalwicount = totalwicount + 1 ' +
				', totalduration = totalduration + ' + @DBTotalDuration +
				', totalprocessingtime = totalprocessingtime + ' + @DBTotalPrTime +
				', delaytime = delaytime + ' + @DBDelayTime +
				', wkindelay = wkindelay + ' + @DBWKInDelay +
				' where processdefid = ' + @DBProcessDefId +
				' and actionid = ' + @DBActionId +
				' and ActionDateTime between ''' + @vActionDateTimeStart +
				''' and ''' + @vActionDateTimeEnd + ''' ' +
				@wherestr)*/
		/* Bug 39903 - Summary table queries and indexes to be modified */		
	  EXECUTE('UPDATE summarytable set' +
				' totalwicount = totalwicount + 1 ' +
				', totalduration = totalduration + ' + @DBTotalDuration +
				', totalprocessingtime = totalprocessingtime + ' + @DBTotalPrTime +
				', delaytime = delaytime + ' + @DBDelayTime +
				', wkindelay = wkindelay + ' + @DBWKInDelay +
				' where processdefid = ' + @DBProcessDefId +
				' and actionid = ' + @DBActionId +
				' and ActionDateTime = ''' + @vActionDateTimeStart + ''' ' +     /*Bug 41357 */
				@wherestr +
				' and processvariantid = '+@ProcessVariantId)/*Process Variant Support Changes*/
				
			IF @@ROWCOUNT =0
			BEGIN 
				INSERT INTO summarytable (processdefid, activityid, queueid, userid, actionid,
						actiondatetime, activityname, username, totalwicount,
						totalduration, totalprocessingtime, delaytime,
						wkindelay, reporttype, AssociatedFieldId, ProcessVariantId) 
				VALUES (@DBProcessDefId, @vDBActivityId, @vDBQueueId, @vDBUserId, @DBActionId,
					@vActionDateTimeStart, @DBSummaryActName, @DBUserName, 1, 
					@DBTotalDuration, @DBTotalPrTime, @DBDelayTime, 
					@DBWKInDelay, @DBReportType, @fieldIdValue, @ProcessVariantId)/*Process Variant Support Changes*/
				IF(@@rowcount <= 0) 
				BEGIN 
					ROLLBACK TRANSACTION PROCESS 
						/* SRNo-1  Insert on MessageTable taking time   -By Mandeep Kaur */ 
					/* Changed By Varun Bhansaly On 08/02/2007 For Bugzilla Bug Id 74*/
					BEGIN TRANSACTION FAILED 
						Insert Into WFFailedMessageTable(MessageId,Message,lockedBy,status,failuretime,actiondatetime)  
							Select messageId, message, null, 'F', getDate(), ActionDateTime 
							From WFMessageInProcessTable  
							Where MessageId = @msgid 
						Delete From WFMessageInProcessTable Where MessageId = @msgid 
					COMMIT TRANSACTION FAILED 
					SELECT 0, 'Insert Failed 4.' 
					RETURN 
				END 
			END 

			IF(@DBActionId  = 27 OR  @DBActionId  = 2 )    
			BEGIN    
				UPDATE WFActivityReportTable 
				SET 
					totalwicount = totalwicount + 1, 
					totalduration = totalduration + @DBTotalDuration, 
					totalprocessingtime = totalprocessingtime + @TotPrTimeActivity 
				WHERE 
					processdefid = @DBProcessDefId 
					AND activityid = @DBSummaryActId 
					and convert(varchar(13), ActionDateTime,20) =  
					convert(varchar(13), coalesce(@DBActionDateTime, getdate()), 20) 

				IF @@ROWCOUNT = 0 
				BEGIN 
					INSERT into WFActivityReportTable 
						(processdefid, activityid, activityname, actiondatetime,  
						totalwicount, totalduration, totalprocessingtime) 
					VALUES 
						(@DBProcessDefId, @DBSummaryActId, @DBSummaryActName, @DBActionDateTime, 
						1, @DBTotalDuration, @TotPrTimeActivity) 
					IF(@@rowcount <= 0) 
					BEGIN 
						ROLLBACK TRANSACTION PROCESS 
							/* SRNo-1  Insert on MessageTable taking time   -By Mandeep Kaur */ 
						BEGIN TRANSACTION FAILED 
							Insert Into WFFailedMessageTable(MessageId,Message,lockedBy,status,failuretime,actiondatetime)  
								Select messageId, message, null, 'F', getDate(), ActionDateTime 
								From WFMessageInProcessTable  
								Where MessageId = @msgid 
							Delete From WFMessageInProcessTable Where MessageId = @msgid 
						COMMIT TRANSACTION FAILED 
						SELECT 0, 'Insert Failed 4.' 
						RETURN 
					END 
				END 
			END     
		END
	END

	if(@deleteFlag = 1) 
	begin 
	/* SRN0-1  Insert on MessageTable taking time   -By Mandeep Kaur */
		Delete From WFMessageInProcesstable Where messageId = @msgId  
		select @rst = @@rowcount 
	end 
	else 
		select @rst = 1 
						
	Commit Transaction PROCESS    
	select rst = @rst, 'SUCCESS'     
END 

go

Print 'Stored Procedure WFProcessMessageExt compiled successfully ........' 

go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group						: Phoenix
	Product / Project			: OmnniFlow 8.0
	Module						: Omniflow Server
	File Name					: WFGenerateRegistration.sql
	Author						: Preeti Awasthi.
	Date written (DD/MM/YYYY)	: 22/1/2010
	Description					: Stored procedure to generate Registration Number while invoked from WFUploadWorkitem API.
______________________________________________________________________________________________________
				CHANGE HISTORY
				
Date                        Change By        Change Description (Bug No. (If Any))

24/01/2011					Saurabh Sinha	 WFS_8.0_090[Replicated]	Removing Hyphen from processinstanceid when suffix is not supplied at  	the time of process registration.
12/02/2013					Shweta Singhal	Variable type changed from VARCHAR(20) to NVARCHAR(25)
Case getting generated when user defined regPrefix of length 20 
17/05/2013					Shweta Singhal	Process Variant Support Changes
01/03/2014					Changes for Code Optimization - Registration number generation changes. Will be fetched from
							new table(IDE_RegistrationNumber_+ processdefid) for every process .
03-07-2014					Sajid Khan		Bug 46391 - Arabic: Process Name, Queue Name & Created User name is not showing proper in Workitem Properties.
22/08/2014					Mohnish Chopra	Bug 47515 - Create workitem operation is slow with high concurrency (5 seconds with 100 concurrent users)
27/02/2017					RishiRam Meel   PRDP Bug  Merging 67207 - Unable to create workitem on different versions of a process.
16/10/2017                  Kumar Kimil     Case Registration requirement--Upload Workitem changes
05/01/2018					Shubhankur Manuja	Arabic support
22/04/2018  				Ambuj Tripathi		Bug 76862 - Remove the db console messages from all procedures
______________________________________________________________________________________________________*/
If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFGenerateRegistration')
Begin
	Execute('DROP PROCEDURE WFGenerateRegistration')
	Print 'Procedure WFGenerateRegistration already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFGenerateRegistration (
@DBUserId					INT,
@DBProcessDefId				INTEGER,
@ValidataionReqd			VARCHAR(1000)	= NULL,
@DBInitiateFromActivityId	INTEGER,
@DBInitiateFromActivityName	NVARCHAR(60),
@DataDefinitionName			CHAR(64)		= NULL,
@DBProcessVariantId			INTEGER,
@PSFlag						CHAR(1)			= 'N'
)
AS
	SET NOCOUNT ON
	DECLARE @UserName				VARCHAR(64)
	DECLARE @pos1					INT
	DECLARE @TempTableName			VARCHAR(255)
	DECLARE @TempColumnName			VARCHAR(255)
	DECLARE @TempColumnType			VARCHAR(10)	
	DECLARE @TempValue				VARCHAR(500)
	DECLARE @ActivityId				SMALLINT
	DECLARE @ActivityName			NVARCHAR(30)
	Declare @DBStatus       		INT
	DECLARE @MainGroupId			SMALLINT
	DECLARE @ValidateQuery			VARCHAR(1000)
	DECLARE @DBParentFolderId		INT
	DECLARE @DBDataDefinitionIndex  INT
	DECLARE @DDTTableName			VARCHAR(255)
	DECLARE @QueueName				NVARCHAR(255)
	DECLARE @QueueId				INT
	DECLARE @StreamId				INT
	DECLARE @RegPrefix				NVARCHAR(25)
	DECLARE @RegSuffix				NVARCHAR(25)
	DECLARE @RegStartingNo			INT
	DECLARE @RegSeqLength			INT
	DECLARE @Temp					SMALLINT
	DECLARE	@ProcessName			NVARCHAR(128)
	DECLARE	@ProcessVersion 		SMALLINT
	DECLARE @Length					INT
	DECLARE @ProcessInstanceId		NVARCHAR(255)
	DECLARE @DBFolderName           VARCHAR(255)
	DECLARE @ProcessType			VARCHAR(1)
	DECLARE @ProcessSequenceTable	NVARCHAR(510)
	DECLARE @sequenceQuery			NVARCHAR(800)
	DECLARE @Urn                    NVARCHAR(126)
	Declare @DisplayName            NVARCHAR(20)
	
	SELECT 	@UserName = UserName , 
			@MainGroupId = MainGroupId
	FROM 	PDBUser (NOLOCK)
	WHERE 	UserIndex = @DBUserId
	select @ProcessName=processname ,@DisplayName=DisplayName  from processdeftable where processdefid = @DBProcessDefId
	SELECT @ProcessName = REPLACE(@ProcessName,' ','')
	Select @ProcessSequenceTable = 'IDE_Reg_' + CONVERT(nvarchar,@ProcessName)
	IF @ValidataionReqd IS NOT NULL
	BEGIN
		SELECT @pos1 		= CHARINDEX(CHAR(21), @ValidataionReqd)
		SELECT @TempTableName 	= SUBSTRING(@ValidataionReqd, 1, @pos1-1)
		SELECT @ValidataionReqd = STUFF(@ValidataionReqd, 1, @pos1, NULL)
		SELECT @pos1 		= CHARINDEX(CHAR(21), @ValidataionReqd)
		SELECT @TempColumnName 	= SUBSTRING(@ValidataionReqd, 1, @pos1-1)
		SELECT @ValidataionReqd = STUFF(@ValidataionReqd, 1, @pos1, NULL)
		SELECT @pos1 		= CHARINDEX(CHAR(25), @ValidataionReqd)
		SELECT @TempValue 	= RTRIM(SUBSTRING(@ValidataionReqd, 1, @pos1-1))

		SELECT 	@TempColumnType = DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS (NOLOCK)
		WHERE  	TABLE_NAME 	= @TempTableName
		AND 	COLUMN_NAME 	= @TempColumnName

		IF @TempColumnType IN ('varchar', 'char', 'datetime')
			SELECT @TempValue = CHAR(39) + @TempValue + CHAR(39)

		EXECUTE (' DECLARE valcur CURSOR FAST_FORWARD FOR ' +
			' SELECT 1 FROM ' + @TempTableName +
			' (NOLOCK) WHERE ' + @TempColumnName + ' = ' + @TempValue)
		SELECT @DBStatus = @@ERROR
		IF (@DBStatus <> 0)
		BEGIN
			SELECT 	Status = 15
			RETURN
		END
		OPEN valcur
		SELECT @DBStatus = @@ERROR
		IF (@DBStatus <> 0)
		BEGIN
			CLOSE valcur
			DEALLOCATE valcur
			SELECT 	Status = 15
			RETURN
		END
		FETCH NEXT FROM valcur INTO @Temp
		IF @@FETCH_STATUS = 0
		BEGIN
			SELECT @DBStatus =  50
			SELECT Status = @DBStatus
			CLOSE valcur
			DEALLOCATE valcur
			RETURN
		END
		CLOSE valcur
		DEALLOCATE valcur
		SELECT @ValidateQuery = 'INSERT INTO ' + @TempTableName + ' ( ' + @TempColumnName + ' ) VALUES ( ' + @TempValue + ' ) '
	END
	
	If (@DBInitiateFromActivityId > 0)
	Begin
		SELECT	@ActivityId = ActivityId,
			@ActivityName  = ActivityName
		FROM	ActivityTable (NOLOCK)
		WHERE	ProcessDefID = @DBProcessDefId
		AND	ActivityType = 1
		AND	ActivityId = @DBInitiateFromActivityId
		If(@@ERROR > 0 OR @@ROWCOUNT <= 0)
		Begin
			SELECT @DBStatus =  603
			SELECT Status = @DBStatus
			Return
		End
	End
	Else
	Begin
		If(@DBInitiateFromActivityName IS NOT NULL AND LEN(RTRIM(@DBInitiateFromActivityName)) > 0 )
		Begin
			SELECT	@ActivityId = ActivityId,
				@ActivityName  = ActivityName
			FROM	ActivityTable (NOLOCK)
			WHERE	ProcessDefID = @DBProcessDefId
			AND	ActivityType = 1
			AND	ActivityName = RTRIM(@DBInitiateFromActivityName)
			If(@@ERROR > 0 OR @@ROWCOUNT <= 0)
			Begin
				SELECT @DBStatus =  603
				SELECT Status = @DBStatus
				Return
			End
		End
		Else
		Begin
			SELECT	@ActivityId = ActivityId,
				@ActivityName  = ActivityName
			FROM	ActivityTable (NOLOCK)
			WHERE	ProcessDefID = @DBProcessDefId
			AND	ActivityType = 1
			AND	PrimaryActivity = 'Y'		/* Default Introduction workstep */
		End
	End
	
	IF @DataDefinitionName IS NOT NULL /* AND @DataClassFlag = 'Y' */
	BEGIN
		SELECT 	@DBDataDefinitionIndex = DataDefIndex
		FROM 	PDBDataDefinition (NOLOCK)
		WHERE 	DataDefName = @DataDefinitionName
		AND 	GroupId = @MainGroupId
		IF @@ROWCOUNT <= 0
		BEGIN
    		   	EXECUTE PRTRaiseError  'PRT_ERR_DDI_Not_Exist', @DBStatus OUT
			SELECT 	Status = @DBStatus
			RETURN
		END
		SELECT @DDTTableName = 'DDT_' + CONVERT(varchar(10), @DBDataDefinitionIndex)
	END
	ELSE
		SELECT @DBDataDefinitionIndex  = 0
		
	SELECT @DBParentFolderId = WorkFlowFolderId
	FROM   RouteFolderDefTable (NOLOCK)
	WHERE  ProcessDefId = @DBProcessDefId
	IF @@ROWCOUNT <= 0
	BEGIN
	    EXECUTE PRTRaiseError  'PRT_ERR_Invalid_Parameter', @DBStatus OUT
		SELECT 	Status = @DBStatus
		RETURN
	END
	
	IF @PSFlag <> 'P'
	BEGIN
		SELECT 	TOP 1 @QueueName	= QUEUEDEFTABLE.QUEUENAME,
			@QueueId	= QUEUEDEFTABLE.QUEUEID,
			@StreamId	= QUEUESTREAMTABLE.STREAMID
		FROM 	QUEUESTREAMTABLE (NOLOCK), QUserGroupView (NOLOCK), ACTIVITYTABLE (NOLOCK), QUEUEDEFTABLE (NOLOCK)
		WHERE 	ACTIVITYTABLE.PROCESSDEFID 	= @DBProcessDefId
		AND 	ACTIVITYTABLE.ACTIVITYTYPE 	= 1
		AND 	ACTIVITYTABLE.PROCESSDEFID 	= QUEUESTREAMTABLE.PROCESSDEFID
		AND 	ACTIVITYTABLE.ACTIVITYID	= QUEUESTREAMTABLE.ACTIVITYID
		AND 	ACTIVITYTABLE.ACTIVITYID	= @ActivityId
		AND 	QUEUESTREAMTABLE.QUEUEID 	= QUserGroupView.QUEUEID
		AND 	QUEUEDEFTABLE.QUEUEID 		= QUserGroupView.QUEUEID
		AND 	QUEUETYPE 			= 'I'
		AND 	USERID 				= @DBUserId
	END
	ELSE
	BEGIN
		SELECT 	TOP 1 @QueueName	= QUEUEDEFTABLE.QUEUENAME,
		@QueueId	= QUEUEDEFTABLE.QUEUEID,
		@StreamId	= QUEUESTREAMTABLE.STREAMID
		FROM 	QUEUESTREAMTABLE, ACTIVITYTABLE , QUEUEDEFTABLE 
		WHERE 	QUEUESTREAMTABLE.PROCESSDEFID 	= @DBProcessDefId 
		AND 	QUEUESTREAMTABLE.ACTIVITYID	=  @ActivityId
		AND 	ACTIVITYTABLE.ACTIVITYTYPE 	= 1			
		AND 	ACTIVITYTABLE.PROCESSDEFID 	= QUEUESTREAMTABLE.PROCESSDEFID 
		AND 	ACTIVITYTABLE.ACTIVITYID	= QUEUESTREAMTABLE.ACTIVITYID 
		AND 	QUEUETYPE 					= 'I'
		AND 	QUEUEDEFTABLE.QUEUEID 		= QUEUESTREAMTABLE.QUEUEID 			
	END
	
	IF @@ROWCOUNT <= 0
	BEGIN
		SELECT @DBStatus = 300	/*WFS_7.1_033*/
		SELECT 	Status   = @DBStatus
		RETURN
	END
	/*Process Variant Support Changes*/
	SELECT @ProcessType = ProcessType
	FROM ProcessDefTable (NOLOCK)	
	WHERE ProcessDefId = @DBProcessDefId
		
	IF @@ROWCOUNT <= 0
	BEGIN
		SELECT @DBStatus = 2	/*WFS_7.1_033*/
		SELECT 	Status   = @DBStatus
		RETURN
	END
	
	BEGIN TRANSACTION TranWorkItem
	IF @ProcessType = 'S'/*Process Variant Support Changes*/
		BEGIN
			Select @sequenceQuery= 'INSERT '+ @ProcessSequenceTable + ' DEFAULT VALUES '
			--print 'sequenceQuery' + @sequenceQuery
			Execute(@sequenceQuery)
			Select @RegStartingNo = @@identity
			/*UPDATE 	ProcessDefTable
			SET 	RegStartingNo 	= @RegStartingNo
			WHERE 	ProcessDefID 	= @DBProcessDefId */

			SELECT	@RegPrefix	= RegPrefix,
				@RegSuffix	= RegSuffix,
				@RegSeqLength	= RegSeqLength,
				@ProcessName	= ProcessName,
				@ProcessVersion = VersionNo
			FROM	ProcessDefTable (NOLOCK)
			WHERE	ProcessDefID	= @DBProcessDefId
		END
	ELSE
		BEGIN
			SELECT	@RegPrefix	=WFProcessVariantDefTable.RegPrefix,
				@RegSuffix	= WFProcessVariantDefTable.RegSuffix,
				@RegStartingNo	= WFProcessVariantDefTable.RegStartingNo,
				@RegSeqLength	= RegSeqLength,
				@ProcessName	= ProcessName,
				@ProcessVersion = VersionNo
			FROM	WFProcessVariantDefTable (NOLOCK), ProcessDefTable (NOLOCK) 
			WHERE	WFProcessVariantDefTable.ProcessDefId = ProcessDefTable.ProcessDefId
			AND		ProcessDefTable.ProcessDefID	= @DBProcessDefId
			AND		ProcessVariantId = @DBProcessVariantId
			
			UPDATE 	WFProcessVariantDefTable
			SET 	RegStartingNo 	= RegStartingNo + 1
			WHERE 	ProcessDefID 	= @DBProcessDefId
			AND 	ProcessVariantId = @DBProcessVariantId
		END
	COMMIT TRANSACTION TranWorkItem
	
	SELECT @RegStartingNo	= @RegStartingNo
	
	IF(@RegPrefix IS NOT NULL AND @RegPrefix<>'')	/*WFS_8.0_090*/
	BEGIN
		SELECT @RegPrefix	= @RegPrefix + '-'
	END	
	
	IF(@RegSuffix IS NOT NULL AND @RegSuffix<>'')	/*WFS_8.0_090*/
	BEGIN
		SELECT @RegSuffix	= '-' + @RegSuffix
	END
	
	IF(@RegSuffix IS NULL)	
	BEGIN
		SELECT @RegSuffix	= ''		
	END
	
	IF(@RegPrefix IS NULL)	
	BEGIN
		SELECT @RegPrefix	= ''		
	END


	IF LEN(@RegStartingNo) > @RegSeqLength - LEN(@RegPrefix) - LEN(@RegSuffix)
	BEGIN
		SELECT @DBStatus = 19
		SELECT 	Status   = @DBStatus
		RETURN
	END

	SELECT	@Length			= @RegSeqLength - LEN(@RegPrefix) - LEN(@RegSuffix)
	SELECT	@ProcessInstanceId	= REPLICATE('0', @Length)
	SELECT 	@ProcessInstanceId	= @RegPrefix + SUBSTRING(@ProcessInstanceId,1, LEN(@ProcessInstanceId) - LEN(@RegStartingNo)) + 	CONVERT(varchar(10), @RegStartingNo) + @RegSuffix
	SELECT 	@DBFolderName		= @ProcessInstanceId
	
	if(@DisplayName IS NOT NULL AND @DisplayName<>'')
	Begin
	Select @Urn=@DisplayName +'-'+ CONVERT(varchar(10), @RegStartingNo)
	end
	
	SELECT Status  = @DBStatus,	
	ProcessInstanceid = @ProcessInstanceId,
	ParentFolderIndex = @DBParentFolderId,
	DataDefinitionIndex = @DBDataDefinitionIndex,	
	ActivityId = @ActivityId,		
	MainGroupId = @MainGroupId,		
	ActivityName = @ActivityName,		
	QueueId = @QueueId,
	QueueName = @QueueName,
	VaidateQuery = @ValidateQuery,
	StreamId = @StreamId,
	URN = @urn
	
	

go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group				: Application –Products
	Product / Project		: BPM 10.0
	Module				: Omniflow Server
	File Name			: WFReturnRightsForObjType.sql
	Programmer			: Saurabh Kamal
	Date written (DD/MM/YYYY)	: 3 Sep 2012
	Last Modified By (DD/MM/YYYY)	: Saurabh Kamal
	Last Modified On (DD/MM/YYYY)	: 7 Sep 2012
	Description			: Stored Procedure called from 
					  class	 - WFSUtil.java, method - returnRightsForObjType.
					  This stored procedure returns ObjectList associated with provided UserId with Right String.
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
				CHANGE HISTORY
------------------------------------------------------------------------------------------------------
24/01/2013	Shweta Singhal	Change done for bug 37983
07/02/2013	Shweta Singhal	Bug 38253- All the rights data was not getting returned due to batching while filling data in temporary table
08/02/2013	Shweta Singhal	Bug 38280- Rights for individual object was not returned as ObjectId check was missing from the query
18-06-2014	Sajid Khan		Bug 46263 - Arabic: While search on Queue or click on next icon, message 'Loading' is showing continuously.
------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFReturnRightsForObjType')
Begin
	Execute('DROP PROCEDURE WFReturnRightsForObjType')
	Print 'Procedure WFReturnRightsForObjType already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFReturnRightsForObjType
(  
		@DBUserId				INT, 		
		@DBObjectType			NVARCHAR(20),  
		@queryParam0			NVARCHAR(50),  
		@queryParam1			NVARCHAR(50), 
		@queryParam2			NVARCHAR(250),
		@TempTableName			NVARCHAR(50),
		@DBsortOrder			NVARCHAR(1),  		
		@DBbatchSize			INT,
		@DBlastValue			NVARCHAR(64),
		@DBFilterString			NVARCHAR(255),
		@DBObjectId				INT,
		@ProjectId				INT	
) 
AS 

Set NoCount On
	 
DECLARE		@v_DBStatus				INT 
DECLARE		@v_queryStr				NVARCHAR(1000)
DECLARE		@v_profileId			INT
DECLARE		@v_profileAssocQuery	NVARCHAR(1000)
DECLARE		@v_FinalStatus			INT
DECLARE		@v_ErrorMessage			NVARCHAR(100)
DECLARE		@v_sortStr				NVARCHAR(6) 
DECLARE		@v_op					CHAR(1) 
--DECLARE		@v_orderByStr			NVARCHAR(250)
DECLARE		@v_quoteChar 			CHAR(1) 
DECLARE		@v_lastValueStr			NVARCHAR(250)
DECLARE		@v_prefix				NVARCHAR(50) 
DECLARE		@v_filterStr			NVARCHAR(255)
DECLARE 	@v_objIdStr				NVARCHAR(250)
DECLARE		@ProjectIdCondition			NVARCHAR(255)

BEGIN
	SELECT @v_FinalStatus = 0					
	SELECT @v_ErrorMessage = ''
	SELECT @v_quoteChar = CHAR(39)
	SELECT @v_lastValueStr = ''
	SELECT @v_prefix = ''
	SELECT @v_filterStr = ''
	SELECT @ProjectIdCondition	=''
	IF(@DBbatchSize > 0)
	BEGIN
		SELECT @v_prefix = ' TOP  ' + CONVERT(NVarchar(10), @DBbatchSize + 1)
	END
	
	IF(@DBsortOrder = 'D') 
	BEGIN 		
		SELECT @v_sortStr = ' DESC '  
		SELECT @v_op = '<'  
	END 
	Else /* IF(@DBsortOrder = 'A') */  
	BEGIN 		
		SELECT @v_sortStr = ' ASC '  
		SELECT @v_op = '>'  
	END
	
	IF(@DBObjectId > 0) 
	BEGIN 
		SELECT @v_objIdStr = ' AND A.ObjectId = ' + CONVERT(NVarchar(10),@DBObjectId)
	END
	ELSE
		SELECT @v_objIdStr = ''
	
	IF(@DBlastValue IS NOT NULL) 
	BEGIN 
		SELECT @v_lastValueStr = @v_lastValueStr + ' AND ObjectName ' + @v_op +'N'+ @v_quoteChar + @DBlastValue + @v_quoteChar
	END
	
	IF(@DBFilterString IS NOT NULL)
	BEGIN
		SELECT @v_filterStr = ' AND ' + @DBFilterString
	END	
	
	--SELECT @v_orderByStr = 	' ORDER BY ' + @queryParam0 + ' ' + @v_sortStr
	/*	
	IF(@DBAssocType = 1)
		BEGIN
			SELECT @v_queryStr = 'Select GroupId from WFGroupMemberView Where UserId = ' + CONVERT(NVarchar(10),@DBUserId)
		END
	ELSE IF (@DBAssocType = 2) 
		BEGIN
			
		END	
	*/
	
	--EXECUTE('TRUNCATE TABLE ' + @TempTableName)
	IF(@ProjectId > 0) 
	BEGIN 		
		SELECT	@ProjectIdCondition = ' AND projectid = ' + convert(varchar,@ProjectId) 
	END 
	
	/* Fetch Objects associated with profile*/	
	BEGIN TRANSACTION TxnInsert
	SELECT @v_queryStr = 'Select DISTINCT ProfileId from ProfileUserGroupView Where UserId = ' + CONVERT(NVarchar(10),@DBUserId)	
	EXECUTE ('DECLARE QueryCur CURSOR FAST_FORWARD FOR ' + @v_queryStr)	
	IF(@@ERROR <> 0)
	BEGIN
		ROLLBACK TRANSACTION TxnInsert
		SELECT @v_FinalStatus = -101
		SELECT @v_ErrorMessage = 'Error while opening QueryCursor'
		RETURN
	END
	ELSE
	BEGIN		
		OPEN QueryCur 
		FETCH NEXT FROM QueryCur INTO @v_profileId
		--SELECT @counterInt = 1
		WHILE(@@FETCH_STATUS <> -1)
		BEGIN
			IF (@@FETCH_STATUS <> -2)		
			BEGIN
				SELECT @v_profileAssocQuery = 'select A.Objectid ObjectId, ' + @queryParam0 + ' ObjectName, D.RightString, 2 AssociationType  from WFUserObjAssocTable A  WITH (NOLOCK),WFObjectListTable  B  WITH (NOLOCK), ' + @queryParam1 + ' C  WITH (NOLOCK), WFProfileObjTypeTable D  WITH (NOLOCK) where D.userid = ' + CONVERT(NVarchar(10),@v_profileId) + ' and ProfileId = D.userid and D.associationtype = 2 and B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) '+ @queryParam2 + @v_objIdStr + @ProjectIdCondition
				
--				SELECT @v_profileAssocQuery = 'select ' + @v_prefix + ' A.Objectid ObjectId, ' + @queryParam0 + ' ObjectName, D.RightString, 2 AssociationType  from WFUserObjAssocTable A,WFObjectListTable  B, ' + @queryParam1 + ' C, WFProfileObjTypeTable D where D.userid = ' + CONVERT(NVarchar(10),@v_profileId) + ' and ProfileId = D.userid and D.associationtype = 2 and B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) '+ @queryParam2 + @v_lastValueStr + @v_orderByStr
			
			
			EXECUTE ('INSERT INTO ' + @TempTableName + ' (ObjectId, ObjectName, RightString, AssociationType) ' 	+ @v_profileAssocQuery)
			IF(@@ERROR <> 0)
			BEGIN
				ROLLBACK TRANSACTION TxnInsert		
				--EXECUTE ('insert into righttest values (1001, '+ @v_profileAssocQuery+')')						
				SELECT @v_FinalStatus = 15					
				SELECT @v_ErrorMessage = 'Error while insertion of objects associated with Profile'
			--insert into righttest values (9999, @v_objIdStr)
				BREAK
			END	
				
			END
			FETCH NEXT FROM QueryCur INTO @v_profileId
		END
		CLOSE QueryCur  
		DEALLOCATE QueryCur
	END	
		
	/* Fetch Objects associated with Group*/	
	SELECT @v_queryStr = 'Select GroupIndex from WFGroupMemberView  WITH (NOLOCK) Where UserIndex = ' + CONVERT(NVarchar(10),@DBUserId)
	EXECUTE ('DECLARE QueryCur CURSOR FAST_FORWARD FOR ' + @v_queryStr)	
	IF(@@ERROR <> 0)
	BEGIN
		ROLLBACK TRANSACTION TxnInsert
		SELECT @v_FinalStatus = -101
		SELECT @v_ErrorMessage = 'Error while opening QueryCursor'
		RETURN
	END
	ELSE
	BEGIN		
		OPEN QueryCur 
		FETCH NEXT FROM QueryCur INTO @v_profileId
		--SELECT @counterInt = 1
		WHILE(@@FETCH_STATUS <> -1)
		BEGIN
			IF (@@FETCH_STATUS <> -2)		
			BEGIN
				SELECT @v_profileAssocQuery = 'select A.objectid ObjectId, ' + @queryParam0 + ' ObjectName, RightString, 1 AssociationType from 	WFUserObjAssocTable A  WITH (NOLOCK),WFObjectListTable  B  WITH (NOLOCK), ' + @queryParam1 + ' C  WITH (NOLOCK), WFProfileObjTypeTable D  WITH (NOLOCK) where B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and A.associationType = D.associationType and A.AssociationType = D.AssociationType and D.associationType = 1 and A.userid= D.userid and D.userid = ' + CONVERT(NVarchar(10),@v_profileId) + ' and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) ' + @queryParam2 + @v_objIdStr + @ProjectIdCondition
				
			EXECUTE ('INSERT INTO ' + @TempTableName + ' (ObjectId, ObjectName, RightString, AssociationType) ' 	+ @v_profileAssocQuery)
			--EXECUTE ('insert into righttable values (1004, 'After group loop')')
			IF(@@ERROR <> 0)
			BEGIN
				ROLLBACK TRANSACTION TxnInsert					
				--EXECUTE ('insert into righttest values (1002, '+ @v_profileAssocQuery+')')
				SELECT @v_FinalStatus = 15					
				SELECT @v_ErrorMessage = 'Error while insertion of objects associated with Group'
				BREAK
			END	
				
			END
			FETCH NEXT FROM QueryCur INTO @v_profileId
		END
		CLOSE QueryCur  
		DEALLOCATE QueryCur
	END	
		
	SELECT @v_profileAssocQuery = 'select A.objectid ObjectId, ' + @queryParam0 + ' ObjectName, RightString, 0 AssociationType from WFUserObjAssocTable A  WITH (NOLOCK),WFObjectListTable  B  WITH (NOLOCK), ' + @queryParam1 + ' C  WITH (NOLOCK), WFProfileObjTypeTable D  WITH (NOLOCK) where B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and A.associationType = D.associationType and A.associationtype = 0 and A.userid= D.userid and D.userid = ' + CONVERT(NVarchar(10),@DBUserId) + ' and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) ' + @queryParam2 + @v_objIdStr + @ProjectIdCondition
	
	EXECUTE ('INSERT INTO ' + @TempTableName + ' (ObjectId, ObjectName, RightString, AssociationType) ' + @v_profileAssocQuery)
	--EXECUTE ('insert into righttable values (1006, 'After user loop')')
	
	IF(@@ERROR <> 0)
	BEGIN
		ROLLBACK TRANSACTION TxnInsert			
		--EXECUTE ('insert into righttest values (1003, '+ @v_profileAssocQuery+')')
		SELECT @v_FinalStatus = 15					
		SELECT @v_ErrorMessage = 'Error while insertion of objects associated with user'
		RETURN
	END	
	
	IF(@v_FinalStatus = 0)			
	BEGIN		
		COMMIT TRANSACTION TxnInsert
		EXECUTE ('Select ObjectId, ObjectName, RightString, AssociationType from ' + @TempTableName + '  WITH (NOLOCK) Order By AssociationType Desc')
		EXECUTE ('Select DISTINCT ' + @v_prefix + ' ObjectId, ObjectName from ' + @TempTableName + '  WITH (NOLOCK) WHERE 1 = 1 ' + @v_filterStr + @v_lastValueStr + ' Order by ObjectName ' + @v_sortStr)
		RETURN
	END
	ELSE
	BEGIN	
		ROLLBACK TRANSACTION TxnInsert					
		SELECT @v_FinalStatus Status,	
		@v_ErrorMessage	Message		
		RETURN
	END
	--RETURN	
	
END  

go

/*--------------------------------------------------------------------------------------------------
 NEWGEN SOFTWARE TECHNOLOGIES LIMITED
----------------------------------------------------------------------------------------------------
 Group				: Application – Products
 Product / Project		: WorkFlow 6.2
 Module				: Transaction Server
 File Name			: WFPurgeWorkItem.sql
 Author				: Vikram Kumbhar
 Date written (DD/MM/YYYY)	: 16/01/2008
 Description			: Script to purge workitem data from all tables in the database
----------------------------------------------------------------------------------------------------
 CHANGE HISTORY
----------------------------------------------------------------------------------------------------
 Date		Change By		Change Description (Bug No. (If Any))
----------------------------------------------------------------------------------------------------
 30/01/2008	Vikram Kumbhar		Bugzilla Bug 3731 WFPurgeWorkItem Stored Procedure giving error in SQL 2005
 03/08/2009	Harmeet Kaur		WFS_8.0_020	 Execute Stored Procedure updated to delete workitems from the new database tables created
 
 8/01/2014       Anwar Ali Danish  Changes done for code optimization
 11-02-2014		 Sajid Khan		   Changes done for Message Agent Optimization.
 15-02-2016		 Mohnish Chopra	   Changes done for Bug 59178		
 25-07-2017		 Shubhankur Manuja Changes for table name from IDE_REGISTRATIONNUMBER_processdefid to IDE_Reg_processname
22/04/2018  Ambuj Tripathi		Bug 76862 - Remove the db console messages from all procedures 
--------------------------------------------------------------------------------------------------*/

IF Exists (SELECT * FROM SysObjects WHERE xType = 'P' and name = 'WFPurgeWorkItem')
BEGIN
	Execute('DROP PROCEDURE WFPurgeWorkItem')
	Print 'Procedure WFPurgeWorkItem already exists, hence older one dropped.'
END

go

CREATE PROCEDURE WFPurgeWorkItem(
	@DBConnectId		int,					/* Session Id of the Logged in User */
	@DBHostName		char(30),					/* 'USER' for User */
	@DBAPPInfo		VARCHAR(50),				/* IP address of Database*/
	@DBAPPName		VARCHAR(50),				/* Send 'OAP' in this parameter */
	@DBProcessInstanceId	nvarchar(64) = NULL, /* To be given For purging only single workitem*/
	@DBProcessDefId		int = NULL,				/*  To be given For purging process specific workitems */
	@DBActivityId		int = NULL,				/* To be given For purging workitems on a particular activity for a process */
	@DBStartDate		VARCHAR(50) = NULL, 	/* Start Date . Should be given in case workitems created in a particular date range are to be purged*/
	@DBEndDate		VARCHAR(50) = NULL,			/* End Date . Should be given in case workitems created in a particular date range are to be purged */
	@DBDeleteHistoryFlag	char(1) = 'Y',		/* Delete History Data Flag*/
	@DBDeleteExternalData	char(1) = 'Y',
	@DBResetProcessSeqFlag  VARCHAR(1)
	)
AS

SET NOCOUNT ON

BEGIN
	DECLARE @ProcessInstanceId	nvarchar(64)
	DECLARE @var_Rec_1		nvarchar(255)
	DECLARE @ExtTableName		nvarchar(255)
	DECLARE @tableProcessRegistration nvarchar(255)
	DECLARE @ConditionStr		nvarchar(1000)
	DECLARE @PurgeMessageStr	nvarchar(500)
	DECLARE @DBReferenceFlag	char(1)
	DECLARE @DBGenerateLogFlag	char(1)
	DECLARE @DBLockFlag		char(1)
	DECLARE @DBCheckOutFlag		char(1)
	DECLARE @DBTransactionFlag	char(1)
	DECLARE	@DBParentFolderIndex	int
	DECLARE @DBStatus		int
	DECLARE	@DBUserId		int
	DECLARE	@MainGroupId		int
	DECLARE @FolderId		int
	DECLARE @ActivityType		int
	Declare @ActivityName 	NVARCHAR(255)
	DECLARE	@ProcessName	VARCHAR(64)
	SELECT @ConditionStr = ''
	SELECT @PurgeMessageStr = ''
	SELECT @DBReferenceFlag = 'Y'
	SELECT @DBGenerateLogFlag = 'Y'
	SELECT @DBLockFlag = 'Y'
	SELECT @DBCheckOutFlag = 'Y'
	SELECT @DBTransactionFlag = 'N'
	SELECT @DBStatus = -1
	SELECT @DBUserId = 0	
	SELECT @MainGroupId = 0
	SELECT @DBParentFolderIndex = NULL
	SELECT @ActivityType = -1
	SELECT @FolderId = -1
	

	/* Perform input parameter validation */
	IF (@DBProcessDefId IS NULL) OR (@DBProcessDefId <= 0)
	BEGIN
		PRINT 'Error: It is mandatory to specify ProcessDefId and it must be greater than zero.'
		RETURN
	END

	/* Check validity of User */
	EXECUTE PRTCheckUser @DBConnectId, @DBHostName, @DBUserId OUT, @MainGroupId OUT, @DBStatus OUT,@DBAPPInfo,@DBAPPName
	IF (@DBStatus <> 0)
	BEGIN
		PRINT 'Error: ConnectId of User is invalid.'
		SELECT Status = @DBStatus
		RETURN
	END

	/* Create temporary tables */
	If Exists (Select * FROM SysObjects WHERE xType = 'U' and name = 'WFPurgeFailureLogTable')
	Begin
		Drop TABLE WFPurgeFailureLogTable
		--Print 'WFPurgeFailureLogTable dropped successfully.'
	End

	If Not Exists (Select * FROM SysObjects WHERE xType = 'U' and name = 'WFPurgeFailureLogTable')
	Begin
		CREATE TABLE WFPurgeFailureLogTable(ProcessInstanceId NVARCHAR(64), ProcessDefId INT)
		--Print 'WFPurgeFailureLogTable created successfully.'
	End

	/* Generate condition string depending on input */
	SELECT @ConditionStr = 'ProcessDefId = ' + CONVERT(varchar(5), @DBProcessDefId) + ' AND ProcessInstanceState IN (1,4,5,6)'

	IF @DBProcessInstanceId IS NOT NULL
	BEGIN
		SELECT @ConditionStr = @ConditionStr + ' AND A.ProcessInstanceId = ' + CHAR(39) + @DBProcessInstanceId + CHAR(39) 
	END

	IF @DBStartDate IS NOT NULL
	BEGIN
		SELECT @ConditionStr = @ConditionStr + ' AND CreatedDateTime >= ' + CHAR(39) + @DBStartDate + CHAR(39) 
	END

	IF @DBEndDate IS NOT NULL
	BEGIN
		SELECT @ConditionStr = @ConditionStr + ' AND CreatedDateTime <= ' + CHAR(39) + @DBEndDate + CHAR(39) 
	END

	IF @DBDeleteExternalData = 'Y'
	BEGIN
		SELECT @ExtTableName = TableName
		FROM ExtDBConfTable (NOLOCK)
		WHERE ProcessDefId = @DBProcessDefId
		AND EXTOBJID = 1

		IF Not Exists (SELECT * FROM SysObjects WHERE name = @ExtTableName)
		BEGIN
			SET @DBDeleteExternalData = 'N'
		END
	END

	/* Define the cursor */
	IF (@DBActivityId > 0)
	BEGIN
		SELECT @ActivityType = ActivityType ,@ActivityName = ActivityName
		FROM ActivityTable (NOLOCK)
		WHERE ProcessDefId = @DBProcessDefId
		AND ActivityId = @DBActivityId

		SELECT @ConditionStr = @ConditionStr + ' AND ActivityId =  ' + CONVERT(varchar(5), @DBActivityId)

		/* WFTransferData must be executed before running this script */
		IF (@ActivityType = 2 OR @ActivityType = 3) /* 2: Exit, 3: Discard */
		BEGIN
			EXECUTE('DECLARE purge_cursor CURSOR FAST_FORWARD FOR ' +
				' SELECT ProcessInstanceId, Var_Rec_1 ' +
				' FROM QueueHistoryTable A ' +
				' WHERE ' + @ConditionStr)
		END
		ELSE
		BEGIN
			EXECUTE('DECLARE purge_cursor CURSOR FAST_FORWARD FOR ' +
				' SELECT ProcessInstanceId, Var_Rec_1 '+
				' FROM QueueView A ' +
				' WHERE ' + @ConditionStr)
		END
	END
	ELSE
	BEGIN
		/*EXECUTE('DECLARE purge_cursor CURSOR FAST_FORWARD FOR ' +
			' SELECT A.ProcessInstanceId, Var_Rec_1 '+
			' FROM ProcessInstanceTable A, QueueDataTable B ' +
			' WHERE A.ProcessInstanceId = B.ProcessInstanceId ' +
			' AND ' + @ConditionStr + ' union all ' + 
			' SELECT ProcessInstanceId, Var_Rec_1 ' +
			' FROM QueueHistoryTable A ' + ' WHERE ' + @ConditionStr)*/
		EXECUTE('DECLARE purge_cursor CURSOR FAST_FORWARD FOR ' +
			' SELECT ProcessInstanceId, Var_Rec_1 '+
			' FROM WFINSTRUMENTTABLE A WHERE ' +			
			@ConditionStr + ' union all ' + 
			' SELECT ProcessInstanceId, Var_Rec_1 ' +
			' FROM QueueHistoryTable A ' + ' WHERE ' + @ConditionStr)
		
	END

	OPEN purge_cursor

	FETCH purge_cursor INTO @ProcessInstanceId, @var_Rec_1

	WHILE(@@FETCH_STATUS <> -1)
	BEGIN
		IF(@@FETCH_STATUS <> -2)
		BEGIN
			BEGIN TRANSACTION PURGEDATA

			DELETE FROM WFReminderTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM WFLinksTable WHERE ChildProcessInstanceId = @ProcessInstanceId OR ParentProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM QueueHistoryTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)				
				GOTO ProcessNext
			END
			
			/*DELETE FROM QueueDataTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM ProcessInstanceTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM WorkListTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM WorkInProcessTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			
			DELETE FROM WorkDoneTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM WorkWithPSTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM PendingWorkListTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END */
			
			DELETE FROM WFINSTRUMENTTABLE WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM ExceptionTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM ToDoStatusTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM ExceptionHistoryTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA				
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM ToDoStatusHistoryTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END


			DELETE FROM WFMailQueueTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END						

			DELETE FROM WFMailQueueHistoryTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			
			DELETE FROM WFEscalationTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM WFEscInProcessTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END

			DELETE FROM WFReportDataTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			/*Changes done by Kimil for CQRN-90326*Start*/
			DELETE FROM WFATTRIBUTEMESSAGETABLE WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			DELETE FROM WFCommentsTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			DELETE FROM WFRTTaskInterfaceAssocTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			
			DELETE FROM WFTaskStatusTable WHERE ProcessInstanceId = @ProcessInstanceId
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA			
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
		
			DELETE FROM WFCommentsHistoryTable WHERE ProcessInstanceId = @ProcessInstanceId		/*WFS_8.0_020*/
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA 		
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			DELETE FROM WFATTRIBUTEMESSAGEHISTORYTABLE WHERE ProcessInstanceId = @ProcessInstanceId		/*WFS_8.0_020*/
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA 		
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			DELETE FROM WFRTTASKINTFCASSOCHISTORY WHERE ProcessInstanceId = @ProcessInstanceId		/*WFS_8.0_020*/
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA 		
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			DELETE FROM WFTaskStatusHistoryTable WHERE ProcessInstanceId = @ProcessInstanceId		/*WFS_8.0_020*/
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA 		
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			DELETE FROM WFReportDataHistoryTable WHERE ProcessInstanceId = @ProcessInstanceId		/*WFS_8.0_020*/
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA 		
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
			----Custom Data Procedure Start----
			EXEC WFPurgeCustomData @ProcessInstanceId,@DBProcessDefId
			
			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRANSACTION PURGEDATA 		
				INSERT INTO WFPurgeFailureLogTable
				VALUES(@ProcessInstanceId, @DBProcessDefId)
				GOTO ProcessNext
			END
		    ----Custom Data Procedure end------
			/*Changes done by Kimil for CQRN-90326*End*/
			IF @DBDeleteHistoryFlag = 'Y'
			BEGIN
				DELETE FROM WFCurrentRouteLogTable WHERE ProcessInstanceId = @ProcessInstanceId		/*WFS_8.0_020*/
				IF @@ERROR <> 0
				BEGIN
					ROLLBACK TRANSACTION PURGEDATA 		
					INSERT INTO WFPurgeFailureLogTable
					VALUES(@ProcessInstanceId, @DBProcessDefId)
					GOTO ProcessNext
				END
			
				DELETE FROM WFHistoryRouteLogTable WHERE ProcessInstanceId = @ProcessInstanceId		/*WFS_8.0_020*/
				IF @@ERROR <> 0
				BEGIN
					ROLLBACK TRANSACTION PURGEDATA			
					INSERT INTO WFPurgeFailureLogTable
					VALUES(@ProcessInstanceId, @DBProcessDefId)
					GOTO ProcessNext
				END
				
			END

			IF @DBDeleteExternalData = 'Y'
			BEGIN
				IF (@var_rec_1 IS NOT NULL AND @var_rec_1 > '0')
				BEGIN
					EXECUTE ('DELETE FROM '+ @ExtTableName +' WHERE ItemIndex = '+ @var_rec_1 )
					IF @@ERROR <> 0
					BEGIN	
						ROLLBACK TRANSACTION PURGEDATA			
						INSERT INTO WFPurgeFailureLogTable
						VALUES(@ProcessInstanceId, @DBProcessDefId)
						GOTO ProcessNext
					END
				END
			 END

			/* Delete folder corresponding to the Process Instance */
			IF (@var_rec_1 IS NOT NULL AND @var_rec_1 > '0')
			begin
				SELECT @FolderId = CONVERT(INT, @var_Rec_1)
				EXECUTE @DBStatus = PRTDELETEFolder @DBConnectId, @DBHostName, @FolderId, @DBReferenceFlag, @DBGenerateLogFlag, @DBLockFlag, @DBCheckOutFlag, @DBParentFolderIndex, @DBTransactionFlag
				IF (@DBStatus <> 0)
				BEGIN	
					SELECT Status = @DBStatus
					ROLLBACK TRANSACTION PURGEDATA				
					INSERT INTO WFPurgeFailureLogTable
					VALUES(@ProcessInstanceId, @DBProcessDefId)
					GOTO ProcessNext
				END
			end
			
			IF @DBGenerateLogFlag = 'Y'
			BEGIN
				SELECT @PurgeMessageStr = '<FieldName><PurgeInputData>'

				IF @DBStartDate IS NOT NULL
				BEGIN
					SELECT @PurgeMessageStr = @PurgeMessageStr +  '<StartTime>'+convert(varchar(22),coalesce(@DBStartDate,''),20)+'</StartTime>'
				END

				IF @DBEndDate IS NOT NULL
				BEGIN
					SELECT @PurgeMessageStr = @PurgeMessageStr +  '<EndTime>'+convert(varchar(22),coalesce(@DBEndDate,''),20)+'</EndTime>'
				END

				SELECT @PurgeMessageStr = @PurgeMessageStr + '</PurgeInputData></FieldName>'
		
				/*Insert Into WFMessageTable (message, status)
				values	('<Message><ActionId>39</ActionId><UserId>0</UserId><ProcessDefId>' + ISNULL(convert(nvarchar,@DBProcessDefId),'') + '</ProcessDefId><QueueId>0</QueueId><UserName>System</UserName><ActivityName></ActivityName><TotalWiCount>0</TotalWiCount><TotalDuration>0</TotalDuration><ActionDateTime>'+ convert(varchar(22), getDate(), 20) + '</ActionDateTime><EngineName></EngineName><ProcessInstance>' + coalesce(@ProcessInstanceId,'') + '</ProcessInstance><FiledId></FiledId><WorkitemId>1</WorkitemId><TotalPrTime>0</TotalPrTime><DelayTime>0</DelayTime><WKInDelay>0</WKInDelay><ReportType>D</ReportType><Flag>0</Flag>' + @PurgeMessageStr + '</Message>',N'N')*/
				
				Insert into WFCurrentRouteLogTable (ProcessDefId, ActivityId, ProcessInstanceId, WorkItemId, UserId, ActionId, ActionDateTime, AssociatedDateTime, AssociatedFieldId,AssociatedFieldName, ActivityName, UserName, NewValue, QueueId, ProcessVariantId) 
				values(@DBProcessDefId,@DBActivityId,@ProcessInstanceId,1,0,39,getDate(),null,0,@PurgeMessageStr, @ActivityName,'System',null,0,
				0) 
				IF (@@ERROR <> 0)
				BEGIN
					ROLLBACK TRANSACTION PURGEDATA			
					INSERT INTO WFPurgeFailureLogTable
					VALUES(@ProcessInstanceId, @DBProcessDefId)
					GOTO ProcessNext
				END
			END

			COMMIT TRANSACTION PURGEDATA
		END
		ProcessNext:
		FETCH NEXT FROM purge_cursor INTO @ProcessInstanceId, @var_Rec_1 
		IF @@ERROR <> 0
		BEGIN
			CLOSE purge_cursor
			DEALLOCATE purge_cursor
			RETURN
		END
	END

	CLOSE purge_cursor
	DEALLOCATE purge_cursor
	
	if @DBResetProcessSeqFlag = 'Y'
	BEGIN
	If Not Exists (Select * FROM WFINSTRUMENTTABLE WHERE ProcessDefId = @DBProcessDefId)
	BEGIN
		UPDATE ProcessDefTable
		SET RegStartingNo = 0
		WHERE ProcessDefId = @DBProcessDefId
		select @ProcessName=processname   from processdeftable where processdefid = @DBProcessDefId
		SELECT @ProcessName = REPLACE(@ProcessName,' ','')
		Select @tableProcessRegistration = 'IDE_Reg_' + CONVERT(varchar,@ProcessName)
		If Exists (Select * FROM SysObjects WHERE xType = 'U' and name = 'IDE_Reg_' + CONVERT(varchar,@ProcessName))
		Begin
			EXECUTE('Drop table '+ @tableProcessRegistration)
			--print 'Table dropped '+@tableProcessRegistration
		End
			--print 'Table created '+@tableProcessRegistration
		EXECUTE('Create Table '+ @tableProcessRegistration+'(seqId	INT IDENTITY (1,1))')
		Delete from SummaryTable where processdefid = @DBProcessDefId		/*WFS_8.0_020*/
		Delete from WFActivityReportTable where processdefid = @DBProcessDefId	/*WFS_8.0_020*/
	END
	END
END

go

Print 'Stored Procedure WFPurgeWorkItem compiled successfully.'
go

go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group				: Application –Products
	Product / Project		: BPM 10.0
	Module				: Omniflow Server
	File Name			: WFReturnRightsForUser.sql
	Programmer			: Mohnish Chopra
	Date written (DD/MM/YYYY)	: 05/02/2014
	Last Modified By (DD/MM/YYYY)	: 
	Last Modified On (DD/MM/YYYY)	: 
	Description			: Stored procedure to Return Rights for given User
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
				CHANGE HISTORY
------------------------------------------------------------------------------------------------------
DD/MM/YYYY	Changed by		Change Description
------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFReturnRightsForUser')
Begin
	Execute('DROP PROCEDURE WFReturnRightsForUser')
	Print 'Procedure WFReturnRightsForUser already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFReturnRightsForUser
(  
		@DBUserId				INT, 		
		@DBObjectType			NVARCHAR(20),  
		@queryParam0			NVARCHAR(50),  
		@queryParam1			NVARCHAR(50), 
		@queryParam2			NVARCHAR(250),
		@TempTableName			NVARCHAR(50),
		@DBsortOrder			NVARCHAR(1),  		
		@DBFilterString			NVARCHAR(255),
		@ProjectId				INT
) 
AS 

Set NoCount On
	 
DECLARE		@v_DBStatus					INT 
DECLARE		@v_queryStr					NVARCHAR(1000)
DECLARE		@v_profileId				INT
DECLARE		@v_profileAssocQuery		NVARCHAR(1000)
DECLARE		@v_FinalStatus				INT
DECLARE		@v_ErrorMessage				NVARCHAR(100)
DECLARE		@v_sortStr					NVARCHAR(6) 
DECLARE		@v_op						CHAR(1) 
--DECLARE		@v_orderByStr				NVARCHAR(250)
DECLARE		@v_quoteChar 				CHAR(1) 
DECLARE		@v_prefix					NVARCHAR(50) 
DECLARE		@v_filterStr				NVARCHAR(255)
DECLARE		@ProjectIdCondition			NVARCHAR(255)


BEGIN
	SELECT @v_FinalStatus = 0					
	SELECT @v_ErrorMessage = ''
	SELECT @v_quoteChar = CHAR(39)
--	SELECT @v_lastValueStr = ''
	SELECT @v_prefix = ''
	SELECT @v_filterStr = ''
	SELECT @ProjectIdCondition	=''
	IF(@DBsortOrder = 'D') 
	BEGIN 		
		SELECT @v_sortStr = ' DESC '  
		SELECT @v_op = '<'  
	END 
	Else /* IF(@DBsortOrder = 'A') */  
	BEGIN 		
		SELECT @v_sortStr = ' ASC '  
		SELECT @v_op = '>'  
	END
	
	IF(@DBFilterString IS NOT NULL)
	BEGIN
		SELECT @v_filterStr = ' AND ' + @DBFilterString
	END	
	
	IF(@ProjectId > 0) 
	BEGIN 		
		SELECT	@ProjectIdCondition = ' AND projectid = ' + convert(varchar,@ProjectId) 
	END 
	
	--SELECT @v_orderByStr = 	' ORDER BY ' + @queryParam0 + ' ' + @v_sortStr
	/*	
	IF(@DBAssocType = 1)
		BEGIN
			SELECT @v_queryStr = 'Select GroupId from WFGroupMemberView Where UserId = ' + CONVERT(NVarchar(10),@DBUserId)
		END
	ELSE IF (@DBAssocType = 2) 
		BEGIN
			
		END	
	*/
	
	--EXECUTE('TRUNCATE TABLE ' + @TempTableName)
	
	/* Fetch Objects associated with profile*/	
	BEGIN TRANSACTION TxnInsert
	SELECT @v_queryStr = 'Select DISTINCT ProfileId from ProfileUserGroupView Where UserId = ' + CONVERT(NVarchar(10),@DBUserId)	
	EXECUTE ('DECLARE QueryCur CURSOR FAST_FORWARD FOR ' + @v_queryStr)	
	IF(@@ERROR <> 0)
	BEGIN
		ROLLBACK TRANSACTION TxnInsert
		SELECT @v_FinalStatus = -101
		SELECT @v_ErrorMessage = 'Error while opening QueryCursor'
		RETURN
	END
	ELSE
	BEGIN		
		OPEN QueryCur 
		FETCH NEXT FROM QueryCur INTO @v_profileId
		--SELECT @counterInt = 1
		WHILE(@@FETCH_STATUS <> -1)
		BEGIN
			IF (@@FETCH_STATUS <> -2)		
			BEGIN
				SELECT @v_profileAssocQuery = 'select A.Objectid ObjectId, ' + @queryParam0 + ' ObjectName, D.RightString, 2 AssociationType  from WFUserObjAssocTable A  WITH (NOLOCK),WFObjectListTable  B  WITH (NOLOCK), ' + @queryParam1 + ' C  WITH (NOLOCK), WFProfileObjTypeTable D  WITH (NOLOCK) where D.userid = ' + CONVERT(NVarchar(10),@v_profileId) + ' and ProfileId = D.userid and D.associationtype = 2 and B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) '+ @queryParam2 +@ProjectIdCondition
				
--				SELECT @v_profileAssocQuery = 'select ' + @v_prefix + ' A.Objectid ObjectId, ' + @queryParam0 + ' ObjectName, D.RightString, 2 AssociationType  from WFUserObjAssocTable A,WFObjectListTable  B, ' + @queryParam1 + ' C, WFProfileObjTypeTable D where D.userid = ' + CONVERT(NVarchar(10),@v_profileId) + ' and ProfileId = D.userid and D.associationtype = 2 and B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) '+ @queryParam2 + @v_lastValueStr + @v_orderByStr
			
			
			EXECUTE ('INSERT INTO ' + @TempTableName + ' (ObjectId, ObjectName, RightString, AssociationType) ' 	+ @v_profileAssocQuery)
			IF(@@ERROR <> 0)
			BEGIN
				ROLLBACK TRANSACTION TxnInsert		
				--EXECUTE ('insert into righttest values (1001, '+ @v_profileAssocQuery+')')						
				SELECT @v_FinalStatus = 15					
				SELECT @v_ErrorMessage = 'Error while insertion of objects associated with Profile'
			--insert into righttest values (9999, @v_objIdStr)
				BREAK
			END	
				
			END
			FETCH NEXT FROM QueryCur INTO @v_profileId
		END
		CLOSE QueryCur  
		DEALLOCATE QueryCur
	END	
		
	/* Fetch Objects associated with Group*/	
	SELECT @v_queryStr = 'Select GroupIndex from WFGroupMemberView Where UserIndex = ' + CONVERT(NVarchar(10),@DBUserId)
	EXECUTE ('DECLARE QueryCur CURSOR FAST_FORWARD FOR ' + @v_queryStr)	
	IF(@@ERROR <> 0)
	BEGIN
		ROLLBACK TRANSACTION TxnInsert
		SELECT @v_FinalStatus = -101
		SELECT @v_ErrorMessage = 'Error while opening QueryCursor'
		RETURN
	END
	ELSE
	BEGIN		
		OPEN QueryCur 
		FETCH NEXT FROM QueryCur INTO @v_profileId
		--SELECT @counterInt = 1
		WHILE(@@FETCH_STATUS <> -1)
		BEGIN
			IF (@@FETCH_STATUS <> -2)		
			BEGIN
				SELECT @v_profileAssocQuery = 'select A.objectid ObjectId, ' + @queryParam0 + ' ObjectName, RightString, 1 AssociationType from 	WFUserObjAssocTable A  WITH (NOLOCK),WFObjectListTable  B  WITH (NOLOCK), ' + @queryParam1 + ' C  WITH (NOLOCK), WFProfileObjTypeTable D WITH (NOLOCK) where B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and A.associationType = D.associationType and A.AssociationType = D.AssociationType and D.associationType = 1 and A.userid= D.userid and D.userid = ' + CONVERT(NVarchar(10),@v_profileId) + ' and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) ' + @queryParam2+@ProjectIdCondition
				
			EXECUTE ('INSERT INTO ' + @TempTableName + ' (ObjectId, ObjectName, RightString, AssociationType) ' 	+ @v_profileAssocQuery)
			--EXECUTE ('insert into righttable values (1004, 'After group loop')')
			IF(@@ERROR <> 0)
			BEGIN
				ROLLBACK TRANSACTION TxnInsert					
				--EXECUTE ('insert into righttest values (1002, '+ @v_profileAssocQuery+')')
				SELECT @v_FinalStatus = 15					
				SELECT @v_ErrorMessage = 'Error while insertion of objects associated with Group'
				BREAK
			END	
				
			END
			FETCH NEXT FROM QueryCur INTO @v_profileId
		END
		CLOSE QueryCur  
		DEALLOCATE QueryCur
	END	
		
	SELECT @v_profileAssocQuery = 'select A.objectid ObjectId, ' + @queryParam0 + ' ObjectName, RightString, 0 AssociationType from WFUserObjAssocTable A  WITH (NOLOCK),WFObjectListTable  B  WITH (NOLOCK), ' + @queryParam1 + ' C  WITH (NOLOCK), WFProfileObjTypeTable D  WITH (NOLOCK) where B.objecttype = ''' + @DBObjectType + ''' and A.ObjectTypeId = B.ObjectTypeId and A.ObjectTypeId = D.ObjectTypeId and A.associationType = D.associationType and A.associationtype = 0 and A.userid= D.userid and D.userid = ' + CONVERT(NVarchar(10),@DBUserId) + ' and (A.AssignedTillDATETIME  IS NULL OR A.AssignedTillDATETIME >= getDate()) ' + @queryParam2 +@ProjectIdCondition
	
	EXECUTE ('INSERT INTO ' + @TempTableName + ' (ObjectId, ObjectName, RightString, AssociationType) ' + @v_profileAssocQuery)
	--EXECUTE ('insert into righttable values (1006, 'After user loop')')
	
	IF(@@ERROR <> 0)
	BEGIN
		ROLLBACK TRANSACTION TxnInsert			
		--EXECUTE ('insert into righttest values (1003, '+ @v_profileAssocQuery+')')
		SELECT @v_FinalStatus = 15					
		SELECT @v_ErrorMessage = 'Error while insertion of objects associated with user'
		RETURN
	END	
	
	IF(@v_FinalStatus = 0)			
	BEGIN		
		COMMIT TRANSACTION TxnInsert
		EXECUTE ('Select ObjectId, ObjectName, RightString, AssociationType from ' + @TempTableName + '  WITH (NOLOCK) Order By AssociationType Desc')
		EXECUTE ('Select DISTINCT ' + @v_prefix + ' ObjectId, ObjectName from ' + @TempTableName + '  WITH (NOLOCK) WHERE 1 = 1 ' + @v_filterStr + ' Order by ObjectName ' + @v_sortStr)
		RETURN
	END
	ELSE
	BEGIN	
		ROLLBACK TRANSACTION TxnInsert					
		SELECT @v_FinalStatus Status,	
		@v_ErrorMessage	Message		
		RETURN
	END
	--RETURN	
	
END  

go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group				: Application –Products
	Product / Project		: Omniflow 10.1
	Module				: Omniflow Server
	File Name			: WFGetNextWorkItemForPS.sql
	Programmer			: Mohnish Chopra
	Date written (DD/MM/YYYY)		: 05/02/2014
	Last Modified By (DD/MM/YYYY)	: 
	Last Modified On (DD/MM/YYYY)	: 
	Description			: Stored procedure that returns the locked workitem data for PS . If no locked workitem exists, then SP
							locks the workitem and then returns the same.
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
				CHANGE HISTORY
------------------------------------------------------------------------------------------------------
DD/MM/YYYY	Changed by		Change Description
13/10/16	Rishi		Bug-64860 - PRDP Bug 59917 - Bulk Ps support for MSSQL Database
19/05/2018	Ambuj		PRDP Merging :: Bug 77534 - Optimization in Procedures WFLoadAssignmentPS and WFGetNextWorkitemForPS
------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------*/
If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFGetNextWorkItemForPS')
Begin
	Execute('DROP PROCEDURE WFGetNextWorkItemForPS')
	Print 'Procedure WFGetNextWorkItemForPS already exists, hence older one dropped ..... '
End

go

Create Procedure WFGetNextWorkItemForPS(
	@DBSessionId			Int,
	@DBCSName			NVARCHAR(100),
	@DBProcessDefId			Int,
	@DBBulkPS				NVARCHAR(1)
)    
AS     
SET NOCOUNT ON     
BEGIN
	DECLARE @psId INT
	DECLARE @psName NVARCHAR(400)
	DECLARE @csSessionId INT	
	DECLARE @processInstanceId NVARCHAR(150)
	DECLARE @workItemId INT
	DECLARE @v_rowCount INT
	DECLARE @v_errorCode INT
	DECLARE	@v_quoteChar 			CHAR(1) 
	DECLARE @activityName   			NVARCHAR(30)
	DECLARE @activityId   				INT
	DECLARE @parentWorkItemId   		INT	
	DECLARE @assignmentType   			NVARCHAR(1)
	DECLARE @collectFlag   				NVARCHAR(1)
	DECLARE @priorityLevel   			SMALLINT
	DECLARE @lockStatus   				NVARCHAR(1)
	DECLARE @processVariantId			INT
	
	
	SET @csSessionId = 0
	SET @v_rowCount = 0

	BEGIN
		Select @psId = PSReg.PSId, @psName = PSReg.PSName from PSREGISTERATIONTABLE PSReg WITH(NOLOCK) , WFPSConnection PSCon WITH(NOLOCK) where PSCon.SessionId = @DBSessionId AND PSReg.PSID = PSCon.PSID 
		Select @v_rowCount = @@ROWCOUNT, @v_errorCode = @@ERROR
		IF @v_rowCount <= 0 or @v_errorCode <> 0
		BEGIN
			Select 11, NULL, NULL, NULL
			RETURN
		END		
	END
	
	BEGIN
		Select @csSessionId = PSCon.SessionID from PSREGISTERATIONTABLE PSReg WITH(NOLOCK) , WFPSConnection PSCon WITH(NOLOCK)  where PSReg.Type = 'C' AND PSReg.PSName = @DBCSName AND PSReg.PSID = PSCon.PSID				
	END

	BEGIN
		SET @v_rowCount = 0
		IF @DBBulkPS = 'Y'
			BEGIN
			Select Top 1 @processInstanceId = ProcessInstanceId, @workItemId = WorkItemId,@activityName=ActivityName,@activityId=ActivityId,@parentWorkItemId=ParentWorkItemId,@assignmentType= AssignmentType,@collectFlag= CollectFlag,@priorityLevel=PriorityLevel,@lockStatus= LockStatus ,@processVariantId=ProcessVariantId from WFINSTRUMENTTABLE WITH(NOLOCK) where ProcessDefId = @DBProcessDefId and ROUTINGSTATUS='Y' AND Q_UserId = @psId
			Select @v_rowCount = @@ROWCOUNT, @v_errorCode = @@ERROR
			
			IF @v_errorCode <> 0
			BEGIN
				SELECT 15, @csSessionId, @psId, @psName
				RAISERROR ('WFGetNextWorkItemForPS: Error while fetching the Workitem Locked by BulkPS from WFINSTRUMENTTABLE With Routing Status Y ', 16, 1)
				RETURN
			END
			IF @v_rowCount > 0 
			BEGIN
				SELECT 0, @csSessionId, @psId, @psName
				SELECT @processInstanceId ProcessInstanceId ,@workItemId WorkitemId,@activityName ActivityName,@activityId ActivityId,@parentWorkItemId ParentWorkitemId,@assignmentType AssignmentType,@collectFlag CollectFlag,@priorityLevel PriorityLevel,@lockStatus LockStatus,@processVariantId ProcessVariantId 
				RETURN
			END
		END
		IF @v_rowCount <= 0
		BEGIN
			Set @v_rowCount = 0
			Select Top 1 @processInstanceId = ProcessInstanceId, @workItemId = WorkItemId,@activityName=ActivityName,@activityId=ActivityId,@parentWorkItemId=ParentWorkItemId,@assignmentType= AssignmentType,@collectFlag= CollectFlag,@priorityLevel=PriorityLevel,@lockStatus= LockStatus ,@processVariantId=ProcessVariantId from WFINSTRUMENTTABLE WITH (UPDLOCK,READPAST) where ProcessDefId = @DBProcessDefId AND LOCKSTATUS='N' and ROUTINGSTATUS='Y' AND (Q_UserId = 0 OR Q_UserId IS NULL )
			Select @v_rowCount = @@ROWCOUNT, @v_errorCode = @@ERROR
			IF @v_errorCode <> 0
			BEGIN
				SELECT 15, @csSessionId, @psId, @psName
				RAISERROR ('WFGetNextWorkItemForPS: Error while fetching the next Unlocked Workitem from WFInstrumentTable with Routingstatus Y and LockStatus N and Q_UserID null or 0', 16, 1)
				RETURN
			END
			IF @v_rowCount <= 0
			BEGIN
				IF @DBBulkPS = 'Y'
				BEGIN
					SELECT 18, @csSessionId, @psId, @psName
					RETURN	
				END		
				ELSE
					BEGIN
						Select Top 1 @processInstanceId = ProcessInstanceId, @workItemId = WorkItemId,@activityName=ActivityName,@activityId=ActivityId,@parentWorkItemId=ParentWorkItemId,@assignmentType= AssignmentType,@collectFlag= CollectFlag,@priorityLevel=PriorityLevel,@lockStatus= LockStatus ,@processVariantId=ProcessVariantId from WFINSTRUMENTTABLE WITH(NOLOCK) where ProcessDefId = @DBProcessDefId and ROUTINGSTATUS='Y' AND LOCKSTATUS='Y' AND Q_UserId = @psId
						Select @v_rowCount = @@ROWCOUNT, @v_errorCode = @@ERROR
						IF @v_errorCode <> 0
						BEGIN
							SELECT 15, @csSessionId, @psId, @psName
							RAISERROR ('WFGetNextWorkItemForPS: Error while fetching the next Unlocked Workitem from WFInstrumentTable with Routingstatus Y and LockStatus Y and Q_UserID as the incoming PSId', 16, 1)
						RETURN
						END
						IF @v_rowCount > 0 
						BEGIN
							SELECT 0, @csSessionId, @psId, @psName
							SELECT @processInstanceId ProcessInstanceId ,@workItemId WorkitemId,@activityName ActivityName,@activityId ActivityId,@parentWorkItemId ParentWorkitemId,@assignmentType AssignmentType,@collectFlag CollectFlag,@priorityLevel PriorityLevel,@lockStatus LockStatus,@processVariantId ProcessVariantId 
						RETURN
						END
					END
			END
			ELSE
			BEGIN
				Update WFINSTRUMENTTABLE SET WorkItemState=6,StateName='COMPLETED', LockStatus='Y' ,Q_UserId=@psId,LockedTime=getDate() WHERE ProcessInstanceId = @processInstanceId AND WorkItemId = @workItemId; 		
				IF @v_errorCode <> 0
				BEGIN
					SELECT 15, @csSessionId, @psId, @psName
					RAISERROR ('WFGetNextWorkItemForPS: Error while Updating the status of fetched Workitem from WFInstrumentTable', 16, 1)
					RETURN
				END
				IF @v_rowCount > 0
				BEGIN
					SELECT 0, @csSessionId, @psId, @psName
					SELECT @processInstanceId ProcessInstanceId ,@workItemId WorkitemId,@activityName ActivityName,@activityId ActivityId,@parentWorkItemId ParentWorkitemId,@assignmentType AssignmentType,@collectFlag CollectFlag,@priorityLevel PriorityLevel,@lockStatus LockStatus,  
					@processVariantId ProcessVariantId
					RETURN
				END
				ELSE
				BEGIN
					SELECT 15, @csSessionId, @psId, @psName
					RAISERROR ('WFGetNextWorkItemForPS: Error due to RowCount returned while Updating the status of fetched Workitem from WFInstrumentTable', 16, 1)
					RETURN
				END
					
			END
		END
	END
END
		
go

Print 'Stored Procedure WFGetNextWorkItemForPS compiled successfully ........'

go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group				: Genesis
	Product / Project	: OmniFlow 10.1
	Module				: Transaction Server
	File Name			: WFLoadAssignmentPS.sql (Oracle)
	Author				: Mohnish Chopra
	Date written (DD/MM/YYYY)	: 18/02/2014
	Description			: Stored procedure to Distribute Load among PS for Bulk load activities
						  This procedure shall be scheduled on an interval of 15 mins.
						  The recommended value of DBThreshold is 500.
                          This parameter is the count of workitems on an activity, beyond which
                          load on the acitvity will be distributed among running PS.
                          The recommended value of DBTimeOutParameter is 30 mins.
                          If PS does not process an item which is allocated for given time.
                          Workitem is be send back to pool for redistribution.
______________________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________________
 Date		Change By		Change Description (Bug No. (If Any))
13/10/16	Rishi		Bug-64860 - PRDP Bug 59917 - Bulk Ps support 
19/05/2018	Ambuj		PRDP Merging :: Bug 77534 - Optimization in Procedures WFLoadAssignmentPS and WFGetNextWorkitemForPS
____________________________________________________________________________________________________*/
If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFLoadAssignmentPS')
Begin
	Execute('DROP PROCEDURE WFLoadAssignmentPS')
	Print 'Procedure WFLoadAssignmentPS already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFLoadAssignmentPS(
	@DBthreshold INT = 500,
	@DBUseFactor INT = 0,   
	@DBUnUseFactor INT = 1, 
	@DBTimeOutParameter INT = 30,
	@DBActivityID INT = 0,
	@DBProcessDefID INT = 0
)
AS
 
	DECLARE @v_STR1             VARCHAR(8000);
    DECLARE @v_STR2             VARCHAR(8000);
    DECLARE @v_STR3             VARCHAR(8000);
	DECLARE @v_ACT				VARCHAR(1);
	DECLARE @v_ISBULKPS			VARCHAR(1);
    DECLARE @v_ProcessDefId      INT;
    DECLARE @v_ActivityId        INT;
    DECLARE @v_count             INT;
    DECLARE @v_fCount            INT;
    DECLARE @v_PSId              INT;
    DECLARE @v_WICount           INT;
	DECLARE @v_PSName			VARCHAR(100);

BEGIN
	IF  @DBProcessDefID <= 0 
		BEGIN
			RAISERROR ('WFLoadAssignmentPS: Error ProcessDefId cannot be 0', 16, 1)
			RETURN
		END		

	IF @DBActivityID <> 0 
		SELECT @v_ACT = 'Y'
	ELSE
		SELECT @v_ACT = 'N'
		
	IF @DBUseFactor = 0 
		SELECT @v_ISBULKPS = 'Y'
	ELSE
		SELECT @v_ISBULKPS = 'N'
		
	IF @v_ACT = 'Y' 
	BEGIN
		UPDATE WFINSTRUMENTTABLE SET Q_USERId = NULL, LOCKEDTIME = NULL, LOCKSTATUS = N'N', LOCKEDBYNAME = NULL WHERE RoutingStatus = 'Y' and LockStatus = 'Y' AND LockedTime < (getDate() - (@DBTimeOutParameter/ (	24 * 60))) AND ProcessDefId = CAST(@DBProcessDefID AS VARCHAR)  AND ActivityId = CAST(@DBActivityID AS VARCHAR) 
	END
	ELSE
		UPDATE WFINSTRUMENTTABLE SET Q_USERId = NULL, LOCKEDTIME = NULL, LOCKSTATUS = N'N', LOCKEDBYNAME = NULL WHERE  RoutingStatus = 'Y' and LockStatus = 'Y' AND LockedTime < (getDate() - @DBTimeOutParameter/ (24 * 60))
	
	IF @v_ACT = 'Y'
		DECLARE cur_ProcDefId CURSOR FOR
		SELECT ProcessDefId, ActivityId FROM WFINSTRUMENTTABLE WHERE ProcessDefId = @DBProcessDefID AND ActivityId = @DBActivityID AND RoutingStatus = 'Y' AND LockStatus = 'N' GROUP BY processdefid, activityid HAVING count(1) > @DBthreshold
	ELSE
		DECLARE cur_ProcDefId CURSOR FOR
		SELECT ProcessDefId, ActivityId FROM WFINSTRUMENTTABLE WHERE  RoutingStatus = 'Y' AND LockStatus = 'N' GROUP BY processdefid, activityid HAVING count(1) > @DBthreshold 

	OPEN cur_ProcDefId
	
   	FETCH NEXT FROM cur_ProcDefId INTO @v_ProcessDefId,@v_ActivityId
	WHILE (@@Fetch_STATUS = 0)
	BEGIN
	
		IF @v_ISBULKPS = 'Y'
		BEGIN
			SELECT @v_count = count(1) FROM PSRegisterationTable  psreg inner join WFPSConnection PSCon ON psreg.PSID=pscon.psid  WHERE Data = 'PROCESS SERVER' AND ProcessDefId = @v_ProcessDefId 
			and pscon.SessionId is not NULL 
			and UPPER(BulkPS) = 'Y'
		END
		ELSE
			BEGIN
			SELECT @v_count = count(1) FROM PSRegisterationTable  psreg inner join WFPSConnection PSCon ON psreg.PSID=pscon.psid  WHERE Data = 'PROCESS SERVER' AND ProcessDefId = @v_ProcessDefId 
			and pscon.SessionId is not NULL 
			SELECT @v_count = @v_count * (@DBUseFactor/ (@DBUseFactor + @DBUnUseFactor))
				
			END	
		
		 SELECT @v_fCount= FLOOR(@v_count)
		
		IF @v_fCount <> 0 
            BEGIN
		IF @v_ISBULKPS = 'Y'
					DECLARE cur_PSId CURSOR FOR
					SELECT TOP (@v_fCount) psreg.psid, psreg.PSName FROM PSRegisterationTable psreg inner join WFPSConnection pscon on psreg.psid=pscon.psid WHERE Data = 'PROCESS SERVER' AND ProcessDefId = @v_ProcessDefId 
					and pscon.SessionId is not NULL 
					and UPPER(BulkPS) = 'Y' order by PSId
				ELSE
					DECLARE cur_PSId CURSOR FOR 
					SELECT TOP (@v_fCount) psreg.psid, psreg.PSName FROM PSRegisterationTable psreg inner join WFPSConnection pscon on psreg.psid=pscon.psid WHERE Data = 'PROCESS SERVER' AND ProcessDefId = @v_ProcessDefId 
					and pscon.SessionId is not NULL 
					order by PSId
				
				
                SELECT @v_WICount = count(1) FROM WFINSTRUMENTTABLE WHERE ProcessDefId = @v_ProcessDefId AND ActivityId = @v_ActivityId AND ROUTINGSTATUS = 'Y' AND LockStatus = 'N'
				SELECT @v_WICount = @v_WICount/ @v_fCount
                SELECT @v_WICount = FLOOR(@v_WICount)
				
                    OPEN cur_PSId 
					FETCH NEXT FROM cur_PSId INTO @v_PSId, @v_PSName
                    WHILE(@@Fetch_STATUS = 0)
                        BEGIN
								
								UPDATE TOP (@v_WICount) WFINSTRUMENTTABLE SET LOCKEDTIME = getDate(), Q_UserId = @v_PSId, LOCKSTATUS = N'Y', LOCKEDBYNAME = @v_PSName WHERE ProcessDefId = @v_ProcessDefId AND ActivityId = @v_ActivityId AND (Q_USERId IS NULL OR Q_USERId=0) AND RoutingStatus ='Y' AND LockStatus = N'N'
								FETCH NEXT FROM cur_PSId INTO @v_PSId, @v_PSName
                        END
	
                    
                    CLOSE cur_PSId
					DEALLOCATE cur_PSId
            END
        FETCH NEXT FROM cur_ProcDefId INTO @v_ProcessDefId,@v_ActivityId
		
	END
	CLOSE cur_ProcDefId
	DEALLOCATE cur_ProcDefId

END

go

go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group						: Genesis
	Product / Project			: OmniFlow 10.1
	Module						: Transaction Server
	File Name					: WFLoadAssignmentPS.sql (Oracle)
	Author						: Mohnish Chopra
	Date written (DD/MM/YYYY)	: 04/04/2014
	Description					: Stored procedure to Expire workitems candidates for expiry
______________________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________________
 Date		Change By		Change Description (Bug No. (If Any))
22/06/2017	Sajid Khan		Bug 70211 - AssociatedFieldName is coming blank for ActionId = 28[Workitem Expired] 
____________________________________________________________________________________________________*/
If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFExpireWorkItems')
Begin
	Execute('DROP PROCEDURE WFExpireWorkItems')
	Print 'Procedure WFExpireWorkItems already exists, hence older one dropped ..... '
End

go

Create Procedure WFExpireWorkItems
AS     
SET NOCOUNT ON  
DECLARE		@v_rowCount		INT   
DECLARE @v_DivertedUserIndex INT 
BEGIN

	

	BEGIN
	

	Update WFINSTRUMENTTABLE  WITH (UPDLOCK,READPAST) set AssignmentType = 'X', WorkItemState = 6,Q_queueid=0, Statename = 'COMPLETED' , LockStatus = 'N',
             		RoutingStatus = 'Y' , ValidTill = null, Q_UserId = null, AssignedUser = null, FilterValue = null, LockedByName = null, LockedTime = null, NotifyStatus	= null , Q_DivertedByUserId = 0,Q_StreamId = Null ,QueueName = NULL,QueueType = NULL Output INSERTED.processinstanceid ,INSERTED.workitemid,INSERTED.processdefid,INSERTED.activityid,INSERTED.ACTIVITYNAME,INSERTED.Q_UserId,28,getDate(),0 into WFCURRENTROUTELOGTABLE(PROCESSINSTANCEID,WORKITEMID,PROCESSDEFID,ACTIVITYID,ACTIVITYNAME,USERID,ACTIONID,ACTIONDATETIME,ASSOCIATEDFIELDID) 	where ValidTill<getDate() 
	
	SELECT @@ROWCOUNT			
	END
	--Going to Delete entries from UserDiversionTable in case Diversion Period is reached.
	print 'Going to Delete entries from UserDiversionTable in case Diversion Period reached '
	BEGIN
		DECLARE EXPIRY_CURSOR CURSOR FAST_FORWARD FOR
		SELECT DivertedUserIndex FROM UserDiversionTable WHERE ToDate < GETDATE()
	    OPEN EXPIRY_CURSOR
	    FETCH NEXT FROM EXPIRY_CURSOR INTO @v_DivertedUserIndex
		WHILE(@@FETCH_STATUS = 0)
		BEGIN
			DELETE FROM UserDiversionTable WHERE DivertedUserIndex = @v_DivertedUserIndex
			FETCH NEXT FROM EXPIRY_CURSOR INTO @v_DivertedUserIndex
		END
	    CLOSE EXPIRY_CURSOR
	    DEALLOCATE EXPIRY_CURSOR
	END
	RETURN 
END		
go


go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
------------------------------------------------------------------------------------------------------
	Group				: Application –Products
	Product / Project	: Omniflow 9.0
	Module				: Transaction Server
	File Name			: WFGetExportedWorkitem.sql
	Author				: Neeraj Sharma
	Date written (DD/MM/YYYY)	: 01/11/2013
	Description			: To Check the Rights on Query WorkStep and return mainCode.
------------------------------------------------------------------------------------------------------
			CHANGE HISTORY
------------------------------------------------------------------------------------------------------*/

If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'WFGetExportedWorkitem')
Begin
	Execute('DROP PROCEDURE WFGetExportedWorkitem')
	Print 'Procedure WFGetExportedWorkitem already exists, hence older one dropped ..... '
End

go

CREATE PROCEDURE WFGetExportedWorkitem(
	@DBSessionId			Integer,
	@DBProcessInstanceId		NVarchar(64),
	@DBWorkItemId			Integer,
	@DBQueueId			Integer,
	@DBQueueType			NVarchar(1),		/* '' -> Search; 'F' -> FIFO; 'D', 'S', 'N' -> WIP */
	@DBLastProcessInstanceId	NVarchar(64),
	@processDefId		Integer,
	@DBGenerateLog			NVarchar(1),
	@DBOrderBy			Integer, /*Bug #815*/
	@DBSortOrder			NVarchar(64),
	@DBLastValue			NVarchar(1000),
	@DBAssignMe			NVarchar(1)	,
	@DBClientOrderFlag	NVarchar(1)
	
)
AS
Begin

	Declare @rowCount		INT
	Declare @userIndex		INT
	Declare	@status			NVARCHAR(1)
	Declare @userName		NVARCHAR(30)
	Declare @QueryActivityId        INT
	Declare @v_QueryPreview		NVARCHAR(1)
	Declare @MainCode       INT
	Declare @ActivityId 		INT
	Declare @lockFlag		NVARCHAR(1)	

BEGIN
	Select @mainCode=0;
	Select	@userIndex	= userIndex,
		@userName	= userName,
		@status = statusFlag
	FROM	WFSessionView, WFUserView 
	WHERE	UserId		= UserIndex 
	AND	SessionID	= @DBSessionId 

	Select	@rowCount	= @@rowCount

	IF(@rowCount <= 0)
	Begin
		SELECT	@MainCode	= 11		/* Invalid Session Handle */
		Select	@MainCode	MainCode,
			@lockFlag	lockFlag
		RETURN
	End

	
	IF(@status = 'N')
	BEGIN
		Update WFSessionView set statusflag = 'Y' , AccessDateTime = GETDATE()
          WHERE SessionID = @DBSessionId
	END
	
	IF(@DBQueueId >= 0)
		Begin
			Select	@MainCode = 810 /* Workitem not in the queue specified. */
			Select	@MainCode	MainCode,
				@lockFlag	lockFlag
			Return
		End
		/* ActivityType 11 is for query workstep */
		/*WFS_8.0_031,WFS_8.0_121*/
		

			Select Top 1 @QueryActivityId = ActivityTable.ActivityId,
			@v_QueryPreview = QUSERGROUPVIEW.QueryPreview
			FROM ActivityTable, QueueStreamTable , QUSERGROUPVIEW
			WHERE ActivityTable.ProcessDefId = QueueStreamTable.ProcessDefId
			AND ActivityTable.ActivityId = QueueStreamTable.ActivityId
			AND QUSERGROUPVIEW.QueueId = QueueStreamTable.QueueId
			AND ActivityTable.ActivityType = 11
			AND ActivityTable.ProcessDefId = @ProcessDefID
			AND QUSERGROUPVIEW.UserId = @userIndex
			ORDER BY QUSERGROUPVIEW.UserId DESC
		Select @rowCount = @@rowCount
		If(@rowCount <= 0)
			Begin
				Select Top 1 @QueryActivityId = ActivityTable.ActivityId,
				@v_QueryPreview = QUSERGROUPVIEW.QueryPreview
				FROM ActivityTable, QueueStreamTable , QUSERGROUPVIEW
				WHERE ActivityTable.ProcessDefId = QueueStreamTable.ProcessDefId
				AND ActivityTable.ActivityId = QueueStreamTable.ActivityId
				AND QUSERGROUPVIEW.QueueId = QueueStreamTable.QueueId
				AND ActivityTable.ActivityType = 11
				AND ActivityTable.ProcessDefId = @ProcessDefID
				AND QUSERGROUPVIEW.UserId = @userIndex
				AND QUSERGROUPVIEW.groupid IS NOT NULL
				ORDER BY QUSERGROUPVIEW.UserId DESC
			Select @rowCount = @@rowCount
			If(@rowCount <= 0)	
			
				Begin
					Select @MainCode = 300 /*No Authorization*/
					Select @MainCode	MainCode,
						   @lockFlag	LockFlag
					Return
				End
				Else
				Begin
					/*WFS_8.0_031*/
					Select @MainCode = 16
					IF(@v_QueryPreview = 'Y' OR @v_QueryPreview IS NULL)
					BEGIN
						Select @ActivityId = @QueryActivityId
					END
				End
			END
			ELSE
			BEGIN
			
				Select @MainCode = 16 /*To be shown in Read only mode*/
				IF(@v_QueryPreview = 'Y' OR @v_QueryPreview IS NULL)
				BEGIN
					Select @ActivityId = @QueryActivityId
				END
			END	
END
				Select	@MainCode	MainCode, 
					@lockFlag	LockFlag,
					@userIndex  UserIndex
END

go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group				: Genesis
	Product / Project	: iBPS 
	Module				: Transaction Server
	File Name			: WFFetchCaseList.sql (SQL)
	Author				: Mohnish Chopra
	Date written (DD/MM/YYYY)	: 29/10/2015
	Description			: Stored procedure to fetch my Cases.
						  My cases for User A will include :
							    1. Cases that are owned by Case Manager A 
   								2. Cases in which task are assigned to Case Worker A or Case Participant A
______________________________________________________________________________________________________
				CHANGE HISTORY
______________________________________________________________________________________________________
 Date		Change By		Change Description (Bug No. (If Any))
06/11/2015	Mohnish Chopra		Changes for Case management -Can Initiate requirement 
30/11/2015	Mohnish Chopra		Bug 57931 - Jboss EAP : Error message while changing priority of WI
								Sending LastModifiedTime in WFFetchCaseWorkItems
/02/12/2015	Mohnish Chopra		Bug 58014 - show case visualization check box during assigning a task is not working according to specification
09-05-2017	Sajid Khan			Queue Varaible Extension Enahncement
17/05/2017 Kumar Kimil          Length of Query Exceeding the max limit of NVARCHAR after Queue Variable Extension hence changed
14/09/2017	Mohnish Chopra		Changes for Searching ,sorting and filtering in FetchCaseList
24/10/2017	AMbuj Tripathi		Case registration changes for Adding URN in the output of WFFetchCaseWorkItems API
15/02/2018	Ambuj Tripathi		Bug#Bug 76025 - Arabic:-Batching not working if batch size is 3.
22/04/2018  Ambuj Tripathi		Bug 76862 - Remove the db console messages from all procedures
____________________________________________________________________________________________________*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFFetchCaseList')
BEGIN
	EXECUTE('DROP PROCEDURE WFFetchCaseList')
	PRINT 'PROCEDURE WFFetchCaseList ALREADY EXISTS HENCE OLDER ONE DROPPED'
END

go

CREATE PROCEDURE WFFetchCaseList
(  
		@DBsessionId			INT,  
		@DBsortOrder			NVARCHAR(1) ,  
		@DBorderBy				INT , 
		@DBbatchSize			INT , 
		@DBlastWorkItem			INT , 
		@DBlastProcessInstance	NVARCHAR(63) , 
		@DBlastValue			NVARCHAR(2000) , 
		@DBCaseManagerFlag		NVARCHAR(1) ,
		@DBSearchFilter			NVARCHAR(2000),
		@DBreturnParam          INT /* 0 -> only list, if 1 -> only count, if 2 -> both count and list*/
) 
AS 

Set NoCount On
	 
DECLARE		@v_DBStatus			INT 
DECLARE		@v_rowCount			INT 	
DECLARE		@v_queryStr1			VARCHAR(8000) 
DECLARE     @v_queryStr2            NVARCHAR(4000)
DECLARE		@groupByClause			VARCHAR(8000) 
DECLARE     @v_queryForCaseWorker	VARCHAR(8000)

DECLARE		@v_CountStr			VARCHAR(8000) 
DECLARE		@v_CountStr1			VARCHAR(8000) 
DECLARE		@v_UserId			INT 
DECLARE		@v_UserName			NVARCHAR(63) 


DECLARE		@v_innerOrderBy			NVARChar(200) 
DECLARE		@v_orderByPos			INT 
DECLARE		@v_tempFilter			NVARCHAR(2000) 
DECLARE		@v_counter			INT 
DECLARE		@v_counter1			INT 
DECLARE		@v_noOfCounters			INT /* Bugzilla Bug 1703 */
DECLARE		@v_counterCondition		INT 
DECLARE		@v_OrderByStr			NVARChar(2000) 
DECLARE		@v_sortStr			NVARCHAR(6) 
DECLARE		@v_op				CHAR(1) 
DECLARE		@v_sortFieldStr			NVARCHAR(50) 
DECLARE		@v_quoteChar 			CHAR(1) 
DECLARE		@v_TempColumnVal		NVARCHAR(64) 
DECLARE		@v_lastValueStr			NVARCHAR(1000) 
DECLARE 	@DBmainCode			INT 
DECLARE 	@DBsubCode				INT 
DECLARE		@v_returnCount                  INT
DECLARE		@v_TempCount			INT
DECLARE		@v_reverseOrder			INT 
DECLARE		@v_prefix			NVARCHAR(50) 


BEGIN 
	SELECT @DBmainCode = 0 
	SELECT @DBsubCode = 0 
	SELECT @v_returnCount = 0
	SELECT @v_quoteChar = CHAR(39)  
	
	/* Check for session validity ... */  
	BEGIN 
		SELECT @v_UserId = UserID, @v_UserName = UserName  
		FROM WFSessionView, WFUserView 
		WHERE UserId = UserIndex AND SessionID = @DBsessionId 

		SELECT @v_rowcount = @@ROWCOUNT  
		SELECT @v_DBStatus = @@ERROR 
	END 


	IF (@v_DBStatus <> 0 OR @v_rowcount <= 0) 
	BEGIN 
		SELECT @DBmainCode = 11     /* Invalid Session */
		SELECT @DBsubCode = 0 
		SELECT MainCode = @DBmainCode, SubCode = @DBsubCode, ReturnCount = @v_returnCount/*Bugzilla Id 1680*/
		RETURN 
	END
	
		IF(@DBsortOrder = 'D') 
	BEGIN 
		SELECT @v_reverseOrder = 1  
		SELECT @v_sortStr = ' DESC '  
		SELECT @v_op = '<'  
	END 
	Else /* IF(@DBsortOrder = 'A') */  
	BEGIN 
		SELECT @v_reverseOrder = 0  
		SELECT @v_sortStr = ' ASC '  
		SELECT @v_op = '>'  
	END   
	
	IF (@v_innerOrderBy is NULL)  
	BEGIN 
		IF(@DBorderBy = 1)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar   
			END  
			SELECT @v_sortFieldStr = ' PriorityLevel '  
		END  
		ElSE IF(@DBorderBy = 2)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ProcessInstanceId ' 
		END  
		ElSE IF(@DBorderBy = 3)  
		BEGIN  
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END  
			SELECT @v_sortFieldStr = ' ActivityName ' 
		END 
		ElSE IF(@DBorderBy = 4)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' LockedByName ' 
		END 
		ElSE IF(@DBorderBy = 5) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' IntroducedBy ' 
		END 
		ElSE IF(@DBorderBy = 6)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END 	 
			SELECT @v_sortFieldStr = ' InstrumentStatus ' 
		END 
		ElSE IF(@DBorderBy = 7)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar 
			END  
			SELECT @v_sortFieldStr = ' CheckListCompleteFlag '  
		END 
		ElSE IF(@DBorderBy = 8)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' LockStatus ' 
		END 
		ElSE IF(@DBorderBy = 9)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @DBlastValue 
			END  
			SELECT @v_sortFieldStr = ' WorkItemState ' 
		END 
		ElSE IF(@DBorderBy = 10) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' EntryDateTime ' 
		END 
		ElSE IF(@DBorderBy = 11)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ValidTill ' 
		END 
		ElSE IF(@DBorderBy = 12)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END 
			SELECT @v_sortFieldStr = ' LockedTime ' 
		END 
		ElSE IF(@DBorderBy = 13)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END 	 
			SELECT @v_sortFieldStr = ' IntroductionDateTime ' 
		END 		
		ElSE IF(@DBorderBy = 16) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' AssignedUser ' 
		END 		
		ElSE IF(@DBorderBy = 17)  
		BEGIN 
			IF(LEN(@DBlastValue) > 0) 
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' Status ' 
		END 
		ElSE IF(@DBorderBy = 18) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' CreatedDateTime ' 
		END 
		ElSE IF(@DBorderBy = 19) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ExpectedWorkItemDelay ' 
		END 		/* Sorting On Alias */
		ElSE IF(@DBorderBy = 20) 
		BEGIN 
			IF(LEN(@DBlastValue) > 0)  
			BEGIN 
				SELECT @v_lastValueStr = @v_quoteChar + @DBlastValue + @v_quoteChar  
			END  
			SELECT @v_sortFieldStr = ' ProcessedBy ' 
		END 		
	
		IF(@DBlastProcessInstance IS NOT NULL)  
		BEGIN 		
			SELECT @v_TempColumnVal = @v_lastValueStr 

			IF(@DBlastValue IS NOT NULL) 
			BEGIN 
				SELECT @v_lastValueStr = ' AND ( ( ' + @v_sortFieldStr + @v_op + @v_TempColumnVal + ') '   
				SELECT @v_lastValueStr = @v_lastValueStr + ' OR ( ' + @v_sortFieldStr + ' = ' + @v_TempColumnVal 
			END 
			ELSE 
			BEGIN 
				SELECT @v_lastValueStr = ' AND  ( ( ' + @v_sortFieldStr + ' IS NULL '  
			END  

			SELECT @v_lastValueStr = @v_lastValueStr + ' AND (  ' 
			SELECT @v_lastValueStr = @v_lastValueStr + ' ( Processinstanceid = N' + @v_quoteChar + @DBlastProcessInstance + @v_quoteChar + ' AND  WorkItemId ' + @v_op + CONVERT(NVarchar(10), (@DBlastWorkItem)) + ' )' 
			SELECT @v_lastValueStr = @v_lastValueStr + ' OR Processinstanceid' + @v_op +'N'+ @v_quoteChar + @DBlastProcessInstance + @v_quoteChar  
			SELECT @v_lastValueStr = @v_lastValueStr + ' ) '  
			
			IF(@DBlastValue IS NOT NULL) 
			BEGIN 
				IF (@DBsortOrder = N'A') 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE  
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NULL )'  
				END 
				SELECT @v_lastValueStr = @v_lastValueStr + ') ' 
			END 
			ELSE  
			BEGIN 
				IF (@DBsortOrder = N'D') 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') '  
				END 
				ELSE 
				BEGIN 
					SELECT @v_lastValueStr = @v_lastValueStr + ') OR (' + @v_sortFieldStr +  ' IS NOT NULL )'  
				END  
				SELECT @v_lastValueStr = @v_lastValueStr + ') ' 
			END 
		END 
		
		
		IF (@DBorderBy = 2) 
		BEGIN 
			SELECT @v_orderByStr = ' ORDER BY ProcessInstanceID ' + @v_sortStr + ', WorkItemID ' + @v_sortStr 
		END 
		ELSE  
		BEGIN 
			SELECT @v_orderByStr = ' ORDER BY ' + @v_sortFieldStr + @v_sortStr + ', ProcessInstanceID ' + @v_sortStr + ', WorkItemID ' + @v_sortStr 
		END  
	END /* End Case Inner_Order_By IS NULL*/ 
	
		SELECT @v_prefix = ' TOP  ' + CONVERT(NVarchar(10), @DBbatchSize + 1)

	Select @groupByClause = 'group by ProcessInstanceId, ProcessInstanceId, ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus, LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename, CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser, WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID, ReferredByname, ReferredTo, Q_UserID, FILTERVALUE, Q_StreamId, CollectFlag, ParentWorkItemId, ProcessedBy, LastProcessedBy, ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessVariantId, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,LastModifiedTime,URN ';
	
	--Select @v_queryStr1 = @v_queryStr1 + @groupByClause +@v_orderByStr;
	
	SELECT @v_noOfCounters = 1 /* Bugzilla Bug 1703 */
--print @v_orderByStr
--print @groupByClause
--	print @v_queryStr1
--	print @v_CountStr1
	
	/*Bugzilla Id 1680*/
	IF(@DBCaseManagerFlag='A')
	BEGIN
	--print 'All workitems'
	SELECT @v_queryStr1 = ' SELECT ' + ISNULL(@v_prefix,'') +' ProcessInstanceId, ProcessInstanceId as ProcessInstanceName, ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus, LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename, CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser, WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID, ReferredByname, ReferredTo, Q_UserID, FILTERVALUE, Q_StreamId, CollectFlag, ParentWorkItemId, ProcessedBy, LastProcessedBy, ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessVariantId, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6,VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8, VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,LastModifiedTime,URN,
	 max(CanInitiate) AS CanInitiate,max(CaseManager) AS CaseManager ,max(ShowCaseVisual) as ShowCaseVisual 
	 from (SELECT  a.ProcessInstanceId, a.ProcessInstanceId as ProcessInstanceName, a.ProcessDefId, a.ProcessName, a.ActivityId, a.ActivityName, a.PriorityLevel, a.InstrumentStatus, a.LockStatus, a.LockedByName, a.ValidTill, a.CreatedByName, a.CreatedDateTime, a.Statename, a.CheckListCompleteFlag, a.EntryDateTime, a.LockedTime, a.IntroductionDateTime, a.IntroducedBy, a.AssignedUser, a.WorkItemId, a.QueueName, a.AssignmentType, a.ProcessInstanceState, a.QueueType, a.Status, a.Q_QueueID, a.ReferredByname, a.ReferredTo, a.Q_UserID, a.FILTERVALUE, a.Q_StreamId, a.CollectFlag, a.ParentWorkItemId, a.ProcessedBy, a.LastProcessedBy, a.ProcessVersion, a.WORKITEMSTATE, a.PREVIOUSSTAGE, a.ExpectedWorkItemDelay, a.ProcessVariantId, a.Q_DivertedByUserId,ActivityType, a.VAR_INT1, a.VAR_INT2, a.VAR_INT3, a.VAR_INT4, a.VAR_INT5, a.VAR_INT6, a.VAR_INT7, a.VAR_INT8, a.VAR_FLOAT1, a.VAR_FLOAT2, a.VAR_DATE1, a.VAR_DATE2, a.VAR_DATE3, a.VAR_DATE4, a.VAR_DATE5, a.VAR_DATE6, a.VAR_LONG1, a.VAR_LONG2, a.VAR_LONG3, a.VAR_LONG4, a.VAR_LONG5, a.VAR_LONG6, a.VAR_STR1, a.VAR_STR2, a.VAR_STR3, a.VAR_STR4, a.VAR_STR5, a.VAR_STR6, a.VAR_STR7, a.VAR_STR8,  a.VAR_STR9, a.VAR_STR10, a.VAR_STR11, a.VAR_STR12, a.VAR_STR13, a.VAR_STR14, a.VAR_STR15, a.VAR_STR16, a.VAR_STR17, a.VAR_STR18, a.VAR_STR19, a.VAR_STR20,a.VAR_REC_1, a.VAR_REC_2,a.LastModifiedTime,a.URN,''Y'' as CanInitiate,''Y'' as CaseManager,''Y'' as ShowCaseVisual FROM  WFInstrumentTable a WHERE 1 = 1 AND (Q_UserID = '+ CONVERT(NVarchar(10),@v_UserId)+ ' or Q_DivertedByUserId = '+ CONVERT(NVarchar(10),@v_UserId)+ ') and ActivityType =32 '

	Select @v_queryStr2=' union SELECT  a.ProcessInstanceId, a.ProcessInstanceId as ProcessInstanceName, a.ProcessDefId, a.ProcessName, a.ActivityId, a.ActivityName, a.PriorityLevel, a.InstrumentStatus, a.LockStatus, a.LockedByName, a.ValidTill, a.CreatedByName, a.CreatedDateTime, a.Statename, a.CheckListCompleteFlag, a.EntryDateTime, a.LockedTime, a.IntroductionDateTime, a.IntroducedBy, a.AssignedUser, a.WorkItemId, a.QueueName, a.AssignmentType, a.ProcessInstanceState, a.QueueType, a.Status, a.Q_QueueID, a.ReferredByname, a.ReferredTo, a.Q_UserID, a.FILTERVALUE, a.Q_StreamId, a.CollectFlag, a.ParentWorkItemId, a.ProcessedBy, a.LastProcessedBy, a.ProcessVersion, a.WORKITEMSTATE, a.PREVIOUSSTAGE, a.ExpectedWorkItemDelay, a.ProcessVariantId, a.Q_DivertedByUserId,ActivityType, a.VAR_INT1, a.VAR_INT2, a.VAR_INT3, a.VAR_INT4, a.VAR_INT5, a.VAR_INT6, a.VAR_INT7, a.VAR_INT8, a.VAR_FLOAT1, a.VAR_FLOAT2, a.VAR_DATE1, a.VAR_DATE2, a.VAR_DATE3, a.VAR_DATE4,a.VAR_DATE5, a.VAR_DATE6, a.VAR_LONG1, a.VAR_LONG2, a.VAR_LONG3, a.VAR_LONG4, a.VAR_LONG5, a.VAR_LONG6, a.VAR_STR1, a.VAR_STR2, a.VAR_STR3, a.VAR_STR4, a.VAR_STR5, a.VAR_STR6, a.VAR_STR7, a.VAR_STR8, a.VAR_STR9, a.VAR_STR10, a.VAR_STR11, a.VAR_STR12, a.VAR_STR13, a.VAR_STR14, a.VAR_STR15, a.VAR_STR16, a.VAR_STR17, a.VAR_STR18, a.VAR_STR19, a.VAR_STR20, a.VAR_REC_1, a.VAR_REC_2,a.LastModifiedTime,a.URN,b.CanInitiate,''N'' as CaseManager,b.ShowCaseVisual FROM  WFInstrumentTable a inner join WFTaskStatusTable b on a.processinstanceid = b.processinstanceid and a.workitemid = b.workitemid where b.assignedTo = '+@v_quoteChar +@v_UserName +@v_quoteChar + ' and b.taskstatus =2 and ActivityType =32 ) a where 1=1 '+ ISNULL(@DBSearchFilter,'')
	+ ISNULL(@v_lastValueStr,'');
	
	END
	ELSE IF(@DBCaseManagerFlag='Y')
	BEGIN
	--print 'Case manager workitems'

	SELECT @v_queryStr1 = ' SELECT ' + ISNULL(@v_prefix,'') +' ProcessInstanceId, ProcessInstanceId as ProcessInstanceName, ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus, LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename, CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser, WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID, ReferredByname, ReferredTo, Q_UserID, FILTERVALUE, Q_StreamId, CollectFlag, ParentWorkItemId, ProcessedBy, LastProcessedBy, ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessVariantId, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6,VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8, VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,LastModifiedTime,URN,
	 max(CanInitiate) AS CanInitiate,max(CaseManager) AS CaseManager ,max(ShowCaseVisual) as ShowCaseVisual 
	 from (SELECT  a.ProcessInstanceId, a.ProcessInstanceId as ProcessInstanceName, a.ProcessDefId, a.ProcessName, a.ActivityId, a.ActivityName, a.PriorityLevel, a.InstrumentStatus, a.LockStatus, a.LockedByName, a.ValidTill, a.CreatedByName, a.CreatedDateTime, a.Statename, a.CheckListCompleteFlag, a.EntryDateTime, a.LockedTime, a.IntroductionDateTime, a.IntroducedBy, a.AssignedUser, a.WorkItemId, a.QueueName, a.AssignmentType, a.ProcessInstanceState, a.QueueType, a.Status, a.Q_QueueID, a.ReferredByname, a.ReferredTo, a.Q_UserID, a.FILTERVALUE, a.Q_StreamId, a.CollectFlag, a.ParentWorkItemId, a.ProcessedBy, a.LastProcessedBy, a.ProcessVersion, a.WORKITEMSTATE, a.PREVIOUSSTAGE, a.ExpectedWorkItemDelay, a.ProcessVariantId, a.Q_DivertedByUserId,ActivityType, a.VAR_INT1, a.VAR_INT2, a.VAR_INT3, a.VAR_INT4, a.VAR_INT5, a.VAR_INT6, a.VAR_INT7, a.VAR_INT8, a.VAR_FLOAT1, a.VAR_FLOAT2, a.VAR_DATE1, a.VAR_DATE2, a.VAR_DATE3, a.VAR_DATE4, a.VAR_DATE5, a.VAR_DATE6, a.VAR_LONG1, a.VAR_LONG2, a.VAR_LONG3, a.VAR_LONG4, a.VAR_LONG5, a.VAR_LONG6, a.VAR_STR1, a.VAR_STR2, a.VAR_STR3, a.VAR_STR4, a.VAR_STR5, a.VAR_STR6, a.VAR_STR7, a.VAR_STR8,  a.VAR_STR9, a.VAR_STR10, a.VAR_STR11, a.VAR_STR12, a.VAR_STR13, a.VAR_STR14, a.VAR_STR15, a.VAR_STR16, a.VAR_STR17, a.VAR_STR18, a.VAR_STR19, a.VAR_STR20,a.VAR_REC_1, a.VAR_REC_2,a.LastModifiedTime,a.URN,''Y'' as CanInitiate,''Y'' as CaseManager,''Y'' as ShowCaseVisual FROM  WFInstrumentTable a WHERE 1 = 1 AND (Q_UserID = '+ CONVERT(NVarchar(10),@v_UserId)+ ' or Q_DivertedByUserId = '+ CONVERT(NVarchar(10),@v_UserId)+ ') and ActivityType = 32 '

	Select @v_queryStr2 = ISNULL(@DBSearchFilter,'')
	+ ISNULL(@v_lastValueStr,'')+ @groupByClause +@v_orderByStr + ' ) b'
	END
	ELSE IF(@DBCaseManagerFlag='N')
	BEGIN
	SELECT @v_queryStr1 = ' SELECT ' + ISNULL(@v_prefix,'') +' ProcessInstanceId, ProcessInstanceId as ProcessInstanceName, ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus, LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename, CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser, WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID, ReferredByname, ReferredTo, Q_UserID, FILTERVALUE, Q_StreamId, CollectFlag, ParentWorkItemId, ProcessedBy, LastProcessedBy, ProcessVersion, WORKITEMSTATE, PREVIOUSSTAGE, ExpectedWorkItemDelay, ProcessVariantId, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4, VAR_DATE5, VAR_DATE6,VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8, VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,LastModifiedTime,URN,
	 max(CanInitiate) AS CanInitiate,max(CaseManager) AS CaseManager ,max(ShowCaseVisual) as ShowCaseVisual 
	 from ('
		Select @v_queryForCaseWorker = 'SELECT  a.ProcessInstanceId, a.ProcessInstanceId as ProcessInstanceName, a.ProcessDefId, a.ProcessName, a.ActivityId, a.ActivityName, a.PriorityLevel, a.InstrumentStatus, a.LockStatus, a.LockedByName, a.ValidTill, a.CreatedByName, a.CreatedDateTime, a.Statename, a.CheckListCompleteFlag, a.EntryDateTime, a.LockedTime, a.IntroductionDateTime, a.IntroducedBy, a.AssignedUser, a.WorkItemId, a.QueueName, a.AssignmentType, a.ProcessInstanceState, a.QueueType, a.Status, a.Q_QueueID, a.ReferredByname, a.ReferredTo, a.Q_UserID, a.FILTERVALUE, a.Q_StreamId, a.CollectFlag, a.ParentWorkItemId, a.ProcessedBy, a.LastProcessedBy, a.ProcessVersion, a.WORKITEMSTATE, a.PREVIOUSSTAGE, a.ExpectedWorkItemDelay, a.ProcessVariantId, a.Q_DivertedByUserId,ActivityType, a.VAR_INT1, a.VAR_INT2, a.VAR_INT3, a.VAR_INT4, a.VAR_INT5, a.VAR_INT6, a.VAR_INT7, a.VAR_INT8, a.VAR_FLOAT1, a.VAR_FLOAT2, a.VAR_DATE1, a.VAR_DATE2, a.VAR_DATE3, a.VAR_DATE4,a.VAR_DATE5, a.VAR_DATE6, a.VAR_LONG1, a.VAR_LONG2, a.VAR_LONG3, a.VAR_LONG4, a.VAR_LONG5, a.VAR_LONG6, a.VAR_STR1, a.VAR_STR2, a.VAR_STR3, a.VAR_STR4, a.VAR_STR5, a.VAR_STR6, a.VAR_STR7, a.VAR_STR8, a.VAR_STR9, a.VAR_STR10, a.VAR_STR11, a.VAR_STR12, a.VAR_STR13, a.VAR_STR14, a.VAR_STR15, a.VAR_STR16, a.VAR_STR17, a.VAR_STR18, a.VAR_STR19, a.VAR_STR20, a.VAR_REC_1, a.VAR_REC_2,a.LastModifiedTime,a.URN,b.CanInitiate,''N'' as CaseManager,b.ShowCaseVisual FROM  WFInstrumentTable a inner join WFTaskStatusTable b on a.processinstanceid = b.processinstanceid and a.workitemid = b.workitemid where b.assignedTo = '+@v_quoteChar +@v_UserName +@v_quoteChar + ' and b.taskstatus =2 and ActivityType =32 and a.processinstanceid in(	SELECT  a.ProcessInstanceId FROM  WFInstrumentTable a inner join WFTaskStatusTable b on a.processinstanceid = b.processinstanceid and a.workitemid = b.workitemid where b.assignedTo = '+@v_quoteChar +@v_UserName +@v_quoteChar + ' and b.taskstatus =2 and ActivityType =32
		Except Select a.ProcessInstanceId FROM  WFInstrumentTable a WHERE 1 = 1 AND Q_UserID = '+ CONVERT(NVarchar(10),@v_UserId)+ ' and ActivityType =32 ) )c '
		Select @v_queryStr2 = 'where 1=1 '+ ISNULL(@DBSearchFilter,'') + ISNULL(@v_lastValueStr,'');

	END
	IF(@DBreturnParam = 1 OR @DBreturnParam = 2)
	BEGIN
		SELECT @v_counter = 0
		Select @v_noOfCounters = 1
		SELECT @v_returnCount = 0
		WHILE (@v_counter < @v_noOfCounters)
		BEGIN 
			SELECT @v_CountStr = @v_CountStr1
		
	IF(@DBCaseManagerFlag='A')
	BEGIN
		 
		/*SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM (' + @v_queryStr1 +@v_queryStr2+ @groupByClause +@v_orderByStr + ' ) b'*/
		/*print 'SELECT COUNT(*) FROM (' + @v_queryStr1 
		print @v_queryStr2 
		print @groupByClause 
		print @v_orderByStr 
		print ' ) b'*/
		EXECUTE('DECLARE CountCursor CURSOR Fast_Forward FOR ' + 'SELECT COUNT(*) FROM (' + @v_queryStr1 +@v_queryStr2+ @groupByClause +@v_orderByStr + ' ) b' ) 
		
	END
	ELSE IF(@DBCaseManagerFlag='Y')
	BEGIN 
	
		/*SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM (' + @v_queryStr1 + ') a where 1=1 '+ ISNULL(@DBSearchFilter,'')
+ ISNULL(@v_lastValueStr,'')+ @groupByClause +@v_orderByStr + ' ) b'*/
		/*print 'SELECT COUNT(*) FROM (' + @v_queryStr1 + ') a where 1=1 '+ ISNULL(@DBSearchFilter,'')
		print @v_lastValueStr
		print @groupByClause
		print @v_orderByStr + ' ) b'*/
		EXECUTE('DECLARE CountCursor CURSOR Fast_Forward FOR SELECT COUNT(*) FROM (' + @v_queryStr1 + ') a where 1=1 '+ @v_queryStr2) 
		
	END
	ELSE IF(@DBCaseManagerFlag='N')
	BEGIN 
		 /*SELECT @v_CountStr1 = 'SELECT COUNT(*) FROM (' + @v_queryStr1 +@v_queryForCaseWorker+  @groupByClause +@v_orderByStr + ' ) b' */
		/*print 'SELECT COUNT(*) FROM (' + @v_queryStr1 
		print @v_queryForCaseWorker 
		print @groupByClause 
		print @v_orderByStr 
		print' ) d' */
		EXECUTE('DECLARE CountCursor CURSOR Fast_Forward FOR ' + 'SELECT COUNT(*) FROM (' + @v_queryStr1 +@v_queryForCaseWorker+@v_queryStr2+ @groupByClause +@v_orderByStr + ' ) d' ) 

	END
			
		
			OPEN CountCursor
			FETCH NEXT FROM CountCursor INTO @v_TempCount
			IF (@@FETCH_STATUS < 0) 
			BEGIN 
				SELECT @DBmainCode = 15 
				SELECT @DBsubCode = 802 
				SELECT @v_returnCount = 0
			END
			ELSE
			BEGIN
				SELECT @DBmainCode = 0 
				SELECT @DBsubCode = 0 
			END
			CLOSE CountCursor
			DEALLOCATE CountCursor

			SELECT @v_counter = @v_counter + 1
			SELECT @v_returnCount = @v_returnCount + @v_TempCount
		END
		SELECT MainCode = @DBmainCode, SubCode = @DBsubCode, ReturnCount = @v_returnCount 
	END
        ELSE
	BEGIN
		SELECT MainCode = 0, SubCode = 0, ReturnCount = 0 
	END
	
	IF(@DBreturnParam = 0 OR @DBreturnParam = 2)
	BEGIN
		IF(@DBCaseManagerFlag='A')
				BEGIN
				EXECUTE(
				'SELECT ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel,InstrumentStatus,  LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' null as TurnaroundTime ,ReferredByname, ReferredTo as ReferTo, ExpectedWorkItemDelay, ProcessVariantId, ProcessedBy, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,CanInitiate,CaseManager,ShowCaseVisual,LastModifiedTime,URN  FROM ( ' 
				+ @v_queryStr1 +@v_queryStr2+ @groupByClause +@v_orderByStr 
				+ ' )c ')
				--print 'SELECT ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel,InstrumentStatus, LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' null as TurnaroundTime ,ReferredByname, ReferredTo as ReferTo, ExpectedWorkItemDelay, ProcessVariantId, ProcessedBy, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,CanInitiate,CaseManager,ShowCaseVisual,LastModifiedTime,URN  FROM ( ' 
				/*print @v_queryStr1 
				print @v_queryStr2  
				print @groupByClause 
				print @v_orderByStr
				print ' )c '	*/			
				END
			ELSE IF(@DBCaseManagerFlag='Y')
				BEGIN
				--print @v_queryStr1
				EXECUTE(
				'SELECT ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' null as TurnaroundTime ,ReferredByname, ReferredTo as ReferTo, ExpectedWorkItemDelay, ProcessVariantId, ProcessedBy, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,CanInitiate,CaseManager,ShowCaseVisual,LastModifiedTime,URN  FROM ( ' 
				+ @v_queryStr1 + ') a where 1=1 '+ @v_queryStr2)
				--print 'SELECT ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' null as TurnaroundTime ,ReferredByname, ReferredTo as ReferTo, ExpectedWorkItemDelay, ProcessVariantId, ProcessedBy, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,CanInitiate,CaseManager,ShowCaseVisual,LastModifiedTime,URN  FROM ( ' 

				/*print @v_queryStr1 
				print ') a where 1=1 '
				print @v_queryStr2*/
				END
			ELSE IF(@DBCaseManagerFlag='N')
			BEGIN
				EXECUTE(
				'SELECT ProcessInstanceId, ProcessInstanceId as ProcessInstanceName,' + ' ProcessDefId, ProcessName, ActivityId, ActivityName, PriorityLevel, InstrumentStatus,' + ' LockStatus, LockedByName, ValidTill, CreatedByName, CreatedDateTime, Statename,' + ' CheckListCompleteFlag, EntryDateTime, LockedTime, IntroductionDateTime, IntroducedBy, AssignedUser,' + ' WorkItemId, QueueName, AssignmentType, ProcessInstanceState, QueueType, Status, Q_QueueID,' + ' null as TurnaroundTime ,ReferredByname, ReferredTo as ReferTo, ExpectedWorkItemDelay, ProcessVariantId, ProcessedBy, Q_DivertedByUserId,ActivityType, VAR_INT1, VAR_INT2, VAR_INT3, VAR_INT4, VAR_INT5, VAR_INT6, VAR_INT7, VAR_INT8, VAR_FLOAT1, VAR_FLOAT2, VAR_DATE1, VAR_DATE2, VAR_DATE3, VAR_DATE4,VAR_DATE5, VAR_DATE6, VAR_LONG1, VAR_LONG2, VAR_LONG3, VAR_LONG4,VAR_LONG5, VAR_LONG6, VAR_STR1, VAR_STR2, VAR_STR3, VAR_STR4, VAR_STR5, VAR_STR6, VAR_STR7, VAR_STR8,VAR_STR9, VAR_STR10, VAR_STR11, VAR_STR12, VAR_STR13, VAR_STR14, VAR_STR15, VAR_STR16, VAR_STR17, VAR_STR18, VAR_STR19, VAR_STR20, VAR_REC_1, VAR_REC_2,CanInitiate,CaseManager,ShowCaseVisual,LastModifiedTime,URN  FROM ( ' 
				+ @v_queryStr1 +@v_queryForCaseWorker+@v_queryStr2 + @groupByClause +@v_orderByStr + ' ) b')
				/*print  @v_queryStr1 
				print @v_queryForCaseWorker 
				print @groupByClause 
				print @v_orderByStr*/
			END
		END
	RETURN 
END  

	

go

/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : ODArchivalInitialScript.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 18 July 2014
		Description                 : Stored Procedure to be run on target Cabinet initially for Archival
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/	


If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'ODArchivalInitialScript')
Begin
	Execute('DROP Procedure ODArchivalInitialScript')
	Print 'Procedure ODArchivalInitialScript already exists, hence older one dropped ..... '
End

go

Create Procedure ODArchivalInitialScript As
BEGIN
	Declare @cabinetType 				NVARCHAR(50)
	Declare @vquery 					NVARCHAR(2000)
	DECLARE @v_rowcount					INT
	
	Select @cabinetType = PropertyValue  from WFSystemPropertiesTable where PropertyKey = 'CABINETTYPE'
	SELECT @v_rowcount = @@ROWCOUNT
	
	IF (@v_rowcount <= 0) 
	BEGIN
		PRINT 'Kindly set the property of this cabinet as active or archive from of services . Currently It is not Set .'
		Return
	END
	
	IF(@cabinetType = 'ACTIVE')
	BEGIN
		PRINT 'Please Check : This is an active cabinet . This SP cannot be executed on this .Run It on Archive Cabinet'
		Return
	END
	
	IF(@cabinetType = 'ARCHIVE')
	BEGIN
	
		DELETE FROM PDBConnection WHERE UserIndex > 1
		DELETE FROM PDBGroupMember WHERE UserIndex > 1
		DELETE FROM PDBGroupRoles WHERE UserIndex > 1
		DELETE FROM PDBFOLDER WHERE ParentFolderIndex IN (2,3,4,5) 
		DELETE FROM PDBFOLDER WHERE FolderType='W' 
		DELETE FROM UserSecurity WHERE UserIndex > 1
		DELETE FROM PDBUser WHERE UserIndex > 1
		DELETE FROM PDBDATAFIELDSTABLE
		DELETE FROM PDBGLOBALINDEX
		DELETE FROM PDBDATADEFINITION

		If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'U' and name = 'DDT_1')
		Begin
				DROP TABLE DDT_1
		End
		
		If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'U' and name = 'MovePNFileList')
		Begin
			Print 'Table MovePNFileList already exist'	
		End 
		Else
		Begin
			CREATE TABLE MovePNFileList ( VolumeId		int NOT NULL,
						VolBlockId		int NOT NULL,
						SiteId			int NOT NULL,
						PNFile			NVARCHAR(255))	
		End
	END
END

go

CREATE Function BaseConv( @valueToConvert  int)
returns varchar(20)
AS
BEGIN
	declare @counter int
	declare @num int
	declare @x int
	declare @flag int
	declare @convertedValue  varchar(20)
	select @counter = 2;
	select @num = @valueToConvert;

	select @flag = 0;
	
	WHILE(@num != 0)
	--LOOP
	begin
		select @x = @num%36;
		IF( @x > 9) 
		begin
				IF(@flag != 1) 
				begin
					select @convertedValue = char(@x + 55);
					select @flag = 1; 
				end
				ELSE 
				begin	
					--select 1;
					select @convertedValue = char(@x + 55) + @convertedValue;	
				
				END 
				select @counter = @counter - 1;	
		end
		ELSE	
		begin	
				IF(@flag != 1) 
				begin
					--select 2;
					select @convertedValue = char(@x + 48);
					select @flag = 1; 
				end
				ELSE
				begin
					--select 3;
					select @convertedValue =  char(@x + 48) + @convertedValue;
				END 
				select @counter = @counter - 1;
		END 		
		select @num = @num / 36;
	--END LOOP;
	END
	IF(@counter != -1) 
	begin
		WHILE(@counter != -1)
		--LOOP
		begin
			IF(@flag != 1)
			begin
				select @convertedValue = char(48);
				select @flag = 1; 
			end
			ELSE
			begin
				--select 4;
				select @convertedValue = char(48) + @convertedValue ;
			END 
			select @counter = @counter - 1;
		--END LOOP;	
		END
	 END 

	return @convertedValue
END

go

/***************************************************************************
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
Group			: Genesis
Product			: OmniDocs
Module			: Backend
File Name		: SynchCabinets.sql
Author			: Pranay Tiwari
Date written	: 31/01/2014
Description		: This procedure synch data between 
				  source cabinet & target cabinet using DBLink.
****************************************************************************/
--DROP PROCEDURE SynchCabinets
--GO
CREATE PROCEDURE SynchCabinets(
	@DBSourceCabinet	VARCHAR(255),
	@DBTargetCabinet    VARCHAR(255),
	@v_isDBLink			VARCHAR(1),	
	@sourceMachineIp    VARCHAR(256),
	@DBStatus	 		INT OUT
)
AS
	SET NOCOUNT ON
	Declare	@lDBsrcLinkName			VARCHAR(4000)
	Declare	@lDBTargetCab			VARCHAR(4000)
	Declare	@lCursor_String			NVARCHAR(MAX)
	Declare	@lCursor_StringParam	NVARCHAR(MAX)
    Declare	@ldatadefid 			INT
	Declare	@ldatadefname   		VARCHAR(64)
	Declare	@lTableName				VARCHAR(20)
	Declare	@lFolderId				INT
	Declare	@lVolid					INT
	Declare	@lSiteId				INT
	DECLARE @ViewList				varchar(8000)
	Declare @DBsrcLinkName			VARCHAR(1024)
	
	DECLARE TempCursor CURSOR FAST_FORWARD FOR SELECT DATADEFINDEX,DATADEFNAME FROM PDBDATADEFINITION

	select @DBStatus = 0
	
	IF @DBSourceCabinet IS NULL OR @DBTargetCabinet IS NULL
	BEGIN
		EXECUTE PRTRaiseError 'PRT_ERR_Invalid_Parameter', @DBStatus OUT
		Return
	END
	
	--IF @DBsrcLinkName IS NOT NULL
		--select @lDBsrcLinkName = '['+@DBsrcLinkName+'].'+@DBSourceCabinet+'.dbo.'
	--ELSE
		--select @lDBsrcLinkName = @DBSourceCabinet+'..'
		
	
	IF(@v_isDBLink = 'Y' )
	BEGIN
		SELECT @lDBsrcLinkName = '[' + @sourceMachineIp + '].'+ @DBSourceCabinet +'.dbo.' 
	END
	ELSE
	BEGIN
		SELECT @lDBsrcLinkName = @DBSourceCabinet + '..'
	END
	
		
	SELECT @lDBTargetCab = @DBTargetCabinet + '..'

	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBUser ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBUser(UserIndex, UserName, PersonalName, FamilyName, CreatedDateTime, ExpiryDateTime,
					PrivilegeControlList, Password, Account, Comment, DeletedDateTime, UserAlive, MainGroupId, MailId, Fax, NoteColor, Superior,
					SuperiorFlag, ParentGroupIndex, PasswordExpiryTime,PasswordNeverExpire, InboxFolderIndex, SentItemFolderIndex, TrashFolderIndex,
					AttachmentFolderIndex, DeletedFlag, PasswordSaltOrKey, UserImage, ImageType, ModifiedImageDateTime) 
					SELECT UserIndex, UserName, PersonalName, FamilyName, CreatedDateTime, ExpiryDateTime,
					PrivilegeControlList, Password, Account, Comment, DeletedDateTime, UserAlive, MainGroupId, MailId, Fax, NoteColor, Superior,
					SuperiorFlag, ParentGroupIndex, PasswordExpiryTime,PasswordNeverExpire, InboxFolderIndex, SentItemFolderIndex, TrashFolderIndex,
					AttachmentFolderIndex, DeletedFlag, PasswordSaltOrKey, UserImage, ImageType, ModifiedImageDateTime
					FROM ' + @lDBsrcLinkName + 'PDBUser WHERE USERINDEX IN 
					(SELECT USERINDEX FROM ' +	@lDBsrcLinkName + 'PDBUser EXCEPT SELECT USERINDEX FROM ' + @lDBTargetCab + 'PDBUser) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBUser OFF'
	EXECUTE (@lCursor_String)

	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'UserSecurity SELECT * FROM ' + @lDBsrcLinkName + 'UserSecurity  WHERE USERINDEX IN
					(SELECT USERINDEX FROM ' + @lDBsrcLinkName + 'UserSecurity EXCEPT SELECT USERINDEX FROM ' + @lDBTargetCab + 'UserSecurity)'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBGroup ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBGroup(GroupIndex, MainGroupIndex, GroupName, CreatedDateTime, ExpiryDateTime,
					PrivilegeControlList, Owner, Comment,GroupType, ParentGroupIndex) SELECT GroupIndex, MainGroupIndex, GroupName, CreatedDateTime,
					ExpiryDateTime, PrivilegeControlList, Owner, Comment,GroupType, ParentGroupIndex FROM ' + @lDBsrcLinkName + 'PDBGroup  WHERE GroupIndex IN
					(SELECT GroupIndex FROM ' + @lDBsrcLinkName + 'PDBGroup EXCEPT SELECT GroupIndex FROM ' + @lDBTargetCab + 'PDBGroup) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBGroup OFF'
	EXECUTE (@lCursor_String)

	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBGlobalIndex ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBGlobalIndex(DataFieldIndex, DataFieldName,DataFieldType, DataFieldLength,GlobalOrDataFlag,
					MainGroupId, Pickable,RightsCheckEnabled) SELECT DataFieldIndex, DataFieldName,DataFieldType, DataFieldLength,GlobalOrDataFlag,
					MainGroupId, Pickable,RightsCheckEnabled FROM ' + @lDBsrcLinkName + 'PDBGlobalIndex  WHERE DataFieldIndex IN
					(SELECT DataFieldIndex FROM ' + @lDBsrcLinkName + 'PDBGlobalIndex EXCEPT SELECT DataFieldIndex FROM ' + @lDBTargetCab + 'PDBGlobalIndex) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBGlobalIndex OFF'
	EXECUTE (@lCursor_String)

	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBDataDefinition ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBDataDefinition(DataDefIndex, DataDefName, DataDefComment, ACL, EnableLogflag, ACLMoreFlag,
					Type, GroupId, Unused) SELECT DataDefIndex, DataDefName, DataDefComment, ACL, EnableLogflag, ACLMoreFlag, Type, GroupId, Unused 
					FROM ' + @lDBsrcLinkName + 'PDBDataDefinition  WHERE DataDefIndex IN
					(SELECT DataDefIndex FROM ' + @lDBsrcLinkName + 'PDBDataDefinition EXCEPT SELECT DataDefIndex FROM ' + @lDBTargetCab + 'PDBDataDefinition) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBDataDefinition OFF'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBDataFieldsTable SELECT * FROM
					(SELECT * FROM ' + @lDBsrcLinkName + 'PDBDataFieldsTable EXCEPT SELECT * FROM ' + @lDBTargetCab + 'PDBDataFieldsTable) A'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBGroupMember SELECT * FROM
					(SELECT * FROM ' + @lDBsrcLinkName + 'PDBGroupMember EXCEPT SELECT * FROM ' + @lDBTargetCab + 'PDBGroupMember) A'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBRights SELECT * FROM
					(SELECT * FROM ' + @lDBsrcLinkName + 'PDBRights EXCEPT SELECT * FROM ' + @lDBTargetCab + 'PDBRights) A'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBDictionary ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBDictionary(KeywordIndex, GroupIndex, Keyword, AuthorizationFlag) 
					SELECT KeywordIndex, GroupIndex, Keyword, AuthorizationFlag FROM ' + @lDBsrcLinkName + 'PDBDictionary  WHERE KeywordIndex IN
					(SELECT KeywordIndex FROM ' + @lDBsrcLinkName + 'PDBDictionary EXCEPT SELECT KeywordIndex FROM ' + @lDBTargetCab + 'PDBDictionary) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBDictionary OFF'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBAlias SELECT * FROM
					(SELECT * FROM ' + @lDBsrcLinkName + 'PDBAlias EXCEPT SELECT * FROM ' + @lDBTargetCab + 'PDBAlias) A'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBForm ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBForm(FormIndex, FormName, FormType, Owner, CreatedDatetime, RevisedDateTime,
					AccessedDateTime, DataDefinitionIndex, Comment, FormBuffer, MainGroupId, FormLock, LockByUser, LockMessage) 
					SELECT FormIndex, FormName, FormType, Owner, CreatedDatetime, RevisedDateTime, AccessedDateTime, DataDefinitionIndex, Comment,
					FormBuffer, MainGroupId, FormLock, LockByUser, LockMessage FROM ' + @lDBsrcLinkName + 'PDBForm WHERE FormIndex IN
					(SELECT FormIndex FROM ' + @lDBsrcLinkName + 'PDBForm EXCEPT SELECT FormIndex FROM ' + @lDBTargetCab + 'PDBForm) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBForm OFF'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBRoles ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBRoles(RoleIndex, RoleName, Description, ManyUserFlag) SELECT RoleIndex, RoleName,
					Description, ManyUserFlag FROM ' + @lDBsrcLinkName + 'PDBRoles WHERE RoleIndex IN
					(SELECT RoleIndex FROM ' + @lDBsrcLinkName + 'PDBRoles EXCEPT SELECT RoleIndex FROM ' + @lDBTargetCab + 'PDBRoles) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBRoles OFF'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBGroupRoles ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBGroupRoles(GroupRoleIndex, RoleIndex, GroupIndex, UserIndex) 
					SELECT GroupRoleIndex, RoleIndex, GroupIndex, UserIndex FROM ' + @lDBsrcLinkName + 'PDBGroupRoles WHERE GroupRoleIndex IN
					(SELECT GroupRoleIndex FROM ' + @lDBsrcLinkName + 'PDBGroupRoles EXCEPT SELECT GroupRoleIndex FROM ' + @lDBTargetCab + 'PDBGroupRoles) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBGroupRoles OFF'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBROLEGROUP ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBROLEGROUP(GroupRoleId, GroupIndex, RoleIndex) 
					SELECT GroupRoleId, GroupIndex, RoleIndex FROM ' + @lDBsrcLinkName + 'PDBROLEGROUP WHERE GroupRoleId IN
					(SELECT GroupRoleId FROM ' + @lDBsrcLinkName + 'PDBROLEGROUP EXCEPT SELECT GroupRoleId FROM ' + @lDBTargetCab + 'PDBROLEGROUP) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBROLEGROUP OFF'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBFolder(FOLDERINDEX, PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME, REVISEDDATETIME,
					ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION, DELETEDDATETIME,
					ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG, MAINGROUPID,
					ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure) SELECT FOLDERINDEX, PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME,
					REVISEDDATETIME, ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION,
					DELETEDDATETIME, ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG,
					MAINGROUPID, ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure FROM ' + @lDBsrcLinkName + 'PDBFolder 
					WHERE FolderIndex IN (SELECT FolderIndex FROM ' + @lDBsrcLinkName + 'PDBFolder WHERE ParentFolderIndex IN (2,3,4,5) 
					EXCEPT SELECT FolderIndex FROM ' + @lDBTargetCab + 'PDBFolder WHERE ParentFolderIndex IN (2,3,4,5)) 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder OFF'
	EXECUTE (@lCursor_String)
	
	OPEN TempCursor
	FETCH NEXT FROM TempCursor INTO @ldatadefid,@ldatadefname
	WHILE @@FETCH_STATUS <> -1
	BEGIN
		IF @@FETCH_STATUS <> -2
		BEGIN
			select @lTableName = 'DDT_' + CONVERT(VARCHAR(10),@ldatadefid)
			IF NOT EXISTS(
				SELECT * FROM INFORMATION_SCHEMA.TABLES
				WHERE TABLE_NAME = @lTableName)
			BEGIN
				EXECUTE CreateDynTable @ldatadefid, @ldatadefname, null, @ViewList OUT, @DBStatus OUT
				IF @DBStatus <> 0
					RETURN
			/*	IF UPPER(RTRIM(ldatadefname)) = 'SYSTEM_CONFIG'
				THEN
								
				END IF)*/
			END 
		END
		FETCH NEXT FROM TempCursor INTO @ldatadefid,@ldatadefname
	END
	CLOSE TempCursor
	DEALLOCATE TempCursor
	
	--system folders, foldertype W
	select @lCursor_String = 'SELECT @value = FolderIndex FROM ' + @lDBsrcLinkName + 'PDBFolder WHERE UPPER(NAME) = ''SYSTEM_CRITERIA'''
	select @lCursor_StringParam = '@value INT OUTPUT'
	EXEC sp_executesql @lCursor_String, @lCursor_StringParam, @value = @lFolderId OUTPUT
	
	IF NOT EXISTS( SELECT 1 FROM PDBFolder WHERE UPPER(NAME) = 'SYSTEM_CRITERIA')
	BEGIN
		select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBFolder(FOLDERINDEX, PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME, REVISEDDATETIME,
					ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION, DELETEDDATETIME,
					ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG, MAINGROUPID,
					ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure)
					SELECT FOLDERINDEX, PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME, REVISEDDATETIME,
					ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION, DELETEDDATETIME,
					ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG, MAINGROUPID,
					ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure 
					FROM ' + @lDBsrcLinkName + 'PDBFolder  WHERE FolderIndex = '+ CONVERT(VARCHAR(10),@lFolderId) + 
					' SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder OFF'
		EXECUTE (@lCursor_String)
	END

	select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBFolder(FOLDERINDEX, PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME, REVISEDDATETIME,
					ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION, DELETEDDATETIME,
					ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG, MAINGROUPID,
					ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure) SELECT FOLDERINDEX, PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME,
					REVISEDDATETIME, ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION,
					DELETEDDATETIME, ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG,
					MAINGROUPID, ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure FROM ' + @lDBsrcLinkName + 'PDBFolder  
					WHERE FolderIndex IN 
					(SELECT FolderIndex FROM ' + @lDBsrcLinkName + 'PDBFolder  WHERE ParentFolderIndex = '+ CONVERT(VARCHAR(10),@lFolderId)
					+' EXCEPT SELECT FolderIndex FROM ' + @lDBTargetCab + 'PDBFolder WHERE ParentFolderIndex = '+ CONVERT(VARCHAR(10),@lFolderId) + ') 
					SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder OFF'
	EXECUTE (@lCursor_String)
	

	--Synch ImageServer table data
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'ISSite SELECT * FROM ' + @lDBsrcLinkName + 'ISSite WHERE SiteId IN
					(SELECT SiteId FROM ' + @lDBsrcLinkName + 'ISSite EXCEPT SELECT SiteId FROM ' + @lDBTargetCab + 'ISSite)'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'ISVolume SELECT * FROM ' + @lDBsrcLinkName + 'ISVolume WHERE VolumeId IN
					(SELECT VolumeId FROM ' + @lDBsrcLinkName + 'ISVolume EXCEPT SELECT VolumeId FROM ' + @lDBTargetCab + 'ISVolume)'
	EXECUTE (@lCursor_String)
	
	select @lCursor_String = 'SELECT VolumeId,SiteId FROM ' + @lDBsrcLinkName + 'ISVoldef EXCEPT SELECT VolumeId,SiteId FROM ' + @lDBTargetCab + 'ISVoldef'
	EXECUTE (@lCursor_String)
	
	IF @@RowCount > 0
	BEGIN
		EXECUTE ('DECLARE TempVCursor CURSOR FAST_FORWARD FOR '+@lCursor_String)
		OPEN TempVCursor
		FETCH NEXT FROM TempVCursor INTO @lVolid, @lSiteId
		WHILE @@Fetch_Status = 0
		BEGIN
			select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'ISVoldef SELECT * FROM ' + @lDBsrcLinkName + 'ISVoldef 
									WHERE VolumeId = '+ CONVERT(VARCHAR(10),@lVolid) + ' AND SiteId = '+ CONVERT(VARCHAR(10),@lSiteId)
			EXECUTE (@lCursor_String) 
			FETCH NEXT FROM TempVCursor INTO @lVolid, @lSiteId
		END
		CLOSE TempVCursor
		DEALLOCATE TempVCursor
	END
Return

go

/***************************************************************************
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
Group			: Genesis
Product			: OmniDocs
Module			: Backend
File Name		: MoveDocdb.sql
Author			: Pranay Tiwari
Date written	: 31/01/2014
Description		: This procedure move folder & its documents from 
				  source cabinet to target cabinett using DBLink.
****************************************************************************/
--DROP PROCEDURE MoveDocdb
--GO
If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'MoveDocdb')
Begin
	Execute('DROP PROCEDURE MoveDocdb')
	Print 'Procedure MoveDocdb already exists, hence older one dropped ..... '
End

go

Create PROCEDURE MoveDocdb(
	@DBSourceCabinet     	VARCHAR(255),
	@DBTargetCabinet     	VARCHAR(255),
	@DBsrcLinkName			VARCHAR(1024),
	@DBMoveFolderIndex		INT,
	@DBMoveDocFlag			CHAR,
	@DBGenerateIndex 		CHAR,
	@DBNewFolderIndex	 	INT OUT,
	@DBStatus	 			INT OUT,
	@v_DeleteFromSrc		VARCHAR(1)
)
AS
	SET NOCOUNT ON
	Declare	@lnewFolderIndex			INT
	Declare	@lTempDocIndex				INT
	Declare	@newDocumentIndex			INT
	Declare	@lCursor_String				NVARCHAR(MAX)
	Declare	@lCursor_StringParameter	NVARCHAR(MAX)
	Declare	@lDocDDI					INT
	Declare	@lDataDefinitionIndex		INT
	Declare	@lTableName					VARCHAR(20)
	Declare	@lObjectIndex  				INT
	Declare	@DataFieldIndex				INT
	Declare	@DataFieldType 				CHAR(1)
	Declare	@FieldName					VARCHAR(MAX)
	Declare	@lImageIndex				INT
	Declare	@lVolumeId					INT
	Declare	@lDBsrcLinkName				VARCHAR(4000)
	Declare	@lDBTargetCab				VARCHAR(4000)
	Declare	@v_docIndexes				VARCHAR(MAX)
	Declare	@v_Count					INT
	

	SELECT 	@DBMoveDocFlag		= isnull(UPPER(@DBMoveDocFlag),'Y'),
			@DBGenerateIndex	= isnull(UPPER(@DBGenerateIndex),'N'),
			@DBStatus			= 0,
			@DBNewFolderIndex	= -1,
			@v_docIndexes		= '(-1',
			@v_Count 			= 0
	IF (@DBMoveDocFlag NOT IN ('Y','N') OR @DBGenerateIndex NOT IN ('Y','N') OR @DBSourceCabinet IS NULL OR @DBTargetCabinet IS NULL)
	BEGIN
		EXECUTE PRTRaiseError 'PRT_ERR_Invalid_Parameter', @DBStatus OUT
		Return
	END
	
	--IF @DBsrcLinkName IS NOT NULL
		--select @lDBsrcLinkName = '['+@DBsrcLinkName+'].'+@DBSourceCabinet+'.dbo.'
	--ELSE
		--select @lDBsrcLinkName = @DBSourceCabinet+'..'
		
	IF @DBsrcLinkName IS NOT NULL
		select @lDBsrcLinkName = @DBsrcLinkName + '.'
	
	SELECT @lDBTargetCab = @DBTargetCabinet + '..'
	
	--call SynchCabinets
	-- Execute SynchCabinets @DBSourceCabinet,@DBTargetCabinet,@DBsrcLinkName,@DBStatus OUT
	--IF (@DBStatus <> 0)
		--Return

	--Start copy folder
	select @lCursor_String = 'SELECT @value2 = DataDefinitionIndex FROM ' + @lDBsrcLinkName + 'PDBFolder WHERE FolderIndex = @value1'
	select @lCursor_StringParameter = '@value1 INT, @value2 INT OUTPUT'
	EXEC sp_executesql @lCursor_String, @lCursor_StringParameter, @value1 = @DBMoveFolderIndex, @value2 = @lDataDefinitionIndex OUTPUT
		
	IF @DBGenerateIndex = 'Y'
	BEGIN	
		select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBFOLDER (PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME, REVISEDDATETIME,
					ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION, DELETEDDATETIME,
					ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG, MAINGROUPID,
					ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure) 
					Select ParentFolderIndex, Name, Owner, CreatedDatetime, RevisedDateTime, AccessedDateTime,
					DataDefinitionIndex, AccessType, ImageVolumeIndex, FolderType, FolderLock, LockByUser, Location, DeletedDateTime, EnableVersion,
					ExpiryDateTime, Comment, UseFulData, ACL, FinalizedFlag, FinalizedDateTime, FinalizedBy, ACLMoreFlag, MainGroupId, EnableFTS,
					LockMessage, FolderLevel, OwnerInheritance, EnableSecure FROM ' + @lDBsrcLinkName + 'PDBFolder 
					WHERE FolderIndex = ' + CONVERT(VARCHAR(10),@DBMoveFolderIndex)
		EXECUTE (@lCursor_String)
		
		SELECT @lCursor_String = ' USE ' + @DBTargetCabinet + ' select @value = @@identity '
		SELECT @lCursor_StringParameter = '@value VARCHAR(10) OUTPUT'
		EXEC sp_executesql @lCursor_String, @lCursor_StringParameter, @value = @lnewFolderIndex OUTPUT
		IF(@@error <> 0)
		BEGIN
			select @DBStatus = -1
			RETURN
		END
		select @DBNewFolderIndex = @lnewFolderIndex
	END
	ELSE
	BEGIN
		select @lnewFolderIndex = @DBMoveFolderIndex

		select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder ON 
					INSERT INTO ' + @lDBTargetCab + 'PDBFOLDER (FOLDERINDEX, PARENTFOLDERINDEX, NAME, OWNER, CREATEDDATETIME, REVISEDDATETIME,
					ACCESSEDDATETIME, DATADEFINITIONINDEX, ACCESSTYPE, IMAGEVOLUMEINDEX, FOLDERTYPE, FOLDERLOCK, LOCKBYUSER, LOCATION, DELETEDDATETIME,
					ENABLEVERSION, EXPIRYDATETIME, Comment, USEFULDATA, ACL, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, ACLMOREFLAG, MAINGROUPID,
					ENABLEFTS, LOCKMESSAGE, FOLDERLEVEL, OWNERINHERITANCE, EnableSecure) 
					Select ' + CONVERT(VARCHAR(10),@lnewFolderIndex) +', ParentFolderIndex, Name, Owner, CreatedDatetime, RevisedDateTime, AccessedDateTime,
					DataDefinitionIndex, AccessType, ImageVolumeIndex, FolderType, FolderLock, LockByUser, Location, DeletedDateTime, EnableVersion,
					ExpiryDateTime, Comment, UseFulData, ACL, FinalizedFlag, FinalizedDateTime, FinalizedBy, ACLMoreFlag, MainGroupId, EnableFTS,
					LockMessage, FolderLevel, OwnerInheritance, EnableSecure FROM ' + @lDBsrcLinkName + 'PDBFolder 
					WHERE FolderIndex = ' + CONVERT(VARCHAR(10),@DBMoveFolderIndex) + 
					' SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFolder OFF'
		EXECUTE (@lCursor_String)
	END

	--copy folder dataclass
	IF @lDataDefinitionIndex <> 0
	BEGIN
		IF EXISTS(
			SELECT * FROM PDBDataFieldsTable 
			WHERE DataDefIndex = @lDataDefinitionIndex
			AND FieldAttribute NOT IN (0,1,4,5))
		BEGIN
			EXECUTE PRTRaiseError 'PRT_WARN_Cannot_CopyDDI', @DBStatus OUT	
		END
		ELSE
		BEGIN
			IF (EXISTS(SELECT * FROM sysobjects 
				WHERE name = RTRIM( 'DDT_'+ CONVERT(char(10), @lDataDefinitionIndex))))
			BEGIN
				SELECT @lCursor_String = ''
				SELECT @FieldName     = ''

				SELECT @lTableName = 'DDT_' + CONVERT(char(10), @lDataDefinitionIndex)
				DECLARE DataCur CURSOR FAST_FORWARD  FOR 
					SELECT A.DataFieldIndex, B.DataFieldType
					FROM PDBDataFieldsTable A, PDBGlobalIndex B
					WHERE A.DataFieldIndex = B.DataFieldIndex
					AND A.DataDefIndex = @lDataDefinitionIndex
				OPEN DataCur
				FETCH NEXT FROM DataCur INTO @DataFieldIndex, @DataFieldType
				WHILE @@FETCH_STATUS <> -1
				BEGIN
					IF @@FETCH_STATUS <> -2
					BEGIN
						SELECT	@FieldName = RTRIM(@FieldName) + ',Field_' + CONVERT(VARCHAR(10), @DataFieldIndex)
					END
					FETCH NEXT FROM DataCur INTO @DataFieldIndex, @DataFieldType
				END
				SELECT @lCursor_String = ' INSERT INTO ' + @lDBTargetCab + RTRIM(@lTableName) + 
										' ( FoldDocIndex, FoldDocFlag ' + RTRIM(@FieldName) +
										' ) SELECT ' + CONVERT(VARCHAR(10), @lnewFolderIndex) + ' , FoldDocFlag ' + RTRIM(@FieldName) +
										' FROM ' + @lDBsrcLinkName + RTRIM(@lTableName)  +
										' WHERE FoldDocIndex = ' + CONVERT(VARCHAR(10), @DBMoveFolderIndex) +
										' AND FoldDocFlag = ' +  CHAR(39) + 'F' + CHAR(39)
				EXECUTE (@lCursor_String)
				SELECT @DBStatus = @@ERROR
				IF @DBStatus <> 0
					Return
				CLOSE DataCur
				DEALLOCATE DataCur
			END
		END

		--delete from ddt
		SELECT @lCursor_String = 'DELETE FROM '+ @lDBsrcLinkName + RTRIM(@lTableName) + ' 
						WHERE FoldDocIndex =  '+ CONVERT(VARCHAR(10),@DBMoveFolderIndex) + ' AND FoldDocFlag = ''F'''
		EXECUTE (@lCursor_String)

	END
	
	IF(@DBMoveDocFlag = 'Y' )
	BEGIN

		SELECT @lCursor_String = 'DECLARE doccur CURSOR FAST_FORWARD FOR Select A.DocumentIndex, A.DataDefinitionIndex, ImageIndex, VolumeId
								FROM '+ @lDBsrcLinkName + 'PDBDocument A,'+ @lDBsrcLinkName + 'PDBDocumentContent B
								WHERE A.DocumentIndex = B.DocumentIndex 
								AND ParentFolderIndex = '+ CONVERT(VARCHAR(10),@DBMoveFolderIndex) +' AND RefereceFlag = ''O'''
		EXECUTE (@lCursor_String)

		OPEN doccur
		FETCH NEXT FROM doccur INTO @lTempDocIndex,@lDocDDI,@lImageIndex,@lVolumeId
		WHILE @@FETCH_STATUS <> -1
		BEGIN
			IF @@FETCH_STATUS <> -2
			BEGIN
					
				select @v_docIndexes = @v_docIndexes + ', ' + CONVERT(VARCHAR(10),@lTempDocIndex)
				
				IF @DBGenerateIndex = 'Y'
				BEGIN
					select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBDOCUMENT (VersionNumber, VersionComment, Name, Owner, CreatedDateTime,
								RevisedDateTime, AccessedDateTime, DataDefinitionIndex, Versioning, AccessType, DocumentType, CreatedbyApplication,
								CreatedbyUser, ImageIndex, VolumeId, NoOfPages,DocumentSize, FTSDocumentIndex, ODMADocumentIndex, HistoryEnableFlag,
								DocumentLock, LockByUser, Comment, Author, TextImageIndex, TextVolumeId, FTSFlag, DocStatus, ExpiryDateTime, FinalizedFlag,
								FinalizedDateTime, FinalizedBy, CheckOutstatus, CheckOutbyUser, UseFulData, ACL, PhysicalLocation, ACLMoreFlag, AppName,
								MainGroupId, PullPrintFlag, ThumbNailFlag, LockMessage, EnableSecure)
								SELECT VersionNumber, VersionComment, Name, Owner, CreatedDateTime, RevisedDateTime,
								AccessedDateTime, DataDefinitionIndex, Versioning, AccessType, DocumentType, CreatedbyApplication, CreatedbyUser, ImageIndex,
								VolumeId, NoOfPages,DocumentSize, FTSDocumentIndex, ODMADocumentIndex, HistoryEnableFlag, DocumentLock, LockByUser, Comment,
								Author, TextImageIndex, TextVolumeId, FTSFlag, DocStatus, ExpiryDateTime, FinalizedFlag, FinalizedDateTime,
								FinalizedBy, CheckOutstatus, CheckOutbyUser, UseFulData, ACL, PhysicalLocation, ACLMoreFlag, AppName, MainGroupId,
								PullPrintFlag, ThumbNailFlag, LockMessage, EnableSecure FROM ' + @lDBsrcLinkName + 'PDBDOCUMENT  
								WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
					EXECUTE(@lCursor_String)
					
					SELECT @lCursor_String = ' USE ' + @DBTargetCabinet + ' select @value = @@identity '
					SELECT @lCursor_StringParameter = '@value VARCHAR(10) OUTPUT'
					EXEC sp_executesql @lCursor_String, @lCursor_StringParameter, @value = @newDocumentIndex OUTPUT
					IF(@@error <> 0)
					BEGIN
						select @DBStatus = -1
						RETURN
					END
				END
				ELSE
				BEGIN
					select @newDocumentIndex = @lTempDocIndex
		
					select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBDOCUMENT ON 
								INSERT INTO ' + @lDBTargetCab + 'PDBDOCUMENT (DocumentIndex, VersionNumber, VersionComment, Name, Owner,
								CreatedDateTime, RevisedDateTime, AccessedDateTime, DataDefinitionIndex, Versioning, AccessType, DocumentType,
								CreatedbyApplication, CreatedbyUser, ImageIndex, VolumeId, NoOfPages,DocumentSize, FTSDocumentIndex, ODMADocumentIndex,
								HistoryEnableFlag, DocumentLock, LockByUser, Comment, Author, TextImageIndex, TextVolumeId, FTSFlag, DocStatus,
								ExpiryDateTime, FinalizedFlag, FinalizedDateTime, FinalizedBy, CheckOutstatus, CheckOutbyUser, UseFulData, ACL,
								PhysicalLocation, ACLMoreFlag, AppName, MainGroupId, PullPrintFlag, ThumbNailFlag, LockMessage, EnableSecure)
								SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', VersionNumber, VersionComment, Name, Owner, CreatedDateTime,
								RevisedDateTime, AccessedDateTime, DataDefinitionIndex, Versioning, AccessType, DocumentType, CreatedbyApplication,
								CreatedbyUser, ImageIndex, VolumeId, NoOfPages,DocumentSize, FTSDocumentIndex, ODMADocumentIndex, HistoryEnableFlag,
								DocumentLock, LockByUser, Comment, Author, TextImageIndex, TextVolumeId, FTSFlag, DocStatus, ExpiryDateTime, FinalizedFlag,
								FinalizedDateTime, FinalizedBy, CheckOutstatus, CheckOutbyUser, UseFulData, ACL, PhysicalLocation, ACLMoreFlag, AppName,
								MainGroupId, PullPrintFlag, ThumbNailFlag, LockMessage, EnableSecure FROM ' + @lDBsrcLinkName + 'PDBDOCUMENT  
								WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex) + 
								' SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBDOCUMENT OFF'
					EXECUTE (@lCursor_String)
				END

				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBDOCUMENTCONTENT (PARENTFOLDERINDEX, DOCUMENTINDEX, FILEDBY, FILEDDATETIME,
								DOCUMENTORDERNO, REFERECEFLAG, DOCSTATUS) 
								SELECT ' + CONVERT(VARCHAR(10),@lnewFolderIndex) +',' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', 
								FILEDBY, FILEDDATETIME, DOCUMENTORDERNO, REFERECEFLAG, DOCSTATUS FROM ' + @lDBsrcLinkName + 'PDBDOCUMENTCONTENT
								WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex) + ' 
								AND ParentFolderIndex = ' + CONVERT(VARCHAR(10),@DBMoveFolderIndex)
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFTSDATA ON 
								INSERT INTO ' + @lDBTargetCab + 'PDBFTSDATA (FTSINDEX, FOLDERINDEX, DOCUMENTINDEX, DATA, OBJECTTYPE,
								OBJECTINDEX, PAGENUMBER, DATACOORDINATE) 
								SELECT FTSINDEX, ' + CONVERT(VARCHAR(10),@lnewFolderIndex) +',' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', 
								DATA, OBJECTTYPE, OBJECTINDEX, PAGENUMBER, DATACOORDINATE FROM ' + @lDBsrcLinkName + 'PDBFTSDATA
								WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex) +' AND ObjectType = 1 
								SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFTSDATA OFF'
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFTSDATAVERSION ON 
								INSERT INTO ' + @lDBTargetCab + 'PDBFTSDATAVERSION (FTSVERSIONINDEX, FOLDERINDEX, DOCUMENTINDEX, DATA,
								OBJECTTYPE, VERSIONNUMBER, OBJECTINDEX, PAGENUMBER, DATACOORDINATE) 
								SELECT FTSVERSIONINDEX, ' +	CONVERT(VARCHAR(10),@lnewFolderIndex) +',' + CONVERT(VARCHAR(10),@newDocumentIndex) + ',
								DATA, OBJECTTYPE, VERSIONNUMBER, OBJECTINDEX, PAGENUMBER, DATACOORDINATE 
								FROM ' + @lDBsrcLinkName +'PDBFTSDATAVERSION
								WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex) +' AND ObjectType = 1'
				EXECUTE (@lCursor_String)
				
				
				select @lCursor_String = 'DECLARE AnnotationCursor CURSOR FAST_FORWARD FOR SELECT AnnotationIndex FROM ' + @lDBsrcLinkName + 'PDBANNOTATION 
										WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				OPEN  AnnotationCursor
				FETCH NEXT FROM AnnotationCursor INTO @lObjectIndex
				WHILE (@@FETCH_STATUS <> -1)
				BEGIN
					IF (@@FETCH_STATUS <> -2)
					BEGIN
						select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBANNOTATION ON 
									INSERT INTO ' + @lDBTargetCab + 'PDBANNOTATION (DOCUMENTINDEX, PAGENUMBER, ANNOTATIONINDEX, ANNOTATIONNAME,
									ANNOTATIONACCESSTYPE, ACL,OWNER, ANNOTATIONBUFFER, ACLMOREFLAG, ANNOTATIONTYPE, CREATIONDATETIME, REVISEDDATETIME,
									FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, MAINGROUPID) 
									SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', PAGENUMBER, ANNOTATIONINDEX,
									ANNOTATIONNAME, ANNOTATIONACCESSTYPE, ACL, OWNER, ANNOTATIONBUFFER, ACLMOREFLAG, ANNOTATIONTYPE, CREATIONDATETIME,
									REVISEDDATETIME, FINALIZEDFLAG, FINALIZEDDATETIME, FINALIZEDBY, MAINGROUPID 
									FROM ' + @lDBsrcLinkName + 'PDBANNOTATION WHERE AnnotationIndex = ' + CONVERT(VARCHAR(10),@lObjectIndex)
						EXECUTE (@lCursor_String)
						
						select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFTSDATA ON 
									INSERT INTO ' + @lDBTargetCab + 'PDBFTSDATA (FTSINDEX, FOLDERINDEX, DOCUMENTINDEX, DATA,
									OBJECTTYPE, OBJECTINDEX, PAGENUMBER, DATACOORDINATE) 
									SELECT FTSINDEX, ' + CONVERT(VARCHAR(10),@lnewFolderIndex) +',' + CONVERT(VARCHAR(10),@newDocumentIndex) + ',
									DATA, OBJECTTYPE, OBJECTINDEX, PAGENUMBER, DATACOORDINATE FROM ' + @lDBsrcLinkName + 'PDBFTSDATA
									WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex) + ' 
									AND ObjectIndex = ' + CONVERT(VARCHAR(10),@lObjectIndex) + ' AND ObjectType IN (2,8,9)'
						EXECUTE (@lCursor_String)
					END
					FETCH NEXT FROM AnnotationCursor INTO @lObjectIndex
				END
				CLOSE AnnotationCursor
				DEALLOCATE AnnotationCursor
				
				
				select @lCursor_String = 'DECLARE AnnotationCursor CURSOR FAST_FORWARD FOR SELECT AnnotationIndex 
									FROM ' + @lDBsrcLinkName + 'PDBANNOTATIONVERSION WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				OPEN  AnnotationCursor
				FETCH NEXT FROM AnnotationCursor INTO @lObjectIndex
				WHILE (@@FETCH_STATUS <> -1)
				BEGIN
					IF (@@FETCH_STATUS <> -2)
					BEGIN
						select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBANNOTATIONVERSION ON 
									INSERT INTO ' + @lDBTargetCab + 'PDBANNOTATIONVERSION (DOCUMENTINDEX, PAGENUMBER, ANNOTATIONINDEX,
									ANNOTATIONVERSION, ANNOTATIONNAME, ANNOTATIONACCESSTYPE, OWNER, ANNOTATIONBUFFER, ANNOTATIONTYPE, CREATIONDATETIME, ACL,
									ACLMOREFLAG) SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', PAGENUMBER, ANNOTATIONINDEX, ANNOTATIONVERSION,
									ANNOTATIONNAME, ANNOTATIONACCESSTYPE, OWNER, ANNOTATIONBUFFER, ANNOTATIONTYPE, CREATIONDATETIME, ACL, ACLMOREFLAG 
									FROM ' + @lDBsrcLinkName + 'PDBANNOTATION WHERE AnnotationIndex = ' + CONVERT(VARCHAR(10),@lObjectIndex)
						EXECUTE (@lCursor_String)
						
						select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFTSDATAVERSION ON 
									INSERT INTO ' + @lDBTargetCab + 'PDBFTSDATAVERSION (FTSVERSIONINDEX, FOLDERINDEX, DOCUMENTINDEX, DATA,
									OBJECTTYPE, VERSIONNUMBER, OBJECTINDEX, PAGENUMBER, DATACOORDINATE) 
									SELECT FTSVERSIONINDEX, ' +	CONVERT(VARCHAR(10),@lnewFolderIndex) +',' + CONVERT(VARCHAR(10),@newDocumentIndex) + ',
									DATA, OBJECTTYPE, VERSIONNUMBER, OBJECTINDEX, PAGENUMBER, DATACOORDINATE 
									FROM ' + @lDBsrcLinkName +'PDBFTSDATAVERSION WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex) + ' 
									AND ObjectIndex = ' + CONVERT(VARCHAR(10),@lObjectIndex) +' AND ObjectType IN (2,8,9)'
						EXECUTE (@lCursor_String)
					END
					FETCH NEXT FROM AnnotationCursor INTO @lObjectIndex
				END
				CLOSE AnnotationCursor
				DEALLOCATE AnnotationCursor
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBDOCUMENTVERSION (DOCUMENTINDEX, PARENTFOLDERINDEX, VERSIONNUMBER,
							VERSIONCOMMENT, CREATEDDATETIME, NAME, OWNER, CREATEDBYUSERINDEX, IMAGEINDEX, VOLUMEINDEX, NOOFPAGES, LOCKFLAG, LOCKBYUSER,
							APPNAME, DOCUMENTSIZE, FTSFLAG, PULLPRINTFLAG, DOCUMENTTYPE, LOCKMESSAGE)
							SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) +',' + CONVERT(VARCHAR(10),@lnewFolderIndex) +', 
							VERSIONNUMBER, VERSIONCOMMENT, CREATEDDATETIME, NAME, OWNER, CREATEDBYUSERINDEX, IMAGEINDEX, VOLUMEINDEX, NOOFPAGES, LOCKFLAG,
							LOCKBYUSER, APPNAME, DOCUMENTSIZE, FTSFLAG, PULLPRINTFLAG, DOCUMENTTYPE, LOCKMESSAGE 
							FROM ' + @lDBsrcLinkName + 'PDBDOCUMENTVERSION WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)			  
				
				
				select @lCursor_String = 'DECLARE AttachmentCursor CURSOR FAST_FORWARD FOR SELECT ObjectId FROM ' + @lDBsrcLinkName + 'PDBANNOTATIONOBJECT 
									WHERE  DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				OPEN AttachmentCursor
				FETCH NEXT FROM AttachmentCursor INTO @lObjectIndex
				WHILE(@@FETCH_STATUS <> -1)
				BEGIN
					IF (@@FETCH_STATUS <> -2)
					BEGIN
						select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBANNOTATIONOBJECT ON 
									INSERT INTO ' + @lDBTargetCab + 'PDBANNOTATIONOBJECT (DOCUMENTINDEX, OBJECTID, OBJECTTYPE, PAGENUMBER,
									IMAGEINDEX, VOLUMEINDEX, NOTES, MAINGROUPID) SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) +', OBJECTID, OBJECTTYPE,
									PAGENUMBER, IMAGEINDEX, VOLUMEINDEX, NOTES, MAINGROUPID FROM ' + @lDBsrcLinkName + 'PDBANNOTATIONOBJECT 
									WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex) + ' AND ObjectId = '+ CONVERT(VARCHAR(10),@lObjectIndex)
						EXECUTE (@lCursor_String)
						
						select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBANNOTATIONOBJECTVERSION (DOCUMENTINDEX, PAGENUMBER, OBJECTID,
									OBJECTTYPE, ANNOTATIONOBJECTVERSION, IMAGEINDEX, VOLUMEINDEX, NOTES) 
									SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) +', PAGENUMBER, OBJECTID, OBJECTTYPE, ANNOTATIONOBJECTVERSION,
									IMAGEINDEX, VOLUMEINDEX, NOTES FROM ' + @lDBsrcLinkName + 'PDBANNOTATIONOBJECTVERSION
									WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex) + ' AND ObjectId = ' + CONVERT(VARCHAR(10),@lObjectIndex)
						EXECUTE (@lCursor_String)
						
						select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFTSDATA ON 
									INSERT INTO ' + @lDBTargetCab + 'PDBFTSDATA (FTSINDEX, FOLDERINDEX, DOCUMENTINDEX, DATA,
									OBJECTTYPE, OBJECTINDEX, PAGENUMBER, DATACOORDINATE) 
									SELECT FTSINDEX, ' + CONVERT(VARCHAR(10),@lnewFolderIndex) +',' + CONVERT(VARCHAR(10),@newDocumentIndex) + ',
									DATA, OBJECTTYPE, OBJECTINDEX, PAGENUMBER, DATACOORDINATE FROM ' + @lDBsrcLinkName + 'PDBFTSDATA 
									WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex) + ' 
									AND ObjectIndex = ' + CONVERT(VARCHAR(10),@lObjectIndex) + ' AND ObjectType = 3'
						EXECUTE (@lCursor_String)
						
						select @lCursor_String = 'SET IDENTITY_INSERT ' + @lDBTargetCab + 'PDBFTSDATAVERSION ON 
									INSERT INTO ' + @lDBTargetCab + 'PDBFTSDATAVERSION (FTSVERSIONINDEX, FOLDERINDEX, DOCUMENTINDEX, DATA,
									OBJECTTYPE, VERSIONNUMBER, OBJECTINDEX, PAGENUMBER, DATACOORDINATE) 
									SELECT FTSVERSIONINDEX, ' +	CONVERT(VARCHAR(10),@lnewFolderIndex) +',' + CONVERT(VARCHAR(10),@newDocumentIndex) + ',
									DATA, OBJECTTYPE, VERSIONNUMBER, OBJECTINDEX, PAGENUMBER, DATACOORDINATE 
									FROM ' + @lDBsrcLinkName + 'PDBFTSDATAVERSION WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex) + ' 
									AND ObjectIndex = ' + CONVERT(VARCHAR(10),@lObjectIndex) + ' AND ObjectType = 3'
						EXECUTE (@lCursor_String)
					END
					FETCH NEXT FROM AttachmentCursor INTO @lObjectIndex
				END
				CLOSE AttachmentCursor
				DEALLOCATE AttachmentCursor
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBANNOTATIONDATAVERSION (DOCUMENTINDEX, PAGENUMBER, ANNOTATIONVERSION,
							ANNOTATIONDATA) SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', PAGENUMBER, ANNOTATIONVERSION, ANNOTATIONDATA 
							FROM ' + @lDBsrcLinkName + 'PDBANNOTATIONDATAVERSION WHERE DocumentIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBINTGLOBALINDEX (DATAFIELDINDEX, FOLDDOCINDEX, FOLDDOCFLAG, INTVALUE)
							SELECT DATAFIELDINDEX, ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', FOLDDOCFLAG , INTVALUE 
							FROM ' + @lDBsrcLinkName + 'PDBINTGLOBALINDEX WHERE FOLDDOCINDEX = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBBOOLGLOBALINDEX (DataFieldIndex,FoldDocIndex,FoldDocFlag,BoolValue)
							SELECT DATAFIELDINDEX, ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', FoldDocFlag, BOOLVALUE 
							FROM ' + @lDBsrcLinkName + 'PDBBOOLGLOBALINDEX WHERE FoldDocIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex) 
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBFLOATGLOBALINDEX (DataFieldIndex,FoldDocIndex,FoldDocFlag,FloatValue)
							SELECT DATAFIELDINDEX, ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', FoldDocFlag, FLOATVALUE 
							FROM ' + @lDBsrcLinkName + 'PDBFLOATGLOBALINDEX WHERE  FoldDocIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex) 
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBDATEGLOBALINDEX (DataFieldIndex,FoldDocIndex,FoldDocFlag,DateValue)
							SELECT DATAFIELDINDEX, ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', FoldDocFlag, DATEVALUE 
							FROM ' + @lDBsrcLinkName + 'PDBDATEGLOBALINDEX WHERE  FoldDocIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBSTRINGGLOBALINDEX (DataFieldIndex,FoldDocIndex,FoldDocFlag,StringValue)
							SELECT DATAFIELDINDEX, ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', FoldDocFlag, STRINGVALUE 
							FROM ' + @lDBsrcLinkName + 'PDBSTRINGGLOBALINDEX WHERE  FoldDocIndex = '+ CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)	 
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBLONGGLOBALINDEX (DataFieldIndex, FoldDocIndex, FoldDocFlag, LongValue)
							SELECT DATAFIELDINDEX, ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', FoldDocFlag, LONGVALUE 
							FROM ' + @lDBsrcLinkName + 'PDBLONGGLOBALINDEX WHERE  FoldDocIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBTextGlobalindex (DataFieldIndex,FoldDocIndex,FoldDocFlag,TextValue)
							SELECT DataFieldIndex, ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', FoldDocFlag, TextValue
							FROM ' + @lDBsrcLinkName + 'PDBTextGlobalindex WHERE  FoldDocIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
							
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBKEYWORD (OBJECTINDEX, KEYWORDINDEX, OBJECTTYPE)
							SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', KEYWORDINDEX, OBJECTTYPE FROM ' + @lDBsrcLinkName + 'PDBKEYWORD
							WHERE  ObjectIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex) + ' AND ObjectType = ''D'''
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBANNOTATIONDATA (DOCUMENTINDEX, PAGENUMBER, ANNOTATIONDATA)
							SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', PAGENUMBER, ANNOTATIONDATA 
							FROM ' + @lDBsrcLinkName + 'PDBANNOTATIONDATA WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBTHUMBNAIL (DOCUMENTINDEX, PAGENUMBER, THUMBNAILDATA, CREATEDDATETIME,
							ACCESSEDDATETIME, REVISEDDATETIME, IMAGEINDEX, VOLUMEID) SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', PAGENUMBER,
							THUMBNAILDATA, CREATEDDATETIME, ACCESSEDDATETIME, REVISEDDATETIME, IMAGEINDEX, VOLUMEID 
							FROM ' + @lDBsrcLinkName + 'PDBTHUMBNAIL WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				
				select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'PDBTHUMBNAILVERSION (DOCUMENTINDEX, PAGENUMBER, VERSIONNUMBER, THUMBNAILDATA,
							CREATEDDATETIME, ACCESSEDDATETIME, REVISEDDATETIME, IMAGEINDEX, VOLUMEID) 
							SELECT ' + CONVERT(VARCHAR(10),@newDocumentIndex) + ', PAGENUMBER, VERSIONNUMBER,
							THUMBNAILDATA, CREATEDDATETIME, ACCESSEDDATETIME, REVISEDDATETIME, IMAGEINDEX, VOLUMEID 
							FROM ' + @lDBsrcLinkName + 'PDBTHUMBNAILVERSION WHERE DocumentIndex = ' + CONVERT(VARCHAR(10),@lTempDocIndex)
				EXECUTE (@lCursor_String)
				
				IF (@lDocDDI <> 0) 
				BEGIN
					IF(EXISTS(SELECT * FROM PDBDataFieldsTable 
						WHERE DataDefIndex = @lDocDDI 
					AND FieldAttribute NOT IN (0,1,4,5)))
					BEGIN
						EXECUTE PRTRaiseError 'PRT_WARN_Cannot_CopyDDI', @DBStatus OUT
					END
					ELSE
					IF (EXISTS(SELECT * FROM sysobjects 
						WHERE name = RTRIM( 'DDT_'+ CONVERT(VARCHAR(10), @lDocDDI))))
					BEGIN
						SELECT @lCursor_String = 	'SELECT * INTO ' + @lDBTargetCab + 'PDBTempTable21 ' +
							' FROM ' + @lDBsrcLinkName + 'DDT_' + CONVERT(VARCHAR(10), @lDocDDI) + 
							' WHERE FoldDocIndex = ' + RTRIM(CONVERT(varchar(10), @lTempDocIndex)) + ' AND FoldDocFlag = ''D'''
						EXECUTE(@lCursor_String)

						SELECT @lCursor_String = 'UPDATE ' + @lDBTargetCab + 'PDBTempTable21 SET FoldDocIndex = ' + CONVERT(VARCHAR(10),@newDocumentIndex)
						EXECUTE(@lCursor_String)

						SELECT @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'DDT_'+ CONVERT(VARCHAR(10),@lDocDDI) + ' SELECT * FROM PDBTempTable21'
						EXECUTE(@lCursor_String)
					
						EXECUTE('DROP TABLE PDBTempTable21')
					END
					--delete from ddt
					IF(@v_DeleteFromSrc = 'Y' )
					BEGIN
						SELECT @lCursor_String = 'DELETE FROM '+ @lDBsrcLinkName + RTRIM(@lTableName) + ' 
										WHERE FoldDocIndex =  ' + CONVERT(VARCHAR(10),@lTempDocIndex) + ' AND FoldDocFlag = ''D'''
						EXECUTE(@lCursor_String)
					END
				END

				
				--Mark Archive in ISDoc
				select @lCursor_String = 'UPDATE ' + @lDBsrcLinkName + 'ISDOC SET ArchiveFlag=''Y'' 
							WHERE VOLUMEID = ' + CONVERT(VARCHAR(10),@lVolumeId) + 'AND DOCINDEX = ' + CONVERT(VARCHAR(10),@lImageIndex)
				EXECUTE(@lCursor_String)
				
				select @v_Count = @v_Count + 1
			END
			FETCH NEXT FROM doccur INTO @lTempDocIndex,@lDocDDI,@lImageIndex,@lVolumeId
		END
		CLOSE doccur
		DEALLOCATE doccur
	END

	select @v_docIndexes = @v_docIndexes + ')'
	
	--start deletion from soure cabinet
	IF(@v_DeleteFromSrc = 'Y' )
	BEGIN
		IF (@v_Count > 0)
		BEGIN
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBRights WHERE Flag2 = ''D'' AND ObjectIndex2 IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBIntGlobalindex WHERE FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBBoolGlobalindex WHERE FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBFloatGlobalindex WHERE  FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBDateGlobalindex WHERE FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBStringGlobalindex WHERE FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBLongGlobalIndex WHERE  FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBDocIdGlobalIndex WHERE  FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBTextGlobalIndex WHERE   FoldDocIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBKeyword WHERE ObjectIndex IN ' + @v_docIndexes + ' AND ObjectType = ''D''' ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAnnotationObjectVersion WHERE DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAnnotationDataVersion WHERE DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBRights WHERE Flag2 = ''V'' AND EXISTS(SELECT 1 FROM ' + @lDBsrcLinkName + 'PDBAnnotationVersion B
			WHERE  B.AnnotationIndex = PDBRights.ObjectIndex2 AND B.DocumentIndex IN '+ @v_docIndexes + ')' ) 

			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAnnotationVersion WHERE DocumentIndex IN  ' + @v_docIndexes) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAnnotationObject WHERE DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAnnotationData WHERE  DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBLinkNotesTable WHERE ObjectType = ''D'' AND ObjectIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBRights WHERE Flag2 = ''A'' AND EXISTS(SELECT 1 FROM ' + @lDBsrcLinkName + 'PDBAnnotation B 
			WHERE  B.AnnotationIndex = PDBRights.ObjectIndex2 AND B.DocumentIndex IN  ' + @v_docIndexes +')' ) 

			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAnnotation WHERE DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBFTSData WHERE DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBFTSDataVersion WHERE DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBDocumentVersion WHERE DocumentIndex IN  ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBThumbNail WHERE DocumentIndex IN  ' + @v_docIndexes) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBThumbNailVersion WHERE DocumentIndex IN  ' + @v_docIndexes) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBReminder WHERE ObjectIndex IN  ' + @v_docIndexes) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAlarm WHERE ObjectType = ''D'' AND ObjectId IN ' + @v_docIndexes + ' AND ActionType <> 2 ' ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBFoldDocLockStatus WHERE FoldDocFlag = ''D'' AND FoldDocIndex IN ' + @v_docIndexes ) 
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBDocumentContent WHERE ParentFolderIndex = ' + @DBMoveFolderIndex)
			EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBDocument WHERE DocumentIndex IN ' + @v_docIndexes)		
		END

		--finally delete folder
		EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBFolderContent WHERE FolderIndex = ' + @DBMoveFolderIndex) 
		EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBAlarm WHERE ObjectType = ''F'' AND ObjectId = ' + @DBMoveFolderIndex) 
		EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBLinkNotesTable WHERE ObjectType = ''F'' AND ObjectIndex  = ' + @DBMoveFolderIndex) 
		EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBFoldDocLockStatus WHERE FoldDocFlag = ''F'' AND FoldDocIndex  = ' + @DBMoveFolderIndex) 
		EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBRights WHERE Flag2 = ''F'' AND ObjectIndex2  = ' + @DBMoveFolderIndex) 
		EXECUTE ('DELETE FROM ' + @lDBsrcLinkName + 'PDBFolder WHERE FolderIndex = ' + @DBMoveFolderIndex) 
	END

Return

go

/***************************************************************************
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
Group			: Genesis
Product			: OmniDocs
Module			: Backend
File Name		: MoveISDoc.sql
Author			: Pranay Tiwari
Date written	: 31/01/2014
Description		: This procedure move isrvr data from 
				  source cabinet to target cabinet using DBLink.
****************************************************************************/
--DROP PROCEDURE MoveISDoc
--GO
CREATE PROCEDURE MoveISDoc(
	@DBSourceCabinet	VARCHAR(255),
	@DBTargetCabinet    VARCHAR(255),
	@DBsrcLinkName		VARCHAR(1024),	
	@DBVolumeId			INT,
	@DBVolBlockId		INT,
	@DBSiteId			INT,
	@DBStatus	 		INT OUT 
)
AS
	SET NOCOUNT ON
	Declare	@lCursor_String		VARCHAR(MAX)
	Declare	@lDBsrcLinkName		VARCHAR(4000)
	Declare	@lDBTargetCab		VARCHAR(4000)


	select @DBStatus = 0

	IF @DBSourceCabinet IS NULL OR @DBTargetCabinet IS NULL OR @DBVolumeId IS NULL OR @DBVolBlockId IS NULL OR @DBSiteId IS NULL
	BEGIN
		EXECUTE PRTRaiseError 'PRT_ERR_Invalid_Parameter', @DBStatus OUT
		Return
	END
	
	IF @DBsrcLinkName IS NOT NULL
		select @lDBsrcLinkName = '['+@DBsrcLinkName+'].'+@DBSourceCabinet+'.dbo.'
	ELSE
		select @lDBsrcLinkName = @DBSourceCabinet+'..'
		
	SELECT @lDBTargetCab = @DBTargetCabinet + '..'
	
	-- Start data move
	Begin  Transaction TranISdoc
	
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'ISVolBlock SELECT * FROM ' +	@lDBsrcLinkName + 'ISVolBlock  
							WHERE VolumeId = '+ CONVERT(VARCHAR(10),@DBVolumeId) +' AND VolBlockId = '+ CONVERT(VARCHAR(10),@DBVolBlockId) +' 
							AND SiteId = '+ CONVERT(VARCHAR(10),@DBSiteId)
	EXECUTE (@lCursor_String)
	Select @DBStatus = @@ERROR
	IF (@DBStatus <> 0)
	BEGIN
		Rollback transaction TranISdoc
		return	
	END
	
	select @lCursor_String = 'INSERT INTO ' + @lDBTargetCab + 'ISDoc SELECT * FROM ' +	@lDBsrcLinkName + 'ISDoc  
							WHERE VolumeId = '+ CONVERT(VARCHAR(10),@DBVolumeId) +' AND VolBlockId = '+ CONVERT(VARCHAR(10),@DBVolBlockId) +' 
							AND SiteId = '+ CONVERT(VARCHAR(10),@DBSiteId)
	EXECUTE (@lCursor_String)
	Select @DBStatus = @@ERROR
	IF (@DBStatus <> 0)
	BEGIN
		Rollback transaction TranISdoc
		return	
	END
	
	select @lCursor_String = 'UPDATE ' + @lDBTargetCab + 'ISVolDef SET NextIndex = 
							(SELECT NextIndex FROM ' +	@lDBsrcLinkName + 'ISVolDef WHERE VolumeId = '+ CONVERT(VARCHAR(10),@DBVolumeId) +' 
							AND SiteId = '+ CONVERT(VARCHAR(10),@DBSiteId) +') WHERE VolumeId = '+ CONVERT(VARCHAR(10),@DBVolumeId) +' 
							AND SiteId = '+ CONVERT(VARCHAR(10),@DBSiteId)
	EXECUTE (@lCursor_String)
	Select @DBStatus = @@ERROR
	IF (@DBStatus <> 0)
	BEGIN
		Rollback transaction TranISdoc
		return	
	END
	
	select @lCursor_String = 'DELETE FROM ' + @lDBsrcLinkName + 'ISDoc WHERE VolumeId = '+ CONVERT(VARCHAR(10),@DBVolumeId) +' 
							AND VolBlockId = '+ CONVERT(VARCHAR(10),@DBVolBlockId) +' AND SiteId = '+ CONVERT(VARCHAR(10),@DBSiteId)
	EXECUTE (@lCursor_String)
	Select @DBStatus = @@ERROR
	IF (@DBStatus <> 0)
	BEGIN
		Rollback transaction TranISdoc
		return	
	END
	
	select @lCursor_String = 'DELETE FROM ' + @lDBsrcLinkName + 'ISVolBlock WHERE VolumeId = '+ CONVERT(VARCHAR(10),@DBVolumeId) +' 
							AND VolBlockId = '+ CONVERT(VARCHAR(10),@DBVolBlockId) +' AND SiteId = '+ CONVERT(VARCHAR(10),@DBSiteId)
	EXECUTE (@lCursor_String)
	Select @DBStatus = @@ERROR
	IF (@DBStatus <> 0)
	BEGIN
		Rollback transaction TranISdoc
		return	
	END
	
	Commit Transaction TranISdoc
	
Return

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFPartitionLargeTables.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 30 MAY 2014
	Description                 : Script to handle Partition in large Tables in SQL
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/	
				
			
	If Exists (Select * FROM SysObjects  WITH (NOLOCK) Where xType = 'P' and name = 'WFPartitionLargeTables')
	Begin
	Execute('DROP PROCEDURE WFPartitionLargeTables')
	Print 'Procedure WFPartitionLargeTables already exists, hence older one dropped ..... '
	End
	
	go
		
	Create Procedure WFPartitionLargeTables	
	AS
	BEGIN
		
		DECLARE @vquery NVARCHAR(Max)
		
		SELECT @vquery = ' CREATE PARTITION FUNCTION PartitionRangeDate (DATETIME) AS RANGE Right FOR VALUES
		(''20100101'', ''20110101'',''20120101'',''20130101'',''20140101'',''20150101'', ''20160101'',''20170101'',''20180101'',''20190101'',''20200101'') '
		
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE PARTITION SCHEME PartitionSchemeDate AS PARTITION PartitionRangeDate ALL TO ([PRIMARY]) '
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE PARTITION FUNCTION PartitionRangePId (nvarchar(63)) AS RANGE Right FOR VALUES (''aaaaa-0000000000-aaaaa'') '
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE PARTITION SCHEME PartitionSchemePId AS PARTITION PartitionRangePId ALL TO ([PRIMARY]) '
		EXECUTE(@vquery)
		
		/* Recreate Tables For Applying Partitions */
		
		/*********** WFINSTRUMENTTABLE ****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFINSTRUMENTTABLE')
		Begin
			Execute('DROP Table WFINSTRUMENTTABLE')
			Print 'Table WFINSTRUMENTTABLE already exists, hence older one dropped ..... '
		End
		
		SELECT @vquery = ' CREATE TABLE WFINSTRUMENTTABLE (
			ProcessInstanceID			NVARCHAR(63)  NOT NULL ,
			ProcessDefID				INT		NOT NULL,
			Createdby					INT		NOT NULL ,
			CreatedByName				NVARCHAR(63)	NULL ,
			Createddatetime				DATETIME		NOT NULL ,
			Introducedbyid				INT		NULL ,
			Introducedby				NVARCHAR(63)	NULL ,
			IntroductionDATETIME		DATETIME		NULL ,
			ProcessInstanceState		INT		NULL ,
			ExpectedProcessDelay		DATETIME		NULL ,
			IntroducedAt				NVARCHAR(30)	NOT NULL ,
			WorkItemId					INT		NOT NULL ,
			VAR_INT1					SMALLINT	NULL ,
			VAR_INT2					SMALLINT	NULL ,
			VAR_INT3					SMALLINT	NULL ,
			VAR_INT4					SMALLINT	NULL ,
			VAR_INT5					SMALLINT	NULL ,
			VAR_INT6					SMALLINT	NULL ,
			VAR_INT7					SMALLINT	NULL ,
			VAR_INT8					SMALLINT	NULL ,
			VAR_FLOAT1					NUMERIC(15, 2)	NULL ,
			VAR_FLOAT2					NUMERIC(15, 2)	NULL ,
			VAR_DATE1					DATETIME		NULL ,
			VAR_DATE2					DATETIME		NULL ,
			VAR_DATE3					DATETIME		NULL ,
			VAR_DATE4					DATETIME		NULL ,
			VAR_LONG1					INT		NULL ,
			VAR_LONG2					INT		NULL ,
			VAR_LONG3					INT		NULL ,
			VAR_LONG4					INT		NULL ,
			VAR_STR1					NVARCHAR(255)  NULL ,
			VAR_STR2					NVARCHAR(255)  NULL ,
			VAR_STR3					NVARCHAR(255)  NULL ,
			VAR_STR4					NVARCHAR(255)  NULL ,
			VAR_STR5					NVARCHAR(255)  NULL ,
			VAR_STR6					NVARCHAR(255)  NULL ,
			VAR_STR7					NVARCHAR(255)  NULL ,
			VAR_STR8					NVARCHAR(255)  NULL ,
			VAR_REC_1					NVARCHAR(255)  NULL ,
			VAR_REC_2					NVARCHAR(255)  NULL ,
			VAR_REC_3					NVARCHAR(255)  NULL ,
			VAR_REC_4					NVARCHAR(255)  NULL ,
			VAR_REC_5					NVARCHAR(255)  NULL ,
			InstrumentStatus			NVARCHAR(1)	NULL, 
			CheckListCompleteFlag		NVARCHAR(1)	NULL ,
			SaveStage					NVARCHAR(30)	NULL ,
			HoldStatus					INT		NULL,
			Status						NVARCHAR(255)  NULL ,
			ReferredTo					INT		NULL ,
			ReferredToName				NVARCHAR(63)	NULL ,
			ReferredBy					INT		NULL ,
			ReferredByName				NVARCHAR(63)	NULL ,
			ChildProcessInstanceId		NVARCHAR(63)	NULL,
			ChildWorkitemId				INT,
			ParentWorkItemID			INT,
			CalendarName        		NVARCHAR(255) NULL,  
			ProcessName 				NVARCHAR(30)	NOT NULL ,
			ProcessVersion   			SMALLINT,
			LastProcessedBy 			INT		NULL ,
			ProcessedBy					NVARCHAR(63)	NULL,	
			ActivityName 				NVARCHAR(30)	NULL ,
			ActivityId 					INT		NULL ,
			EntryDATETIME 				DATETIME		NULL ,
			AssignmentType				NVARCHAR (1)	NULL ,
			CollectFlag					NVARCHAR (1)	NULL ,
			PriorityLevel				SMALLINT	NULL ,
			ValidTill					DATETIME		NULL ,
			Q_StreamId					INT		NULL ,
			Q_QueueId					INT		NULL ,
			Q_UserId					INT	NULL ,
			AssignedUser				NVARCHAR(63)	NULL,	
			FilterValue					INT		NULL ,
			WorkItemState				INT		NULL ,
			Statename 					NVARCHAR(255),
			ExpectedWorkitemDelay		DATETIME		NULL ,
			PreviousStage				NVARCHAR (30)  NULL ,
			LockedByName				NVARCHAR(63)	NULL,	
			LockStatus					NVARCHAR(1)	NOT NULL,
			RoutingStatus				NVARCHAR(1) NOT NULL,	
			LockedTime					DATETIME		NULL , 
			Queuename 					NVARCHAR(63),
			Queuetype 					NVARCHAR(1),
			NotifyStatus				NVARCHAR(1),	  /* moved from after Guid*/
			Guid 						BIGINT ,
			NoOfCollectedInstances		INT DEFAULT 0 NOT NULL,
			IsPrimaryCollected			NVARCHAR(1)	NULL CHECK (IsPrimaryCollected IN (N''Y'', N''N'')),
			ExportStatus				NVARCHAR(1) DEFAULT ''N'',
			ProcessVariantId 			INT 		NOT NULL DEFAULT 0,
			Q_DivertedByUserId   		INT NULL,
			ActivityType				SmallInt NULL,
			lastModifiedTime				DATETIME,
			VAR_DATE5					DATETIME		NULL ,
			VAR_DATE6					DATETIME		NULL ,
			VAR_LONG5					INT		NULL ,
			VAR_LONG6					INT		NULL ,
			VAR_STR9					NVARCHAR(512)  NULL ,
			VAR_STR10					NVARCHAR(512)  NULL ,
			VAR_STR11					NVARCHAR(512)  NULL ,
			VAR_STR12					NVARCHAR(512)  NULL ,
			VAR_STR13					NVARCHAR(512)  NULL ,
			VAR_STR14					NVARCHAR(512)  NULL ,
			VAR_STR15					NVARCHAR(512)  NULL ,
			VAR_STR16					NVARCHAR(512)  NULL ,
			VAR_STR17					NVARCHAR(512)  NULL ,
			VAR_STR18					NVARCHAR(512)  NULL ,
			VAR_STR19					NVARCHAR(512)  NULL ,
			VAR_STR20					NVARCHAR(512)  NULL ,
			CONSTRAINT PK_WFINSTRUMENTTable PRIMARY KEY 
			(
			ProcessInstanceID,WorkitemId
			)
		)  ON PartitionSchemePId (processinstanceid) '

		EXECUTE(@vquery)
		print 'query -'+@vquery
		
		SELECT @vquery = ' CREATE INDEX IDX1_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (var_rec_1, var_rec_2) '
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX2_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (Q_QueueId,ProcessInstanceId,WorkitemId)'
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX3_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (Q_UserID, ProcessInstanceId, WorkitemId)'
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX5_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (Q_QueueId, WorkItemState , LockStatus , RoutingStatus , EntryDateTime)'
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX6_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE (ProcessDefId, RoutingStatus, LockStatus)'
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX7_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE  (PROCESSINSTANCEID, PARENTWORKITEMID)'
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX8_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(Q_UserId, ROUTINGSTATUS, Q_QUEUEID)'
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE INDEX IDX9_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(Q_Queueid, LockStatus,EntryDateTime,ProcessInstanceID,WorkItemID)'
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE INDEX IDX10_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(Childprocessinstanceid, Childworkitemid)'
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX11_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(ValidTill)'
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE INDEX IDX12_WFINSTRUMENTTABLE ON WFINSTRUMENTTABLE(ASSIGNMENTTYPE  , VALIDTILL  ,ROUTINGSTATUS  ,LOCKSTATUS)'
		EXECUTE(@vquery)
		
		
		/*****   QUEUEHISTORYTABLE   ******/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'QUEUEHISTORYTABLE')
		Begin
			Execute('DROP Table QUEUEHISTORYTABLE')
			Print 'Table QUEUEHISTORYTABLE already exists, hence older one dropped ..... '
		End
		
		SELECT @vquery = ' CREATE TABLE QUEUEHISTORYTABLE (
			ProcessDefId 		INT 		NOT NULL ,
			ProcessName 		NVARCHAR(30)	NULL,
			ProcessVersion 		SMALLINT	NULL,
			ProcessInstanceId	NVARCHAR(63)  	NOT NULL ,
			ProcessInstanceName	NVARCHAR(63)	NULL ,
			ActivityId 		INT 		NOT NULL ,
			ActivityName		NVARCHAR(30)	NULL ,
			ParentWorkItemId 	INT		NULL ,
			WorkItemId 		INT 		NOT NULL ,
			ProcessInstanceState 	INT 		NOT NULL ,
			WorkItemState 		INT 		NOT NULL ,
			Statename 		NVARCHAR(50)	NULL,
			QueueName		NVARCHAR (63)	NULL ,
			QueueType 		NVARCHAR(1)	NULL ,
			AssignedUser		NVARCHAR (63)	NULL ,
			AssignmentType 		NVARCHAR(1)	NULL ,
			InstrumentStatus 	NVARCHAR(1)	NULL ,
			CheckListCompleteFlag 	NVARCHAR(1)	NULL ,
			IntroductionDateTime	DATETIME	NULL ,
			CreatedDatetime		DATETIME	NULL ,
			Introducedby		NVARCHAR (63)	NULL ,
			CreatedByName		NVARCHAR (63)	NULL ,
			EntryDATETIME		DATETIME 	NOT NULL ,
			LockStatus 		NVARCHAR(1)	NULL ,
			HoldStatus 		SMALLINT	NULL ,
			PriorityLevel 		SMALLINT 	NOT NULL ,
			LockedByName		NVARCHAR (63)	NULL ,
			LockedTime		DATETIME	NULL ,
			ValidTill		DATETIME	NULL ,
			SaveStage		NVARCHAR(30)	NULL ,
			PreviousStage		NVARCHAR(30)	NULL ,
			ExpectedWorkItemDelayTime DATETIME	NULL,
			ExpectedProcessDelayTime DATETIME	NULL,
			Status 			NVARCHAR(50)	NULL ,
			VAR_INT1 		SMALLINT	NULL ,
			VAR_INT2 		SMALLINT	NULL ,
			VAR_INT3 		SMALLINT	NULL ,
			VAR_INT4 		SMALLINT	NULL ,
			VAR_INT5 		SMALLINT	NULL ,
			VAR_INT6 		SMALLINT	NULL ,
			VAR_INT7 		SMALLINT	NULL ,
			VAR_INT8 		SMALLINT	NULL ,
			VAR_FLOAT1		Numeric(15,2)	NULL ,
			VAR_FLOAT2		Numeric(15,2)	NULL ,
			VAR_DATE1		DATETIME	NULL ,
			VAR_DATE2		DATETIME	NULL ,
			VAR_DATE3		DATETIME	NULL ,
			VAR_DATE4		DATETIME	NULL ,
			VAR_LONG1 		INT		NULL ,
			VAR_LONG2 		INT		NULL ,
			VAR_LONG3 		INT		NULL ,
			VAR_LONG4 		INT		NULL ,
			VAR_STR1		NVARCHAR(255)	NULL ,
			VAR_STR2		NVARCHAR(255)	NULL ,
			VAR_STR3		NVARCHAR(255)	NULL ,
			VAR_STR4		NVARCHAR(255)	NULL ,
			VAR_STR5		NVARCHAR(255)	NULL ,
			VAR_STR6		NVARCHAR(255)	NULL ,
			VAR_STR7		NVARCHAR(255)	NULL ,
			VAR_STR8		NVARCHAR(255)	NULL ,
			VAR_REC_1		NVARCHAR(255)	NULL ,
			VAR_REC_2		NVARCHAR(255)	NULL ,
			VAR_REC_3		NVARCHAR(255)	NULL ,
			VAR_REC_4		NVARCHAR(255)	NULL ,
			VAR_REC_5		NVARCHAR(255)	NULL ,
			Q_StreamId 		INT		NULL ,
			Q_QueueId 		INT		NULL ,
			Q_UserID 		INT	NULL ,
			LastProcessedBy 	INT	NULL,
			ProcessedBy		NVARCHAR (63)	NULL ,
			ReferredTo 		INT	NULL ,
			ReferredToName		NVARCHAR (63)	NULL ,
			ReferredBy 		INT	NULL ,
			ReferredByName		NVARCHAR (63)	NULL ,
			CollectFlag 		NVARCHAR(1)	NULL ,
			CompletionDatetime	DATETIME	NULL ,
			CalendarName       NVARCHAR(255) NULL,
			ExportStatus	NVARCHAR(1) DEFAULT ''N'',
			ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
			ActivityType		SmallInt NULL,
			lastModifiedTime 	DATETIME,
			VAR_DATE5		DATETIME	NULL ,
			VAR_DATE6		DATETIME	NULL ,
			VAR_LONG5 		INT		NULL ,
			VAR_LONG6 		INT		NULL ,
			VAR_STR9		NVARCHAR(512)	NULL ,
			VAR_STR10		NVARCHAR(512)	NULL ,
			VAR_STR11		NVARCHAR(512)	NULL ,
			VAR_STR12		NVARCHAR(512)	NULL ,
			VAR_STR13		NVARCHAR(512)	NULL ,
			VAR_STR14		NVARCHAR(512)	NULL ,
			VAR_STR15		NVARCHAR(512)	NULL ,
			VAR_STR16		NVARCHAR(512)	NULL ,
			VAR_STR17		NVARCHAR(512)	NULL ,
			VAR_STR18		NVARCHAR(512)	NULL ,
			VAR_STR19		NVARCHAR(512)	NULL ,
			VAR_STR20		NVARCHAR(512)	NULL ,
			CONSTRAINT PK_QUEUEHISTORYTABLE  PRIMARY KEY
			(
				ProcessInstanceId , WorkItemId
			)
		) ON PartitionSchemePId (processinstanceid)'
		
		EXECUTE(@vquery)
		print 'query -'+@vquery

		SELECT @vquery = 'CREATE INDEX IDX2_QueueHistoryTable ON QueueHistoryTable (ActivityName)'
		EXECUTE(@vquery)
		
		SELECT @vquery = 'CREATE INDEX IDX3_QueueHistoryTable ON QueueHistoryTable (VAR_REC_1, VAR_REC_2)'
		EXECUTE(@vquery)
		
		SELECT @vquery = 'CREATE INDEX IDX4_QueueHistoryTable ON QueueHistoryTable (Q_QueueId)'
		EXECUTE(@vquery)
		
		
		/***********	ExceptionTable	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'ExceptionTable')
		Begin
			Execute('DROP Table ExceptionTable')
			Print 'Table ExceptionTable already exists, hence older one dropped ..... '
		End
		
		
		SELECT @vquery = ' CREATE TABLE EXCEPTIONTABLE (
			ProcessDefId            INTEGER         NOT NULL,
			ExcpSeqId               INTEGER         NOT NULL,
			WorkitemId              INTEGER         NOT NULL,
			Activityid              INTEGER         NOT NULL,
			ActivityName            NVARCHAR(30)    NOT NULL,
			ProcessInstanceId       NVARCHAR(63)    NOT NULL,
			UserId                  INT        NOT NULL,
			UserName                NVARCHAR(63)    NOT NULL,
			ActionId                INTEGER         NOT NULL,
			ActionDatetime          DATETIME        NOT NULL  CONSTRAINT DF_EXCPTAB DEFAULT getdate(),
			ExceptionId             INTEGER         NOT NULL,
			ExceptionName           NVARCHAR(50)    NOT NULL,
			FinalizationStatus      NVARCHAR(1)     NOT NULL CONSTRAINT DF_EXCPFS DEFAULT (N''T''),
			ExceptionComments       NVARCHAR(512)   NULL
		)  ON PartitionSchemePId (processinstanceid) '
		EXECUTE(@vquery)
		
		
		/***********INDEX FOR ExceptionTable****************/
		SELECT @vquery = ' CREATE INDEX IDX1_ExceptionTable ON ExceptionTable (ProcessInstanceId, ProcessDefId, ActivityId, ExceptionId, excpseqid DESC, ActionId DESC)'
		EXECUTE(@vquery)
		

		/***********INDEX FOR ExceptionTable****************/
		SELECT @vquery = ' CREATE INDEX IDX2_ExceptionTable ON ExceptionTable (ProcessInstanceId)'
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE INDEX IDX3_ExceptionTable ON ExceptionTable (ProcessDefId, ActivityId)'
		EXECUTE(@vquery)
		
		
		/***********	TODOSTATUSTABLE	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'TODOSTATUSTABLE')
		Begin
			Execute('DROP Table TODOSTATUSTABLE')
			Print 'Table TODOSTATUSTABLE already exists, hence older one dropped ..... '
		End

		SELECT @vquery = ' CREATE TABLE TODOSTATUSTABLE (
			ProcessDefId		INTEGER         NOT NULL,
			ProcessInstanceId	NVARCHAR(63)     NOT NULL,
			ToDoValue		NVARCHAR(255)    NULL
		)  ON PartitionSchemePId (processinstanceid)'
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE INDEX IDX1_TODOSTATUSTABLE ON TODOSTATUSTABLE (ProcessInstanceId)'
		EXECUTE(@vquery)
		
		
		/******   WFCURRENTROUTELOGTABLE    ******/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFCURRENTROUTELOGTABLE')
		Begin
			Execute('DROP Table WFCURRENTROUTELOGTABLE')
			Print 'Table WFCURRENTROUTELOGTABLE already exists, hence older one dropped ..... '
		End

		SELECT @vquery = ' CREATE TABLE WFCURRENTROUTELOGTABLE (
			LogId 			BIGINT		IDENTITY (1,1) 		NOT NULL	PRIMARY KEY,
			ProcessDefId  		INT 		NOT NULL,
			ActivityId 		INT		NULL ,
			ProcessInstanceId	NVARCHAR(63)	NULL ,
			WorkItemId 		INT		NULL ,
			UserId 			INT	NULL ,
			ActionId 		INT 		NOT NULL ,
			ActionDatetime		DATETIME 	NOT NULL CONSTRAINT DF_WFCRLT_ActDT DEFAULT (CONVERT(DATETIME,getdate(),109)),
			AssociatedFieldId 	INT		NULL , 
			AssociatedFieldName	NVARCHAR (2000) NULL , 
			ActivityName		NVARCHAR(30)	NULL , 
			UserName		NVARCHAR (63)	NULL , 
			NewValue		NVARCHAR (2000)	NULL , 
			AssociatedDateTime	DATETIME 	NULL , 
			QueueId			INT		NULL,
			ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
			TaskId			INT Default 0,
			SubTaskId 		INT Default 0
		)'
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE NONCLUSTERED  INDEX IX_CRT_partitioncol ON dbo.WFCurrentRouteLogTable (ProcessInstanceId)
		WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF,  ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 
		 ON PartitionSchemeDate(ActionDatetime) '
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE INDEX  IDX1_WFRouteLogTABLE ON WFCURRENTROUTELOGTABLE (ProcessDefId,ActionId) '
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX  IDX2_WFRouteLogTABLE ON WFCURRENTROUTELOGTABLE (ActionId,UserID)'
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE INDEX IDX3_WFCRouteLogTable ON WFCurrentRouteLogTable (ProcessInstanceId)'
		EXECUTE(@vquery)

		SELECT @vquery = ' CREATE INDEX IDX4_WFCRouteLogTable ON WFCurrentRouteLogTable (ProcessInstanceId, ActionDateTime, LogID)'
		EXECUTE(@vquery)
		
		
		/***********	WFATTRIBUTEMESSAGETABLE	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFATTRIBUTEMESSAGETABLE')
		Begin
			Execute('DROP Table WFATTRIBUTEMESSAGETABLE')
			Print 'Table WFATTRIBUTEMESSAGETABLE already exists, hence older one dropped ..... '
		End
		
		SELECT @vquery = ' CREATE TABLE WFATTRIBUTEMESSAGETABLE (
			ProcessInstanceID	NVARCHAR(63)  NOT NULL ,
			ProcessDefID		INT		NOT NULL,
			WorkItemId			INT		NOT NULL ,
			ProcessVariantId 	INT 		NOT NULL DEFAULT 0,
			messageId 			BIGINT		identity (1, 1) PRIMARY KEY, 
			message				NTEXT	 	NOT NULL, 
			lockedBy			NVARCHAR(63), 
			status 				NVARCHAR(1)	CHECK (status in (N''N'', N''F'')),
			ActionDateTime		DATETIME	
		) '
		EXECUTE(@vquery)
		
		SELECT @vquery = ' CREATE NONCLUSTERED  INDEX IX_AMT_partitioncol ON dbo.WFATTRIBUTEMESSAGETABLE (ProcessInstanceId)
		WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF,  ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 
		 ON PartitionSchemeDate(ActionDateTime)'
		EXECUTE(@vquery)
		

		/***********	WFActivityReportTable	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFActivityReportTable')
		Begin
			Execute('DROP Table WFActivityReportTable')
			Print 'Table WFActivityReportTable already exists, hence older one dropped ..... '
		End
		
		
		SELECT @vquery = ' CREATE TABLE WFActivityReportTable(
			ProcessDefId		Integer,
			ActivityId		    Integer,
			ActivityName		Nvarchar(30),
			ActionDateTime		DateTime,
			TotalWICount		Integer,
			TotalDuration		BIGINT,
			TotalProcessingTime	BIGINT
		) ON PartitionSchemeDate(ActionDateTime) '
		EXECUTE(@vquery)
		
		
		/***********INDEX FOR WFActivityReportTable****************/
		SELECT @vquery = ' CREATE INDEX IDX1_WFActivityReportTable ON WFActivityReportTable (ProcessDefId, ActivityId, ActionDateTime) '
		EXECUTE(@vquery)
		
		/***********	SUMMARYTABLE	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'SUMMARYTABLE')
		Begin
			Execute('DROP Table SUMMARYTABLE')
			Print 'Table SUMMARYTABLE already exists, hence older one dropped ..... '
		End
		
		SELECT @vquery = ' CREATE TABLE SUMMARYTABLE
		(
		processdefid		INT,
		activityid			INT,
		activityname		NVARCHAR(30),
		queueid				INT,
		userid				INT,
		username			NVARCHAR(255),
		totalwicount		INT,
		ActionDatetime		DATETIME,
		actionid			INT,
		totalduration		BIGINT,
		reporttype			NVARCHAR(1),
		totalprocessingtime	BIGINT,
		delaytime			BIGINT,
		wkindelay			INT,
		AssociatedFieldId	INT,
		AssociatedFieldName	NVARCHAR(2000),
		ProcessVariantId        INT          NOT NULL DEFAULT 0
		) ON PartitionSchemeDate(ActionDateTime) '
		
		EXECUTE(@vquery)
		
		/***********Index for SUMMARYTABLE****************/

		SELECT @vquery = ' CREATE INDEX IDX1_SUMMARYTABLE ON SUMMARYTABLE (PROCESSDEFID, ACTIONID, ActionDateTime, ACTIVITYID, QueueId, USERID)	'
		EXECUTE(@vquery) 
		
		
		/***********	WFMAILQUEUEHISTORYTABLE	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFMAILQUEUEHISTORYTABLE')
		Begin
			Execute('DROP Table WFMAILQUEUEHISTORYTABLE')
			Print 'Table WFMAILQUEUEHISTORYTABLE already exists, hence older one dropped ..... '
		End

		SELECT @vquery = ' CREATE TABLE WFMAILQUEUEHISTORYTABLE(
			TaskId 			INTEGER		PRIMARY KEY,
			mailFrom 		NVARCHAR(255),
			mailTo 			NVARCHAR(512), 
			mailCC 			NVARCHAR(512), 
			mailBCC 		NVARCHAR(512),	
			mailSubject 		NVARCHAR(255),
			mailMessage		NText,
			mailContentType		NVARCHAR(64),
			attachmentISINDEX 	NVARCHAR(255), 
			attachmentNames		NVARCHAR(512), 
			attachmentExts		NVARCHAR(128),	
			mailPriority		INTEGER, 
			mailStatus		NVARCHAR(1),
			statusComments		NVARCHAR(512),
			lockedBy		NVARCHAR(255),
			successTime		DATETIME,
			LastLockTime		DATETIME,
			insertedBy		NVARCHAR(255),
			mailActionType		NVARCHAR(20),
			insertedTime		DATETIME,
			processDefId		INTEGER,
			processInstanceId	NVARCHAR(63),
			workitemId		INTEGER,
			activityId		INTEGER,
			noOfTrials		INTEGER		default 0
		) '
		EXECUTE(@vquery) 
		
		SELECT @vquery = ' CREATE NONCLUSTERED  INDEX IX_MQHT_partitioncol ON dbo.WFMAILQUEUEHISTORYTABLE (ProcessInstanceId)
		WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF,  ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 
		 ON PartitionSchemeDate(successTime) '
		EXECUTE(@vquery) 
		
		
		/***********	WFRecordedChats	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFRecordedChats')
		Begin
			Execute('DROP Table WFRecordedChats')
			Print 'Table WFRecordedChats already exists, hence older one dropped ..... '
		End
		
		
		SELECT @vquery = ' CREATE TABLE WFRecordedChats(
			ProcessDefId 		INT 			NOT NULL,
			ProcessName 		NVARCHAR(255) 	NULL,
			SavedBy 			NVARCHAR(255) 	NULL,
			SavedAt 			DATETIME 		NOT NULL,
			ChatId 				NVARCHAR(255) 	NOT NULL,
			Chat 				NVARCHAR(MAX) 	NULL,
			ChatStartTime 		DATETIME 		NOT NULL,
			ChatEndTime 		DATETIME 		NOT NULL
		) ON PartitionSchemeDate(SavedAt) '
		EXECUTE(@vquery) 
		
		

		/***********	WFUserRatingLogTable	****************/
		
		If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'U' and name = 'WFUserRatingLogTable')
		Begin
			Execute('DROP Table WFUserRatingLogTable')
			Print 'Table WFUserRatingLogTable already exists, hence older one dropped ..... '
		End
		
		
		SELECT @vquery = ' CREATE TABLE WFUserRatingLogTable (
			RatingLogId     BIGINT  IDENTITY (1,1) ,
			RatingToUser    INT    NOT NULL ,
			RatingByUser    INT    NOT NULL,
			SkillId      INT    NOT NULL,
			Rating      DECIMAL(5,2)  NOT NULL ,
			RatingDateTime    DateTime,
			Remarks       NVARCHAR(1024) ,
			PRIMARY KEY ( RatingToUser,RatingByUser,SkillId )
		 
		) '
		EXECUTE(@vquery) 
			
		SELECT @vquery = ' CREATE NONCLUSTERED  INDEX IX_URT_partitioncol ON dbo.WFUserRatingLogTable (RatingDateTime)
		WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF,  ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 
		ON PartitionSchemeDate(RatingDateTime) '
		EXECUTE(@vquery) 
		
		Select @vquery =  'INSERT INTO WFCabVersionTable(cabVersion, creationDate, lastModified, Remarks, Status) 
						  VALUES (N''PARTITIONINGSUPPORT'',GETDATE(), GETDATE(), N''Partitioning for Archival'', N''Y'')'
		EXECUTE(@vquery) 
		
	END
	

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMoveProcessData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To Move Process Data
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveProcessData')
	Begin
		Execute('DROP PROCEDURE WFMoveProcessData')
		Print 'Procedure WFMoveProcessData already exists, hence older one dropped ..... '
	End

	go

	CREATE 
	PROCEDURE WFMoveProcessData
	(
		@v_sourceCabinet	  	VARCHAR(255),
		@v_targetCabinet      	VARCHAR(255),	
		@v_tableName          	VARCHAR(255),
		@dblinkString          	VARCHAR(255),
		@v_overRideCabinetData	VARCHAR(1),
		@v_hasIdentityColumn	VARCHAR(1),
		@v_executionLogId		INT
	)
	AS

	BEGIN

		DECLARE @v_query            NVARCHAR(2000)
		DECLARE @v_colStr           VARCHAR(4000)
		DECLARE @v_columnName       VARCHAR(256)
		DECLARE @v_toCopyData		INT
		DECLARE @v_queryParameter	NVARCHAR(256)
		DECLARE @countVal				INT
		
		
			SELECT @v_query = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''' + @v_tableName + ''''
			EXECUTE ('DECLARE columnName_cur CURSOR FAST_FORWARD FOR ' + @v_query)
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error in executing columnName cursor query')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				ROLLBACK TRANSACTION Move_Process_Data
				--RAISERROR('Error in WFMoveProcessData Error in executing columnName cursor query', 16, 1) 
				RETURN
			End
			OPEN columnName_cur
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error in opening columnName cursor')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--ROLLBACK TRANSACTION Move_Process_Data
				--RAISERROR('Error in WFMoveProcessData Error in opening columnName cursor', 16, 1) 
				RETURN
			End

			FETCH NEXT FROM columnName_cur INTO @v_columnName
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error in fetching data FROM columnName cursor')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--ROLLBACK TRANSACTION Move_Process_Data
				--RAISERROR('Error in WFMoveProcessData Error in fetching data FROM columnName cursor', 16, 1) 
				RETURN
			End
			SELECT @v_colStr = ''
			WHILE(@@FETCH_STATUS <> -1) 
			BEGIN 
				IF (@@FETCH_STATUS <> -2) 
				BEGIN 
						IF (@v_colStr IS NOT NULL AND @v_colStr <> '')
						BEGIN
							SELECT @v_colStr = @v_colStr + ', '
						END
						SELECT @v_colStr = @v_colStr + @v_columnName
				END
				FETCH NEXT FROM columnName_cur INTO @v_columnName
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error in fetching data FROM columnName cursor')
					CLOSE columnName_cur 
					DEALLOCATE columnName_cur 
					--ROLLBACK TRANSACTION Move_Process_Data
					--RAISERROR('Error in WFMoveProcessData Error in fetching data FROM columnName cursor', 16, 1) 
					RETURN
				End
			END
			CLOSE columnName_cur
			DEALLOCATE columnName_cur
			
			SELECT  @v_toCopyData = 0
			
			IF(@v_overRideCabinetData='Y') 
			BEGIN
				
				SELECT @v_query = 'TRUNCATE TABLE ' + @v_targetCabinet + '..' + @v_tableName
				EXECUTE (@v_query)
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error truncating table ' + @v_tableName)
					--RAISERROR('Error in WFMoveProcessData Error truncating data ', 16, 1) 
					RETURN
				End
				SELECT  @v_toCopyData = 1
			END
			ELSE
			BEGIN
				SELECT @v_query = ' SELECT @value = COUNT(*) FROM ' + @v_targetCabinet + '..' + @v_tableName + '  WITH (NOLOCK) '
				SELECT @v_queryParameter = '@value INT OUTPUT'
				EXEC sp_executesql @v_query, @v_queryParameter, @value = @countVal OUTPUT
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error in execution of query  ' + @v_query)
					--RAISERROR('Error in Migrate_Process_Data while inserting data ', 16, 1) 
					RETURN
				END
				IF(@countVal = 0 )
				BEGIN
					SELECT  @v_toCopyData = 1
				END
			END
			
			IF( @v_toCopyData > 0 )
			BEGIN
				IF(@v_hasIdentityColumn = 'Y')
				BEGIN
					SELECT @v_query = 'SET IDENTITY_INSERT ' + @v_targetCabinet + '..' + @v_tableName +' ON INSERT INTO ' + @v_targetCabinet + '..' + @v_tableName + 
									' (' + @v_colStr + ') SELECT ' + @v_colStr + 
									' FROM ' + @dblinkString + '.' + @v_tableName  + '   WITH (NOLOCK)  SET IDENTITY_INSERT ' + @v_targetCabinet + '..' + @v_tableName +' OFF'
				END
				ELSE
				BEGIN
					SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..' + @v_tableName + 
									' (' + @v_colStr + ') SELECT ' + @v_colStr + 
									' FROM ' + @dblinkString + '.' + @v_tableName + '  WITH (NOLOCK) '
				END
				EXECUTE (@v_query)
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error in execution of query  ' + @v_query)
					--ROLLBACK TRANSACTION Move_Process_Data
					--RAISERROR('Error in Migrate_Process_Data while inserting data ', 16, 1) 
					RETURN
				END
			
				SELECT @v_query = 'UPDATE ' + @v_targetCabinet + '..WFPROCESSTABLELIST SET dataMigrationSuccessful = ''Y'' WHERE tableName = ''' + @v_tableName + ''''
				EXECUTE (@v_query)
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMoveProcessData] Error in updating status in WFPROCESSTABLELIST for ' + @v_tableName)
					--RAISERROR('Error in WFMoveProcessData Error in updating status in WFPROCESSTABLELIST ', 16, 1) 
					RETURN
				End
				
				INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,0,@v_tableName,'Cabinet level MetaData')
			END
	END

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFPopulateProcessDataList.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To Populate WFPROCESSTABLELIST Table 
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	


	If Exists (Select * FROM SysObjects  WITH (NOLOCK) Where xType = 'P' and name = 'WFPopulateProcessDataList')
	Begin
		Execute('DROP PROCEDURE WFPopulateProcessDataList')
		Print 'Procedure WFPopulateProcessDataList already exists, hence older one dropped ..... '
	End

	go

	CREATE 
	PROCEDURE WFPopulateProcessDataList
	(
		@v_targetCabinet      VARCHAR(255),
		@v_moveTaskData		  VARCHAR(1)
	)
	AS

	BEGIN
		
		DECLARE @v_query            VARCHAR(4000)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFCabVersionTable'', ''N'' , ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''INTERFACEDEFTABLE'', ''N'' , ''N'' ) '
		EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''USERDIVERSIONTABLE'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''USERWORKAUDITTABLE'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''PREFERREDQUEUETABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''USERPREFERENCESTABLE'', ''N'', ''N'' ) '
	   -- EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFJMSDestInfo'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFActionStatusTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFAuthorizeQueueColorTable'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFQueueColorTable'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFFilterTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFAutoGenInfoTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFRoutingServerInfo'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFProxyInfo'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFAuthorizationTable'', ''N'', ''Y'' ) '
		--EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFEXPORTINFOTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFSOURCECABINETINFOTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFTMSChangeQueuePropertyEx'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFTMSAddQueue'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFTMSDeleteQueue'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFTransportRegisterationInfo'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFUnderlyingDMS'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFSharePointInfo'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFDMSLibrary'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''VARALIASTABLE'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFPROFILETABLE'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFOBJECTLISTTABLE'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFASSIGNABLERIGHTSTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFPROFILEOBJTYPETABLE'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		--SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFUSEROBJASSOCTABLE'', ''N'', ''N'' ) '
		--EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFFILTERLISTTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFPROJECTLISTTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFCalDefTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFCalHourDefTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFCalRuleDefTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFLaneQueueTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFSAPConnectTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''STATESDEFTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFSAPGUIDefTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFSAPGUIFieldMappingTable'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFBRMSCONNECTTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFBRMSRULESETINFO'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFSYSTEMPROPERTIESTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFUSERSKILLCATEGORYTABLE'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFUSERSKILLDEFINITIONTABLE'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)

		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFWORKDESKLAYOUTTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFWORKLISTCONFIGTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)

		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFEVENTDETAILSTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)

		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFPROCESSTABLELIST VALUES ( ''WFREPEATEVENTTABLE'', ''N'', ''N'' ) '
		EXECUTE (@v_query)

		  
		IF(@v_moveTaskData = 'Y') 
		BEGIN
		  SELECT @v_query = 'INSERT INTO '+@v_targetCabinet+'..WFPROCESSTABLELIST VALUES('' TaskTemplateLibraryDefTable'',''N'',''N'') '
		  EXECUTE (@v_query) 
		  SELECT @v_query = 'INSERT INTO '+@v_targetCabinet+'..WFPROCESSTABLELIST VALUES(''TaskTemplateFieldLibraryDefTable'',''N'',''N'')'
		  EXECUTE (@v_query) 
		  SELECT @v_query = 'INSERT INTO '+@v_targetCabinet+'..WFPROCESSTABLELIST VALUES(''TaskTempLibraryControlValues'',''N'',''N'') '	
		  EXECUTE (@v_query) 
		END
	END
	

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMigrateProcessData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To migrate Process Data
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMigrateProcessData')
	Begin
		Execute('DROP PROCEDURE WFMigrateProcessData')
		Print 'Procedure WFMigrateProcessData already exists, hence older one dropped ..... '
	End

	go

	CREATE PROCEDURE WFMigrateProcessData
	  (
		@v_sourceCabinet      	VARCHAR(255),
		@v_targetCabinet      	VARCHAR(255),
		@dblinkString         	VARCHAR(255),
		@v_overRideCabinetData	VARCHAR(1),
		@v_executionLogId       INT,
		@v_moveTaskData			VARCHAR(1)
	)
	AS

	 BEGIN
	 
	  DECLARE @v_query 						NVARCHAR(4000)
	  DECLARE @v_queryStr 					NVARCHAR(2000)
	  DECLARE @v_tableName               	VARCHAR(256)
	  DECLARE @v_existsFlag           		INT
	  DECLARE @v_hasIdentityColumn			VARCHAR(1)
		
		If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'U' and name = 'WFPROCESSTABLELIST')
		Begin
			SELECT @v_query = 'DROP TABLE ' + @v_targetCabinet + '..WFPROCESSTABLELIST'
			EXECUTE(@v_query)
		
			Print 'TABLE WFPROCESSTABLELIST already exists, hence older one dropped ..... '
		End
		
		SELECT @v_query = 'CREATE TABLE ' + @v_targetCabinet + '..WFPROCESSTABLELIST (
								tableId                 INT IDENTITY (1, 1) PRIMARY KEY, 
								tableName               VARCHAR(256),
								dataMigrationSuccessful VARCHAR(1) ,
								hasIdentityColumn       VARCHAR(1)
							)'
		EXECUTE(@v_query)
			
		EXEC WFPopulateProcessDataList @v_targetCabinet,@v_moveTaskData
		
		SELECT @v_query = 'SELECT tableName , hasIdentityColumn FROM ' + @v_targetCabinet + '..WFPROCESSTABLELIST   WITH (NOLOCK) '
		EXECUTE ('DECLARE tableName_cur CURSOR FAST_FORWARD FOR ' + @v_query)
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateProcessData] Error in executing tableName cursor query')
			CLOSE tableName_cur 
			DEALLOCATE tableName_cur 
			--RAISERROR('Error in WFMigrateProcessData Error in executing tableName cursor query', 16, 1) 
			RETURN
		End
		
		OPEN tableName_cur
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateProcessData] Error in opening tableName cursor')
			CLOSE tableName_cur 
			DEALLOCATE tableName_cur 
			--RAISERROR('Error in WFMigrateProcessData Error in opening tableName cursor', 16, 1) 
			RETURN
		End

		FETCH NEXT FROM tableName_cur INTO  @v_tableName , @v_hasIdentityColumn
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateProcessData]  Error in fetching data FROM tableName cursor')
			CLOSE tableName_cur 
			DEALLOCATE tableName_cur 
			--RAISERROR('Error in WFMigrateProcessData Error in fetching data FROM tableName cursor', 16, 1) 
			RETURN
		End
		WHILE(@@FETCH_STATUS <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN
				IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = @v_tableName)
				BEGIN
					
						EXEC WFMoveProcessData @v_sourceCabinet, @v_targetCabinet, @v_tableName ,@dblinkString ,@v_overRideCabinetData,@v_hasIdentityColumn,@v_executionLogId

						IF(@@error <> 0)
						Begin
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateProcessData]  Error in execution of WFMoveProcessData')
							CLOSE tableName_cur 
							DEALLOCATE tableName_cur 
							----RAISERROR('Error in WFMigrateMetaData Error in execution of WFMoveProcessData', 16, 1) 
							RETURN
						End
					
				END
			END
			
			FETCH NEXT FROM tableName_cur INTO  @v_tableName , @v_hasIdentityColumn
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0, ' [WFMigrateProcessData] Error in fetching data FROM tableName cursor ')
				CLOSE tableName_cur 
				DEALLOCATE tableName_cur 
				--RAISERROR('Error in WFMigrateMetaData Error in fetching data FROM tableName cursor', 16, 1) 
				RETURN
			End
		
		END
		
		CLOSE tableName_cur
		DEALLOCATE tableName_cur

		INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,0,NULL,'WFMigrateProcessData  Executed Succssfully')
		
	 END	

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMoveQueueData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To Move Queue Data
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveQueueData')
	Begin
		Execute('DROP PROCEDURE WFMoveQueueData')
		Print 'Procedure WFMoveQueueData already exists, hence older one dropped ..... '
	End

	go

	CREATE PROCEDURE WFMoveQueueData
	(
		@v_sourceCabinet 	     VARCHAR(256),
		@v_targetCabinet 	     VARCHAR(256),
		@v_processDefId  	     INT,
		@dblinkString     	     VARCHAR(256),
		@v_migrateAllData 	     VARCHAR(1),
		@v_copyForceFully 		 VARCHAR(1),
		@v_existingProcessString VARCHAR(256),
		@v_executionLogId		 INT

	)
	AS

		DECLARE @v_query               	NVARCHAR(2000)
		DECLARE @v_tableName      		VARCHAR(256)
		DECLARE @v_colStrQueueDef  		VARCHAR(4000)
		DECLARE @v_colStrQueueUser 		VARCHAR(4000)
		DECLARE @v_columnName      		VARCHAR(256)
		DECLARE @v_FilterQueryString 	VARCHAR(1000)
		DECLARE @v_queryParameter       NVARCHAR(256)
		DECLARE @value        			INT
		DECLARE @val					INT
		DECLARE @v_queueId				INT

	BEGIN
		
		
			EXECUTE GetColStr 'QueueDefTable' , @v_columnStr = @v_colStrQueueDef  OUTPUT
			
				IF( @v_migrateAllData ='Y' )
				BEGIN
					IF( @v_copyForceFully ='Y' )
					BEGIN
						---Truncating QUEUEDEFTABLE on target Cabinet
						SELECT @v_query = 'TRUNCATE TABLE ' + @v_targetCabinet + '.. QueueDefTable' 
						EXECUTE (@v_query)
						IF(@@error <> 0)
						Begin
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMovequeueData] Error in truncating Table : QueueDefTable ')
							--RAISERROR('Error in WFMoveTableData Error truncating data ', 16, 1) 
							RETURN
						End
						
						SELECT @v_FilterQueryString = ' WHERE 1 = 1 '
					END
					ELSE
					BEGIN
						SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID NOT IN ( ' + @v_existingProcessString + ')'
					END
				END
				ELSE
				BEGIN
					SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID = '	+ CONVERT(NVARCHAR(10),@v_processDefId)
					IF( @v_copyForceFully ='Y' )
					BEGIN
						SELECT @v_query = 'DELETE FROM ' + @v_targetCabinet + '..QUEUEDEFTABLE WHERE QUEUEID IN ( SELECT QUEUEID FROM  ' + @dblinkString + '.QUEUESTREAMTABLE' + @v_FilterQueryString + ')'
						EXECUTE(@v_query)
						IF(@@error <> 0)
						Begin
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMovequeueData] Error deleting from QUEUEDEFTABLE ')
							--RAISERROR('Error in WFMoveTableData Error truncating data ', 16, 1) 
							RETURN
						End
					END
				END
			
				SELECT @v_query = 'SELECT DISTINCT QUEUEID FROM ' + @dblinkString + '.QUEUESTREAMTABLE WITH(NOLOCK) ' + @v_FilterQueryString
				EXECUTE('DECLARE v_QueueCursor CURSOR FAST_FORWARD FOR ' + @v_query)
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'[WFMoveQueueData] Error in declaring v_QueueCursor')
					CLOSE v_QueueCursor 
					DEALLOCATE v_QueueCursor 
					--RAISERROR('Error in WFMOVEQUEUEDATA while truncating data ', 16, 1) 
					RETURN
				END
				
				OPEN v_QueueCursor
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'[WFMoveQueueData] Error in OPENING v_QueueCursor')
					CLOSE v_QueueCursor 
					DEALLOCATE v_QueueCursor 
					--RAISERROR('Error in WFMOVEQUEUEDATA while truncating data ', 16, 1) 
					RETURN
				END
				
				FETCH NEXT FROM v_QueueCursor INTO @v_queueId
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'[WFMoveQueueData] Error in fetching from v_QueueCursor')
					CLOSE v_QueueCursor 
					DEALLOCATE v_QueueCursor 
					--RAISERROR('Error in WFMOVEQUEUEDATA while truncating data ', 16, 1) 
					RETURN
				END
				WHILE ( @@FETCH_STATUS <> -1 )
				BEGIN
					IF (@@FETCH_STATUS <> -2) 
					BEGIN 
						SELECT @v_query = ' SELECT @value = COUNT(*) FROM ' + @v_targetCabinet + '..QueueDefTable WHERE QUEUEID = ' +  CONVERT(nvarchar(10),@v_queueId)
						SELECT @v_queryParameter = '@value INT OUTPUT'
						EXEC sp_executesql @v_query, @v_queryParameter, @value = @val OUTPUT
						If ( @val = 0 )
						BEGIN
							print 'columnstr>.'
							print @v_colStrQueueDef
						
							SELECT @v_query = 'set IDENTITY_INSERT '  + @v_targetCabinet + '..QueueDefTable ON' + ' Insert into QueueDefTable ( ' + @v_colStrQueueDef +' ) Select * from ' +  @dblinkString + '.QueueDefTable WITH (NOLOCK) where QUEUEID = '  +  CONVERT(nvarchar(10),@v_queueId)
							print ('queuedefquery -- ')
							print(@v_query)
							EXECUTE (@v_query)
							IF(@@error <> 0)
							BEGIN
								INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_query)
								--RAISERROR('Error in WFMoveQueueData while inserting data ', 16, 1) 
								RETURN
							END
						END
						
					END
					
					FETCH NEXT FROM v_QueueCursor INTO @v_queueId
					IF(@@error <> 0)
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'[WFMoveQueueData] Error in fetching from v_QueueCursor')
						CLOSE v_QueueCursor 
						DEALLOCATE v_QueueCursor 
						--RAISERROR('Error in WFMOVEQUEUEDATA while truncating data ', 16, 1) 
						RETURN
					END
					INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,0,NULL,'[WFMoveQueueData] Queue Data Migrated For queue-->'+CONVERT(nvarchar(10),@v_queueId))
				END
				CLOSE v_QueueCursor 
				DEALLOCATE v_QueueCursor 
	END
	

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFPopulateMetaData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To Populate WFMETADATATABLELIST Table
									  List
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		21/9/2017	Ambuj			Added the changes for Archiving the case management tables
		____________________________________________________________________________________*/	

	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFPopulateMetaData')
	Begin
		Execute('DROP PROCEDURE WFPopulateMetaData')
		Print 'Procedure WFPopulateMetaData already exists, hence older one dropped ..... '
	End

	go

	CREATE 
	PROCEDURE WFPopulateMetaData(
		@v_targetCabinet			VARCHAR(256),
		@v_moveTaskData				VARCHAR(1)
	) AS
	BEGIN
		DECLARE @v_query            VARCHAR(4000)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''PROCESSDEFTABLE'', ''N'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ACTIONCONDITIONTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ACTIONDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ACTIONOPERATIONTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ACTIVITYASSOCIATIONTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ACTIVITYINTERFACEASSOCTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ACTIVITYTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ARCHIVEDATAMAPTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ARCHIVEDOCTYPETABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ARCHIVETABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''CONSTANTDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''DATAENTRYTRIGGERTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''DATASETTRIGGERTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXCEPTIONDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXCEPTIONTRIGGERTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXECUTETRIGGERTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXTDBCONFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXTDBFIELDDEFINITIONTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXTMETHODDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXTMETHODPARAMDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''EXTMETHODPARAMMAPPINGTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''GENERATERESPONSETABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''IMPORTEDPROCESSDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''INITIATEWORKITEMDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''LAUNCHAPPTRIGGERTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''MAILTRIGGERTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''PROCESSDEFCOMMENTTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''PROCESS_INTERFACETABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''RULECONDITIONTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''RULEOPERATIONTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''SCANACTIONSTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''TODOLISTDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''TODOPICKLISTTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''TRIGGERDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''TRIGGERTYPEDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''VARMAPPINGTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFCalendarAssocTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)

		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFCalRuleDefTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDataStructureTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDurationTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFExtInterfaceConditionTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFExtInterfaceOperationTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFJMSPublishTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFJMSSubscribeTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSearchVariableTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSwimLaneTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTypeDefTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTypeDescTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFUDTVarMappingTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFVarRelationTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFWebServicetable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WORKSTAGELINKTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDataMaptable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFExporttable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFFORM_table'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSoapReqCorrelationtable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''PRINTFAXEMAILDOCTYPETABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''PRINTFAXEMAILTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
				
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFMileStoneTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFRequirementTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDocBuffer'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFActivitySequenceTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFWebServiceInfoTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFGroupBoxTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''STREAMDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''RECORDMAPPINGTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFEventDefTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFScopeDefTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFActivityScopeAssocTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDataObjectTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''QueueStreamTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFProviderTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSystemTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFOwnerTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFFormFragmentTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
	
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSAPAdapterAssocTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSAPGUIAssocTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDOCTYPESEARCHMAPPING'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFMsgAFTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFPDATable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFPDA_FormTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFBRMSActivityAssocTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''ROUTEPARENTTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''PROCESSINITABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFVARSTATUSTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''INTERFACEDESCLANGUAGETABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFQUICKSEARCHTABLE'', ''N'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFProcessVariantDefTable'', ''Y'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFVariantFieldInfoTable'', ''Y'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFVariantFieldAssociationTable'', ''Y'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFVariantFormListenerTable'', ''Y'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFVariantFormTable'', ''Y'', ''N'', ''Y'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDocTypeFieldMapping'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''RouteFolderDefTable'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFARCHIVEINSHAREPOINT'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFBPELDEFTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFCREATECHILDWITABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFPOOLTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFPROCESSSHAREPOINTASSOC'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSHAREPOINTDOCASSOCTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFSHAREPOINTDATAMAPTABLE'', ''N'', ''N'', ''N'' ) '
		EXECUTE (@v_query)
		
		 IF(@v_moveTaskData = 'Y')  
			BEGIN
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskDefTable'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskInterfaceAssocTable'', ''N'',''N'',''N'')'
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskTemplateFieldDefTable'', ''N'',''N'',''N'') ';
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskTemplateDefTable'', ''N'',''N'',''N'') ';
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskTempControlValues'', ''N'',''N'',''N'') ';
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskVariableMappingTable'', ''N'',''N'',''N'') ';
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskRulePreConditionTable'', ''N'',''N'',''N'') ';
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskFormTable'', ''N'',''N'',''N'') ';
				EXECUTE (@v_query)				
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFCaseDataVariableTable'', ''N'',''N'',''N'') ';
				EXECUTE (@v_query)
				
				--IBPS 3.2 start
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFDefaultTaskUser'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskruleOperationTable'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskPropertyTable'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFGenericServicesTable'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskExpiryOperation'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''CaseINITIATEWORKITEMTABLE'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''CaseIMPORTEDPROCESSDEFTABLE'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFCaseInfoVariableTable'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFMETADATATABLELIST VALUES (''WFTaskUserAssocTable'', ''N'',''N'',''N'')' 
				EXECUTE (@v_query)
				
				--IBPS 3.2 end
			END
	END

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFExportExternalTable.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure to set migrate External Tables
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFExportExternalTable')
	Begin
		Execute('DROP PROCEDURE WFExportExternalTable')
		Print 'Procedure WFExportExternalTable already exists, hence older one dropped ..... '
	End

	go
	
	CREATE PROCEDURE WFExportExternalTable (
		@v_sourceCabinet 	VARCHAR(256),
		@v_targetCabinet 	VARCHAR(256),
		@dblinkString     	VARCHAR(256),
		@v_processDefId  	INT,
		@v_migrateAllData 	VARCHAR(256),
		@v_executionLogId	INT
	)
	AS
	BEGIN
		DECLARE @v_query       			NVARCHAR(2000)
		DECLARE @v_queryStr    			NVARCHAR(2000)
		DECLARE @v_createQuery  		NVARCHAR(4000)
		DECLARE @v_filterQueryString 	VARCHAR(1000)
		DECLARE @v_tableName			VARCHAR(256)
		DECLARE @v_extObjId				INT
		DECLARE @v_histTabFlag			INT
		DECLARE @v_queryParameter		NVARCHAR(256)
		
		IF(@v_migrateAllData ='Y')	
		BEGIN
			SELECT @v_filterQueryString = ' '
		END
		ELSE
		BEGIN
			SELECT @v_filterQueryString = ' WHERE PROCESSDEFID =  ' + CONVERT(nvarchar(10),@v_ProcessDefId)
		END
		
		SELECT @v_query = ' SELECT TABLENAME,EXTOBJID FROM ' + @dblinkString + '.EXTDBCONFTABLE WITH (NOLOCK) ' + 
		@v_filterQueryString
		EXECUTE ('DECLARE v_TableCursor CURSOR FAST_FORWARD FOR ' + @v_query)
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [Export External Data] Error in executing v_TableCursor cursor query..' + @v_query)
			CLOSE v_TableCursor 
			DEALLOCATE v_TableCursor 
			--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
			RETURN
		End
		OPEN v_TableCursor
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [Export External Data] Error in OPENING v_TableCursor cursor query..')
			CLOSE v_TableCursor 
			DEALLOCATE v_TableCursor 
			--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
			RETURN
		End
		
		FETCH NEXT FROM v_TableCursor INTO @v_tableName, @v_extObjId
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId, ' [Export External Data] Error in fetching from v_TableCursor cursor query>>'+@v_query)
			CLOSE v_TableCursor 
			DEALLOCATE v_TableCursor 
			--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
			RETURN
		End
		
		WHILE(@@FETCH_STATUS <> -1) 
		BEGIN
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = @v_tableName)
					PRINT 'External Table Already exists on target Cabinet'
				ELSE
				BEGIN
					SELECT @v_createQuery = 'SELECT * INTO ' + @v_tableName + ' FROM ' + @dblinkString + '.' + @v_tableName + ' WHERE 1 = 2'
					EXECUTE(@v_createQuery)
					IF(@@error <> 0 )
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,  'Error in Creating External Teable On Target' + @v_createQuery)
						Return
					END
					PRINT 'External Table created successfully on target cabinet'
				END
				
				/* Check if extobjid is 1 means it can be exported separately ?*/
				PRINT 'Checking for the existance for the External Histry table: '
				IF (@v_extObjId = 1)
				BEGIN
					/* Checking if the external history table exists in the source database */
					SELECT @v_histTabFlag = 0
					SELECT @v_createQuery = ' SELECT @value =  1 FROM ' + @dblinkString + '.SYSOBJECTS WHERE NAME = ''' + @v_tableName + '_HISTORY'''
					SELECT @v_queryParameter = '@value  INT OUTPUT'
					EXEC sp_executesql @v_createQuery, @v_queryParameter, @value = @v_histTabFlag OUTPUT

					/*History table exists in the source db*/
					IF ( @v_histTabFlag = 1)

					BEGIN
						PRINT 'External History Table exists on Source Cabinet, creating the history table on target'
					
						/* Check if the history table exists into the target database*/
						IF NOT EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = @v_tableName + '_HISTORY' )
						BEGIN
							SELECT @v_createQuery = 'SELECT * INTO ' + @v_tableName + '_HISTORY FROM ' + @dblinkString + '.' + @v_tableName + ' WHERE 1 = 2'
							EXECUTE(@v_createQuery)
							IF(@@error <> 0 )
							BEGIN
								INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,  'Error in Creating External History Table On Target >>' + @v_createQuery)
								Return
							END
							PRINT 'External History Table created successfully on target cabinet'
						END
						ELSE
						BEGIN
							PRINT 'External History Table exists on target Cabinet'
						END
					END
					ELSE
					BEGIN
						PRINT 'External History Table doesnt exists on source Cabinet, skip creating on the target cabinet'
					END
				END
			--End of the history move task here..
			END
			
			FETCH NEXT FROM v_TableCursor INTO @v_tableName, @v_extObjId
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId, ' [Export External Data] Error in fetching from  v_TableCursor cursor query')
				CLOSE v_TableCursor 
				DEALLOCATE v_TableCursor 
				--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
				RETURN
			End
		END
		CLOSE v_TableCursor 
		DEALLOCATE v_TableCursor 
	END

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFExportTaskTables.sql (MSSQL)
		Author                      : Sajid Khan
		Date written (DD/MM/YYYY)   : 07 July 2015
		Description                 : Stored Procedure to set migrate Task Data Tables
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFExportTaskTables')
	Begin
		Execute('DROP PROCEDURE WFExportTaskTables')
		Print 'Procedure WFExportTaskTables already exists, hence older one dropped ..... '
	End

	go
	
	CREATE PROCEDURE WFExportTaskTables (
		@v_sourceCabinet 	VARCHAR(256),
		@v_targetCabinet 	VARCHAR(256),
		@dblinkString     	VARCHAR(256),
		@v_processDefId  	INT,
		@v_migrateAllData 	VARCHAR(256),
		@v_executionLogId	INT,
		@v_isRunTimeTable		VARCHAR(1)
	)
	AS
	BEGIN
		DECLARE @v_query       			NVARCHAR(2000)
		DECLARE @v_queryStr    			NVARCHAR(2000)
		DECLARE @v_createQuery  		VARCHAR(4000)
		DECLARE @v_filterQueryString 	VARCHAR(1000)
		DECLARE @v_tableName			VARCHAR(256)
		DECLARE	@v_localProcessDefId  	INT
		DECLARE @v_taskId				INT
		Declare @v_scope				VARCHAR(1)
		
		IF(@v_migrateAllData ='Y')	
		BEGIN
			SELECT @v_filterQueryString = ' '
		END
		ELSE
		BEGIN
			SELECT @v_filterQueryString = ' WHERE PROCESSDEFID =  ' + CONVERT(nvarchar(10),@v_ProcessDefId)
		END
		
		
		IF(@v_isRunTimeTable ='Y') 
		BEGIN
			Select @v_scope = 'U'
		END
		ELSE
		BEGIN
			Select @v_scope = 'P'
		END
		
		IF(@v_migrateAllData ='Y')	
		BEGIN
			SELECT @v_filterQueryString = ' Where  SCOPE = '''+@v_scope +''''
		END
		ELSE
		BEGIN
			SELECT @v_filterQueryString = @v_filterQueryString+' And SCOPE = '''+@v_scope +''''
		END
		
		SELECT @v_query = ' SELECT ProcessDefId, TaskId FROM ' + @dblinkString + '.WFTASKDEFTABLE WITH (NOLOCK) ' + 
		@v_filterQueryString
		EXECUTE ('DECLARE v_TableCursor CURSOR FAST_FORWARD FOR ' + @v_query)
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [Export Task Data] Error in executing v_TableCursor cursor query..' + @v_query)
			CLOSE v_TableCursor 
			DEALLOCATE v_TableCursor 
			--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
			RETURN
		End
		OPEN v_TableCursor
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [Export External Data] Error in OPENING v_TableCursor cursor query..')
			CLOSE v_TableCursor 
			DEALLOCATE v_TableCursor 
			--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
			RETURN
		End
		
		FETCH NEXT FROM v_TableCursor INTO @v_localProcessDefId,@v_taskId
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId, ' [Export External Data] Error in fetching from v_TableCursor cursor query>>'+@v_query)
			CLOSE v_TableCursor 
			DEALLOCATE v_TableCursor 
			--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
			RETURN
		End
		
		WHILE(@@FETCH_STATUS <> -1) 
		BEGIN
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				Select @v_tableName = 'WFGenericData_'+CONVERT(nvarchar(10),@v_localProcessDefId)+'_'+CONVERT(nvarchar(10),@v_taskId)
				IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = @v_tableName)
					PRINT 'Table Already exists on target Cabinet'
				ELSE
				BEGIN
					SELECT @v_createQuery = 'SELECT * INTO ' + @v_tableName + ' FROM ' + @dblinkString + '.' + @v_tableName + ' WHERE 1 = 2'
					EXECUTE(@v_createQuery)
					IF(@@error <> 0 )
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,  'Error in Creating Task Data Tables On Target' + @v_createQuery)
						Return
					END
				END
				
			END
			
			FETCH NEXT FROM v_TableCursor INTO @v_localProcessDefId,@v_taskId
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId, ' [Export Task Data Table] Error in fetching from  v_TableCursor cursor query')
				CLOSE v_TableCursor 
				DEALLOCATE v_TableCursor 
				RETURN
			End
		END
		CLOSE v_TableCursor 
		DEALLOCATE v_TableCursor 
	END

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMoveMetaData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To Move Meta Data 
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
		If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveMetaData')
	Begin
		Execute('DROP PROCEDURE WFMoveMetaData')
		Print 'Procedure WFMoveMetaData already exists, hence older one dropped ..... '
	End

	go

	CREATE PROCEDURE WFMoveMetaData (
		@v_sourceCabinet 		  VARCHAR(256),
		@v_targetCabinet 		  VARCHAR(256),
		@v_tableName     		  VARCHAR(256),
		@v_processDefId  		  INT,
		@dblinkString    		  VARCHAR(256),
		@v_migrateAllData		  VARCHAR(1),
		@v_copyForceFully 		  VARCHAR(1),
		@v_existingProcessString  VARCHAR(4000),
		@v_hasIdentityColumn	  VARCHAR(1),
		@v_executionLogId		  INT
	) AS
	  DECLARE @v_query     				 VARCHAR(4000)
	  DECLARE @v_colStr     			 VARCHAR(4000)
	  DECLARE @v_FilterQueryString 		 VARCHAR(1000)
	  DECLARE @v_columnName 			 VARCHAR(256)
	  
	BEGIN
			SELECT @v_query = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''' + @v_tableName + ''''
			EXECUTE ('DECLARE columnName_cur CURSOR FAST_FORWARD FOR ' + @v_query)
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveMetaData] Error in executing columnName cursor query')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in WFMoveMetaData Error in executing columnName cursor query', 16, 1) 
				RETURN
			End
			OPEN columnName_cur
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveMetaData] Error in opening columnName cursor')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in WFMoveVariantMetaData Error in opening columnName cursor', 16, 1) 
				RETURN
			End

			FETCH NEXT FROM columnName_cur INTO @v_columnName
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveMetaData] Error in fetching data FROM columnName cursor')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in WFMoveVariantMetaData Error in fetching data FROM columnName cursor', 16, 1) 
				RETURN
			End
			SELECT @v_colStr = ''
			WHILE(@@FETCH_STATUS <> -1) 
			BEGIN 
				IF (@@FETCH_STATUS <> -2) 
				BEGIN 
						IF (@v_colStr IS NOT NULL AND @v_colStr <> '')
						BEGIN
							SELECT @v_colStr = @v_colStr + ', '
						END
						SELECT @v_colStr = @v_colStr + @v_columnName
				END
				FETCH NEXT FROM columnName_cur INTO @v_columnName
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveMetaData] Error in fetching data FROM columnName cursor')
					CLOSE columnName_cur 
					DEALLOCATE columnName_cur 
					--RAISERROR('Error in WFMoveVariantMetaData Error in fetching data FROM columnName cursor', 16, 1) 
					RETURN
				End
			END
			
			CLOSE columnName_cur
			DEALLOCATE columnName_cur
			
				IF ( @v_migrateAllData = 'Y' )
				BEGIN
					IF ( @v_copyForceFully ='Y' )
					BEGIN
						SELECT @v_query = 'TRUNCATE TABLE ' + @v_targetCabinet + '..' + @v_tableName
						EXECUTE (@v_query)
						IF(@@error <> 0)
						Begin
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveMetaData] Error truncating table ' + @v_tableName)
							--RAISERROR('Error in WFMoveTableData Error truncating data ', 16, 1) 
							RETURN
						End
						SELECT @v_FilterQueryString = ' WHERE 1 = 1 '
					END
					ELSE
					BEGIN
						SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID NOT IN ( ' + @v_existingProcessString + ')'
					END	
				END
				ELSE
				BEGIN
					IF( @v_copyForceFully ='Y' )
					BEGIN
						SELECT @v_query = 'DELETE FROM ' + @v_targetCabinet + '..' + @v_tableName + ' WHERE PROCESSDEFID = ' + CONVERT(nvarchar(10),@v_processDefId)
						EXECUTE (@v_query)
						IF(@@error <> 0)
						Begin
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_query)
							--RAISERROR('Error in WFMoveTableData Error truncating data ', 16, 1) 
							RETURN
						End
					END
					SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID = ' + CONVERT(nvarchar(10),@v_processDefId)
				END
				
				IF( @v_hasIdentityColumn = 'Y')
				BEGIN
					SELECT @v_query = 'set IDENTITY_INSERT '  + @v_targetCabinet + '..' + @v_tableName + ' ON INSERT INTO ' + @v_targetCabinet + '..' + @v_tableName + 
									' (' + @v_colStr + ') SELECT ' + @v_colStr + 
									' FROM ' + @dblinkString + '.' + @v_tableName + ' WITH (NOLOCK) ' + @v_FilterQueryString + ' set IDENTITY_INSERT '  + @v_targetCabinet + '..' + @v_tableName + ' OFF '
				END
				ELSE
				BEGIN
					SELECT @v_query =' INSERT INTO ' + @v_targetCabinet + '..' + @v_tableName + 
									' (' + @v_colStr + ') SELECT ' + @v_colStr + 
									' FROM ' + @dblinkString + '.' + @v_tableName + ' WITH (NOLOCK) ' +  @v_FilterQueryString
				END
				EXECUTE (@v_query)
				
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_query)
					--RAISERROR('Error in WFMoveTableDataWithIdentity while inserting data ', 16, 1) 
					RETURN
				END
				
				SELECT @v_query = 'UPDATE ' + @v_targetCabinet + '..WFMETADATATABLELIST SET dataMigrationSuccessful = ''Y'' WHERE tableName = ''' + @v_tableName + ''''
				EXECUTE (@v_query)
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_query)
					--RAISERROR('Error in WFMoveMetaData Error in updating status in WFMETADATATABLELIST ', 16, 1) 
					RETURN
				End

				INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,
				@v_processDefId,@v_tableName,'Move Meta Data Executed Succssfully')
	END

go

		/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMoveVariantMetaData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To Move Variant Meta Data
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	

	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveVariantMetaData')
	Begin
		Execute('DROP PROCEDURE WFMoveVariantMetaData')
		Print 'Procedure WFMoveVariantMetaData already exists, hence older one dropped ..... '
	End

	go

	CREATE PROCEDURE WFMoveVariantMetaData
	(
		@v_sourceCabinet 		  VARCHAR(256),
		@v_targetCabinet 		  VARCHAR(256),
		@v_tableName     		  VARCHAR(256),
		@v_hasIdentityColumn	  VARCHAR(1),
		@v_processDefId			  INT,
		@v_processVariantId  	  INT,
		@dblinkString    	 	  VARCHAR(256),
		@v_migrateAllData 		  VARCHAR(1),
		@v_copyForceFully    	  VARCHAR(1),
		@v_existingProcessString  VARCHAR(2000),
		@v_executionLogId 		  INT
	)
	AS
	  DECLARE @v_query      			NVARCHAR(4000)
	  DECLARE @v_colStr     			NVARCHAR(4000)
	  DECLARE @v_columnName 			VARCHAR(256)
	  DECLARE @v_FilterQueryString 		NVARCHAR(1000)
	  
	BEGIN
			SELECT @v_FilterQueryString = ''
			SELECT @v_query = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''' + @v_tableName + ''''
			EXECUTE ('DECLARE columnName_cur CURSOR FAST_FORWARD FOR ' + @v_query)
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveVariantMetaData] Error in executing columnName cursor query')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
				RETURN
			End
			OPEN columnName_cur
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveVariantMetaData] Error in opening columnName cursor')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in WFMoveVariantMetaData Error in opening columnName cursor', 16, 1) 
				RETURN
			End

			FETCH NEXT FROM columnName_cur INTO @v_columnName
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveVariantMetaData] Error in fetching data FROM columnName cursor')
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in WFMoveVariantMetaData Error in fetching data FROM columnName cursor', 16, 1) 
				RETURN
			End
			SELECT @v_colStr = ''
			WHILE(@@FETCH_STATUS <> -1) 
			BEGIN 
				IF (@@FETCH_STATUS <> -2) 
				BEGIN 
						IF (@v_colStr IS NOT NULL AND @v_colStr <> '')
						BEGIN
							SELECT @v_colStr = @v_colStr + ', '
						END
						SELECT @v_colStr = @v_colStr + @v_columnName
				END
				FETCH NEXT FROM columnName_cur INTO @v_columnName
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveVariantMetaData] Error in fetching data FROM columnName cursor')
					CLOSE columnName_cur 
					DEALLOCATE columnName_cur 
					--RAISERROR('Error in WFMoveVariantMetaData Error in fetching data FROM columnName cursor', 16, 1) 
					RETURN
				End
			END
			
			CLOSE columnName_cur
			DEALLOCATE columnName_cur
				
				IF(@v_migrateAllData = 'Y')
				BEGIN
					IF(@v_copyForceFully ='Y')
					BEGIN
						SELECT @v_query = 'TRUNCATE TABLE ' + @v_targetCabinet + '..' + @v_tableName
						EXECUTE (@v_query)
						IF(@@error <> 0)
						BEGIN
							--RAISERROR('Error in WFMoveVariantMetaData while truncating data ', 16, 1) 
							RETURN
						END
						SELECT @v_FilterQueryString = ' WHERE 1 = 1 '
					END
					ELSE
					BEGIN
						SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID NOT IN ( ' + @v_existingProcessString + ')'
					END
				END
				ELSE
				BEGIN
					SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID = ' + CONVERT(NVARCHAR(10),@v_processDefId) + ' AND PROCESSVARIANTID = ' + CONVERT(NVARCHAR(10),@v_processVariantId)
					IF(@v_copyForceFully ='Y')
					BEGIN
						SELECT @v_query = 'DELETE FROM ' + @v_targetCabinet + '..' + @v_tableName + ' WHERE PROCESSDEFID = ' + CONVERT(NVARCHAR(10),@v_processDefId) + ' AND PROCESSVARIANTID = ' + CONVERT(NVARCHAR(10),@v_processVariantId)
						EXECUTE(@v_query)
						IF(@@error <> 0)
						BEGIN
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_query)
							--RAISERROR('Error in WFMoveVariantMetaData while truncating data ', 16, 1) 
							RETURN
						END
					END
				END
				
				IF( @v_hasIdentityColumn = 'Y' )
				BEGIN
					SELECT @v_query = 'set IDENTITY_INSERT '  + @v_targetCabinet + '..' + @v_tableName + ' ON INSERT INTO ' + @v_targetCabinet + '..' + @v_tableName + 
									' (' + @v_colStr + ') SELECT ' + @v_colStr + 
									' FROM ' + @dblinkString + '.' + @v_tableName +  ' WITH (NOLOCK) ' + @v_FilterQueryString + ' set IDENTITY_INSERT '  + @v_targetCabinet + '..' + @v_tableName + ' OFF ' 
				END
				ELSE
				BEGIN
					SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..' + @v_tableName + 
									' (' + @v_colStr + ') SELECT ' + @v_colStr + 
									' FROM ' + @dblinkString + '.' + @v_tableName +  ' WITH (NOLOCK) ' + @v_FilterQueryString
				END
				EXECUTE (@v_query)
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_query)
					--RAISERROR('Error in WFMoveVariantMetaData while inserting data ', 16, 1) 
					RETURN
				END

				SELECT @v_query = 'UPDATE ' + @v_targetCabinet + '..WFMETADATATABLELIST SET dataMigrationSuccessful = ''Y'' WHERE tableName = ''' + @v_tableName + ''''
				EXECUTE (@v_query)
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_query)
					--RAISERROR('Error in WFMoveVariantMetaData Error in updating status in WFMETADATATABLELIST ', 16, 1) 
					RETURN
				End
				
				INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_tableName,'WFMoveVariantMetaData Executed Succssfully for variant ' + CONVERT(NVARCHAR(10),@v_processVariantId))
			
	END

	

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMoveOmnidocsFolderData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure to move Omnidocs Data
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveOmnidocsFolderData')
	Begin
		Execute('DROP PROCEDURE WFMoveOmnidocsFolderData')
		Print 'Procedure WFMoveOmnidocsFolderData already exists, hence older one dropped ..... '
	End

	go

	CREATE PROCEDURE WFMoveOmnidocsFolderData(
		@v_sourceCabinet            VARCHAR(256),
		@v_targetCabinet            VARCHAR(256),
		@dblinkString    			VARCHAR(256),
		@v_processDefId  			INT,
		@v_migrateAllData 			VARCHAR(1),
		@v_copyForceFully 			VARCHAR(1),
		@v_existingProcessString	VARCHAR(4000),
		@v_DeleteFromSrc			VARCHAR(1),
		@v_executionLogId			INT
		
	) AS
	BEGIN
		DECLARE @v_queryFolder 			VARCHAR(4000)
		DECLARE @v_FilterQueryString	VARCHAR(1000)
		DECLARE @v_routeFolderId 	   	NVARCHAR(255)
		DECLARE @v_scratchFolderId   	NVARCHAR(255)
		DECLARE @v_workFlowFolderId   	NVARCHAR(255)
		DECLARE @v_completedFolderId  	NVARCHAR(255)
		DECLARE @v_dicarderFolderId   	NVARCHAR(255)
		DECLARE @v_genIndex				INT
		DECLARE @newFolderIndex			INT
		DECLARE @v_folderStatus			INT

		IF( @v_migrateAllData ='Y' )
		BEGIN
			SELECT @v_FilterQueryString = ' WHERE processdefid not in ( ' + @v_existingProcessString + ')'
		END
		ELSE
		BEGIN
			IF( @v_copyForceFully ='Y' )
			BEGIN
				SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID = ' + CONVERT(NVARCHAR(10),@v_processdefid) + ' AND PROCESSDEFID NOT IN ( ' + @v_existingProcessString  + ')'
			END
			ELSE
			BEGIN
				SELECT @v_FilterQueryString = ' WHERE PROCESSDEFID = ' + CONVERT(NVARCHAR(10),@v_processdefid)
			END
		END
		
			SELECT @v_queryFolder = 'Select RouteFolderId,ScratchFolderId,WorkFlowFolderId,CompletedFolderId,DiscardFolderId from '+ @dblinkString + '.RouteFolderDefTable   WITH (NOLOCK) ' +@v_FilterQueryString

			EXECUTE(' DECLARE  v_FolderCursor CURSOR FAST_FORWARD FOR '+ @v_queryFolder)
			IF(@@error <> 0 )
			BEGIN
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveOmnidocsFolderData] Error in declaring v_FolderCursor')
				CLOSE v_FolderCursor
				DEALLOCATE v_FolderCursor
				RETURN
			END
			
			OPEN v_FolderCursor
			
			IF(@@error <> 0 )
			BEGIN
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveOmnidocsFolderData]Error in opening v_FolderCursorr')
				CLOSE v_FolderCursor
				DEALLOCATE v_FolderCursor
				RETURN
			END

			FETCH NEXT FROM v_FolderCursor INTO @v_routeFolderId , @v_scratchFolderId , @v_workFlowFolderId ,@v_completedFolderId , @v_dicarderFolderId
			
			IF(@@error <> 0 )
			BEGIN
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,' [WFMoveOmnidocsFolderData]Error in fetching from v_FolderCursor')
				CLOSE v_FolderCursor
				DEALLOCATE v_FolderCursor
				RETURN
			END
			
			WHILE (@@FETCH_STATUS <> -1)
			BEGIN
				IF(@@FETCH_STATUS <> -2)
				BEGIN
					EXEC MoveDocdb @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_routeFolderId,'N','N',@newFolderIndex,@v_folderStatus,@v_DeleteFromSrc
					IF( @@error <> 0 )
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'Error while migrating folder ' + @v_routeFolderId)
						RETURN
					END
					
					EXEC MoveDocdb @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_scratchFolderId, 'N','N',@newFolderIndex,@v_folderStatus,@v_DeleteFromSrc
					IF( @@error <> 0 )
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'Error while migrating folder ' + @v_scratchFolderId)
						RETURN
					END
					
					EXEC MoveDocdb @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_workFlowFolderId,'N','N',@newFolderIndex,@v_folderStatus,@v_DeleteFromSrc
					IF( @@error <> 0 )
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'Error while migrating folder ' + @v_workFlowFolderId)
						RETURN
						END

					EXEC MoveDocdb @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_completedFolderId,'N','N',@newFolderIndex,@v_folderStatus,@v_DeleteFromSrc
					IF( @@error <> 0 )
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'Error while migrating folder ' + @v_completedFolderId)
						RETURN
					END

					EXEC MoveDocdb @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_dicarderFolderId,'N','N',@newFolderIndex,@v_folderStatus,@v_DeleteFromSrc
					IF( @@error <> 0 )
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'Error while migrating folder ' + @v_dicarderFolderId)
						RETURN
					END
					
				END
				FETCH NEXT FROM v_FolderCursor INTO @v_routeFolderId , @v_scratchFolderId , @v_workFlowFolderId ,@v_completedFolderId , @v_dicarderFolderId
			
				IF(@@error <> 0 )
				BEGIN
					PRINT 'Error in FETCHING FROM v_FolderCursor'
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,'Error in fetching from v_FolderCursor')
					CLOSE v_FolderCursor
					DEALLOCATE v_FolderCursor
					RETURN
				END
			END
			CLOSE v_FolderCursor
			DEALLOCATE v_FolderCursor
			
			INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,NULL,'WFMoveOmnidocsFolderData Executed Succssfully')
	END

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMigrateVariantMetaData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure To Migrate Variant Data
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK) Where xType = 'P' and name = 'WFMigrateVariantMetaData')
	Begin
		Execute('DROP PROCEDURE WFMigrateVariantMetaData')
		Print 'Procedure WFMigrateVariantMetaData already exists, hence older one dropped ..... '
	End

	go

	CREATE PROCEDURE WFMigrateVariantMetaData(
		@v_sourceCabinet    	VARCHAR(256),
		@v_targetCabinet    	VARCHAR(256),
		@dblinkString        	VARCHAR(256),
		@v_processDefId     	INT,
		@v_processVariantId 	INT,
		@v_migrateAllData 		VARCHAR(1),
		@v_copyForceFully    	VARCHAR(1),
		@v_executionLogId		INT
		
	) AS
	BEGIN
		DECLARE @v_query            		NVARCHAR(2000)
		DECLARE @v_queryStr            		VARCHAR(4000)
		DECLARE @v_queryStr2            	VARCHAR(4000)
		DECLARE @v_query2            	    NVARCHAR(4000)
		DECLARE @v_migratedflag            	INT
		DECLARE @v_existsflag      			INT
		DECLARE @v_tableId      			INT
		DECLARE @v_tableName    			VARCHAR(256)
		DECLARE @v_isVariantTable 			VARCHAR(1)
		DECLARE @v_dataMigrationSuccessful	VARCHAR(1) 
		DECLARE @v_existingVariantString 	Varchar(4000)
		DECLARE @v_existingProcessVariantId	INT
		DECLARE @v_queryParameter  NVARCHAR(256)
		DECLARE @v_hasIdentityColumn		VARCHAR(1) 
		
		SELECT @v_query = 'SELECT ProcessVariantId FROM ' + @v_targetCabinet + '..WFProcessVariantDefTable'
		SELECT @v_existingVariantString = ''
		EXECUTE ('DECLARE processVariantCursor CURSOR FAST_FORWARD FOR ' + @v_query)
		
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateVariantMetaData] Error in executing processVariantCursor cursor query')
			CLOSE processVariantCursor 
			DEALLOCATE processVariantCursor 
			--RAISERROR('Error in WFMigrateVariantMetaData Error in executing processVariantCursor cursor query', 16, 1) 
			RETURN
		End
		
		OPEN processVariantCursor
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateVariantMetaData] Error in opening processVariantCursor cursor')
			CLOSE processVariantCursor 
			DEALLOCATE processVariantCursor 
			--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
			RETURN
		End
		
		FETCH NEXT FROM processVariantCursor INTO @v_existingProcessVariantId
		
		IF(@@error <> 0)
		Begin
			INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,'[WFMigrateVariantMetaData] Error in fetching data FROM processVariantCursor cursor')
			CLOSE processVariantCursor 
			DEALLOCATE processVariantCursor 
			--RAISERROR('Error in WFMigrateVariantMetaData Error in fetching data FROM processVariantCursor cursor', 16, 1) 
			RETURN
		End
		
		WHILE(@@FETCH_STATUS <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN
				SELECT @v_existingVariantString = @v_existingVariantString + convert(nvarchar(10),@v_existingProcessVariantId) + ','
			END
			
			FETCH NEXT FROM processVariantCursor INTO @v_existingProcessVariantId
			
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,'[WFMigrateVariantMetaData] Error in fetching data from processVariantCursor cursor')
				CLOSE processVariantCursor 
				DEALLOCATE processVariantCursor 
				--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
				RETURN
			End	
			
		END  ----------END WHILE
		
		----remove last comma--------------
		IF(@v_existingVariantString is not null and @v_existingVariantString <> '' )
			SET @v_existingVariantString = LEFT(@v_existingVariantString, LEN(@v_existingVariantString) - 1)
		
		CLOSE processVariantCursor 
		DEALLOCATE processVariantCursor 
		
		SELECT @v_query = 'SELECT tableName,hasIdentityColumn FROM ' + @v_targetCabinet + '..WFMETADATATABLELIST  WITH (NOLOCK)  where isVariantTableFlag = ''Y''';
		
		IF(@v_migrateAllData = 'N')
		BEGIN
			SELECT @v_migratedflag = 0
			SELECT @v_migratedflag = 1 from WFProcessVariantDefTable where processdefid = @v_processDefId and processvariantid = @v_processVariantId
			IF(@v_migratedflag = 1)	
			BEGIN
				PRINT 'Variant already exists on target cabinet'
				RETURN	
			END
		END
		
		IF(@v_migratedflag = 1)
		BEGIN
			PRINT 'PROCESS VARIANT ALREADY MIGRAATED'
		END
		ELSE
		BEGIN
			SELECT @v_existsflag = 0
			
			SELECT @v_query2 = ' SELECT @value =  1 FROM ' + @dblinkString+ '.WFPROCESSVARIANTDEFTABLE WHERE PROCESSDEFID = ' + CONVERT(NVarchar(10),@v_processdefid) + 'AND PROCESSVARIANTID = ' + CONVERT(NVarchar(10),@v_processVariantId)
			SELECT @v_queryParameter = '@value INT OUTPUT'
			EXEC sp_executesql @v_query2, @v_queryParameter, @value = @v_existsflag OUTPUT
					
			IF ( @v_existsflag = 0 )
			BEGIN
				PRINT 'VARIANT doesn''t exist on the source cabinet'
				RETURN
			END
			ELSE
			BEGIN
				EXECUTE ('DECLARE v_TableNameCursor CURSOR FAST_FORWARD FOR ' + @v_query)
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,'[WFMigrateVariantMetaData]  Error in opening v_TableNameCursor cursor')
					CLOSE v_TableNameCursor 
					DEALLOCATE v_TableNameCursor 
					--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
					RETURN
				End	
				
				OPEN v_TableNameCursor
				FETCH NEXT FROM v_TableNameCursor INTO @v_tableName , @v_hasIdentityColumn
				IF(@@error <> 0)
				BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,'[WFMigrateVariantMetaData] Error in fetching from v_TableNameCursor cursor')
					CLOSE v_TableNameCursor 
					DEALLOCATE v_TableNameCursor 
					--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
					RETURN
				END	
				
				WHILE(@@FETCH_STATUS <> -1) 
				BEGIN 
					IF (@@FETCH_STATUS <> -2) 
					BEGIN 
						SELECT @v_existsflag = 0
						IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = @v_tableName)
						BEGIN
							SELECT @v_existsflag = 1
						END
						IF(@v_existsflag = 1)
						BEGIN
							EXEC WFMoveVariantMetaData @v_sourceCabinet,@v_targetCabinet ,@v_tableName,@v_hasIdentityColumn,@v_processDefId,@v_processVariantId,@dblinkString,@v_migrateAllData,@v_copyForcefully,@v_existingVariantString,@v_executionLogId
							INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,@v_processDefId,@v_tableName,'WFMoveVariantMetaData Meta Data Executed Succssfully for variant' + convert(nvarchar(10),@v_processVariantId))
						END
				
						FETCH NEXT FROM v_TableNameCursor INTO @v_tableName , @v_hasIdentityColumn
						IF(@@error <> 0)
						BEGIN
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0, ' [WFMigrateVariantMetaData] Error in fetching from v_TableNameCursor cursor')
							CLOSE v_TableNameCursor 
							DEALLOCATE v_TableNameCursor 
							--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
							RETURN
						END	
					END ---------END WHILE
				END
				CLOSE v_TableNameCursor 
				DEALLOCATE v_TableNameCursor 
				
			END
		END
	END

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : WFMigrateMetaData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure to migrate meta data
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
		
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMigrateMetaData')
	Begin
		Execute('DROP PROCEDURE WFMigrateMetaData')
		Print 'Procedure WFMigrateMetaData already exists, hence older one dropped ..... '
	End

	go

	CREATE PROCEDURE WFMigrateMetaData(
		@v_sourceCabinet            VARCHAR(256),
		@v_targetCabinet            VARCHAR(256),
		@dblinkString    			VARCHAR(256),
		@tableVariableMap 			Process_Variant_Type READONLY,
		@v_migrateAllData 			VARCHAR(1),
		@v_copyForceFully 			VARCHAR(1),
		@v_overRideCabinetData		VARCHAR(1),
		@v_DeleteFromSrc			VARCHAR(1),
		@v_executionLogId			INT,
		@v_moveTaskData      		VARCHAR(2)
	) AS
	BEGIN
		DECLARE @v_query                    NVARCHAR(2000)
		DECLARE @v_queryFolder 				INT
		DECLARE @v_queryStr2                NVARCHAR(2000)
		DECLARE @v_tableId 					INT
		DECLARE @v_variantId 				INT
		DECLARE @v_tableName                VARCHAR(256)
		DECLARE @v_routeFolderId        	NVARCHAR(255)
		DECLARE @v_identityColumnName       NVARCHAR(255)
		DECLARE @v_workFlowFolderId  		NVARCHAR(255)
		DECLARE @v_completedFolderId        NVARCHAR(255)
		DECLARE @v_dicarderFolderId			NVARCHAR(255)
		DECLARE @v_dataMigrationSuccessful  NVARCHAR(1)
		DECLARE @v_isVariantTable           NVARCHAR(1)
		DECLARE @v_genIndex                	INT
		DECLARE @v_folderStatus            	INT
		DECLARE @v_processType             	NVARCHAR(1)
		DECLARE @v_existingProcessString   	VARCHAR(200)
		DECLARE @v_existingProcessDefId	   	INT
		DECLARE @v_migratedflag     		INT
		DECLARE @v_existsFlag       		INT
		DECLARE @v_processDefId     		INT
		DECLARE @value						NVARCHAR(1)
		DECLARE @v_queryParameter  			NVARCHAR(256)
		DECLARE @v_hasIdentityColumn 		VARCHAR(1)
		DECLARE @v_query2					NVARCHAR(2000)
		DECLARE @val 						INT
		DECLARE @edition					VARCHAR(256)
		DECLARE @flagPartition				INT
		DECLARE @tableRecreate				INT
		DECLARE @v_rowcount					INT
		
		SELECT @flagPartition = 0
		Select @edition = PropertyValue  from WFSystemPropertiesTable where PropertyKey = 'DBEDITION'
		SELECT @v_rowcount = @@ROWCOUNT
		IF (@edition = 'Enterprise Edition (64-bit)')
		Begin
			SELECT @flagPartition = 1
		End
		ELSE
		Begin
			Select @edition = convert(nvarchar(50), SERVERPROPERTY('edition'))
			IF (@edition = 'Enterprise Edition (64-bit)')
			Begin
				SELECT @flagPartition = 1
			End
			IF (@v_rowcount <= 0) 
			BEGIN
				insert into WFSystemPropertiesTable values ('DBEDITION',@edition)
			END
		End
		
		select @v_existingProcessString = '0,'
		BEGIN TRANSACTION  MetaDataTran
			EXEC WFMigrateProcessData @v_sourceCabinet, @v_targetCabinet, @dblinkString, @v_overRideCabinetData,@v_executionLogId,@v_moveTaskData
			IF(@@error <> 0)
			BEGIN
				ROLLBACK TRANSACTION MetaDataTran
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,'Error in calling stored procedure WFMigrateProcessData')
				RETURN
			END
			
			If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'U' and name = 'WFMETADATATABLELIST')
			Begin
				SELECT @v_query = 'DROP TABLE ' + @v_targetCabinet + '..WFMETADATATABLELIST'
				EXECUTE(@v_query)
			
				Print 'TABLE WFMETADATATABLELIST already exists, hence older one dropped ..... '
			End
			
			SELECT @v_query = 'CREATE TABLE ' + @v_targetCabinet + '..WFMETADATATABLELIST (
									tableId                  INT IDENTITY (1, 1) PRIMARY KEY, 
									tableName                VARCHAR(256),
									isVariantTableFlag       VARCHAR(1),
									dataMigrationSuccessful  VARCHAR(1),
									hasIdentityColumn       VARCHAR(1)
								)'
			EXECUTE(@v_query)
				
			EXEC WFPopulateMetaData @v_targetCabinet,@v_moveTaskData
			IF(@@error <> 0)
			BEGIN
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,'Error in calling stored procedure WFPopulateMetaData')
				ROLLBACK TRANSACTION MetaDataTran
				RETURN
			END
			
			SELECT @v_query = 'SELECT PROCESSDEFID FROM PROCESSDEFTABLE WITH (NOLOCK) '
			EXECUTE( ' DECLARE  v_processdefidCusrsor CURSOR FAST_FORWARD FOR ' + @v_query)
			
			IF(@@error <> 0)
			BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,'Error in executing v_processdefidCusrsor cursor query')
					CLOSE v_processdefidCusrsor 
					DEALLOCATE v_processdefidCusrsor 
					--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
					ROLLBACK TRANSACTION MetaDataTran
					RETURN
			END
			
			OPEN v_processdefidCusrsor
			
			IF(@@error <> 0)
			BEGIN
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,'[WFMigrateMetaData] Error in opening v_processdefidCusrsor cursor ')
					CLOSE v_processdefidCusrsor 
					DEALLOCATE v_processdefidCusrsor 
					--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
					ROLLBACK TRANSACTION MetaDataTran
					RETURN
			END
			
			FETCH NEXT FROM v_processdefidCusrsor INTO @v_existingProcessDefId
			IF(@@error <> 0)
			Begin
				INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,'Error in fetching data FROM v_processdefidCusrsor cursor ')
				CLOSE v_processdefidCusrsor 
				DEALLOCATE v_processdefidCusrsor 
				--RAISERROR('Error in WFMigrateVariantMetaData Error in fetching data FROM processVariantCursor cursor', 16, 1) 
				ROLLBACK TRANSACTION MetaDataTran
				RETURN
			End 
			
			WHILE(@@FETCH_STATUS <> -1) 
			BEGIN 
				IF (@@FETCH_STATUS <> -2) 
				BEGIN
					SELECT @v_existingProcessString = @v_existingProcessString + CONVERT (NVARCHAR(10), @v_existingProcessDefId ) + ','
				END
				
				FETCH NEXT FROM v_processdefidCusrsor INTO @v_existingProcessDefId
				
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in fetching data from v_processdefidCusrsor cursor')
					CLOSE v_processdefidCusrsor 
					DEALLOCATE v_processdefidCusrsor 
					ROLLBACK TRANSACTION MetaDataTran
					--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
					RETURN
				End	
				
			END  ----------END WHILE

			CLOSE v_processdefidCusrsor 
			DEALLOCATE v_processdefidCusrsor 
			
			SET @v_existingProcessString = LEFT(@v_existingProcessString, LEN(@v_existingProcessString) - 1)
			
			SELECT @v_query = 'SELECT tableName , hasIdentityColumn FROM ' + @v_targetCabinet + '..WFMETADATATABLELIST WITH (NOLOCK) where isVariantTableFlag=''N'''
			
			DECLARE meta_data_cursor  CURSOR FAST_FORWARD FOR Select ProcessDefId,ProcessVariantID From @tableVariableMap
			IF(@@error <> 0)
			Begin
					--PRINT ' [WFMigrateMetaData] Error in declaring meta_data_cursor'
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' Error in declaring meta_data_cursor')
					CLOSE meta_data_cursor 
					DEALLOCATE meta_data_cursor 
					ROLLBACK TRANSACTION MetaDataTran
					--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
					RETURN
			End	
			
			OPEN meta_data_cursor
			
			IF(@@error <> 0)
			Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in opening meta_data_cursor')
					CLOSE meta_data_cursor 
					DEALLOCATE meta_data_cursor 
					ROLLBACK TRANSACTION MetaDataTran
					--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
					RETURN
			End	
			
			FETCH NEXT FROM meta_data_cursor INTO @v_processDefId,@v_variantId
			
			IF(@@error <> 0)
			Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in fetching from  meta_data_cursor')
					CLOSE meta_data_cursor 
					DEALLOCATE meta_data_cursor 
					ROLLBACK TRANSACTION MetaDataTran
					--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
					RETURN
			End	
			
			WHILE @@FETCH_STATUS = 0 ---------------START OUTER WHILE
			BEGIN
				PRINT 'ProcessDefID is ' + CONVERT(NVARCHAR(10),@v_processDefId) + ' ProcessVariantId is ' + CONVERT(NVARCHAR(10),@v_variantId)
				IF( @v_migrateAllData = 'N')
				BEGIN
				
					SELECT @v_query2 = ' SELECT @value =  PROCESSTYPE FROM ' + @dblinkString+ '.PROCESSDEFTABLE WITH (NOLOCK) WHERE PROCESSDEFID = ' + CONVERT(NVarchar(10),@v_processdefid)
					SELECT @v_queryParameter = '@value  NVARCHAR(1) OUTPUT'
					EXEC sp_executesql @v_query2, @v_queryParameter, @value = @v_processType OUTPUT
					
					SELECT @v_migratedflag = 0
					SELECT @v_migratedflag = 1 FROM PROCESSDEFTABLE WHERE PROCESSDEFID = @v_processdefid	
					IF(@v_migratedflag = 1)
					BEGIN
						IF(@v_copyForceFully ='N')
						BEGIN
							PRINT('Process Already exists on the target cabinet')
							IF(@v_processType = 'M')
							BEGIN
								EXEC WFMigrateVariantMetaData @v_sourceCabinet, @v_targetCabinet, @dblinkString,@v_processDefId,@v_variantId,@v_migrateAllData,@v_copyForceFully,@v_executionLogId
							END
							
							FETCH NEXT FROM meta_data_cursor INTO @v_processDefId,@v_variantId
							IF(@@error <> 0)
							Begin
									--PRINT ' [WFMigrateMetaData] Error in fetching from  meta_data_cursor'
									INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in fetching from  meta_data_cursor')
									CLOSE meta_data_cursor 
									DEALLOCATE meta_data_cursor 
									--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
									ROLLBACK TRANSACTION MetaDataTran
									RETURN
							End	
							CONTINUE
						END
					END
				END
				
				IF(@v_migratedflag = 1) 
				BEGIN
					PRINT 'PROCESS ALREADY MIGRATED'
				END
				ELSE -------------process not migrated
				BEGIN
				
					IF(@v_migrateAllData='N')
					BEGIN
						SELECT @v_existsflag = 0
						SELECT @v_query2 = ' SELECT @value =  1 FROM ' + @dblinkString+ '.PROCESSDEFTABLE WITH (NOLOCK)  WHERE PROCESSDEFID = ' + CONVERT(NVarchar(10),@v_processdefid)
						SELECT @v_queryParameter = '@value  INT OUTPUT'
						EXEC sp_executesql @v_query2, @v_queryParameter, @value = @v_existsflag OUTPUT
					
						IF ( @v_existsflag = 0)
						BEGIN
							PRINT 'PROCESS DOESN''T EXISTS ON SOURCE CABINET '
							FETCH NEXT FROM meta_data_cursor INTO @v_processDefId,@v_variantId
							IF(@@error <> 0)
							Begin
								INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in fetching from  meta_data_cursor')
								CLOSE meta_data_cursor 
								DEALLOCATE meta_data_cursor 
								--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
								ROLLBACK TRANSACTION MetaDataTran
								RETURN
							End	
							CONTINUE
						END
					END
					
					EXECUTE( ' DECLARE v_TableNameCursor CURSOR  FAST_FORWARD FOR ' + @v_query)
					IF(@@error <> 0)
					BEGIN
						--PRINT ' [WFMigrateMetaData] Error in declaring v_TableNameCursor cursor query'
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in declaring v_TableNameCursor cursor query')
						ROLLBACK TRANSACTION MetaDataTran
						CLOSE v_TableNameCursor 
						DEALLOCATE v_TableNameCursor 
						--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
						RETURN
					END
					
					OPEN v_TableNameCursor
					
					IF(@@error <> 0)
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in opening v_TableNameCursor cursor query')
						CLOSE v_TableNameCursor 
						DEALLOCATE v_TableNameCursor 
						ROLLBACK TRANSACTION MetaDataTran
						--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
						RETURN
					END
					
					FETCH NEXT FROM v_TableNameCursor INTO @v_tableName , @v_hasIdentityColumn
					
					IF(@@error <> 0)
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in fetching from v_TableNameCursor cursor query')
						CLOSE v_TableNameCursor 
						DEALLOCATE v_TableNameCursor 
						ROLLBACK TRANSACTION MetaDataTran
						--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
						RETURN
					END
					
					WHILE(@@FETCH_STATUS <> -1) -------------START INNER WHILE
					BEGIN 
						IF (@@FETCH_STATUS <> -2) 
						BEGIN 	
							IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = @v_tableName)
							BEGIN
								EXEC WFMoveMetaData @v_sourceCabinet, @v_targetCabinet, @v_tableName, @v_processdefid,@dblinkString,@v_migrateAllData,@v_copyForcefully,@v_existingProcessString,@v_hasIdentityColumn,@v_executionLogId
							END
							
							IF(@@error <> 0)
							BEGIN
								INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in executing WFMoveMetaData')
								CLOSE v_TableNameCursor 
								DEALLOCATE v_TableNameCursor 
								ROLLBACK TRANSACTION MetaDataTran
								--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
								RETURN
							END
							
						END
						
						FETCH NEXT FROM v_TableNameCursor INTO @v_tableName , @v_hasIdentityColumn
						IF(@@error <> 0)
						BEGIN
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in fetching from v_TableNameCursor')
							CLOSE v_TableNameCursor 
							DEALLOCATE v_TableNameCursor 
							ROLLBACK TRANSACTION MetaDataTran
							--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
							RETURN
						END
					END------------------------------------------END INNER WHILE
					
					CLOSE v_TableNameCursor 
					DEALLOCATE v_TableNameCursor 
					
					print('going to execute WFMoveQueueData---')
					EXEC WFMoveQueueData @v_sourceCabinet, @v_targetCabinet, @v_processdefid,@dblinkString,@v_migrateAllData,@v_copyForcefully,@v_existingProcessString,@v_executionLogId
					
					IF(@@error <> 0)
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in executing WFMoveQueueData')
						--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
						ROLLBACK TRANSACTION MetaDataTran
						RETURN
					END
					
					EXEC WFMoveOmnidocsFolderData @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_processdefid,@v_migrateAllData,@v_copyForceFully,@v_existingProcessString,@v_DeleteFromSrc,@v_executionLogId
					
					IF(@@error <> 0)
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0, ' [WFMigrateMetaData] Error in executing WFMoveOmnidocsFolderData')
						--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
						ROLLBACK TRANSACTION MetaDataTran
						RETURN
					END
					
					PRINT 'Metadata successfully migrated for ProcessDefId ' + CONVERT(NVARCHAR(10),@v_processdefid)
					 
					EXEC WFExportExternalTable @v_sourceCabinet, @v_targetCabinet, @dblinkString, @v_processDefId, @v_migrateAllData , @v_executionLogId
					IF(@v_moveTaskData = 'Y') 
						BEGIN
							EXEC WFExportTaskTables @v_sourceCabinet, @v_targetCabinet, @dblinkString, @v_processDefId, @v_migrateAllData , @v_executionLogId,'N'
						END
					IF(@@error <> 0)
					BEGIN
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) values (@v_executionLogId,current_timestamp,0, ' [WFMigrateMetaData] Error in executing WFExportExternalTable')
						--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
						ROLLBACK TRANSACTION MetaDataTran
						RETURN
					END
					
					IF(@v_processType = 'M')
					BEGIN
						EXEC WFMigrateVariantMetaData @v_sourceCabinet, @v_targetCabinet, @dblinkString, @v_processDefId, @v_VariantId, @v_migrateAllData, @v_copyForceFully,@v_executionLogId
						IF(@@error <> 0)
						BEGIN
							--RAISERROR('Error in WFMoveVariantMetaData Error in executing columnName cursor query', 16, 1) 
							INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in executing WFMigrateVariantMetaData')
							ROLLBACK TRANSACTION MetaDataTran
							RETURN
						END
					END
					
						
				END -------------process not migrated
				
				-- create partitions for the processdefid and processvariant id that has been migrated 
				
				IF (@flagPartition = 1)
				BEGIN
					EXEC WFCreatePartitions @v_processDefId,@v_variantId
				END
				IF(@@error <> 0)
				Begin
					INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,'error in execution of WFCreatePartitions')
					CLOSE meta_data_cursor 
					DEALLOCATE meta_data_cursor 
					ROLLBACK TRANSACTION MetaDataTran
					--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
					RETURN
				
				End
				
				FETCH NEXT FROM meta_data_cursor INTO @v_processDefId,@v_variantId
				IF(@@error <> 0)
				Begin
						INSERT INTO WFFailedMetaDataMigrationLog (executionLogId,actionDateTime,FailedProcessId,Remarks) VALUES (@v_executionLogId,current_timestamp,0,' [WFMigrateMetaData] Error in fetching from  meta_data_cursor')
						CLOSE meta_data_cursor 
						DEALLOCATE meta_data_cursor 
						--RAISERROR('Error in WFMigrateVariantMetaData Error in opening processVariantCursor cursor', 16, 1) 
						ROLLBACK TRANSACTION MetaDataTran
						RETURN
				End	
			END----------------END OUTER WHILE
			CLOSE meta_data_cursor 
			DEALLOCATE meta_data_cursor
			
			INSERT INTO WFMetaDataMigrationProgressLog(executionLogId,actionDateTime,ProcessId,tableName,Remarks) VALUES (@v_executionLogId,current_timestamp,0,NULL,'WFMigrate Meta Data Executed Succssfully')
			COMMIT TRANSACTION MetaDataTran
	END

	

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : SetAndMigrateMetaData.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure to set values to start MetaDataMigration Execution
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'SetAndMigrateMetaData')
	Begin
		Execute('DROP PROCEDURE SetAndMigrateMetaData')
		Print 'Procedure SetAndMigrateMetaData already exists, hence older one dropped ..... '
	End

	go

	Create Procedure SetAndMigrateMetaData
	(
		@v_sourceCabinet      		VARCHAR(256),
		@v_targetCabinet      		VARCHAR(256),
		@v_isDBLink			  		VARCHAR(1),
		@sourceMachineIp      		VARCHAR(256),
		@v_migrateAllData 	  		VARCHAR(1),	
		@v_copyForceFully	  		VARCHAR(1),
		@v_overRideCabinetData		VARCHAR(1),
		@v_DeleteFromSrc			VARCHAR(1),    /* Required for MoveDocDb whether Data has to be deleted from source or not */
		@v_moveTaskData        		VARCHAR(2)
	)

	AS
		
	BEGIN
	
		SET NOCOUNT ON
		
		Declare @tableVariableMap 		AS Process_Variant_Type
		Declare @dblinkString 			NVARCHAR(256)
		Declare @Id 					INT
		Declare @PVId 					INT
		Declare @v_executionLogId 		INT
		Declare @v_remarks 				VARCHAR(Max)
		Declare @tableVarRemarks		VARCHAR(4000)
		DECLARE @DBStatus	 			INT
		
		Select @tableVarRemarks = ''
		IF(@v_isDBLink = 'Y' )
		BEGIN
			SELECT @dblinkString = '[' + @sourceMachineIp + '].'+ @v_sourcecabinet +'.dbo' 
		END
		ELSE
		BEGIN
			SELECT @dblinkString = @v_sourcecabinet + '.'
		END
		
			
		------------------------------Call SynchCabinets---------------------------------------------------------
		--EXEC SynchCabinets @v_sourceCabinet,@v_targetCabinet,@dblinkString,@DBStatus OUT
		--IF (@DBStatus <> 0)
		--Begin
			-- Print 'Error in caliing Synch Cabinets'
			 --Return
		--End
		
		--Populate our SourceIDMap variable (dummy select statement for now).
		Insert into @tableVariableMap(ProcessDefid,ProcessVariantID) values (3,0)

		--Print out contents of collection
		Declare NewCursor  CURSOR FAST_FORWARD FOR Select ProcessDefId,ProcessVariantID From @tableVariableMap
		Open NewCursor
		FETCH NEXT FROM NewCursor INTO @Id , @PVId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			PRINT 'ProcessDefId'
			PRINT  @Id
			PRINT 'ProcessVariantID'
			PRINT  @PVId
			SELECT @tableVarRemarks = @tableVarRemarks +  'PId--'+ CONVERT(NVARCHAR(10),@Id) + 'PVId--' + CONVERT(NVARCHAR(10),@PVId)
			FETCH NEXT FROM NewCursor INTO  @Id , @PVId

		END
		Close NewCursor
		
		Insert into getnerateLogId DEFAULT VALUES
		SELECT @v_executionLogId =  max(id) from  getnerateLogId
		SELECT @v_remarks = 'MetaData Execution Begins with following parameters --> v_sourceCabinet : ' + @v_sourceCabinet + ' , v_targetCabinet : ' + @v_targetCabinet + ' , v_isDBLink : ' + @v_isDBLink  + ' , sourceMachineIp : '+ @sourceMachineIp + ' , v_migrateAllData : ' + @v_migrateAllData + ' , v_copyForceFully : ' + @v_copyForceFully + '  , v_overRideCabinetData : ' + @v_overRideCabinetData + ' ,  tableVariable : ' + @tableVarRemarks + ' ,  dblinkString : ' + @dblinkString
		Insert into WFMigrationLogTable values (@v_executionLogId,getdate(),@v_remarks)
		
		EXEC WFMigrateMetaData @v_sourceCabinet , @v_targetCabinet , @dblinkString , @tableVariableMap , @v_migrateAllData ,@v_copyForceFully , @v_overRideCabinetData,@v_DeleteFromSrc,@v_executionLogId,@v_moveTaskData
		

	END
	

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFSynchLinksData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 23 MAY 2014
	Description                 : Stored Procedure To Synch WFLinksTable Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/
	

	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFSynchLinksData')
	Begin
		Execute('DROP PROCEDURE WFSynchLinksData')
		Print 'Procedure WFSynchLinksData already exists, hence older one dropped ..... '
	End

	go

	Create Procedure WFSynchLinksData
	(
		@v_sourceCabinet      			VARCHAR(256),
		@v_targetCabinet      			VARCHAR(256),
		@dblinkString          			VARCHAR(256),
		@executionLogId				INT
	)
	AS
	BEGIN
		Declare @vquery 			NVARCHAR(2000)
		Declare @v_queryStr			NVARCHAR(2000)
		Declare @vqueryParam		NVARCHAR(2000)
		Declare @v_count			INT
		Declare @v_lastInstanceId 	NVARCHAR(70)
		Declare @v_processInstanceId NVARCHAR(70)
		Declare @v_conditionStr		NVARCHAR(100)
		
		Select @v_lastInstanceId = ''
		Execute('Truncate table ' + @v_targetCabinet + '..WFLinksTable' )
		If(@@error <> 0 )
		Begin
				Print 'Error in truncation of v_linkCursor'
				Close v_linkCursor
				Deallocate v_linkCursor
				Return
		End
		
		WHILE(1=1)
		Begin
			/*Check added*/
			if(@v_lastInstanceId = '')
			BEGIN
				SELECT @v_conditionStr = ''
			END
			else
			BEGIN
				SELECT @v_conditionStr = ' where parentprocessinstanceid > ''' + @v_lastInstanceId + ''''
			END
			--PRINT @v_conditionStr
			
			Select @vquery = 'Select top 100 parentprocessinstanceid from ' + @dblinkString + '.WFLinksTable ' + @v_conditionStr + ' order by parentprocessinstanceid '
			
			--print @vquery
			
			Select @v_queryStr = ' SELECT @value =  count(*) from ( Select top 100 parentprocessinstanceid from ' + @dblinkString + '.WFLinksTable ' + @v_conditionStr + ' order by parentprocessinstanceid )a' 
			Select @vqueryParam = '@value int output'
			EXEC sp_executesql @v_queryStr, @vqueryParam, @value = @v_count OUTPUT
			
			/*Check ends*/

			If(@v_count = 0 )
			Begin
				break 
			End
			Execute ( ' Declare v_linkCursor Cursor Fast_Forward for ' + @vquery)
			If(@@error <> 0 )
			begin
				Print 'error in declaration of v_linkCursor'
				Close v_linkCursor
				Deallocate v_linkCursor
				Return
			end
			Open v_linkCursor
			If(@@error <> 0 )
			begin
				Print 'error in opening of v_linkCursor'
				Close v_linkCursor
				Deallocate v_linkCursor
				Return
			end
			Fetch next from v_linkCursor into @v_processInstanceId
			If(@@error <> 0 )
			begin
				Print 'error in opening of v_linkCursor'
				Close v_linkCursor
				Deallocate v_linkCursor
				Return
			end
			
			While( @@Fetch_Status <>  -1)
			Begin
				If(@@Fetch_Status <>  -2)
				Begin
					Select @vquery = 'Insert into ' + @v_targetCabinet + '..WfLinksTable Select * from ' + @dblinkString + '.WfLinksTable where ParentProcessInstanceid = ' +
									'''' + @v_processInstanceId + ''''
					Execute ( @vquery )
					Select @v_lastInstanceId = @v_processInstanceId
				End
				Fetch next from v_linkCursor into @v_processInstanceId
				If(@@error <> 0 )
					begin
					Print 'error in opening of v_linkCursor'
					Close v_linkCursor
					Deallocate v_linkCursor
					Return
				end
			
			End
			Close v_linkCursor
			Deallocate v_linkCursor
		End
	
	END

go

/*__________________________________________________________________________________;
NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
Group                       : Phoenix;
Product / Project           : IBPS;
Module                      : IBPS Server;
File Name                   : WFMoveTaskData.sql (MS SQL)
Author                      : Sajid Khan
Date written (DD/MM/YYYY)   : 29 July 2015
Description                 : Stored Procedure for Transactional data Archival;
____________________________________________________________________________________;
CHANGE HISTORY
____________________________________________________________________________________;
Date        Change By        Change Description (Bug No. (IF Any))
____________________________________________________________________________________*/
/***************************************************************************************
*  Description : Transactional Data Migration Solution for IBPS
* It is mandatory to execute the script/procedures on Target cabinet
*
***************************************************************************************/

If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveTaskData')
Begin
	Execute('DROP PROCEDURE WFMoveTaskData')
	Print 'Procedure WFMoveTaskData already exists, hence older one dropped ..... '
End
go
	
create PROCEDURE WFMoveTaskData (
	@v_sourceCabinet                         Varchar(256),
    @v_targetCabinet                         Varchar(256),
	@dblinkString          					 VARCHAR(256),
	@v_tableName							Varchar(50),
	@v_fromDate           					 VARCHAR(256),	
	@v_toDate			 					VARCHAR(256)
) AS
	
BEGIN
	Declare @v_taskId							INT
	Declare @v_query              				NVARCHAR(2000)
	Declare @v_filterString						NVARCHAR(1000)
	DECLARE @ParmDefinition 					NVARCHAR(500)
	Declare @existsFlag							INT
	DECLARE @v_orderByString	VARCHAR(4000)
	BEGIN 
	 
	Select @v_filterString =' where EntryDateTime Between '''+@v_fromDate+'''' ; 
	Select @v_filterString  = @v_filterString+ ' and  '''+@v_toDate+'''';
	SELECT @v_orderByString = ' Order By ProcessInstanceId'
	
	BEGIN
		Select @existsFlag	= 0
		Select @v_query = 'Select @retvalOUT = 1 From '+@dblinkString+'SYS.TABLES WHERE NAME = '''+@v_tableName+''''
		SET @ParmDefinition = '@retvalOUT int OUTPUT'
		EXEC sp_executesql @v_query, @ParmDefinition, @retvalOUT=@existsFlag OUTPUT
		IF(@existsFlag = 0)
		Begin
			PRINT ' [WFMoveTaskData] Table Doest Not exist on Source Cabinet'
			RETURN
		End
		
		While(1=1)
			BEGIN
				Select @existsFlag	= 0
				Select @v_query = ' Select @retvalOUT =  count(*)  from ( Select Top 100 * FROM ' +@dblinkString+ '.' +@v_tableName+@v_filterString+' ) A '
				SET @ParmDefinition = '@retvalOUT int OUTPUT'
				EXEC sp_executesql @v_query, @ParmDefinition, @retvalOUT=@existsFlag OUTPUT
				IF(@existsFlag < 1)
				Begin
					PRINT ' [WFMoveTaskData] Table Doest Not Contain Any record to be moved from  Source Cabinet'
					RETURN
				End
				 
				Select @v_query = 'Insert into '+@v_tableName+' Select TOP 100 * from '+@dblinkString+'.'+@v_tableName+@v_filterString
				EXECUTE(@v_query)
				 
				Select @v_query = 'Delete TOP(100) from '+@dblinkString+'.'+@v_tableName+@v_filterString
				EXECUTE(@v_query)
			END
		END
	END	
END

go

/*__________________________________________________________________________________;
NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
Group                       : Phoenix;
Product / Project           : IBPS;
Module                      : IBPS Server;
File Name                   : WFMigrateTaskData.sql (MS SQL)
Author                      : Sajid Khan
Date written (DD/MM/YYYY)   : 29 July 2015
Description                 : Stored Procedure for Transactional data Archival;
____________________________________________________________________________________;
CHANGE HISTORY
____________________________________________________________________________________;
Date        Change By        Change Description (Bug No. (IF Any))
____________________________________________________________________________________*/
/***************************************************************************************
*  Description : Transactional Data Migration Solution for IBPS
* It is mandatory to execute the script/procedures on Target cabinet
*
***************************************************************************************/
If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMigrateTaskData')
Begin
	Execute('DROP PROCEDURE WFMigrateTaskData')
	Print 'Procedure WFMigrateTaskData already exists, hence older one dropped ..... '
End
go
	
Create PROCEDURE WFMigrateTaskData (
	@v_processDefId     			INT,
	@v_sourceCabinet      			VARCHAR(256),
	@v_targetCabinet      			VARCHAR(256),
	@dblinkString          			VARCHAR(256),
	@v_fromDate           			VARCHAR(256),
	@v_toDate			 			VARCHAR(256)
) AS
BEGIN
	Declare @v_taskId								INT
	Declare @v_query              				NVARCHAR(2000)
	Declare @v_tableName							NVARCHAR(50)

	BEGIN 
		Select @v_query = 'SELECT TaskId FROM '+@dblinkString+'.WFTaskDefTable WHERE ProcessDefId = '+CONVERT(NVarchar(10),@v_ProcessDefId)
		EXECUTE('DECLARE v_taskCursor CURSOR  FAST_FORWARD for ' + @v_query)
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMigrateTaskData] Error in executing v_taskCursor cursor query'
			CLOSE v_taskCursor 
			DEALLOCATE v_taskCursor 
			RETURN
		End
		
		OPEN v_taskCursor
		
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMigrateTaskData] Error in opening v_taskCursor cursor query'
			CLOSE v_taskCursor 
			DEALLOCATE v_taskCursor 
			RETURN
		End
		
		FETCH NEXT FROM v_taskCursor INTO @v_taskId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			Select @v_tableName = 'WFGenericData_'+CONVERT(NVarchar(10),@v_ProcessDefId)+'_'+CONVERT(NVarchar(10),@v_taskId)
			EXEC WFMoveTaskData @v_sourceCabinet,@v_targetCabinet,@dblinkString,@v_tableName,@v_fromDate,@v_toDate
			FETCH NEXT FROM v_taskCursor INTO  @v_taskId
		END
		CLOSE v_taskCursor 
		DEALLOCATE v_taskCursor 
	END
END

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMoveComplexData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 23 MAY 2014
	Description                 : Stored Procedure To Move Complex Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/
	
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveComplexData')
	Begin
		Execute('DROP PROCEDURE WFMoveComplexData')
		Print 'Procedure WFMoveComplexData already exists, hence older one dropped ..... '
	End

	go

	Create Procedure WFMoveComplexData
	(	 
		@v_processInstanceId  		NVARCHAR(256),
		@v_processDefId				INT,
		@v_variantId				INT,
		@v_sourceCabinet			VARCHAR(256),
		@v_targetCabinet			VARCHAR(256),
		@dblinkString				VARCHAR(256),
		@historyFlag           		VARCHAR(1),
		@executionLogId				INT
	)AS
	BEGIN
		DECLARE @v_queryStr 			VARCHAR(4000)
		DECLARE @v_tableName 			VARCHAR(50)
		DECLARE @v_parentObject			VARCHAR(50)
		DECLARE @v_foreignKey			VARCHAR(50)
		DECLARE @v_ForeignKeyValue  	VARCHAR(50)
		DECLARE @v_childObject			VARCHAR(50)
		DECLARE @v_refKey				VARCHAR(50)
		DECLARE @v_queryStr1			NVARCHAR(2000)
		DECLARE @v_queryParameter		NVARCHAR(50)
		DECLARE	@rowCount				INT	
		DECLARE @v_transactionalTable 	VARCHAR(50)
		DECLARE @vCount 				INT
		DECLARE @v_Count 				INT
		DECLARE @v_InsertCondition		VARCHAR(500)
		DECLARE @v_relationId 				INT
		--BEGIN TRANSACTION Move_Complex_Data
		SELECT @v_InsertCondition = ' WHERE  '
		IF(@historyFlag = 'Y')
		BEGIN
			SELECT @v_transactionalTable = ' QUEUEHISTORYTABLE '
		END
		ELSE
		BEGIN
			SELECT @v_transactionalTable = ' WFINSTRUMENTTABLE '
		END
		
		SELECT @v_queryStr = 'SELECT TABLENAME FROM ' + @dblinkString + '.EXTDBCONFTABLE  WITH (NOLOCK)  WHERE PROCESSDEFID = ' + CONVERT( NVARCHAR(10),@v_processDefId ) + ' and processvariantid = ' + CONVERT( NVARCHAR(10),@v_variantId ) + ' and extobjid > 1 '
		EXECUTE('DECLARE v_ColumnCursor CURSOR FAST_FORWARD FOR ' + @v_queryStr)
		IF(@@error <> 0)
		BEGIN
			PRINT 'Error in declaration of v_ColumnCursor'
			CLOSE v_ColumnCursor
			DEALLOCATE v_ColumnCursor
			RETURN
		END
		
		OPEN v_ColumnCursor
		IF(@@error <> 0)
		BEGIN
			PRINT 'Error in opening of v_ColumnCursor'
			CLOSE v_ColumnCursor
			DEALLOCATE v_ColumnCursor
			RETURN
		END
		
		FETCH NEXT FROM v_ColumnCursor INTO @v_tableName
		IF(@@error <> 0)
		BEGIN
			PRINT 'Error in fetching from of v_ColumnCursor'
			CLOSE v_ColumnCursor
			DEALLOCATE v_ColumnCursor
			RETURN
		END
		
		WHILE( @@FETCH_STATUS <> -1 )---------------outer while
		BEGIN
			IF( @@FETCH_STATUS <> -2 )
			BEGIN
				IF(UPPER(@v_tableName) is not NULL  OR UPPER(@v_tableName) <> '')
				BEGIN
					SELECT @v_queryStr = 'SELECT distinct RelationId  FROM ' + @dblinkString + '.WFVarRelationTable where ProcessDefId = ' + CONVERT( NVARCHAR(10),@v_processDefId ) +
										' and processvariantid = ' + CONVERT( NVARCHAR(10),@v_variantId )
					EXECUTE('DECLARE v_relationCursor CURSOR FAST_FORWARD for '+ @v_queryStr)
					IF(@@error <> 0 )
					BEGIN
						PRINT 'Error in declaring v_relationCursor'
						Close v_relationCursor
						Deallocate v_relationCursor
						return 
					END
					
					OPEN v_relationCursor
					IF(@@error <> 0)
					BEGIN
						PRINT 'Error in opening of v_relationCursor'
						CLOSE v_relationCursor
						DEALLOCATE v_relationCursor
						return
					END
		
					FETCH NEXT FROM v_relationCursor INTO  @v_relationId
					IF(@@error <> 0 )
					BEGIN
						PRINT 'WFMoveComplexData Error in fetching from v_relationCursor'
						Close v_relationCursor
						Deallocate v_relationCursor
						return 
					END
					
					WHILE( @@FETCH_STATUS <> -1 ) --------------inner while
					BEGIN
						IF( @@FETCH_STATUS <> -2)
						BEGIN
							SELECT @v_count = 0 
							SELECT @v_queryStr = 'SELECT ParentObject,ForeignKey,ChildObject,RefKey FROM ' + @dblinkString + '.WFVarRelationTable where ProcessDefId = ' + CONVERT( NVARCHAR(10),@v_processDefId ) + ' and processvariantid = '+ CONVERT( NVARCHAR(10),@v_variantId ) + ' and RelationId = ' + CONVERT( NVARCHAR(10),@v_relationId )
							
							IF (SELECT CURSOR_STATUS('global','v_comCursor')) >= -1
							BEGIN
							 CLOSE v_comCursor
							 DEALLOCATE v_comCursor
							END
							
							EXECUTE('DECLARE v_comCursor Cursor FAST_FORWARD for '+ @v_queryStr)
							OPEN v_comCursor
							IF(@@error <> 0 )
							BEGIN
								PRINT 'WFMoveComplexData Error in fetching from v_comCursor'
								Close v_comCursor
								Deallocate v_comCursor
								return 
							END
							FETCH NEXT FROM v_comCursor INTO  @v_parentObject ,@v_ForeignKey , @v_childObject , @v_refKey
							IF(@@error <> 0 )
							BEGIN
								PRINT 'WFMoveComplexData Error in fetching from v_comCursor'
								Close v_comCursor
								Deallocate v_comCursor
								return 
							END
							WHILE( @@FETCH_STATUS <> -1 ) --------------inner  while 2
							BEGIN
								IF( @@FETCH_STATUS <> -2) -------------inner if
								BEGIN
									IF (@v_ForeignKey = 'ITEMINDEX' )
									BEGIN
										SELECT @v_ForeignKey = 'VAR_REC_1'
									END
						
									IF (@v_ForeignKey = 'ITEMTYPE' )
									BEGIN
										SELECT @v_ForeignKey = 'VAR_REC_2'
									END
									
									IF( (UPPER(@v_ForeignKey) is not null ) AND ( UPPER(@v_ForeignKey) <> '' ) )
									BEGIN
										--SELECT @v_queryStr1 = 'SELECT @value =   DISTINCT ' + @v_ForeignKey + ' FROM ' + @v_targetCabinet + '..' + @v_transactionalTable + ' WHERE PROCESSINSTANCEID = ' + '''' + @v_processInstanceId + ''''
										--SELECT @v_queryParameter = '@value NVarchar(50) OUTPUT'
										--EXEC sp_executesql @v_queryStr1, @v_queryParameter, @value = @v_ForeignKeyValue OUTPUT
										
										SELECT @v_queryStr1 = 'SELECT @v_ForeignKeyOut = ' + @v_ForeignKey + ' FROM ' + @v_targetCabinet + '..' + @v_transactionalTable + ' WHERE PROCESSINSTANCEID = ' + '''' + @v_processInstanceId + ''''
										
										SELECT @v_queryParameter = N'@v_ForeignKeyOut NVarchar(50) OUTPUT'
										EXEC sp_executesql @v_queryStr1, @v_queryParameter, @v_ForeignKeyOut = @v_ForeignKeyValue OUTPUT
										
										IF( (UPPER(@v_ForeignKeyValue) is not null ) AND ( UPPER(@v_ForeignKeyValue) <> '' ) )
										BEGIN
											IF(@v_count > 0)
											BEGIN
												SELECT @v_InsertCondition = @v_InsertCondition + ' and '
											END
											SELECT @v_count = @v_count + 1
											SELECT @v_InsertCondition = @v_InsertCondition + @v_RefKey +  ' = ' + '''' + @v_ForeignKeyValue + ''''
										END
									END
						
								END--------------------------------------end inner if 2
								FETCH NEXT FROM v_comCursor INTO  @v_parentObject ,@v_ForeignKey , @v_childObject , @v_refKey
								IF(@@error <> 0 )
								BEGIN
									PRINT 'WFMoveComplexData Error in fetching from v_comCursor'
									Close v_comCursor
									Deallocate v_comCursor
									return 
								END
							END--------------end inner  while 2
							CLOSE v_comCursor
							DEALLOCATE v_comCursor
							
							IF(@v_Count > 0 )
							BEGIN
								SELECT @v_queryStr = 'Insert into '+@v_targetCabinet + '..'+ @v_ChildObject + ' Select * from ' + @dblinkString + '.' + @v_ChildObject + @v_InsertCondition
								EXECUTE (@v_queryStr)
								Select @v_Count = @@ROWCOUNT 
							END
							
							IF(@v_Count > 0 )
							BEGIN
								SELECT @v_queryStr = 'Delete from ' + @dblinkString + '.' + @v_ChildObject + @v_InsertCondition
								Execute (@v_queryStr)
							END
						END
						select @v_InsertCondition = ' where '
						FETCH NEXT FROM v_relationCursor  INTO @v_relationId
						IF(@@error <> 0 )
						BEGIN
							PRINT 'WFMoveComplexData Error in fetching from v_relationCursor'
							Close v_relationCursor
							Deallocate v_relationCursor
							return 
						END
						
					END-----------------------------------------end inner while
					CLOSE v_relationCursor
					DEALLOCATE v_relationCursor
				END
			END
			FETCH NEXT FROM v_ColumnCursor INTO @v_tableName
			IF(@@error <> 0 )
			BEGIN
				PRINT 'WFMoveComplexData Error in fetching from v_ColumnCursor'
				Close v_ColumnCursor
				Deallocate v_ColumnCursor
				return 
			END
		END-------------outer while end
		CLOSE v_ColumnCursor
		DEALLOCATE v_ColumnCursor
	END
	

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMoveAuditTrailData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 23 MAY 2014
	Description                 : Stored Procedure To Move Audit Trail Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/
	
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveAuditTrailData')
	Begin
		Execute('DROP PROCEDURE WFMoveAuditTrailData')
		Print 'Procedure WFMoveAuditTrailData already exists, hence older one dropped ..... '
	End

	go

	CREATE Procedure WFMoveAuditTrailData
	(	 
		@v_processInstanceId  		NVARCHAR(256),
		@v_processDefId				INT,
		@v_sourceCabinet			VARCHAR(256),
		@v_targetCabinet			VARCHAR(256),
		@dblinkString				VARCHAR(256),
		@v_fromDate           		VARCHAR(256),
		@v_toDate					VARCHAR(256),
		@executionLogId				INT
		
	)AS
	BEGIN
	
		DECLARE  @v_query  VARCHAR(4000)
		DECLARE  @colStr   NVARCHAR(2000)
		
		EXECUTE GetColStr 'WFHistoryRouteLogTable',@v_columnStr = @colStr OUTPUT
		SELECT @v_query = ' Insert into WFHistoryRouteLogTable ( ' + @colStr +' ) Select * from ' +  @dblinkString + '.WFCurrentRouteLogTable where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)
		SELECT @v_query =  'Delete from ' + @dblinkString  + '.WFCurrentRouteLogTable where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)

		EXECUTE GetColStr 'WFATTRIBUTEMESSAGEHISTORYTABLE',@v_columnStr = @colStr OUTPUT
		SELECT @v_query = ' Insert into WFATTRIBUTEMESSAGEHISTORYTABLE ( ' + @colStr +' ) Select * from ' +  @dblinkString + '.WFATTRIBUTEMESSAGETABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)
		SELECT @v_query =  'Delete from ' + @dblinkString  + '.WFATTRIBUTEMESSAGETABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)

		
		PRINT 'WFMoveAuditTrailData executed successfuly'
	END

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMoveHistoryAuditTrailData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 23 MAY 2014
	Description                 : Stored Procedure To Move History Audit Trail Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/
	
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveHistoryAuditTrailData')
	Begin
		Execute('DROP PROCEDURE WFMoveHistoryAuditTrailData')
		Print 'Procedure WFMoveHistoryAuditTrailData already exists, hence older one dropped ..... '
	End

	go

	create Procedure WFMoveHistoryAuditTrailData
	(	 
		@v_processInstanceId  		NVARCHAR(256),
		@v_processDefId				INT,
		@v_sourceCabinet			VARCHAR(256),
		@v_targetCabinet			VARCHAR(256),
		@dblinkString				VARCHAR(256),
		@v_fromDate           		VARCHAR(256),
		@v_toDate					VARCHAR(256),
		@executionLogId				INT
		
	)AS
	BEGIN
		DECLARE  @v_query  VARCHAR(4000)
		DECLARE  @colStr   NVARCHAR(2000)
		
		SELECT @v_query =  'Insert into WFHistoryRouteLogTable Select * from ' + @dblinkString + '.WFHistoryRouteLogTable where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)
		
		SELECT @v_query =  'Delete from ' + @dblinkString  + '.WFHistoryRouteLogTable where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)
		
		EXECUTE GetColStr 'WFATTRIBUTEMESSAGETABLE',@v_columnStr = @colStr OUTPUT
		SELECT @v_query = 'set IDENTITY_INSERT '  + @v_targetCabinet + '..WFATTRIBUTEMESSAGETABLE ON' + ' Insert into WFATTRIBUTEMESSAGETABLE ( ' + @colStr +' ) Select * from ' +  @dblinkString + '.WFATTRIBUTEMESSAGETABLE where processinstanceid = '+''''+ @v_processInstanceId + '''' + ' set IDENTITY_INSERT '  + @v_targetCabinet + '.. WFATTRIBUTEMESSAGETABLE OFF'
		EXECUTE(@v_query)
		SELECT @v_query =  'Delete from ' + @dblinkString  + '.WFATTRIBUTEMESSAGETABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)
		
		EXECUTE GetColStr 'WFATTRIBUTEMESSAGEHISTORYTABLE',@v_columnStr = @colStr OUTPUT
		SELECT @v_query = ' Insert into WFATTRIBUTEMESSAGEHISTORYTABLE (' + @colStr + ') Select * from ' +  @dblinkString + '..WFATTRIBUTEMESSAGEHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE (@v_query)
		
		SELECT @v_query =  'Delete from ' + @dblinkString + '..WFATTRIBUTEMESSAGEHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''
		EXECUTE(@v_query)
		PRINT 'WFMoveHistoryAuditTrailData executed successfuly'
	END

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMoveQueueHistoryData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 23 MAY 2014
	Description                 : Stored Procedure To Move Queue History Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	21/9/2017	Ambuj			Added the changes for Archiving the case management tables
	____________________________________________________________________________________*/
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveQueueHistoryData')
	Begin
		Execute('DROP PROCEDURE WFMoveQueueHistoryData')
		Print 'Procedure WFMoveQueueHistoryData already exists, hence older one dropped ..... '
	End

	go

	create Procedure WFMoveQueueHistoryData
	(	 
		@v_sourceCabinet      		VARCHAR(256),
		@v_targetCabinet      		VARCHAR(256),
		@dblinkString          		VARCHAR(256),
		@tableVariableMap 			Process_Variant_Type READONLY,
		@v_migrateAllProcesses		VARCHAR(1),
		@v_fromDate           		VARCHAR(256),
		@v_toDate			 		VARCHAR(256),
		@v_batchSize				INT,
		@v_moveAuditTrailData 		VARCHAR(1),
		--@v_moveExternalTableData 	VARCHAR(1),
		--@v_moveComplexTableData		VARCHAR(1)	
		@v_moveExtData				VARCHAR(1),
		@v_DeleteFromSrc			VARCHAR(1),
		@v_moveTaskData				VARCHAR(1),
		@executionLogId				INT
		)

	AS

	BEGIN
		DECLARE @v_processDefId 			INT
		DECLARE @v_variantId    			INT
		DECLARE @v_variantName 				VARCHAR(400)
		DECLARE @v_variantTableName     	VARCHAR(400)
		DECLARE @v_processInstanceId		NVARCHAR(63)
		DECLARE @v_folderIndex				NVARCHAR(255)
		DECLARE @v_workItemId				INT	
		DECLARE @v_lastWorkItemId			INT
		DECLARE @v_localTableVariableMap	AS Process_Variant_Type
		DECLARE @v_query					NVARCHAR(2000)
		DECLARE @v_queryStr					NVARCHAR(2000)
		DECLARE @v_externalTable			NVARCHAR(50)
		DECLARE @v_externalTableCount		INT
		DECLARE @v_externalTableHistory 	NVARCHAR(256)
		DECLARE @v_externalTableHistoryCount INT
		DECLARE @v_itemIndex				INT
		DECLARE @existsFlag					INT
		DECLARE @v_folderStatus				INT
		DECLARE @variantFilterString		NVARCHAR(256)
		DECLARE @v_tableName				VARCHAR(50)
		DECLARE @v_genIndex					INT
		DECLARE @newFolderIndex				INT
		DECLARE @v_queryParam				INT
		DECLARE @v_rowCounter				INT
		DECLARE @v_queryParameter  			NVARCHAR(256)
		DECLARE @v_CountQuery				NVARCHAR(2000)
		DECLARE @rowCount					INT
		DECLARE @v_lastProcessInstanceId	NVARCHAR(256)
		DECLARE @v_firstProcessInstanceId	NVARCHAR(256)
		
		
		IF(@v_migrateAllProcesses='Y')
		BEGIN
			--SELECT @variantFilterString = ''
			SELECT @v_query = 'SELECT ProcessDefId from ProcessDefTable'
			EXECUTE('DECLARE v_processCursor CURSOR  FAST_FORWARD for ' + @v_query)
		
			IF(@@error <> 0)
			Begin
				PRINT ' [WFMoveQueueHistoryData] Error in executing v_processCursor cursor query'
				CLOSE v_processCursor 
				DEALLOCATE v_processCursor 
				--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			End
		
			OPEN v_processCursor
		
			IF(@@error <> 0)
			Begin
				PRINT ' [WFMoveQueueHistoryData] Error in opening v_processCursor cursor query'
				CLOSE v_processCursor 
				DEALLOCATE v_processCursor 
				--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			End
		
			FETCH NEXT FROM v_processCursor INTO @v_processDefId
			IF(@@error <> 0)
			Begin
				PRINT ' [WFMoveQueueHistoryData] Error in fetchong from  v_processCursor cursor query'
				CLOSE v_processCursor 
				DEALLOCATE v_processCursor 
				--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			End
			WHILE( @@FETCH_STATUS <> -1 ) 
			BEGIN
				IF( @@FETCH_STATUS <> -2 )
				BEGIN
					--insert into  @v_localTableVariableMap (ProcessDefid,ProcessVariantID) values (  CONVERT(NVarchar(10),@v_processdefid) , -1)
					insert into  @v_localTableVariableMap (ProcessDefid,ProcessVariantID) values (  CONVERT(NVarchar(10),@v_processdefid) , 0)

				END
				FETCH NEXT FROM v_processCursor INTO @v_processDefId
				IF(@@error <> 0)
				BEGIN
					PRINT ' [] Error in fetchong from  v_processCursor cursor query'
					CLOSE v_processCursor 
					DEALLOCATE v_processCursor 
					--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
					RETURN
				END
			END
			CLOSE v_processCursor 
			DEALLOCATE v_processCursor 
		END
		ELSE
		BEGIN
			--SELECT @variantFilterString = 'AND PROCESSVARIANTID = '
			INSERT INTO @v_localTableVariableMap SELECT * FROM @tableVariableMap
		END
		
		Declare tableVarCursor  CURSOR FAST_FORWARD FOR Select ProcessDefId,ProcessVariantID From @v_localTableVariableMap
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMoveQueueHistoryData] Error in declaring tableVarCursor cursor query'
			CLOSE tableVarCursor 
			DEALLOCATE tableVarCursor 
			--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
			RETURN
		End
		
		Open tableVarCursor
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMoveQueueHistoryData] Error in opening tableVarCursor cursor query'
			CLOSE tableVarCursor 
			DEALLOCATE tableVarCursor
			--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
			RETURN
		End
		
		--IF(@v_migrateAllProcesses = 'N')
		--BEGIN
			 --SELECT @variantFilterString =  @variantFilterString + CONVERT(NVARCHAR(10),@v_variantId)
		--END
		
		FETCH NEXT FROM tableVarCursor INTO @v_processDefId , @v_variantId
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMoveQueueHistoryData] Error in fetching from tableVarCursor cursor query'
			CLOSE tableVarCursor 
			DEALLOCATE tableVarCursor 
			--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
			RETURN
		End
		
		WHILE(@@FETCH_STATUS <> -1) ---------------------OUTERMOST WHILE BEGIN
		BEGIN
			IF (@@FETCH_STATUS <> -2) -------------------------OUTERMOST IF BEGIN
			BEGIN
				PRINT 'ProcessDefId ----' +  CONVERT(NVarchar(10),@v_ProcessDefId) + 'ProcessVariantID ----' + CONVERT(NVarchar(10),@v_variantId)
				SELECT @v_externalTable = ''
				IF( ( @v_variantId = 0 ) AND ( @v_moveExtData = 'Y' ))
				BEGIN
					SELECT @v_query = 'SELECT @value =   TABLENAME FROM ' + @dblinkString + '.EXTDBCONFTABLE WHERE PROCESSDEFID = ' +  CONVERT(NVarchar(10),@v_ProcessDefId) + 'AND EXTOBJID = 1' 
					SELECT @v_queryParameter = '@value  NVARCHAR(256) OUTPUT'
					EXEC sp_executesql @v_query, @v_queryParameter, @value = @v_externalTable OUTPUT
					
					IF( @v_externalTable <> '')
					BEGIN
						SELECT @v_externalTableCount = 1
						SELECT @v_externalTableHistory = @v_externalTable + '_HISTORY'
						
						IF EXISTS (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'U' and UPPER(name) = UPPER(@v_externalTableHistory))
						BEGIN
							SELECT @v_externalTableHistoryCount = 1
						END
						ELSE
						BEGIN
							SELECT @v_externalTableHistory = ''
							SELECT @v_externalTableHistoryCount = 0
						END
					END
					ELSE
					BEGIN
						SELECT @v_externalTableCount = 0
						SELECT @v_externalTable = ''
					END
				END
			
				IF( @v_variantId  = 0 )
				BEGIN
					SELECT @variantFilterString = ''
				END
				ELSE
				BEGIN
					SELECT @variantFilterString = 'AND A.PROCESSVARIANTID = ' + CONVERT(NVarchar(10),@v_variantId)
					
				END
				
				WHILE(1 = 1)---------------------------------------WHILE (1=1) BEGINS
				BEGIN
					SELECT @v_query = 'SELECT TOP ' + CONVERT (NVARCHAR(10),@v_batchSize) +' A.PROCESSINSTANCEID , A.VAR_REC_1 FROM ' + @dblinkString + '.' + 'QUEUEHISTORYTABLE A WITH (NOLOCK)  WHERE A.PROCESSDEFID = ' + CONVERT (NVARCHAR(10),@v_ProcessDefId) + @variantFilterString + 
					' AND A.CREATEDDATETIME > CONVERT(DATETIME, ' + '''' + @v_fromDate + '''' + ')'+' AND  A.CREATEDDATETIME < CONVERT( DATETIME,' + '''' + @v_toDate + +''''+')
					   ORDER BY PROCESSINSTANCEID '
					
					PRINT @v_query
					--------------Storing no of instances fetched from batch in  v_rowCounter --------
					SELECT @v_CountQuery = ' SELECT @value = COUNT (*) FROM  ( ' + @v_query + ')b'
					SELECT @v_queryParameter = '@value INT OUTPUT'
					EXEC sp_executesql @v_CountQuery, @v_queryParameter, @value = @v_rowCounter OUTPUT
					
					EXECUTE ('DECLARE v_qhtcursor CURSOR FAST_FORWARD FOR ' + @v_query)
					IF(@@error <> 0)
					Begin
						PRINT ' [WFMoveTransData] Error in declaring v_qhtcursor cursor query'
						INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,null , @v_query)
						CLOSE v_qhtcursor 
						DEALLOCATE v_qhtcursor 
						--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
						RETURN
					End
		
					OPEN v_qhtcursor
					IF(@@error <> 0)
					Begin
						PRINT ' [WFMoveQueueHistoryData] Error in opening v_qhtcursor cursor query'
						CLOSE v_qhtcursor 
						DEALLOCATE v_qhtcursor 
						--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
						RETURN
					End
					
					FETCH NEXT FROM v_qhtcursor INTO @v_processInstanceId,@v_folderIndex
					
					IF(@@error <> 0)
					Begin
						PRINT ' [WFMoveQueueHistoryData] Error in opening v_qhtcursor cursor query'
						CLOSE v_qhtcursor 
						DEALLOCATE v_qhtcursor 
						--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
						RETURN
					End
					
					--------COPYING DATA FOR A BATCH AND COMMITING IT ------------
					SELECT @rowCount = 1
					BEGIN TRANSACTION MOVE_QUEUE_HISTORY_DATA ------------------------------Move Trans Data Begins Here
						WHILE(@@FETCH_STATUS <> -1) --------------2nd while
						BEGIN
							IF (@@FETCH_STATUS <> -2) ------------------------IF INSIDE 2ND WHILE
							BEGIN
									IF( @v_folderIndex = NULL )
									BEGIN
										--  v_lastInstanceId:=v_processInstanceId;
										CONTINUE
									END 
									--IF(@v_firstProcessInstanceId = '') 
									--BEGIN
										--SELECT @v_firstProcessInstanceId = @v_processInstanceId;
									--END 
									
									IF(@rowCount = 1)
									BEGIN
										SELECT @v_firstProcessInstanceId = @v_processInstanceId
									END
									ELSE IF(@rowCount = @v_batchSize)
									BEGIN
										SELECT @v_lastProcessInstanceId = @v_processInstanceId
									END
									
									SELECT @v_query = 'Insert into QUEUEHISTORYTABLE Select * from ' +  @dblinkString + '.QUEUEHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''									
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
									END
									
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'QUEUEHISTORYTABLE where processinstanceid = ' + ''''+ @v_processInstanceId + ''''									
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
									END
									
									
									SELECT @v_query = 'Insert into TODOSTATUSHISTORYTABLE Select * from ' +  @dblinkString + '.TODOSTATUSHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''									
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + ' TODOSTATUSHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''									
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
									END
									
									
									SELECT @v_query = 'Insert into EXCEPTIONHISTORYTABLE Select * from ' +  @dblinkString + '.EXCEPTIONHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''									
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
									END
									
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + ' EXCEPTIONHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''									
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
									END
									
									/* Adding changes for archival task */
									
									IF( UPPER(@v_moveTaskData) = 'Y')
									BEGIN
										SELECT @v_query = 'Insert into WFTASKSTATUSHISTORYTABLE Select * from ' +  @dblinkString + '.WFTASKSTATUSHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END
										
										SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + ' WFTASKSTATUSHISTORYTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END
									
										SELECT @v_query = 'Insert into WFRTTASKINTFCASSOCHISTORY Select * from ' +  @dblinkString + '.WFRTTASKINTFCASSOCHISTORY where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END
										
										SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + ' WFRTTASKINTFCASSOCHISTORY where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END
									
										SELECT @v_query = 'Insert into RTACTIVITYINTFCASSOCHISTORY Select * from ' +  @dblinkString + '.RTACTIVITYINTFCASSOCHISTORY where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END
										
										SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + ' RTACTIVITYINTFCASSOCHISTORY where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END
										
										SELECT @v_query = 'Insert into WFCaseSummaryDetailsHistory Select * from ' +  @dblinkString + '.WFCaseSummaryDetailsHistory where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END
										
										SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + ' WFCaseSummaryDetailsHistory where processinstanceid = '+''''+ @v_processInstanceId + ''''									
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
											CLOSE v_qhtcursor 
											DEALLOCATE v_qhtcursor 
											ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										END

									END
									
									/* Adding changes for archival task ends here */
		
									IF(( ( @v_variantId = 0 ) OR ( @v_variantId = -1 ) ) AND ( @v_moveExtData = 'Y'))
									BEGIN
										IF( @v_externalTableCount > 0 )
										BEGIN
											SELECT @v_query = 'INSERT INTO ' + @v_externalTable + ' SELECT * FROM ' + @dblinkString + '.' + @v_externalTable + ' WHERE ITEMINDEX = ' + @v_folderIndex
											--Insert into WFMigrationLogTable values (@executionLogId,getdate(), 'INsert query for external table : ' + @v_query)
											EXECUTE(@v_query)
											
											IF (@@error <> 0)
											BEGIN
												INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
												CLOSE v_qhtcursor 
												DEALLOCATE v_qhtcursor 
												ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
											END
									
											SELECT @v_query = 'DELETE FROM ' +  @dblinkString + '.' + @v_externalTable + ' WHERE ITEMINDEX = ' + @v_folderIndex
											EXECUTE(@v_query)
											
											IF (@@error <> 0)
											BEGIN
												INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
												CLOSE v_qhtcursor 
												DEALLOCATE v_qhtcursor 
												ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
											END
											
										END
										
										/* Adding logic to move external history tables */
										IF ( @v_externalTableHistoryCount > 0)
										BEGIN
											SELECT @v_query = 'INSERT INTO ' + @v_externalTableHistory + ' SELECT * FROM ' + @dblinkString + '.' + @v_externalTableHistory + ' WHERE ITEMINDEX = ' + @v_folderIndex
											--Insert into WFMigrationLogTable values (@executionLogId,getdate(), 'INsert query for external history table : ' + @v_query)
											EXECUTE(@v_query)
											
											IF (@@error <> 0)
											BEGIN
												INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
												CLOSE v_qhtcursor 
												DEALLOCATE v_qhtcursor 
												ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
											END
									
											SELECT @v_query = 'DELETE FROM ' +  @dblinkString + '.' + @v_externalTableHistory + ' WHERE ITEMINDEX = ' + @v_folderIndex
											EXECUTE(@v_query)
											
											IF (@@error <> 0)
											BEGIN
												INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
												CLOSE v_qhtcursor 
												DEALLOCATE v_qhtcursor 
												ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
											END	
										END
										/* Adding external logic ends here */
									END
									
									IF(@v_moveExtData='Y') 
									BEGIN
										EXEC WFMoveComplexData @v_processInstanceId,@v_processDefId,@v_variantId,@v_sourceCabinet,@v_targetCabinet,@dblinkString,'Y',@executionLogId
									END
									
									IF( (@v_moveAuditTrailData != 'N') AND (@v_moveAuditTrailData != 'n') )
									BEGIN
										EXEC WFMoveHistoryAuditTrailData @v_processInstanceId,@v_processDefId,@v_sourceCabinet,@v_targetCabinet,@dblinkString,@v_fromDate,@v_toDate,@executionLogId
									END
									IF(@@error <> 0)
									Begin
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveQueueHistoryData] Error in execution of  WFMoveHistoryAuditTrailData')
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
										RETURN
									End
									
									EXEC MoveDocdb @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_folderIndex,'Y','N',@newFolderIndex,@v_folderStatus,@v_DeleteFromSrc
									IF(@@error <> 0)
									Begin
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId ,  ' [WFMoveQueueHistoryData] Error in execution of  MoveDocdb')
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
										RETURN
									End
									
									IF (@v_folderStatus <> 0) 
									BEGIN
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId ,  'ERROR CODE WHILE MIGRTAING FOLDER ' + @v_folderIndex + 'IS' + @v_folderStatus)
										CLOSE v_qhtcursor 
										DEALLOCATE v_qhtcursor 
										ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
										RETURN
									END
									
							END ----------------------------------------------IF INSIDE 2ND WHILE
							
							FETCH NEXT FROM v_qhtcursor INTO @v_processInstanceId,@v_folderIndex
							IF(@@error <> 0)
								Begin
									INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId ,  ' [WFMoveQueueHistoryData] Error in opening v_qhtcursor cursor query')
									CLOSE v_qhtcursor 
									DEALLOCATE v_qhtcursor 
									ROLLBACK TRANSACTION MOVE_QUEUE_HISTORY_DATA
									--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
									RETURN
								End
							SELECT @rowCount = @rowCount + 1
						END---------------------------------------End 2nd while
						
					INSERT INTO WFTxnDataMigrationProgressLog VALUES(@executionLogId , GETDATE() , @v_ProcessDefId, @v_firstProcessInstanceId ,@v_lastProcessInstanceId)
					
					COMMIT TRANSACTION MOVE_QUEUE_HISTORY_DATA ------------------------------Move Trans Data COMMITS Here
					
					CLOSE v_qhtcursor  -----------not present in oracle sp
					DEALLOCATE v_qhtcursor 
					
					IF(@v_rowCounter=0) 
					BEGIN
						--EXIT
						BREAK
					END
					
				END---------------------------------------WHILE (1=1) endS
				
			END -------------------------OUTERMOST IF ENDS
			
			PRINT 'WFMoveQueueHistoryData execoted successfully for processdefid --' + CONVERT(VARCHAR(10),@v_processDefId)
			
			FETCH NEXT FROM tableVarCursor INTO  @v_processDefId , @v_variantId
			IF(@@error <> 0)
			BEGIN
				INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId ,  ' [WFMoveQueueHistoryData] Error in fetching from tableVarCursor cursor query')
				CLOSE tableVarCursor 
				DEALLOCATE tableVarCursor 
				--RAISERROR('Error in WFMoveQueueHistoryData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			END
			
			
		END ---------------------OUTERMOST WHILE ENDS
		CLOSE tableVarCursor
		DEALLOCATE tableVarCursor

	END

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMoveTransData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 23 MAY 2014
	Description                 : Stored Procedure To Move Transactional Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	21/9/2017	Ambuj			Added the changes for Archiving the case management tables
	____________________________________________________________________________________*/
	
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveTransData')
	Begin
		Execute('DROP PROCEDURE WFMoveTransData')
		Print 'Procedure WFMoveTransData already exists, hence older one dropped ..... '
	End

	go

	Create Procedure WFMoveTransData
	(	 
		@v_sourceCabinet      			VARCHAR(256),
		@v_targetCabinet      			VARCHAR(256),
		@dblinkString          			VARCHAR(256),
		@tableVariableMap 				Process_Variant_Type READONLY,
		@v_migrateAllProcesses			VARCHAR(1),
		@v_fromDate           			VARCHAR(256),
		@v_toDate			 			VARCHAR(256),
		@v_batchSize					INT,
		@v_moveAuditTrailData 			VARCHAR(1),
		@v_moveFromHistoryData 			VARCHAR(1),
		--@v_moveExternalTableData 		VARCHAR(1),
		--@v_moveComplexTableData		VARCHAR(1)	
		@v_moveExtData					VARCHAR(1),
		@v_filterProcessInstanceState	VARCHAR(256),
		@v_DeleteFromSrc				VARCHAR(1),
		@executionLogId					INT,
		@v_moveTaskData        		VARCHAR(1)	
		)

	AS

	BEGIN
		DECLARE @v_processDefId 			INT
		DECLARE @v_variantId				INT
		DECLARE @variantName				VARCHAR(256)
		DECLARE @v_variantTableName 		VARCHAR(256)
		DECLARE @v_processInstanceId 		NVARCHAR(256)
		DECLARE @v_folderIndex 				NVARCHAR(256)
		DECLARE @v_workItemId         		INT
		DECLARE @v_lastWorkItemId     		INT
		DECLARE @v_localTableVariableMap    AS Process_Variant_Type
		DECLARE @v_query              		NVARCHAR(4000)
		DECLARE @v_queryStr           		NVARCHAR(2000)
		DECLARE @v_externalTable      		VARCHAR(255)
		DECLARE @v_externalTableCount 		INT
		DECLARE @v_itemIndex          		INT
		DECLARE @existsFlag           		INT
		DECLARE @v_folderStatus       		INT
		DECLARE @v_tempQuery				NVARCHAR(1000)
		DECLARE @v_queryParameter  			NVARCHAR(256)
		DECLARE @v_queryParam  			    NVARCHAR(256)
		DECLARE @variantFilterString		NVARCHAR(256)
		DECLARE @v_tableName				VARCHAR(50)
		DECLARE @v_CountQuery				NVARCHAR(2000)
		DECLARE @v_firstProcessInstanceId	NVARCHAR(256)
		DECLARE @v_rowCounter				INT
		DECLARE @v_genIndex					INT
		DECLARE @newFolderIndex				INT
		DECLARE @rowCount					INT
		DECLARE @v_lastProcessInstanceId	NVARCHAR(256)
		DECLARE @colStr						VARCHAR(2000)
		DECLARE @v_count						INT
		DECLARE @v_colName 					NVARCHAR(4000)
		DECLARE @v_column 					NVARCHAR(100)

		IF(@v_migrateAllProcesses='Y')
		BEGIN
			SELECT @v_query = 'SELECT ProcessDefId from ProcessDefTable'
			EXECUTE('DECLARE v_processCursor CURSOR  FAST_FORWARD for ' + @v_query)
		
			IF(@@error <> 0)
			Begin
				PRINT ' [WFMoveTransData] Error in executing v_processCursor cursor query'
				CLOSE v_processCursor 
				DEALLOCATE v_processCursor 
				--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			End
		
			OPEN v_processCursor
		
			IF(@@error <> 0)
			Begin
				PRINT ' [WFMoveTransData] Error in opening v_processCursor cursor query'
				CLOSE v_processCursor 
				DEALLOCATE v_processCursor 
				--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			End
		
			FETCH NEXT FROM v_processCursor INTO @v_processDefId
			IF(@@error <> 0)
			Begin
				PRINT ' [WFMoveTransData] Error in fetchong from  v_processCursor cursor query'
				CLOSE v_processCursor 
				DEALLOCATE v_processCursor 
				--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			End
			WHILE( @@FETCH_STATUS <> -1 ) 
			BEGIN
				IF( @@FETCH_STATUS <> -2 )
				BEGIN
					insert into  @v_localTableVariableMap (ProcessDefid,ProcessVariantID) values (  CONVERT(NVarchar(10),@v_processdefid) , 0)
				END
				FETCH NEXT FROM v_processCursor INTO @v_processDefId
				IF(@@error <> 0)
				BEGIN
					PRINT ' [WFMoveTransData] Error in fetchong from  v_processCursor cursor query'
					CLOSE v_processCursor 
					DEALLOCATE v_processCursor 
					--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
					RETURN
				END
			
			END
			
			CLOSE v_processCursor 
			DEALLOCATE v_processCursor 
			
		END
		ELSE
		BEGIN
			INSERT INTO @v_localTableVariableMap SELECT * FROM @tableVariableMap
		END
		
		
		Declare tableVarCursor  CURSOR FAST_FORWARD FOR Select ProcessDefId,ProcessVariantID From @v_localTableVariableMap
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMoveTransData] Error in declaring tableVarCursor cursor query'
			CLOSE tableVarCursor 
			DEALLOCATE tableVarCursor 
			--ROLLBACK TRANSACTION MOVE_TRANS_DATA
			--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
			RETURN
		End
		
		Open tableVarCursor
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMoveTransData] Error in opening tableVarCursor cursor query'
			CLOSE tableVarCursor 
			DEALLOCATE tableVarCursor
			--ROLLBACK TRANSACTION MOVE_TRANS_DATA
			--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
			RETURN
		End
		
		FETCH NEXT FROM tableVarCursor INTO @v_processDefId , @v_variantId
		IF(@@error <> 0)
		Begin
			PRINT ' [WFMoveTransData] Error in fetching from tableVarCursor cursor query'
			CLOSE tableVarCursor 
			DEALLOCATE tableVarCursor 
			--ROLLBACK TRANSACTION MOVE_TRANS_DATA
			--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
			RETURN
		End
		
		WHILE(@@FETCH_STATUS <> -1) ---------------------OUTERMOST WHILE BEGIN
		BEGIN
			IF (@@FETCH_STATUS <> -2) -------------------------OUTERMOST IF BEGIN
			BEGIN
				PRINT 'ProcessDefId ----' +  CONVERT(NVarchar(10),@v_ProcessDefId) + ', ProcessVariantID ----' + CONVERT(NVarchar(10),@v_variantId)
				SELECT @v_externalTable = ''
				IF( ( @v_variantId = 0 ) AND ( @v_moveExtData = 'Y' ))
				BEGIN
					SELECT @v_query = 'SELECT @value =   TABLENAME FROM ' + @dblinkString + '.EXTDBCONFTABLE WHERE PROCESSDEFID = ' +  CONVERT(NVarchar(10),@v_ProcessDefId) + 'AND EXTOBJID = 1' 
					SELECT @v_queryParameter = '@value  NVARCHAR(256) OUTPUT'
					EXEC sp_executesql @v_query, @v_queryParameter, @value = @v_externalTable OUTPUT
					
					SELECT @v_query = ' SELECT @value = COUNT(TABLENAME) FROM ' + @dblinkString + '.EXTDBCONFTABLE  WHERE PROCESSDEFID = ' +  CONVERT(NVarchar(10),@v_ProcessDefId) + 'AND EXTOBJID = 1'
					SELECT @v_queryParam = '@value INT OUTPUT'
					EXEC sp_executesql @v_query, @v_queryParam, @value = @v_externalTableCount OUTPUT
				END
				
				IF( @v_variantId  = 0 )
				BEGIN
					SELECT @variantFilterString = ''
				END
				ELSE
				BEGIN
					SELECT @variantFilterString = ' AND A.PROCESSVARIANTID = ' + CONVERT(NVarchar(10),@v_variantId)
				END
				
				WHILE(1 = 1)---------------------------------------WHILE (1=1) BEGINS
				BEGIN
					
					SELECT @v_query = 'SELECT TOP ' + CONVERT (NVARCHAR(10),@v_batchSize) +' A.PROCESSINSTANCEID , A.VAR_REC_1 FROM ' + @dblinkString + '.' + 'WFINSTRUMENTTABLE A WITH (NOLOCK)  WHERE A.PROCESSDEFID = ' + CONVERT (NVARCHAR(10),@v_ProcessDefId) + @variantFilterString + 
					' AND A.CREATEDDATETIME > CONVERT(DATETIME, ' + '''' + @v_fromDate + '''' + ')'+' AND  A.CREATEDDATETIME < CONVERT( DATETIME,' + '''' + @v_toDate + +''''+')
					 AND ' + @v_filterProcessInstanceState + ' ORDER BY PROCESSINSTANCEID '

					 --------------Storing no of instances fetched from batch in  v_rowCounter --------
					SELECT @v_CountQuery = ' SELECT @value = COUNT (*) FROM  ( ' + @v_query + ')b'
					SELECT @v_queryParam = '@value INT OUTPUT'
					EXEC sp_executesql @v_CountQuery, @v_queryParam, @value = @v_rowCounter OUTPUT
					
					IF(@v_rowCounter=0) 
					BEGIN
						BREAK
					END

					EXECUTE ('DECLARE v_cursor CURSOR FAST_FORWARD FOR ' + @v_query)
					IF(@@error <> 0)
					Begin
						PRINT ' [WFMoveTransData] Error in declaring v_cursor cursor query'
						CLOSE v_cursor 
						DEALLOCATE v_cursor 
						--ROLLBACK TRANSACTION MOVE_TRANS_DATA
						--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
						RETURN
					End
		
					OPEN v_cursor
					IF(@@error <> 0)
					Begin
						INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData]Error in opening v_cursor cursor query')
						CLOSE v_cursor 
						DEALLOCATE v_cursor 
						--ROLLBACK TRANSACTION MOVE_TRANS_DATA
						--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
						RETURN
					End
					
					FETCH NEXT FROM v_cursor INTO @v_processInstanceId,@v_folderIndex
					
					IF(@@error <> 0)
					Begin
						INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error IS in opening v_cursor cursor query')
						CLOSE v_cursor 
						DEALLOCATE v_cursor 
						--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
						RETURN
					End
					
					--------COPYING DATA FOR A BATCH AND COMMITING IT ------------
					
					SELECT @rowCount = 1
					BEGIN TRANSACTION MOVE_TRANS_DATA ------------------------------Move Trans Data Begins Here
						WHILE(@@FETCH_STATUS <> -1) --------------2nd while
						BEGIN
							IF (@@FETCH_STATUS <> -2) ------------------------IF INSIDE 2ND WHILE
							BEGIN	
									IF( @v_folderIndex = NULL )
									BEGIN
										--  v_lastInstanceId:=v_processInstanceId
										CONTINUE
									END 
									
									IF(@rowCount = 1)
									BEGIN
										SELECT @v_firstProcessInstanceId = @v_processInstanceId
									END
									ELSE IF(@rowCount = @v_batchSize)
									BEGIN
										SELECT @v_lastProcessInstanceId = @v_processInstanceId
									END

									/*Changes for moving data from WFINSTRUMENTTABLE to QUEUEHISTORYTABLE starts from here */
									--Steps : Get the common columns
									--Instert into the queuehistory table from wfinstruments table for the common columns 
									
									SELECT @v_query = 'INSERT INTO WFTxnDataMigrationLogTable (executionLogId, ProcessDefId, ProcessInstanceId, Status,ActionStartDateTime)
									VALUES (' + cast(@executionLogId as varchar(10)) + ',' +  cast(@v_ProcessDefId as varchar(10)) + ',''' + @v_processInstanceId + ''',''S'',''' +  CONVERT(VARCHAR(23), GETDATE(), 121) + ''')'
									
									EXECUTE(@v_query)
									IF(@@error <> 0)
									Begin
										PRINT ' [WFMoveTransData] Error while inserting data in WFTxnDataMigrationLogTable with Status S'
										CLOSE v_columnCursor 
										DEALLOCATE v_columnCursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , '[WFMoveTransData] Error while inserting data in WFTxnDataMigrationLogTable with Status S')
										RETURN
									End
									
									BEGIN
										SELECT @v_query = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''QUEUEHISTORYTABLE'' INTERSECT SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''WFINSTRUMENTTABLE'''
										
										EXECUTE('DECLARE v_columnCursor CURSOR  FAST_FORWARD for ' + @v_query)
										IF(@@error <> 0)
										Begin
											PRINT ' [WFMoveTransData] Error in executing v_columnCursor cursor query'
											CLOSE v_columnCursor 
											DEALLOCATE v_columnCursor 
											--RAISERROR('Error in WFMoveTransData Error in executing v_columnCursor cursor query', 16, 1) 
											RETURN
										End
										
										OPEN v_columnCursor
											
										IF(@@error <> 0)
										Begin
											PRINT ' [WFMoveTransData] Error in opening v_columnCursor cursor query'
											CLOSE v_columnCursor 
											DEALLOCATE v_columnCursor 
											--RAISERROR('Error in WFMoveTransData Error in executing v_columnCursor cursor query', 16, 1) 
											RETURN
										End
																			
										FETCH NEXT FROM v_columnCursor INTO @v_column
										IF(@@error <> 0)
										Begin
											PRINT ' [WFMoveTransData] Error in fetchong from  v_columnCursor cursor query'
											CLOSE v_columnCursor 
											DEALLOCATE v_columnCursor 
											--RAISERROR('Error in WFMoveTransData Error in executing v_columnCursor cursor query', 16, 1) 
											RETURN
										End
										SELECT @v_colName = ''

										WHILE( @@FETCH_STATUS <> -1 ) 
										BEGIN
											IF( @@FETCH_STATUS <> -2 )
											BEGIN
												IF(@v_column <> '')
												BEGIN
													IF(@v_colName <> '')
													BEGIN
														SELECT @v_colName = @v_colName + ',' + @v_column
													END
													ELSE
													BEGIN
														SELECT @v_colName = @v_column
													END
												END
											END
											FETCH NEXT FROM v_columnCursor INTO @v_column
											IF(@@error <> 0)
											BEGIN
												PRINT ' [WFMoveTransData] Error in fetchong from  v_columnCursor cursor query'
												CLOSE v_columnCursor 
												DEALLOCATE v_columnCursor 
												--RAISERROR('Error in WFMoveTransData Error in executing v_columnCursor cursor query', 16, 1) 
												RETURN
											END
										END
										CLOSE v_columnCursor 
										DEALLOCATE v_columnCursor
										PRINT @v_colName
									END

									SELECT @v_query = 'Insert into QUEUEHISTORYTABLE' + '(' + @v_colName + ')' + ' Select ' + @v_colName + ' from ' +  @dblinkString + '.WFINSTRUMENTTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''
									PRINT @v_query
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										RETURN
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.WFINSTRUMENTTABLE where processinstanceid = ' + ''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Insert into TODOSTATUSHISTORYTABLE Select * from ' +  @dblinkString + '.TODOSTATUSTABLE where processinstanceid = '+''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
								
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'TODOSTATUSTABLE where processinstanceid = ' + ''''+ @v_processInstanceId +''''
									EXECUTE(@v_query)
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									/* Changes done upto here*/

									SELECT @v_query = 'Insert into EXCEPTIONHISTORYTABLE Select * from ' +  @dblinkString + '.EXCEPTIONTABLE where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'EXCEPTIONTABLE where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'WFREMINDERTABLE where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									EXECUTE GetColStr 'WFESCALATIONTABLE',@v_columnStr = @colStr OUTPUT
									SELECT @v_query = 'set IDENTITY_INSERT '  + @v_targetCabinet + '..WFESCALATIONTABLE ON' + ' Insert into WFESCALATIONTABLE ( ' + @colStr +' ) Select * from ' +  @dblinkString + '.WFESCALATIONTABLE where processinstanceid = '+''''+ @v_processInstanceId + '''' + ' set IDENTITY_INSERT '  + @v_targetCabinet + '.. WFESCALATIONTABLE OFF'
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'WFESCALATIONTABLE where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
						
									SELECT @v_query = 'Insert into WFESCINPROCESSTABLE Select * from ' +  @dblinkString + '.WFESCINPROCESSTABLE where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'WFESCINPROCESSTABLE where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_CountQuery = ' SELECT @value = COUNT(*) FROM  ' + @dblinkString + '.WFLINKSTABLE WHERE PARENTPROCESSINSTANCEID = ' + '''' + @v_processInstanceId + ''''
									SELECT @v_queryParam = '@value INT OUTPUT'
									EXEC sp_executesql @v_CountQuery, @v_queryParam, @value = @v_count OUTPUT
									IF( @v_count > 0 )
									BEGIN
										SELECT @v_query = 'UPDATE  ' + @dblinkString +'.WFLINKSTABLE SET IsParentArchived ='' Y '' WHERE PARENTPROCESSINSTANCEID = ' + '''' +
															@v_processInstanceId + ''''
										EXECUTE(@v_query)
										IF (@@error <> 0)
										BEGIN											
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
										
										SELECT @v_query = 'UPDATE  WFLINKSTABLE SET IsParentArchived ='' Y '' WHERE PARENTPROCESSINSTANCEID = ' + '''' +
															@v_processInstanceId + ''''
										EXECUTE(@v_query)
										IF (@@error <> 0)
										BEGIN											
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
									END
									
									SELECT @v_CountQuery = ' SELECT @value = COUNT(*)  FROM  ' +@dblinkString + '.WFLINKSTABLE WHERE CHILDPROCESSINSTANCEID = ' + '''' + @v_processInstanceId + ''''
									SELECT @v_queryParam = '@value INT OUTPUT'
									EXEC sp_executesql @v_CountQuery, @v_queryParam, @value = @v_count OUTPUT
									IF( @v_count > 0 )
									BEGIN
										SELECT @v_query = 'UPDATE  ' + @dblinkString +'.WFLINKSTABLE SET IsChildArchived ='' Y '' WHERE ChildProcessInstanceId = ' + '''' +
															@v_processInstanceId + ''''
										EXECUTE(@v_query)
										IF (@@error <> 0)
										BEGIN											
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
										
										SELECT @v_query = 'UPDATE  WFLINKSTABLE SET IsChildArchived = '' Y '' WHERE ChildProcessInstanceId = ' + '''' +
															@v_processInstanceId + ''''
										EXECUTE(@v_query)
										IF (@@error <> 0)
										BEGIN											
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
									END
									
									EXECUTE GetColStr 'WFCOMMENTSHISTORYTABLE',@v_columnStr = @colStr OUTPUT
									SELECT @v_query = 'set IDENTITY_INSERT '  + @v_targetCabinet + '..WFCOMMENTSHISTORYTABLE ON ' + ' Insert into WFCOMMENTSHISTORYTABLE ( ' + @colStr + ' ) Select * from ' +  @dblinkString + '.WFCOMMENTSTABLE where processinstanceid = '+''''+ @v_processInstanceId + '''' + ' set IDENTITY_INSERT '  + @v_targetCabinet + '.. WFCOMMENTSHISTORYTABLE OFF'
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + ' WFCOMMENTSTABLE where processinstanceid = ' ++''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									Print 'Checking the flag for ext data'
									print @v_moveExtData

									IF(( ( @v_variantId = 0 ) OR ( @v_variantId = -1 ) ) AND ( @v_moveExtData = 'Y'))
									BEGIN
										IF( @v_externalTableCount > 0 )
										BEGIN
											SELECT @v_query = 'INSERT INTO ' + @v_externalTable + ' SELECT * FROM ' + @dblinkString + '.' + @v_externalTable + ' WHERE ITEMINDEX = ' + @v_folderIndex
											EXECUTE(@v_query)
											
											SELECT @v_query = 'DELETE FROM ' +  @dblinkString + '.' + @v_externalTable + ' WHERE ITEMINDEX = ' + @v_folderIndex
											EXECUTE(@v_query)
											
										END
									END
									
									--Latest changes for new Case management features
									SELECT @v_query = 'Insert into WFCaseSummaryDetailsHistory Select * from ' +  @dblinkString + '.WFCaseSummaryDetailsTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'WFCaseSummaryDetailsTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END

									SELECT @v_query = 'Insert into WFCaseDocStatusHistoryTable Select * from ' +  @dblinkString + '.WFCaseDocStatusTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									
									SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'WFCaseDocStatusTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
									EXECUTE(@v_query)
									
									IF (@@error <> 0)
									BEGIN
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
									END
									--Latest changes for new Case management features
									
					/* Added for Case Management--Archival of task DATA */ 
									If(@v_moveTaskData='Y')
									BEGIN
										Select  @v_query = 'Insert into WFRTTASKINTFCASSOCHISTORY Select * from '+@dblinkString+'.WFRTTaskInterfaceAssocTable where ProcessInstanceId='''+@v_processInstanceId+''''
										EXECUTE(@v_query)
									    
										Select @v_query = 'Delete from ' +@dblinkString+'.WFRTTaskInterfaceAssocTable where ProcessInstanceId='''+@v_processInstanceId +''''
										EXECUTE(@v_query)
										
										Select 	@v_query = 'Insert into RTACTIVITYINTFCASSOCHISTORY Select * from ' +@dblinkString+'.RTACTIVITYINTERFACEASSOCTABLE where ProcessInstanceId='''+@v_processInstanceId+''''
										EXECUTE(@v_query)
										
										Select @v_query = 'Delete from ' +@dblinkString+'.RTACTIVITYINTERFACEASSOCTABLE where ProcessInstanceId='''+@v_processInstanceId +''''
										EXECUTE(@v_query)
										
										Select @v_query = 'Insert into WFTaskStatusHistoryTable Select * from ' +@dblinkString+'.WFTaskStatusTable where 
										ProcessInstanceId='''+@v_processInstanceId+''''
										EXECUTE(@v_query)
										
										Select @v_query = 'Delete from ' +@dblinkString+'.WFTaskStatusTable  where ProcessInstanceId='''+@v_processInstanceId+''''
										EXECUTE(@v_query)
										
										--Latest Changes for the new case management features
										SELECT @v_query = 'Insert into WFTaskPreCondResultHistory Select * from ' +  @dblinkString + '.WFTaskPreConditionResultTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
										
										SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'WFTaskPreConditionResultTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
										
										SELECT @v_query = 'Insert into WFTaskPreCheckHistoryTable Select * from ' +  @dblinkString + '.WFTaskPreCheckTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
										
										SELECT @v_query = 'Delete from ' +  @dblinkString + '.' + 'WFTaskPreCheckTable where processinstanceid = ' +''''+ @v_processInstanceId + ''''
										EXECUTE(@v_query)
										
										IF (@@error <> 0)
										BEGIN
											CLOSE v_cursor 
											DEALLOCATE v_cursor 
											ROLLBACK TRANSACTION MOVE_TRANS_DATA
											INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , @v_query)
										END
										--Latest changes for new Case Management features
									END
					/* End Of Case Management--Archival of task DATA */ 
									IF(@v_moveExtData='Y') 
									BEGIN
										EXEC WFMoveComplexData @v_processInstanceId,@v_processDefId,@v_variantId,@v_sourceCabinet,@v_targetCabinet,@dblinkString,'N',@executionLogId
									END
									IF(@@error <> 0)
									Begin										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error in execution of sp WFMoveComplexData ')
										--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
										RETURN
									End
									
									-----Custom Data Procedure starts---
									EXEC WFMoveCustomData @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_ProcessDefId ,@v_processInstanceId,@v_DeleteFromSrc
									IF(@@error <> 0)
									Begin										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error in execution of sp WFMoveCustomData ')
										--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
										RETURN
									End
									
									-----Custom Data Procedure ends---
									IF( (@v_moveAuditTrailData != 'N') AND (@v_moveAuditTrailData != 'n') )
									BEGIN
										EXEC WFMoveAuditTrailData @v_processInstanceId,@v_processDefId,@v_sourceCabinet,@v_targetCabinet,@dblinkString,@v_fromDate,@v_toDate,@executionLogId
									END
									IF(@@error <> 0)
									Begin										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error in execution of sp WFMoveAuditTrailData ')
										--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
										RETURN
									End
									
									EXEC MoveDocdb @v_sourcecabinet,@v_targetCabinet,@dblinkString,@v_folderIndex,'Y','N',@newFolderIndex,@v_folderStatus,@v_DeleteFromSrc
									IF(@@error <> 0)
									Begin										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error in execution of sp MoveDocdb ')
										--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
										RETURN
									End
									
									IF (@v_folderStatus <> 0) 
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , 'ERROR CODE WHILE MIGRTAING FOLDER ' + @v_folderIndex + 'IS' + @v_folderStatus)
										RETURN
									END
									
									UPDATE WFTxnDataMigrationLogTable SET Status='D',ActionEndDateTime = getdate() WHERE ProcessDefId = @v_ProcessDefId and ProcessInstanceId=@v_processInstanceId;
									IF (@@ROWCOUNT != 1) 
									BEGIN										
										CLOSE v_cursor 
										DEALLOCATE v_cursor 
										ROLLBACK TRANSACTION MOVE_TRANS_DATA
										INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , '[WFMoveTransData] Number of affected row(s) are either 0 or greater than 1 in WFTxnDataMigrationLogTable.')
										RETURN
									END
									
																		
							END ----------------------------------------------IF INSIDE 2ND WHILE
							
							FETCH NEXT FROM v_cursor INTO @v_processInstanceId,@v_folderIndex
							IF(@@error <> 0)
							Begin								
								CLOSE v_cursor 
								DEALLOCATE v_cursor 
								ROLLBACK TRANSACTION MOVE_TRANS_DATA
								INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error in opening v_cursor cursor query')
								--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
								RETURN
							End
							SELECT @rowCount = @rowCount + 1
						END---------------------------------------End 2nd while
	
					INSERT INTO WFTxnDataMigrationProgressLog VALUES(@executionLogId , GETDATE() , @v_ProcessDefId, @v_firstProcessInstanceId ,@v_lastProcessInstanceId)
					
					COMMIT TRANSACTION MOVE_TRANS_DATA ------------------------------Move Trans Data COMMITS Here
					
					CLOSE v_cursor  
					DEALLOCATE v_cursor 
					
				END---------------------------------------WHILE (1=1) endS
				
			END -------------------------OUTERMOST IF ENDS
			IF(@v_moveTaskData = 'Y') 
			BEGIN
				EXEC WFExportTaskTables @v_sourceCabinet, @v_targetCabinet, @dblinkString,@v_processDefId,'N',@executionLogId,'Y'
				EXEC WFMigrateTaskData @v_processDefId,@v_sourceCabinet,@v_targetCabinet,@dblinkString,@v_fromDate,@v_toDate
			END
			PRINT 'WFMoveTransData executed successfully for processdefid --' + CONVERT( NVARCHAR(10),@v_processDefId )
			
			FETCH NEXT FROM tableVarCursor INTO  @v_processDefId , @v_variantId
			IF(@@error <> 0)
			BEGIN
				INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error in fetching from tableVarCursor cursor query')
				CLOSE tableVarCursor 
				DEALLOCATE tableVarCursor 
				--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
				RETURN
			END
			
		END ---------------------OUTERMOST WHILE ENDS
		CLOSE tableVarCursor 
		DEALLOCATE tableVarCursor 
			
		
		--EXEC WFSynchLinksData @v_sourceCabinet , @v_targetCabinet ,@dblinkString,@executionLogId
		IF(@@error <> 0)
		BEGIN
			INSERT INTO WFFailedTxnDataMigrationLogTable VALUES (@executionLogId , GETDATE(), @v_ProcessDefId ,@v_processInstanceId , ' [WFMoveTransData] Error in execution of procdure WFSynchLinksData')
			--RAISERROR('Error in WFMoveTransData Error in executing v_processCursor cursor query', 16, 1) 
			RETURN
		END
			

	END

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : SetAndMigrateTransactionalData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 23 MAY 2014
	Description                 : Stored Procedure To Initialize Values To Start 
								  Transactional Data Migration
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'SetAndMigrateTransactionalData')
	Begin
		Execute('DROP PROCEDURE SetAndMigrateTransactionalData')
		Print 'Procedure SetAndMigrateTransactionalData already exists, hence older one dropped ..... '
	End

	go

	create Procedure SetAndMigrateTransactionalData
	(	 
		@v_sourceCabinet      		VARCHAR(256),
		@v_targetCabinet      		VARCHAR(256),
		@v_isDBLink			  		VARCHAR(1),
		@sourceMachineIp          	VARCHAR(256),
		@v_migrateAllProcesses		VARCHAR(1),
		@v_startDate           		VARCHAR(256),
		@v_endDate			 		VARCHAR(256),
		@v_batchSize				INT,
		@v_moveAuditTrailData 		VARCHAR(1),
		@v_moveFromHistoryData 		VARCHAR(1),
		@v_moveExtData				VARCHAR(1),
		@v_DeleteFromSrc			VARCHAR(1),    /* Required for MoveDocDb whether Data has to be deleted from source or not */
		@v_moveTaskData        		VARCHAR(1)	
		--@v_moveExternalTableData 	VARCHAR(1),
		--@v_moveComplexTableData		VARCHAR(1),
		
		)

	AS

	BEGIN
		
		SET NOCOUNT ON
		
		DECLARE @createdDateTime				DATETIME
		Declare @tableVariableMap 				AS Process_Variant_Type
		Declare @dblinkString 					NVARCHAR(256)
		Declare @Id 							Int
		Declare @PVId 							Int
		Declare @v_filterProcessInstanceState  	NVARCHAR(256)
		Declare @days 							Int
		Declare @v_query						NVARCHAR(2000)
		Declare @paramDefinition				NVARCHAR(256)
		DECLARE @executionLogId					INT
		Declare @tableVarRemarks				VARCHAR(4000)
		Declare @v_remarks 						VARCHAR(Max)
		Declare @countData						INT
		Declare @tableName						NVARCHAR(100)
		
		SELECT @days = DATEDIFF( dd,@v_endDate,GETDATE())
		IF ( @days <= 15 )
		BEGIN
			Print 'Please Check : End Date cannot be greter than current date - 15 days'
			Return
		END
		
		select @days = DATEDIFF (dd,@v_startDate,@v_endDate)
		if(@days <= 0 )
		BEGIN
			Print 'Please Check : End date cannot be less than or equal to Start date .'
			Return 
		END
		
		IF(@v_isDBLink = 'Y' )
		BEGIN
			SELECT @dblinkString = '[' + @sourceMachineIp + '].'+ @v_sourcecabinet +'.dbo' 
		END
		ELSE
		BEGIN
			SELECT @dblinkString = @v_sourcecabinet + '.'
		END
		
		Select @tableVarRemarks = ''
		--Populate our SourceIDMap variable (dummy select statement for now).
		insert into @tableVariableMap(ProcessDefid,ProcessVariantID) values (95,0)
		--insert into @tableVariableMap(ProcessDefid,ProcessVariantID) values (3,2)


		--Print out contents of collection
		Declare NewCursor  CURSOR FAST_FORWARD FOR Select ProcessDefId,ProcessVariantID From @tableVariableMap
		Open NewCursor
		FETCH NEXT FROM NewCursor INTO @Id , @PVId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			PRINT 'ProcessDefId'
			PRINT  @Id
			PRINT 'ProcessVariantID'
			FETCH NEXT FROM NewCursor INTO  @Id , @PVId
			PRINT  @PVId
		END
		Close NewCursor
		
		IF(@v_startDate IS NULL)
		BEGIN
			IF(@v_moveFromHistoryData = 'Y')
			BEGIN
				SELECT @tableName = ' QUEUEHISTORYTABLE '
			END
			ELSE
			BEGIN
				SELECT @tableName = ' WFINSTRUMENTTABLE '
			END
			
			Select @v_query = ' Select @countDataOut = Count(*) from ' +@dblinkString +'.'+@tableName
			set @paramDefinition = N'@countDataOut INT OUTPUT '
			exec sp_executesql @v_query,@paramDefinition,@countDataOut = @countData OUTPUT
			
			IF(@countData = 0)
			BEGIN
				Print 'Please Check : There is no data in ' + @tableName +' to migrate .'
				RETURN
			END
			
			SELECT @v_query = 'select @createdDateTimeOut = min(createddatetime) from '+@dblinkString +
							 '.'+@tableName
			set @paramDefinition = N'@createdDateTimeOut datetime OUTPUT '
			exec sp_executesql @v_query,@paramDefinition,@createdDateTimeOut = @createdDateTime OUTPUT
			SELECT @v_startDate =  LEFT(CONVERT(VARCHAR, @createdDateTime, 120), 10)
		END
		
		IF(@v_endDate IS NULL)
		BEGIN
			SELECT @createdDateTime =   DateAdd(yy, -1, GetDate())
			SELECT @v_endDate =  LEFT(CONVERT(VARCHAR, @createdDateTime, 120), 10)
		END
		
		
		INSERT INTO getnerateLogId DEFAULT VALUES
		SELECT @executionLogId =  max(id) from  getnerateLogId
		SELECT @v_remarks =  'Transactional Execution Begins with following parameters --> v_sourceCabinet : ' + @v_sourceCabinet + ' , v_targetCabinet : ' + @v_targetCabinet + ' , v_isDBLink : ' + @v_isDBLink  + ' , sourceMachineIp : '+ @sourceMachineIp + ' , v_migrateAllProcesses : ' + @v_migrateAllProcesses + ' , v_startDate : ' + @v_startDate + '  , v_endDate : ' + @v_endDate + ' ,  batchSize : ' + Convert(Nvarchar(10),@v_batchSize) + ' , v_moveAuditTrailData : ' + @v_moveAuditTrailData + ' , v_moveFromHistoryData : ' + @v_moveFromHistoryData + ' , v_moveExtData : ' + @v_moveExtData + ' , v_DeleteFromSrc : ' + @v_DeleteFromSrc + ' , tableVariable : ' + @tableVarRemarks + ' ,  dblinkString : ' + @dblinkString
		
		Insert into WFMigrationLogTable values (@executionLogId,getdate(),@v_remarks)
		
		IF(@v_moveFromHistoryData = 'Y')
		BEGIN
			EXEC WFMoveQueueHistoryData @v_sourceCabinet,@v_targetCabinet,@dblinkString,@tableVariableMap,@v_migrateAllProcesses,@v_startDate,@v_endDate,@v_batchSize,@v_moveAuditTrailData,@v_moveExtData,@v_DeleteFromSrc,@v_moveTaskData,@executionLogId
		END
		ELSE
		BEGIN
			--------migrate processinstanceid with state = 6 ---------
			SELECT @v_filterProcessInstanceState = ' PROCESSINSTANCESTATE = 6 '
			EXEC WFMoveTransData @v_sourceCabinet,@v_targetCabinet,@dblinkString,@tableVariableMap ,@v_migrateAllProcesses,@v_startDate,@v_endDate,@v_batchSize,@v_moveAuditTrailData,@v_moveFromHistoryData,@v_moveExtData,@v_filterProcessInstanceState,@v_DeleteFromSrc,@executionLogId,@v_moveTaskData
			
			--------migrate processinstanceid with state = 4,5 ---------
			SELECT @v_filterProcessInstanceState = ' PROCESSINSTANCESTATE IN (4,5) '
			EXEC WFMoveTransData @v_sourceCabinet,@v_targetCabinet,@dblinkString,@tableVariableMap ,@v_migrateAllProcesses,@v_startDate,@v_endDate,@v_batchSize,@v_moveAuditTrailData,@v_moveFromHistoryData,@v_moveExtData,@v_filterProcessInstanceState,@v_DeleteFromSrc,@executionLogId,@v_moveTaskData
		END

	END

go

/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFPopulateTxnCabinetTableList.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 26 MAY 2014
	Description                 : Stored Procedure To Populate Table List Invovled in 
								  Cabinet Level Transactional Data migration
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/


	If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'WFPopulateTxnCabinetTableList')
	Begin
		Execute('DROP PROCEDURE WFPopulateTxnCabinetTableList')
		Print 'Procedure WFPopulateTxnCabinetTableList already exists, hence older one dropped ..... '
	End

	go


	CREATE Procedure WFPopulateTxnCabinetTableList
	(
		@v_targetCabinet VARCHAR(256)
	)AS
	BEGIN
		DECLARE @v_query VARCHAR(4000)
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFTXNCABINETBLELIST VALUES(''SummaryTable'',''N'') '
		EXECUTE(@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFTXNCABINETBLELIST VALUES(''WFActivityReportTable'',''N'') '
		EXECUTE(@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFTXNCABINETBLELIST VALUES(''WFRecordedChats'',''N'') '
		EXECUTE(@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFTXNCABINETBLELIST VALUES(''WFUserRatingLogTable'',''N'') '
		EXECUTE(@v_query)
		
		SELECT @v_query = 'INSERT INTO ' + @v_targetCabinet + '..WFTXNCABINETBLELIST VALUES(''WFMailQueueHistoryTable'',''N'') '
		EXECUTE(@v_query)
	END

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMoveTxnCabinetData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 26 MAY 2014
	Description                 : Stored Procedure To Move Cabinet Level Transactional Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/

	
	If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'WFMoveTxnCabinetData')
	Begin
		Execute('DROP PROCEDURE WFMoveTxnCabinetData')
		Print 'Procedure WFMoveTxnCabinetData already exists, hence older one dropped ..... '
	End

	go


	CREATE Procedure WFMoveTxnCabinetData(
		@v_sourceCabinet VARCHAR(256),
		@v_targetCabinet VARCHAR(256),
		@v_tableName	 VARCHAR(256),
		@dblinkString	 VARCHAR(256),
		@v_beforeDate	 VARCHAR(256)
	)
	AS
	BEGIN
		DECLARE @v_query 			NVARCHAR(2000)
		DECLARE @v_ColStr 			VARCHAR(4000)
		DECLARE @v_columnName		VARCHAR(256)
		DECLARE @existsFlag			INT 	
		DECLARE @v_rowCounter		INT
		DECLARE @v_filterString		VARCHAR(4000)
		DECLARE @v_orderByString	VARCHAR(4000)
		DECLARE @v_queryParameter   NVARCHAR(256)
		
		SELECT @v_filterString  = ''
		SELECT @v_orderByString = ''
		
		IF( (UPPER(@v_tableName) = 'SUMMARYTABLE') OR (UPPER(@v_tableName) = 'WFACTIVITYREPORTTABLE') )
		BEGIN
			SELECT @v_filterString  = ' WHERE ACTIONDATETIME < CONVERT(DATETIME, ' + '''' + @v_beforeDate + '''' + ')'
			SELECT @v_orderByString = ' ORDER BY ACTIONDATETIME'
		END
		ELSE IF(Upper(@v_tableName) = 'WFRECORDEDCHATS')
		BEGIN
			SELECT @v_filterString  = ' WHERE SAVEDAT < CONVERT(DATETIME, ' + '''' + @v_beforeDate + '''' + ')'
			SELECT @v_orderByString = ' ORDER BY SAVEDAT'
		END
		ELSE IF (Upper(@v_tableName) = 'WFUSERRATINGLOGTABLE') 
		BEGIN
			SELECT @v_filterString  = ' WHERE RATINGDATETIME < CONVERT(DATETIME, ' + '''' + @v_beforeDate + '''' + ')'
			SELECT @v_orderByString = ' ORDER BY RATINGDATETIME'
		END
		ELSE IF (Upper(@v_tableName) = 'WFMAILQUEUEHISTORYTABLE') 
		BEGIN
			SELECT @v_filterString  = ' WHERE SUCCESSTIME < CONVERT(DATETIME, ' + '''' + @v_beforeDate + '''' + ')'
			SELECT @v_orderByString = ' ORDER BY SUCCESSTIME'
		END
		
		WHILE (1 = 1)
		BEGIN
			BEGIN TRANSACTION Move_Txn_Cabinet_Data
				SELECT @v_query = ' SELECT @value = COUNT(*) FROM ( SELECT TOP 100 * FROM ' + @dblinkString + '. ' +@v_tableName + @v_filterString + @v_orderByString + ' ) A '
				SELECT @v_queryParameter = '@value INT OUTPUT'
				EXEC sp_executesql @v_query, @v_queryParameter, @value = @v_rowCounter OUTPUT
				IF(@@ERROR <> 0 )
				BEGIN
					PRINT 'Error in execution of ' + @v_query
					ROLLBACK TRANSACTION Move_Txn_Cabinet_Data
					RETURN
				END
				IF(@v_rowCounter = 0)
				BEGIN
					COMMIT TRANSACTION 
					break
				END
				
				IF(@v_tableName = 'WFUserRatingLogTable')
				BEGIN
					SELECT @v_query =  'set IDENTITY_INSERT '  + @v_targetCabinet + '..' + @v_tableName + ' ON INSERT INTO ' + @v_tableName + '(RatingLogId,RatingToUser,RatingByUser,SkillId,Rating,RatingDateTime,Remarks) SELECT TOP 100 * FROM ' + @dblinkString + '.' + @v_tableName + @v_filterString + @v_orderByString + ' set IDENTITY_INSERT '  + @v_targetCabinet + '..' + @v_tableName + ' OFF'
				END
				ELSE
				BEGIN
					SELECT @v_query = 'INSERT INTO ' + @v_tableName + ' SELECT TOP 100 * FROM ' + @dblinkString + '.' + @v_tableName + @v_filterString + @v_orderByString
				END
				EXECUTE (@v_query)
				IF(@@ERROR <> 0 )
				BEGIN
					PRINT 'Error in execution of ' + @v_query
					ROLLBACK TRANSACTION Move_Txn_Cabinet_Data
					RETURN
				END
				
				SELECT @v_query = 'DELETE TOP ( 100 ) FROM ' + @dblinkString + '.' + @v_tableName + @v_filterString
				EXECUTE (@v_query)
				IF(@@ERROR <> 0 )
				BEGIN
					PRINT 'Error in execution of ' + @v_query
					ROLLBACK TRANSACTION Move_Txn_Cabinet_Data
					RETURN
				END
				
				SELECT @v_query = 'UPDATE ' + @v_targetCabinet + '..WFTXNCABINETBLELIST SET dataMigrationSuccessful = ''Y'' WHERE tableName = ' + '''' + @v_tableName + ''''
				EXECUTE (@v_query)
				
			COMMIT TRANSACTION Move_Txn_Cabinet_Data
		END
	END

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMigrateTxnCabinetData.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 26 MAY 2014
	Description                 : Stored Procedure To Migrate Cabinet Level Transactional Data
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/

	

	If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'WFMigrateTxnCabinetData')
	Begin
		Execute('DROP PROCEDURE WFMigrateTxnCabinetData')
		Print 'Procedure WFMigrateTxnCabinetData already exists, hence older one dropped ..... '
	End

	go


	CREATE Procedure WFMigrateTxnCabinetData(

		@v_sourceCabinet      VARCHAR(256),
		@v_targetCabinet      VARCHAR(256),
		@v_isDBLink			  VARCHAR(1),	
		@sourceMachineIp      VARCHAR(256),
		@v_beforeDate         VARCHAR(256)
	)
	AS
	BEGIN
		DECLARE @v_query 	  				VARCHAR(4000)
		DECLARE @v_query_Str  				VARCHAR(4000)
		DECLARE @v_tableId	  				INT
		DECLARE @v_tableName  				VARCHAR(256)
		DECLARE @v_dataMigrationSuccessful	VARCHAR(1)
		DECLARE @dblinkString				VARCHAR(256)
		
		IF(@v_isDBLink = 'Y' )
		BEGIN
			SELECT @dblinkString = '[' + @sourceMachineIp + '].'+ @v_sourcecabinet +'.dbo' 
		END
		ELSE
		BEGIN
			SELECT @dblinkString = @v_sourcecabinet + '.'
		END
		
		If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'U' and name = 'WFTXNCABINETBLELIST')
		Begin
			SELECT @v_query = 'Drop Table ' + @v_targetCabinet + '..WFTXNCABINETBLELIST'
			EXECUTE(@v_query)
		End
		
		IF(@@error <> 0)
		BEGIN
			PRINT 'Error in dropping table'
			Return
		END
		
		SELECT @v_query = 'Create Table ' + @v_targetCabinet + ' ..WFTXNCABINETBLELIST  (tableId INT Identity(1,1),tableName Varchar(256),dataMigrationSuccessful Varchar(1)) '
		EXECUTE(@v_query)
		
		IF(@@error <> 0)
		BEGIN
			PRINT 'Error in creating WFTXNCABINETBLELIST Table'
			Return
		END
		
		EXEC WFPopulateTxnCabinetTableList @v_targetCabinet
		IF(@@error <> 0)
		BEGIN
			PRINT 'Error in execution of SP WFPopulateTxnCabinetTableList '
			Return
		END
		
		SELECT @v_query = 'SELECT * FROM ' + @v_targetCabinet + '..WFTXNCABINETBLELIST '
		EXECUTE('DECLARE v_TableNameCursor CURSOR FAST_FORWARD FOR ' + @v_query)
		IF(@@error <> 0)
		BEGIN
			PRINT 'WFMigrateTxnCabinetDate : Error in declaring v_TableNameCursor'
			Return
		END
		
		OPEN v_TableNameCursor
		IF(@@error <> 0)
		BEGIN
			PRINT 'WFMigrateTxnCabinetDate : Error in opening v_TableNameCursor'
			ClOSE v_TableNameCursor
			DEALLOCATE v_TableNameCursor
			Return
		END
		
		FETCH NEXT FROM v_TableNameCursor INTO @v_tableId,@v_tableName,@v_dataMigrationSuccessful
		IF(@@error <> 0)
		BEGIN
			PRINT 'WFMigrateTxnCabinetDate : Error in fetching from  v_TableNameCursor'
			ClOSE v_TableNameCursor
			DEALLOCATE v_TableNameCursor
			Return
		END
		
		WHILE(@@FETCH_STATUS <> -1)
		BEGIN
			IF(@@FETCH_STATUS <> -2  )
			BEGIN
				IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME = @v_tableName)
				BEGIN
					EXEC WFMoveTxnCabinetData @v_sourceCabinet,@v_targetCabinet, @v_tableName,@dblinkString,@v_beforeDate
					IF(@@error <> 0)
					Begin
						PRINT ' [WFMigrateTxnCabinetData] Error in execution of WFMoveTxnCabinetData'
						CLOSE v_TableNameCursor 
						DEALLOCATE v_TableNameCursor 
						--RAISERROR('Error in WFMigrateTxnCabinetData Error in execution of WFMoveTxnCabinetData', 16, 1) 
						RETURN
					End
				END
			END
			
			FETCH NEXT FROM v_TableNameCursor INTO @v_tableId,@v_tableName,@v_dataMigrationSuccessful
			IF(@@error <> 0)
			BEGIN
				PRINT 'WFMigrateTxnCabinetDate : Error in fetching from  v_TableNameCursor'
				PRINT 'WFMigrateTxnCabinetDate : Error in fetching from  v_TableNameCursor'
				ClOSE v_TableNameCursor
				DEALLOCATE v_TableNameCursor
				Return
			END
		END
		
		ClOSE v_TableNameCursor
		DEALLOCATE v_TableNameCursor
	END





go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFCreatePartitions.sql (MSSQL)
	Author                      : Kahkeshan
	Date written (DD/MM/YYYY)   : 30 MAY 2014
	Description                 : Stored Procedures To Partition Tables on the 
								  basis of ProcessInstanceId
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/	
				
			
	If Exists (Select * FROM SysObjects  WITH (NOLOCK) Where xType = 'P' and name = 'WFCreatePartitions')
	Begin
		Execute('DROP PROCEDURE WFCreatePartitions')
		Print 'Procedure WFCreatePartitions already exists, hence older one dropped ..... '
	End
	
	go
	
	Create Procedure WFCreatePartitions(
		@processDefId 		Int,
		@processVariantId	Int
	)
	AS
	BEGIN
		DECLARE @vquery 				NVARCHAR(2000)
		DECLARE @v_PartiitonStatus 		INT
		DECLARE @vqueryParam 			NVARCHAR(2000)
		DECLARE @vtableName				VARCHAR(200)
		DECLARE @vpartitionColumn		VARCHAR(100)
		DECLARE @loopCount 				INT
		DECLARE @RegPrefix 				nvarchar(50)
		DECLARE @RegSuffix 				nvarchar(50)
		DECLARE @ProcessInstanceId 		nvarchar(63)
		DECLARE @Length					INT
		DECLARE @RegStartingNo			INT
		DECLARE @RegSeqLength			INT
		DECLARE @tableRecreate			INT
		
		Select @tableRecreate = 0
		Select  @vquery = 'Select @value = Count(*) from WFCabVersionTable where Upper (CabVersion) = ''PARTITIONINGSUPPORT'''
		Set @vqueryParam = '@value INT OUTPUT'
		Exec sp_executesql @vquery , @vqueryParam , @value = @tableRecreate OUTPUT
		IF(@tableRecreate = 0)
		BEGIN
			EXEC WFPartitionLargeTables
		END
		IF(@@Error <> 0)
		BEGIN
			Print 'Error in querying WFCabVersionTable : query is ' + @vquery
			Return
		END
		
		Select 	@v_PartiitonStatus = 0
		Select  @vquery = 'Select @value = Count(*) from WFPartitionStatusTable where ProcessDefId = ' + Convert(NVARCHAR(10),@processDefId) + ' and ProcessVariantId = ' +  Convert(NVARCHAR(10),@processVariantId)
		Set @vqueryParam = '@value INT OUTPUT'
		Exec sp_executesql @vquery , @vqueryParam , @value = @v_PartiitonStatus OUTPUT
		IF(@@Error <> 0)
		BEGIN
			Print 'Error in querying WFPartitionStatusTable : query is ' + @vquery
			Return
		END
		
		IF(@v_PartiitonStatus > 0 )
		BEGIN
			Print 'Partition already created for ProcessDefId ' + Convert(NVARCHAR(10),@processDefId)  + ' and ProcessVariantId = ' + Convert(NVARCHAR(10),@processVariantId)
			Return
		END
		ELSE
		BEGIN
			IF(@processVariantId = 0)
			BEGIN
				Select @vquery = 'Select  @regPrefixOut = Regprefix ,@regSuffixOut = RegSuffix ,@regSeqOut = RegSeqLength from ProcessDefTable where processdefid = '+ Convert(nvarchar(10),@processDefId)
				Select @vqueryParam = N'@regPrefixOut nvarchar(50) OUTPUT ,@regSuffixOut nvarchar(50) OUTPUT ,@regSeqOut nvarchar(50) OUTPUT '
				exec sp_executesql @vquery,@vqueryParam,@regPrefixOut = @RegPrefix OUTPUT,@regSuffixOut = @RegSuffix OUTPUT,@regSeqOut = @RegSeqLength OUTPUT
			END
			ELSE
			BEGIN
				Select @vquery = 'Select  @regPrefixOut = Regprefix ,@regSuffixOut = RegSuffix from WFProcessVariantDefTable where ProcessDefId = ' + Convert(NVARCHAR(10),@processDefId) + ' and ProcessVariantId = ' +  Convert(NVARCHAR(10),@processVariantId)
				Select @vqueryParam = N'@regPrefixOut nvarchar(50) OUTPUT ,@regSuffixOut nvarchar(50) OUTPUT  '
				Print 'query'
				print @vquery
				exec sp_executesql @vquery,@vqueryParam,@regPrefixOut = @RegPrefix OUTPUT,@regSuffixOut = @RegSuffix OUTPUT
				
				Select @vquery = 'Select @regSeqOut = RegSeqLength from  ProcessDefTable  where ProcessDefId = ' + Convert(NVARCHAR(10),@processDefId) 
				Select @vqueryParam = N'@regSeqOut nvarchar(50) OUTPUT'
				exec sp_executesql @vquery,@vqueryParam,@regSeqOut = @RegSeqLength OUTPUT
				
			END
			
			SELECT @RegPrefix	= @RegPrefix + '-'
			IF(@RegSuffix IS NOT NULL AND @RegSuffix<>'')	
			BEGIN
				SELECT @RegSuffix	= '-' + @RegSuffix
			END
			
			Select @RegStartingNo = 0000001
			Select @loopCount = 1
			While (@loopCount < = 10)
			Begin
				SELECT	@Length			= @RegSeqLength - LEN(@RegPrefix) - LEN(@RegSuffix)
				SELECT	@ProcessInstanceId	= REPLICATE('0', @Length)
				SELECT 	@ProcessInstanceId	= @RegPrefix + SUBSTRING(@ProcessInstanceId,1,LEN(@ProcessInstanceId) - LEN(@RegStartingNo)) + 	CONVERT(varchar(10), @RegStartingNo) + @RegSuffix
				Print 'Pid--'
				Print  @ProcessInstanceId
				ALTER PARTITION SCHEME PartitionSchemePId NEXT USED [PRIMARY]
				ALTER PARTITION FUNCTION PartitionRangePId()SPLIT RANGE (@ProcessInstanceId)
				select @loopCount = @loopCount + 1
				Select @RegStartingNo = @RegStartingNo + 1000000
			End
			
		END
		
		Select @vquery = 'Insert Into WFPartitionStatusTable values ( ' +  Convert(NVARCHAR(10),@processDefId)  + ',' + Convert(NVARCHAR(10),@processVariantId) + ')'
		Execute (@vquery)
		IF(@@Error <> 0)
		BEGIN
			Print 'Error in inserting into WFPartitionStatusTable : query is ' + @vquery
			Return
		END
		
	END
	

go

	/*__________________________________________________________________________________;
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
		Group                       : Genesis;
		Product / Project           : IBPS;
		Module                      : IBPS Server;
		File Name                   : GetColStr.sql (MSSQL)
		Author                      : Kahkeshan
		Date written (DD/MM/YYYY)   : 21 MAY 2014
		Description                 : Stored Procedure to generate to generate column string
									  of a table
		____________________________________________________________________________________;
		CHANGE HISTORY;
		____________________________________________________________________________________;
		Date        Change By        Change Description (Bug No. (IF Any))
		____________________________________________________________________________________*/	

	If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'GetColStr')
	Begin
		Execute('DROP Procedure GetColStr')
		Print 'Procedure GetColStr already exists, hence older one dropped ..... '
	End

	go

	Create Procedure GetColStr(
		@v_tableName varchar(256),
		@v_columnStr varchar(4000) output
	)As
	BEGIN
			DECLARE @v_colStr     			 VARCHAR(4000) 
			DECLARE @v_query     			 VARCHAR(4000)
			DECLARE @v_columnName     		 VARCHAR(65)
			SELECT @v_query = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''' + @v_tableName + ''''
			EXECUTE ('DECLARE columnName_cur CURSOR FAST_FORWARD FOR ' + @v_query)
			IF(@@error <> 0)
			Begin
				PRINT ' [GetColStr] Error in executing columnName cursor query'
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in GetColStr Error in opening columnName cursor', 16, 1) 
				RETURN
			End
			OPEN columnName_cur
			IF(@@error <> 0)
			Begin
				PRINT ' [GetColStr] Error in opening columnName cursor'
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in GetColStr Error in opening columnName cursor', 16, 1) 
				RETURN
			End

			FETCH NEXT FROM columnName_cur INTO @v_columnName
			IF(@@error <> 0)
			Begin
				PRINT ' [GetColStr] Error in fetching data FROM columnName cursor'
				CLOSE columnName_cur 
				DEALLOCATE columnName_cur 
				--RAISERROR('Error in GetColStr Error in fetching data FROM columnName cursor', 16, 1) 
				RETURN
			End
			SELECT @v_colStr = ''
			WHILE(@@FETCH_STATUS <> -1) 
			BEGIN 
				IF (@@FETCH_STATUS <> -2) 
				BEGIN 
						IF (@v_colStr IS NOT NULL AND @v_colStr <> '')
						BEGIN
							SELECT @v_colStr = @v_colStr + ', '
						END
						SELECT @v_colStr = @v_colStr + @v_columnName
				END
				FETCH NEXT FROM columnName_cur INTO @v_columnName
				IF(@@error <> 0)
				Begin
					PRINT ' [GetColStr] Error in fetching data FROM columnName cursor'
					CLOSE columnName_cur 
					DEALLOCATE columnName_cur 
					--ROLLBACK TRANSACTION Migrate_Meta_Data
					--RAISERROR('Error in WFMoveVariantMetaData Error in fetching data FROM columnName cursor', 16, 1) 
					RETURN
				End
			END
			
			CLOSE columnName_cur
			DEALLOCATE columnName_cur
			
			SELECT @v_columnStr = @v_colStr
	END
	

go

	/*__________________________________________________________________________________;
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
			Group                       : Genesis;
			Product / Project           : IBPS;
			Module                      : IBPS Server;
			File Name                   : RebuildIndexForTable.sql (MSSQL)
			Author                      : Kahkeshan
			Date written (DD/MM/YYYY)   : 25 JUNE 2014
			Description                 : Stored Procedure To Rebuild Indexes After Data 
										  Migration
			____________________________________________________________________________________;
			CHANGE HISTORY;
			____________________________________________________________________________________;
			Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/	
		
	/* Rebuild Indexes for ibps Tables */
	
	If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'RebuildIndexForTable')
	Begin
		Execute('DROP Procedure RebuildIndexForTable')
		Print 'Procedure RebuildIndexForTable already exists, hence older one dropped ..... '
	End

	go

	Create Procedure RebuildIndexForTable(
		@v_tableName varchar(256)
	)As
	BEGIN
		Declare @vquery NVARCHAR(2000)
		Select @vquery = ' ALTER INDEX ALL ON ' + @v_tableName + ' REBUILD WITH (FILLFACTOR = 80, SORT_IN_TEMPDB = ON,STATISTICS_NORECOMPUTE = ON) '
		Execute (@vquery)
	END
	

go

/*__________________________________________________________________________________;
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
			Group                       : Genesis;
			Product / Project           : IBPS;
			Module                      : IBPS Server;
			File Name                   : RebuildIndexes.sql (MSSQL)
			Author                      : Kahkeshan
			Date written (DD/MM/YYYY)   : 25 JUNE 2014
			Description                 : Stored Procedure To Rebuild Indexes after Migration
			____________________________________________________________________________________;
			CHANGE HISTORY;
			____________________________________________________________________________________;
			Date        Change By        Change Description (Bug No. (IF Any))
	____________________________________________________________________________________*/	
	If Exists (Select * FROM SysObjects (NOLOCK) Where xType = 'P' and name = 'RebuildIndexes')
	Begin
		Execute('DROP Procedure RebuildIndexes')
		Print 'Procedure RebuildIndexes already exists, hence older one dropped ..... '
	End

	go

	Create Procedure RebuildIndexes(
		@v_buildHistoryTables VARCHAR(1)
	)AS
	BEGIN
	
	/* Rebuilding ibps Tables indexes */
	EXEC RebuildIndexForTable 'WFInstrumentTable'
	EXEC RebuildIndexForTable 'WFCurrentRouteLogTable'
	EXEC RebuildIndexForTable 'WFAttributemessagetable'
	EXEC RebuildIndexForTable 'ToDoStatusTable'
	EXEC RebuildIndexForTable 'ExceptionTable'
	EXEC RebuildIndexForTable 'WFCommentsTable'
	
	IF(@v_buildHistoryTables = 'Y')
	BEGIN
		EXEC RebuildIndexForTable 'ToDoStatusHistoryTable'
		EXEC RebuildIndexForTable 'ExceptionHistoryTable'
		EXEC RebuildIndexForTable 'QueueHistoryTable'
	END
	
	/* Rebuilding Omnidocs Tables indexes */
	EXEC RebuildIndexForTable 'PDBRights'
	EXEC RebuildIndexForTable 'PDBIntGlobalindex'
	EXEC RebuildIndexForTable 'PDBBoolGlobalindex'
	EXEC RebuildIndexForTable 'PDBFloatGlobalindex'
	EXEC RebuildIndexForTable 'PDBDateGlobalindex'
	EXEC RebuildIndexForTable 'PDBStringGlobalindex'
	EXEC RebuildIndexForTable 'PDBLongGlobalIndex'
	EXEC RebuildIndexForTable 'PDBDocIdGlobalIndex'
	EXEC RebuildIndexForTable 'PDBTextGlobalIndex'
	EXEC RebuildIndexForTable 'PDBKeyword'
	EXEC RebuildIndexForTable 'PDBAnnotationObjectVersion'
	EXEC RebuildIndexForTable 'PDBAnnotationDataVersion'
	EXEC RebuildIndexForTable 'PDBAnnotationVersion'
	EXEC RebuildIndexForTable 'PDBAnnotationObject'
	EXEC RebuildIndexForTable 'PDBAnnotationData'
	EXEC RebuildIndexForTable 'PDBLinkNotesTable'
	EXEC RebuildIndexForTable 'PDBAnnotation'
	EXEC RebuildIndexForTable 'PDBFTSData'
	EXEC RebuildIndexForTable 'PDBFTSDataVersion'
	EXEC RebuildIndexForTable 'PDBDocumentVersion'
	EXEC RebuildIndexForTable 'PDBThumbNail'
	EXEC RebuildIndexForTable 'PDBThumbNailVersion'
	EXEC RebuildIndexForTable 'PDBReminder'
	EXEC RebuildIndexForTable 'PDBAlarm'
	EXEC RebuildIndexForTable 'PDBFoldDocLockStatus'
	EXEC RebuildIndexForTable 'PDBDocumentContent'
	EXEC RebuildIndexForTable 'PDBDocument'
END

	

go

/*--------------------------------------------------------------------------------------------
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
----------------------------------------------------------------------------------------------
	Group				: Genesis
	Product / Project		: iBPS 3.0
	Module				: Transaction Server
	File Name			: WFScheduleEscalateWorkitem.sql [MSSQL Server]
	Author				: Rakesh K Saini
	Date written (DD/MM/YYYY)	: 09/02/2016
	Description			: To be scheduled on database server, this will 
					   schedule WFEscalateWorkitem Stored procedure
----------------------------------------------------------------------------------------------
				CHANGE HISTORY
----------------------------------------------------------------------------------------------
Date			Change By		Change Description (Bug No. (If Any))
08/02/2016		Rakesh K Saini		Bug # 58221.

----------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------*/

If Exists (Select * from SysObjects Where xType = 'P' and name = 'WFScheduleEscalateWorkitem')
BEGIN
	Execute('DROP PROCEDURE WFScheduleEscalateWorkitem')
	Print 'Procedure WFScheduleEscalateWorkitem already exists, hence older one dropped ..... '
END

go
CREATE PROCEDURE WFScheduleEscalateWorkitem
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
 
    -- The interval between SP calls
    DECLARE @timeToRun nvarchar(50)
    DECLARE @currentTime nvarchar(50)
	
    SET @timeToRun = getdate()
     
    while 1 = 1
    BEGIN
          SET @currentTime=getdate()
          WHILE @currentTime=@timeToRun
          BEGIN
               EXECUTE WFEscalateWorkitem
               SET @timeToRun = dateadd(hour,1,getdate())
          END
    END
END

go

Print 'Stored Procedure WFScheduleEscalateWorkitem compiled successfully ........'
-- Run the procedure when the master database starts.
--sp_procoption    @ProcName = 'WFScheduleEscalateWorkitem',
 --               @OptionName = 'startup',
 --               @OptionValue = 'on'


go

/*---------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group				: Genesis
	Product / Project	: OmniFlow 9.0
	Module				: Transaction Server
	File Name			: WFGetMailQueueItem.sql
	Author				: Ashutosh Pandey
	Date written		: May 26th 2016
	Description			: This procedure will return the Task Id of the next avilable Mail Item
-----------------------------------------------------------------------------------------------------
				CHANGE HISTORY
-----------------------------------------------------------------------------------------------------
Date			Change By		Change Description (Bug No. (If Any))
-----------------------------------------------------------------------------------------------------
26/05/2016		Ashutosh Pandey	Bug 59010 - Mailing Agent Enhancement : 1) Option to filter mail items 2) Optimization in WFGetMailQueueItem API 3) Purge mechanism for old mail items
----------------------------------------------------------------------------------------------------*/

IF EXISTS (SELECT * FROM SysObjects WHERE xType = 'P' AND name = 'WFGetMailQueueItem')
BEGIN
	EXECUTE('DROP PROCEDURE WFGetMailQueueItem')
	PRINT 'Procedure WFGetMailQueueItem already exists, hence older one dropped ..... '
END

go

CREATE PROCEDURE WFGetMailQueueItem (
	@AgentName NVARCHAR(100),
	@NoOfTrials INT,
	@MailFilter NVARCHAR(100),
	@TaskId BIGINT OUTPUT
)
AS
SET NOCOUNT ON
BEGIN
	DECLARE @Query NVARCHAR(1000)
	DECLARE @QueryParameter NVARCHAR(256)
	SET @TaskId = 0

	SELECT @Query = 'SELECT TOP 1 @TempTaskId = TaskId FROM WFMailQueueTable WITH (NOLOCK) WHERE MailStatus = ''L'' AND LockedBy = ''' + @AgentName + ''' AND NoOfTrials < ' + CAST(@NoOfTrials AS VARCHAR(3)) + @MailFilter + ' ORDER BY TaskId ASC'
	SELECT @QueryParameter = '@TempTaskId BIGINT OUTPUT'
	EXEC sp_executesql @Query, @QueryParameter, @TempTaskId = @TaskId OUTPUT

	IF @TaskId = 0
	BEGIN
		SELECT @Query = 'SELECT TOP 1 @TempTaskId = TaskId FROM WFMailQueueTable WITH (UPDLOCK, READPAST) WHERE MailStatus = ''N'' AND NoOfTrials < ' + CAST(@NoOfTrials AS VARCHAR(3)) + @MailFilter + ' ORDER BY TaskId ASC'
		SELECT @QueryParameter = '@TempTaskId BIGINT OUTPUT'
		EXEC sp_executesql @Query, @QueryParameter, @TempTaskId = @TaskId OUTPUT

		IF @TaskId <> 0
		BEGIN
			EXECUTE('UPDATE WFMailQueueTable SET MailStatus = ''L'', LockedBy = ''' + @AgentName + ''', LastLockTime = GETDATE() WHERE TaskId = ' + @TaskId)
		END
	END
END

go

Print 'Stored Procedure WFGetMaiLQueueItem compiled successfully ........'

go

/*---------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group				: Genesis
	Product / Project	: iBPS
	Module				: Transaction Server
	File Name			: WFUpgradeCustomUploadTable.sql
	Author				: Sajid Khan
	Date written		: 29 April 2017
	Description			: This procedure will check and upgrade the Custom Upload Table
-----------------------------------------------------------------------------------------------------
				CHANGE HISTORY
-----------------------------------------------------------------------------------------------------
Date			Change By		Change Description (Bug No. (If Any))
-----------------------------------------------------------------------------------------------------
22/04/2018  Ambuj Tripathi		Bug 76862 - Remove the db console messages from all procedures
----------------------------------------------------------------------------------------------------*/

IF EXISTS (SELECT * FROM SysObjects WHERE xType = 'P' AND name = 'WFUpgradeCustomUploadTable')
BEGIN
	EXECUTE('DROP PROCEDURE WFUpgradeCustomUploadTable')
	PRINT 'Procedure WFUpgradeCustomUploadTable already exists, hence older one dropped ..... '
END

go

CREATE PROCEDURE WFUpgradeCustomUploadTable (
	@CustomTableName NVARCHAR(255),
	@UpgradeHistoryTable NVARCHAR(1),
	@MainCode INT OUTPUT,
	@ErrorDescription NVARCHAR(1000) OUTPUT
)
AS
BEGIN
	DECLARE @CustomHistoryTableName NVARCHAR(265)
	DECLARE @CustomTableId BIGINT
	DECLARE @CustomHistoryTableId BIGINT

	SET @CustomHistoryTableName = @CustomTableName + '_History'
	SET @CustomTableId = 0
	SET @CustomHistoryTableId = 0

	SET @MainCode = 0
	SET @ErrorDescription = ''

	/* Adding RetryCount column in @CustomTableName table*/
	SELECT @CustomTableId = id FROM sysObjects WHERE NAME = @CustomTableName
	IF(@CustomTableId <> 0)
	BEGIN
		IF NOT EXISTS (SELECT * FROM sysColumns WHERE id = @CustomTableId AND  NAME = 'RetryCount')
		BEGIN
			--PRINT 'Altering table ' + @CustomTableName + ', adding column RetryCount.'
			EXECUTE('ALTER TABLE ' + @CustomTableName + ' ADD RetryCount INT DEFAULT 0')
			EXECUTE('UPDATE ' + @CustomTableName + ' SET RetryCount = 0')
			--PRINT 'Table ' + @CustomTableName + ' altered.'
		END
	END
	ELSE
	BEGIN
		SET @MainCode = 15
		SET @ErrorDescription = 'Table ' + @CustomTableName + ' does not exist.'
	END

	/* Adding RetryCount column in @CustomHistoryTableName table*/
	IF @UpgradeHistoryTable = 'Y'
	BEGIN
		SELECT @CustomHistoryTableId = id FROM sysObjects WHERE NAME = @CustomHistoryTableName
		IF(@CustomHistoryTableId <> 0)
		BEGIN
			IF NOT EXISTS (SELECT * FROM sysColumns WHERE id = @CustomHistoryTableId AND  NAME = 'RetryCount')
			BEGIN
				--PRINT 'Altering table ' + @CustomHistoryTableName + ', adding column RetryCount.'
				EXECUTE('ALTER TABLE ' + @CustomHistoryTableName + ' ADD RetryCount INT DEFAULT 0')
				EXECUTE('UPDATE ' + @CustomHistoryTableName + ' SET RetryCount = 0')
				--PRINT 'Table ' + @CustomHistoryTableName + ' altered.'
			END
		END
		ELSE
		BEGIN
			SET @MainCode = 15
			SET @ErrorDescription = @ErrorDescription + 'Table ' + @CustomHistoryTableName + ' does not exist.'
		END
	END
END

go

Print 'Stored Procedure WFUpgradeCustomUploadTable compiled successfully ........'

go

/*----------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group				: Genesis
	Product / Project	: OmniFlow 10.3
	Module				: Transaction Server
	File Name			: WFBulkLockWorkitem.sql
	Author				: Mohd Jaseem Ansari
	Date written (DD/MM/YYYY)	: 12/01/2017
	Purpose 			: To lock the multiple workitems.
	
						1. Processinstance ids will be provided in comma separated forms.
						2. Workitem ids will be provided in comma separated forms.
						3. Batch flag will be provided. If this flag is Y then All theworkitem will be locked and if error occurs for any workitem then all the workitem will be rolled back.If this flag is N then only failed workitem will be rolled back. 
		
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
				CHANGE HISTORY
------------------------------------------------------------------------------------------------------

Date			Change By		Change Description (Bug No. (If Any))
24.07.2017		Mohnish Chopra	PRDP Bug 70097 - Error in BulkLock Worktiems when certain workitems provided in input xml are already locked .
------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------*/

IF EXISTS(SELECT * FROM SysObjects WHERE xType = 'P' AND name = 'WFBulkLockWorkitem')
BEGIN
	DROP PROCEDURE WFBulkLockWorkitem
	Print 'Procedure WFBulkLockWorkitem already exists, hence older one dropped ..... '
END

go


 

CREATE PROCEDURE WFBulkLockWorkitem (
	@DBSessionId int,
	@DBQueueId int,
	@DBNoOfRecord int,
	@DBBatchFlag char(1),
	@DBHistoryFlag char(1),
	@DBProcessInstaceIds nvarchar(MAX),
	@DBWorkItemIds nvarchar(MAX),
	@DBMainCode INT OUTPUT,  
	@DBSubCode INT OUTPUT,  
	@DBNoOfFailedRecord INT OUTPUT,  
	@DBFailedProcessInstanceIds nvarchar (MAX) OUTPUT,
	@DBSubCodeList nvarchar(MAX) OUTPUT
		
)

AS

BEGIN

	DECLARE @sep_current_position_PId INT
	DECLARE @sep_prev_postion_PId INT
	DECLARE @sep_current_position_WId INT
	DECLARE @sep_prev_postion_WId INT
	DECLARE @v_ProcessInstaceId nvarchar(60)
	DECLARE @v_WorkitemId nvarchar(60)
	DECLARE @v_lockedById INT
	DECLARE @v_lockedByName nvarchar(60)
	DECLARE @v_ProcessDefId INT
	DECLARE @v_ActivityId INT
	DECLARE @v_QueueId INT
	DECLARE @v_ActivityName nvarchar(60)
	DEClare @v_MainCode INT
	DECLARE @v_LockStatus CHAR(1)
	DECLARE @v_userName nvarchar(60)
	DECLARE @v_HistoryNew CHAR(1)
	
	
	DECLARE @FailedProcessInstanceId nvarchar(MAX)
	DECLARE @NoOfFailedProcessInstanceId INT
	DECLARE @ErrorFlag CHAR(1)
	DECLARE @NoOfRecord INT
	DECLARE @v_FailedWISubCodeList nvarchar(MAX)
	

	
	
	SET @ErrorFlag = 'N'
	SET @v_HistoryNew=@DBHistoryFlag
	SET @sep_prev_postion_PId = 0
	SET @sep_prev_postion_WId = 0
	SET @FailedProcessInstanceId = ''
	SET @NoOfFailedProcessInstanceId = 0
	SET @NoOfRecord = @DBNoOfRecord
	SET @v_FailedWISubCodeList = ''
	
	/*Initializing output parameter*/
	SET @DBMainCode = 0
	SET @DBSubCode = 0
	SET @DBNoOfFailedRecord = 0
	SET @DBFailedProcessInstanceIds = ''
	

	/*Check for validity of session */
	SELECT @v_lockedById = UserID, @v_userName = UserName FROM WFSessionView, WFUserView 
	WHERE UserId = UserIndex AND SessionID = @DBSessionId

	IF(@@ERROR <> 0 OR @@ROWCOUNT <= 0)
	BEGIN
		SELECT @DBMainCode = 11, @DBSubCode = 0, @DBNoOfFailedRecord = 0, @DBFailedProcessInstanceIds = '' -- Invalid Session
		RETURN
	END
	
	
	/*Check for user association */	
	SELECT QueueID FROM userqueuetable WHERE UserID = @v_lockedById AND  QueueID = @DBQueueId
	
	IF(@@ERROR <> 0 OR @@ROWCOUNT <= 0)
	BEGIN
		SELECT @DBMainCode = 830, @DBSubCode = 0, @DBNoOfFailedRecord = 0,@DBFailedProcessInstanceIds = ''  -- User has no rights on the queue.
		RETURN
	END
	
	
	/* processing for all workitems */
	IF(@DBBatchFlag = 'Y')
		BEGIN TRANSACTION Batch_Transaction
	
	WHILE @NoOfRecord > 0 
			BEGIN -- Beginning of While loop
				IF(@DBBatchFlag = 'N')
					BEGIN TRANSACTION Single_Transaction
					
				SET @sep_current_position_PId = CHARINDEX(',', @DBProcessInstaceIds,@sep_prev_postion_PId)					
				SET @sep_current_position_WId = CHARINDEX(',', @DBWorkItemIds,@sep_prev_postion_WId)
				
				SET @v_ProcessInstaceId = SUBSTRING(@DBProcessInstaceIds, @sep_prev_postion_PId, @sep_current_position_PId-@sep_prev_postion_PId)
				SET @v_WorkitemId = SUBSTRING(@DBWorkItemIds, @sep_prev_postion_WId, @sep_current_position_WId-@sep_prev_postion_WId)
				SET @sep_prev_postion_PId = @sep_current_position_PId+1		--for next iteration
				SET @sep_prev_postion_WId = @sep_current_position_WId+1
				SET @NoOfRecord = @NoOfRecord-1;
				
				SELECT @v_ProcessDefId=ProcessDefId,@v_ActivityId=ActivityId,@v_ActivityName=ActivityName, @v_QueueId=Q_QueueId,@v_LockStatus = LockStatus,@v_LockedByName = LockedByName from  wfinstrumenttable WHERE ProcessInstanceID = RTrim(LTrim(@v_ProcessInstaceId)) AND WorkItemID = CONVERT(INT, @v_WorkitemId)  AND RoutingStatus = 'N'
				
				IF( @@Error <> 0 OR @@rowcount <= 0 )
					BEGIN					
					SET @ErrorFlag =  'Y'
					SELECT @DBMainCode = 400,@DBSubCode = 6, @DBNoOfFailedRecord = 0,@DBFailedProcessInstanceIds = '' --Need to set the main code and subcode when workitem does not exist.
					END
					
				ELSE
					BEGIN						
					IF( @v_QueueId=@DBQueueId) --IF WORKITEM IS IN SAME QUEUE THEN PROCEED
						BEGIN
							IF(@v_LockStatus = 'N' )
								BEGIN
									UPDATE wfinstrumenttable SET Q_UserId = @v_lockedById , WorkItemState = 2 , LockedByName = @v_userName, LockStatus = 'Y' , LockedTime =GETDATE() , Guid = NULL WHERE ProcessInstanceID = RTrim(LTrim(@v_ProcessInstaceId))  AND WorkItemID = CONVERT(INT, @v_WorkitemId) 
									
									IF( @@Error <> 0 OR @@rowcount <= 0 )
										BEGIN
											SELECT @DBMainCode = 400,@DBSubCode = 6, @DBNoOfFailedRecord = 0,@DBFailedProcessInstanceIds = '' --Need to set the main code and subcode when issue comes while uploading the table.
											SET @ErrorFlag =  'Y'
									END
								
									IF(@ErrorFlag = 'N')
										BEGIN
										EXECUTE WFGenerateLog 7, @v_lockedById, @v_ProcessDefId, @v_ActivityId, @v_QueueId, @v_userName, @v_ActivityName, 0, @v_ProcessInstaceId, 0, NULL,@v_WorkitemId, 0, 0, @v_HistoryNew, @v_MainCode OUT
										END
								END
							ELSE IF (@v_LockedByName=@v_userName)
								BEGIN
									UPDATE wfinstrumenttable SET Q_UserId = @v_lockedById , WorkItemState = 2 , LockedByName = @v_userName , LockStatus = 'Y' , LockedTime =GETDATE() , Guid = NULL WHERE ProcessInstanceID = RTrim(LTrim(@v_ProcessInstaceId))  AND WorkItemID = CONVERT(INT, @v_WorkitemId) 
								
									IF( @@Error <> 0 OR @@rowcount <= 0 )
										BEGIN
											SELECT @DBMainCode = 400,@DBSubCode = 6, @DBNoOfFailedRecord=0,@DBFailedProcessInstanceIds = '' --Need to set the main code and subcode when issue comes while uploading the table.
											SET @ErrorFlag =  'Y'
										END
								END
							ELSE
								BEGIN
								SET @ErrorFlag ='Y';
								SELECT	@DBMainCode = 400,@DBSubCode = 16,@DBNoOfFailedRecord = 0,@DBFailedProcessInstanceIds = '';
								END
						END
					ELSE
						BEGIN						
							SET @ErrorFlag =  'Y'	
							SELECT @DBMainCode = 400,@DBSubCode = 985, @DBNoOfFailedRecord=0,@DBFailedProcessInstanceIds = '' --Need to set the main code and subcode when workitem is in different queue.
						END
					END
						
					IF(@DBBatchFlag = 'Y' )
						BEGIN	
							IF(@ErrorFlag = 'Y')
								BEGIN
									Break
								END
							ELSE
								BEGIN
									SET @ErrorFlag = 'N'
									CONTINUE
								END
						END
					ELSE IF(@DBBatchFlag = 'N')
						BEGIN
							IF(@ErrorFlag = 'Y')
								BEGIN
									SET @ErrorFlag = 'N'
									SET @FailedProcessInstanceId = @FailedProcessInstanceId+@v_ProcessInstaceId+','
									SET @NoOfFailedProcessInstanceId = @NoOfFailedProcessInstanceId + 1
									print(@DBSubCode)
									SET @v_FailedWISubCodeList = @v_FailedWISubCodeList + CONVERT(varchar(10), @DBSubCode)  + ','
									print(@v_FailedWISubCodeList)
									ROLLBACK  TRANSACTION Single_Transaction					
									CONTINUE
								END
							ELSE IF(@ErrorFlag = 'N')
								BEGIN
									SET @ErrorFlag = 'N'
									COMMIT TRANSACTION Single_Transaction
								END
						END							 		
				END --End of while loop				
 	IF(@DBBatchFlag = 'Y')
	BEGIN
		IF(@ErrorFlag='Y')
			BEGIN
				ROLLBACK TRANSACTION Batch_Transaction
				RETURN
			END
		ELSE
			BEGIN
				COMMIT TRANSACTION  Batch_Transaction
				RETURN
			END
	END
	ELSE
		BEGIN	
			SELECT @DBMainCode = 0, @DBSubCode = 0, @DBNoOfFailedRecord = @NoOfFailedProcessInstanceId, @DBFailedProcessInstanceIds = @FailedProcessInstanceId,@DBSubCodeList = @v_FailedWISubCodeList
			RETURN
		END 
END




go

/*____________________________________________________________________________________________________
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED
______________________________________________________________________________________________________
	Group				: Genesis
	Product / Project	: iBPS 
	Module				: Transaction Server
	File Name			: WFChangeActivityName.sql (mssql)
	Author				: Ambuj Tripathi
	Date written (DD/MM/YYYY)	: 11/01/2018
	Description			: Stored procedure to change activity name.
______________________________________________________________________________________________________
				CHANGE HISTORY
07/02/2018		Ambuj Tripathi		Change in case management table names.
22/04/2018  	Ambuj Tripathi		Bug 76862 - Remove the db console messages from all procedures
30/04/2018      Kumar Kimil         Bug 77370 - EAP 6.4+SQL: Unable to rename the system workstep (for E.g: Export) in Modify Activity Screen
______________________________________________________________________________________________________*/


IF EXISTS (SELECT * FROM SysObjects (NOLOCK) WHERE xType = 'P' and Name = 'WFChangeActivityName')
BEGIN
	EXECUTE ('Drop Procedure WFChangeActivityName')
	PRINT 'Procedure WFChangeActivityName already exists, hence older one dropped...'
End

go

CREATE PROCEDURE WFChangeActivityName(
	@DBProcessDefId		INT,
	@DBActivityName		NVARCHAR(64),
	@DBNewActivityName	NVARCHAR(64),
	@UserId             INT,
	@UserName			NVARCHAR(128),
	@MainCode           INT OUTPUT,
	@Message            NVARCHAR(1000) OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @ActivityId		INT
	DECLARE @ActivityType		SMALLINT
	DECLARE @QueryStr		NVARCHAR(2000)
	DECLARE @ActionId		INT
	DECLARE @v_OldQueueName		NVARCHAR(255)
	DECLARE @v_QueueId          INT 
	DECLARE @v_NewQueueName     NVARCHAR(255)
	DECLARE @ProcessName		NVARCHAR(255)
	DECLARE @v_ProcessInstanceId	NVARCHAR(255)
	DECLARE @FolderIndex		INT
	DECLARE	@QueueId			NVARCHAR(255)
	DECLARE @v_Query			NVARCHAR(2000)
	DECLARE	@v_WorkItemId		NVARCHAR(255)
	DECLARE @OldQueueName		NVARCHAR(255)
	DECLARE @NewQueueName		NVARCHAR(255)
	DECLARE @ER					INT
	DECLARE @RC					INT

	/* Perform Validations */
	IF @DBProcessDefId IS NULL OR @DBActivityName IS NULL OR @DBNewActivityName IS NULL
	BEGIN
		SET @MainCode = 400
		SET @Message  = 'ProcessDefId, ActivityName and NewActivityName are mandatory parameters.'
		RETURN
	END

	/* Trim Inputs */
	SELECT @DBActivityName = LTRIM(RTRIM(@DBActivityName))
	SELECT @DBNewActivityName = LTRIM(RTRIM(@DBNewActivityName))
	
	/* Check for New Activity Name length */
	IF LEN(@DBNewActivityName) > 30
	BEGIN
		SET @MainCode = 400
		SET @Message = 'New Activity Name can not be more than 30 character'
		
		RETURN
	END
	
	/* Check for valid New Activity Name */
	IF @DBNewActivityName LIKE '%[^a-zA-Z0-9-_ ]%'
	BEGIN
		SET @MainCode = 400
		SET @Message = 'New Activity Name should not contain special characters'
		RETURN
	END

	/* Activity Name cannot be SaveStage or PreviousStage */
	IF UPPER(@DBNewActivityName) IN ('SAVESTAGE', 'PREVIOUSSTAGE')
	BEGIN
		SET @MainCode = 400
		SET @Message = 'New Activity Name cannot be SaveStage or PreviousStage.'
		
		RETURN
	END

	/* Find out ActivityId for given process id and activity name */
	SELECT @ActivityId = ActivityId, @ActivityType = ActivityType
	FROM ActivityTable (NOLOCK)
	WHERE ProcessDefId = @DBProcessDefId
	AND ActivityName = @DBActivityName
	IF (@@ERROR <> 0 OR @@ROWCOUNT = 0)
	BEGIN
		SET @MainCode = 400
		SET @Message =	'Activity ' + @DBActivityName + ' does not exist.'
		RETURN
	END

	/* Check for if new activity name already exists in given process */
	IF EXISTS (SELECT 1 FROM ActivityTable (NOLOCK) WHERE ProcessDefId = @DBProcessDefId AND ActivityName = @DBNewActivityName)
	BEGIN
		SET @MainCode = 400
		SET @Message = 'Activity with name ' + @DBNewActivityName + ' already exists in process. Please specify a different name.'
		RETURN
	END

	BEGIN TRANSACTION TxnChangeActivityName
	
		/* Update ActivityName in ActivityTable */
		UPDATE ActivityTable 
		SET ActivityName = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND ActivityId = @ActivityId
		IF (@@ERROR <> 0 OR @@ROWCOUNT = 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of ActivityName in ActivityTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update ExpiryActivity in ActivityTable for activities having ActivityType 10(Custom) or 4(Hold) */
		UPDATE ActivityTable 
		SET ExpiryActivity = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND ActivityType IN (4, 10) AND ExpiryActivity = @DBActivityName
		IF (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of ExpiryActivity in ActivityTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update PrimaryActivity in ActivityTable for activities having ActivityType 6(Collect) */
		UPDATE ActivityTable 
		SET PrimaryActivity = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND ActivityType = 6 AND PrimaryActivity = @DBActivityName
		IF (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of PrimaryActivity in ActivityTable failed, hence ActivityName not changed.'
			RETURN
		END
		
		/* If ActivityType is 1(Work Introduction), then update IntroducedAt in WFInstrumentTable */
		IF (@ActivityType = 1)
		BEGIN
			WHILE(1=1)
				BEGIN
					SELECT @QueryStr = 'SELECT TOP 100 ProcessInstanceId FROM WFInstrumentTable WHERE ProcessDefId = ' + convert(VARCHAR, @DBProcessDefId) + ' AND IntroducedAt =' + CHAR(39) + @DBActivityName + CHAR(39)
					BEGIN	
						EXECUTE('DECLARE cur_UpdateActivityName CURSOR Fast_Forward  FOR ' + @QueryStr) 
						IF(@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TxnChangeActivityName
							SET @MainCode = 400
							SET @Message = 'Could not create the cursor.'
							return
						END
						OPEN cur_UpdateActivityName 
						IF(@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TxnChangeActivityName
							SET @MainCode = 400
							SET @Message = 'Error in opening the procedure.'
							return
						END
						FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
						--print @v_ProcessInstanceId
						IF(@@FETCH_STATUS <> 0) 
						BEGIN
							CLOSE cur_UpdateActivityName
							DEALLOCATE cur_UpdateActivityName
							BREAK;
						END
						WHILE (@@FETCH_STATUS = 0) 	
						BEGIN
							select @QueryStr = 'UPDATE WFInstrumentTable SET IntroducedAt = ' + CHAR(39)+ @DBNewActivityName + CHAR(39)+' WHERE ProcessInstanceId = ' + CHAR(39)+ @v_ProcessInstanceId + CHAR(39)
							--print @QueryStr
							EXECUTE (@QueryStr)
							IF (@@ERROR <> 0)
								BEGIN
									CLOSE cur_UpdateActivityName
									DEALLOCATE cur_UpdateActivityName
									ROLLBACK TRANSACTION TxnChangeActivityName
									SET @MainCode = 400
									SET @Message = 'Updation of IntroducedAt in WFInstrumentTable failed, hence ActivityName not changed.'
									RETURN
								END
							 FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
						END
						CLOSE cur_UpdateActivityName
						DEALLOCATE cur_UpdateActivityName
					END
				END
		END

		/* Update ActivityName in WFInstrumentTable */
		WHILE(1=1)
		BEGIN
			SELECT @QueryStr = 'SELECT TOP 100 ProcessInstanceId FROM WFInstrumentTable WHERE ProcessDefId = ' + convert(VARCHAR, @DBProcessDefId) + ' AND ActivityName =' + CHAR(39) + @DBActivityName + CHAR(39)
			--Print 'Update ActivityName in WFInstrumentTable : ' + @QueryStr
			BEGIN	
				EXECUTE ('DECLARE cur_UpdateActivityName CURSOR Fast_Forward FOR ' + @QueryStr)
				IF( @@ERROR <> 0)
				BEGIN
					ROLLBACK TRANSACTION TxnChangeActivityName
					SET @MainCode = 400
					SET @Message = 'Cursor for activityname change in wfinstrumenttable couldnt create.'
					RETURN
				END
				OPEN cur_UpdateActivityName 
				IF(@@ERROR <> 0)
				BEGIN
					ROLLBACK TRANSACTION TxnChangeActivityName
					SET @MainCode = 400
					SET @Message = 'Cursor for activityname change in wfinstrumenttable couldnt open.'
					RETURN
				END
				FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
				IF(@@FETCH_STATUS <> 0) 
				BEGIN
					CLOSE cur_UpdateActivityName
					DEALLOCATE cur_UpdateActivityName
					BREAK;
				END
				WHILE (@@FETCH_STATUS = 0) 	
				BEGIN
					SELECT @QueryStr = 'UPDATE WFInstrumentTable SET ActivityName = ' + CHAR(39) + @DBNewActivityName + CHAR(39) + ' WHERE ProcessInstanceId = ' + CHAR(39) + @v_ProcessInstanceId + CHAR(39)
					--Print @QueryStr
					EXECUTE(@QueryStr) 
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TxnChangeActivityName
							SET @MainCode = 400
							SET @Message = 'Updation of WFInstrumentTable failed, hence ActivityName not changed.'
							CLOSE cur_UpdateActivityName
							DEALLOCATE cur_UpdateActivityName
							RETURN
						END
					 FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
				END
				 CLOSE cur_UpdateActivityName
				 DEALLOCATE cur_UpdateActivityName
			END
		END
		
		--Print 'Update ActivityName in WFInstrumentTable : complete'

		/* Update PreviousStage in WFInstrumentTable */
		WHILE(1=1)
		BEGIN
			SELECT @QueryStr = 'SELECT TOP 100 ProcessInstanceId FROM WFInstrumentTable WHERE ProcessDefId = ' + convert(VARCHAR, @DBProcessDefId) + ' AND PreviousStage =' + CHAR(39) + @DBActivityName + CHAR(39);
		
			--Print 'Update PreviousStage in WFInstrumentTable : ' + @QueryStr
		
			BEGIN	
				EXECUTE('DECLARE cur_UpdateActivityName CURSOR Fast_Forward FOR ' + @QueryStr) 
				IF( @@ERROR <> 0)
				BEGIN
					ROLLBACK TRANSACTION TxnChangeActivityName
					SET @MainCode = 400
					SET @Message = 'Cursor for activityname change in wfinstrumenttable couldnt open.'
					RETURN
				END
				OPEN cur_UpdateActivityName 
				IF( @@ERROR <> 0)
				BEGIN
					ROLLBACK TRANSACTION TxnChangeActivityName
					SET @MainCode = 400
					SET @Message = 'Cursor for activityname change in wfinstrumenttable couldnt open.'
					RETURN
				END
				FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
				IF(@@FETCH_STATUS <> 0) 
				BEGIN
					CLOSE cur_UpdateActivityName
					DEALLOCATE cur_UpdateActivityName
					BREAK;
				END
				WHILE (@@FETCH_STATUS = 0) 	
				BEGIN
					SELECT @QueryStr = 'UPDATE WFInstrumentTable SET PreviousStage = ' + CHAR(39) + @DBNewActivityName + CHAR(39) + 'WHERE ProcessInstanceId = ' + CHAR(39) + @v_ProcessInstanceId + CHAR(39);
					EXECUTE(@QueryStr) 
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TxnChangeActivityName
							SET @MainCode = 400
							SET @Message = 'Updation of PreviousStage in WFInstrumentTable failed, hence ActivityName not changed.'
							RETURN
						END
					 FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
				END
				 CLOSE cur_UpdateActivityName
				 DEALLOCATE cur_UpdateActivityName
			END
		END
		
		--Print 'Update PreviousStage in WFInstrumentTable : complete'
				
		/* Update SaveStage in WFInstrumentTable */
		WHILE(1=1)
		BEGIN
			SELECT @QueryStr = 'SELECT TOP 100 ProcessInstanceId FROM WFInstrumentTable WHERE ProcessDefId = ' + convert(VARCHAR, @DBProcessDefId) + ' AND SaveStage =' + CHAR(39) + @DBActivityName + CHAR(39)

		--Print 'Update SaveStage in WFInstrumentTable : ' + @QueryStr

			BEGIN	
				EXECUTE('DECLARE cur_UpdateActivityName CURSOR Fast_Forward FOR ' + @QueryStr) 
				IF( @@ERROR <> 0)
				BEGIN
					ROLLBACK TRANSACTION TxnChangeActivityName
					SET @MainCode = 400
					SET @Message = 'Cursor for activityname change in wfinstrumenttable couldnt create.'
					RETURN
				END
				 OPEN cur_UpdateActivityName 
				IF( @@ERROR <> 0)
				BEGIN
					ROLLBACK TRANSACTION TxnChangeActivityName
					SET @MainCode = 400
					SET @Message = 'Cursor for activityname change in wfinstrumenttable couldnt open.'
					RETURN
				END
				FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
				IF(@@FETCH_STATUS <> 0) 
				BEGIN
					CLOSE cur_UpdateActivityName
					DEALLOCATE cur_UpdateActivityName
					BREAK;
				END
				WHILE (@@FETCH_STATUS = 0) 	
				BEGIN
					SELECT @QueryStr = 'UPDATE WFInstrumentTable SET SaveStage = ' + CHAR(39) + @DBNewActivityName + CHAR(39) + 'WHERE ProcessInstanceId = ' + CHAR(39) + @v_ProcessInstanceId + CHAR(39);
					EXECUTE(@QueryStr) 
					IF (@@ERROR <> 0)
						BEGIN
							ROLLBACK TRANSACTION TxnChangeActivityName
							SET @MainCode = 400
							SET @Message = 'Updation of WFInstrumentTable failed, hence ActivityName not changed.'
							RETURN
						END
					 FETCH NEXT FROM cur_UpdateActivityName INTO @v_ProcessInstanceId
				END
				 CLOSE cur_UpdateActivityName
				 DEALLOCATE cur_UpdateActivityName
			END
		END
		--Print 'Update SaveStage in WFInstrumentTable : complete'
		/* Update ActivityName in ActivityInterfaceAssocTable */
		UPDATE ActivityInterfaceAssocTable 
		SET ActivityName = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND ActivityId = @ActivityId
		IF (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of ActivityName in ActivityInterfaceAssocTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update ActivityName in ExceptionTable */
		UPDATE ExceptionTable 
		SET ActivityName = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND ActivityId = @ActivityId
		IF (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of ActivityName in ExceptionTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update Param1 in RuleOperationTable for operation having type 4(Route To) or 21(Distribute To) */
		UPDATE RuleOperationTable
		SET Param1 = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND OperationType IN (4, 21) AND Param1 = @DBActivityName
		IF (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of Param1 in RuleOperationTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update Param2 in RuleConditionTable for conditions having Param1 SaveStage or PreviousStage */
		UPDATE RuleConditionTable
		SET Param2 = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND UPPER(Param1) IN ('SAVESTAGE', 'PREVIOUSSTAGE')  AND Param2 = @DBActivityName
		IF (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of Param2 in RuleConditionTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update Param2 in ActionConditionTable for conditions having Param1 SaveStage or PreviousStage */
		UPDATE ActionConditionTable
		SET Param2 = @DBNewActivityName
		WHERE ProcessDefId = @DBProcessDefId AND UPPER(Param1) IN ('SAVESTAGE', 'PREVIOUSSTAGE')  AND Param2 = @DBActivityName
		IF (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of Param2 in ActionConditionTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update LastModifiedOn in ProcessDefTable, so that cache will be updated */
		UPDATE ProcessDefTable
		SET lastModifiedOn = getDate()
		WHERE ProcessDefId = @DBProcessDefId
		IF (@@ERROR <> 0 OR @@ROWCOUNT = 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Updation of ProcessDefTable failed, hence ActivityName not changed.'
			RETURN
		END

		/* Update Queuename in QueueDefTable*/
		BEGIN
			IF (@ActivityType != 2 AND @ActivityType != 20) /* If the activity is end activity */
				BEGIN
					SELECT @v_QueueId = QueueId FROM QueueStreamTable WHERE ProcessDefId = @DBProcessDefId AND ActivityId = @ActivityId;
					select @RC = @@ROWCOUNT
					IF (@@ERROR <> 0 OR @RC = 0)
					BEGIN
						ROLLBACK TRANSACTION TxnChangeActivityName
						SET @MainCode = 400
						SET @Message =	'Process does not exist.'
						RETURN
					END
				END
			ELSE
				BEGIN
					select @RC = 0
				END
			
			IF (@RC > 0)
			BEGIN
				SELECT @v_OldQueueName = QueueName FROM QueueDeftable WHERE QueueId = @v_QueueId
				--PRINT 'Queue Name : ' + Convert(VARCHAR,@v_OldQueueName)
				SELECT @v_NewQueueName = SUBSTRING(@v_OldQueueName, 0, CHARINDEX(@DBActivityName,@v_OldQueueName))

				/* Change the queuename in the all related tables, its not mendatory since the swimlane queue contains the activities too */
				--print 'New Queue Name : ' + @v_NewQueueName
				IF (@v_NewQueueName IS NULL OR @v_NewQueueName = '')
					BEGIN
						PRINT 'Either OldQueueName OR NewQueueName are Empty, so skipping renaming queue.'
					END
				ELSE
					BEGIN
						SELECT @v_NewQueueName =  @v_NewQueueName + @DBNewActivityName
						--print 'udpated queueName : ' + @v_NewQueueName
						/*Check for duplicacy of new queue name*/
						If Exists (Select 1 FROM QueueDefTable (NOLOCK) Where QueueName = @v_NewQueueName)
							BEGIN
								PRINT 'NewQueueName already exists, so skipping renaming queue.'
							END
						ELSE
							BEGIN
								/*Update QueueDefTable*/
								select @QueryStr = 'UPDATE QUEUEDEFTABLE SET QueueName = ' + CHAR(39) + @v_NewQueueName + CHAR(39) + ' WHERE QueueID = ' + convert(VARCHAR,@v_QueueId);
								--print @QueryStr
								EXECUTE(@QueryStr)
									IF (@@ERROR <> 0 OR @@ROWCOUNT = 0)
										BEGIN
											ROLLBACK TRANSACTION TxnChangeActivityName
											SET	@MainCode = 400
											SET @Message = ' Updation of QUEUEDEFTABLE failed, hence QueueName not changed...'
											RETURN
										END
								
								/* UPdate WFInstrumentTable */
								WHILE(1=1)
								BEGIN
									SELECT @v_Query = 'select TOP 100 processinstanceid,workitemid from wfinstrumenttable where QueueName = '''+ @v_OldQueueName +''''
									BEGIN	
										EXECUTE('DECLARE FetchRecordCursor CURSOR Fast_Forward FOR ' + @v_Query) 
										 OPEN FetchRecordCursor 
											FETCH NEXT FROM FetchRecordCursor INTO @v_ProcessInstanceId, @v_WorkItemId
											IF(@@FETCH_STATUS <> 0) 
											BEGIN
												CLOSE FetchRecordCursor
												DEALLOCATE FetchRecordCursor
												BREAK;
											END
											WHILE (@@FETCH_STATUS = 0) 	
											BEGIN
												UPDATE WFINSTRUMENTTABLE SET QueueName = @v_NewQueueName WHERE ProcessInstanceId = @v_ProcessInstanceId AND WorkitemId = @v_WorkItemId
												IF (@@ERROR <> 0)
													BEGIN
														ROLLBACK TRANSACTION TxnChangeActivityName
														SET	@MainCode = 400
														SET @Message = ' Updation of WFINSTRUMENTTABLE failed, hence QueueName not changed...'
														RETURN
													END
												FETCH NEXT FROM FetchRecordCursor INTO @v_ProcessInstanceId, @v_WorkItemId
											END
										 CLOSE FetchRecordCursor
										 DEALLOCATE FetchRecordCursor
									END
								END
								
								/* Insert the entry into WFAdminLogTable for change in QueueName*/
								INSERT INTO WFAdminLogTable(ActionId,ActionDateTime,ProcessDefId,QueueId,QueueName,Property,UserId,UserName,Oldvalue,NewValue)values(51,convert(varchar(22), getDate(), 20),0,@QueueID,@OldQueueName,'queueName',@UserId,@Username,@OldQueueName,@NewQueueName) 
								IF (@@ERROR <> 0)
									BEGIN
										ROLLBACK TRANSACTION TxnChangeActivityName
										SET	@MainCode = 400
										SET @Message = ' Insertion into WFAdminLogTable failed, hence QueueName not changed...'
										RETURN
									END
							END
					END
	
				IF(@MainCode <> 0)
				BEGIN
					ROLLBACK TRANSACTION TxnChangeActivityName
					SET @MainCode = 400
					SET @Message ='Updation of queuename in QueueDefTable failed, hence ActivityName not changed.'
					RETURN
				END
			END
		END
		
		/* Update the CaseSummaryDetailsTable for case management */
		BEGIN
			UPDATE WFCaseSummaryDetailsTable
			SET ActivityName = @DBNewActivityName
			WHERE ProcessDefId = @DBProcessDefId AND ActivityId = @ActivityId AND ActivityName = @DBActivityName
			IF (@@ERROR <> 0)
			BEGIN
				ROLLBACK TRANSACTION TxnChangeActivityName
				SET @MainCode = 400
				SET @Message = 'Updation of ActivityName in CaseSummaryDetailsTable failed, hence ActivityName not changed.'
				RETURN
			END
		END

		/*Update the CaseSummaryDetailsHistory for case management*/
		BEGIN
			UPDATE WFCaseSummaryDetailsHistory
			SET ActivityName = @DBNewActivityName
			WHERE ProcessDefId = @DBProcessDefId AND ActivityId = @ActivityId AND ActivityName = @DBActivityName
			IF (@@ERROR <> 0)
			BEGIN
				ROLLBACK TRANSACTION TxnChangeActivityName
				SET @MainCode = 400
				SET @Message = 'Updation of ActivityName in CaseSummaryDetailsHistory failed, hence ActivityName not changed.'
				RETURN
			END
		END
		
		/*Generate log of event activity name changed */
		
		Insert into WFAdminLogTable(ActionId,ActionDateTime,ProcessDefId,UserId,UserName,Oldvalue,NewValue)values(81,convert(varchar(22), getDate(), 20),@DBProcessDefId,@UserId,@UserName,@DBActivityName,@DBNewActivityName)
		IF (@@ERROR <> 0 OR @@ROWCOUNT = 0)
		BEGIN
			ROLLBACK TRANSACTION TxnChangeActivityName
			SET @MainCode = 400
			SET @Message = 'Insertion into WFMessageTable failed, hence ActivityName not changed.'
			RETURN
		END
	COMMIT TRANSACTION TxnChangeActivityName

	SET @MainCode = 0
	SET @Message ='Activity Name changed successfully.'
	--PRINT 'Activity Name changed successfully.'

END

go

PRINT 'Stored Procedure WFChangeActivityName compiled successfully...'

go

	/*__________________________________________________________________________________;
	NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
	Group                       : Genesis;
	Product / Project           : IBPS;
	Module                      : IBPS Server;
	File Name                   : WFMoveCustomData.sql (MSSQL)
	Author                      : Kimil
	Date written (DD/MM/YYYY)   : 14 Feb 2018
	Description                 : Stored Procedure To Move Transactional Custom Data(Implemetation to be done as per need by Implementation Team)
	____________________________________________________________________________________;
	CHANGE HISTORY;
	____________________________________________________________________________________;
	Date        Change By        Change Description (Bug No. (IF Any))
	
	____________________________________________________________________________________*/
	
	
	If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFMoveCustomData')
	Begin
		Execute('DROP PROCEDURE WFMoveCustomData')
		Print 'Procedure WFMoveTransData already exists, hence older one dropped ..... '
	End

	go

	Create Procedure WFMoveCustomData
	(	
		@v_sourceCabinet      			VARCHAR(256),
		@v_targetCabinet      			VARCHAR(256),
		@dblinkString          			VARCHAR(256),
		@v_ProcessDefId                 Int,
		@v_processInstanceId 		    NVARCHAR(256),
		@v_DeleteFromSrc				VARCHAR(1)
		
		)

	AS

	BEGIN
			
		Print 'Procedure WFMoveCustomData execution  starts ..... '
		
		
		Print 'Procedure WFMoveCustomData execution  ends ..... '

	END

go

/*__________________________________________________________________________________;
NEWGEN SOFTWARE TECHNOLOGIES LIMITED;
Group                       : Phoenix;
Product / Project           : IBPS;
Module                      : IBPS Server;
File Name                   : WFPurgeCustomData.sql (Oracle)
Author                      : Kimil
Date written (DD/MM/YYYY)   : 26 March 2018
Description                 : Stored Procedure To Move Transactional Custom Data(Implemetation to be done as per need by Implementation Team)
____________________________________________________________________________________;
CHANGE HISTORY
____________________________________________________________________________________;
Date        Change By        Change Description (Bug No. (IF Any))
____________________________________________________________________________________*/

If Exists (Select * FROM SysObjects  WITH (NOLOCK)  Where xType = 'P' and name = 'WFPurgeCustomData')
	Begin
		Execute('DROP PROCEDURE WFPurgeCustomData')
		Print 'Procedure WFMoveTransData already exists, hence older one dropped ..... '
	End

	go

	Create Procedure WFPurgeCustomData
	(	
		@ProcessInstanceId      			nvarchar(64),
		@ProcessDefId                       INT
		
		)

	AS

	BEGIN
			
		Print 'Procedure WFPurgeCustomData execution  starts ..... '
		
		
		Print 'Procedure WFPurgeCustomData execution  ends ..... '

	END

go


go

go
CREATE TABLE CRCATEGORYTABLE
( 
 CATEGORYID INT, 
 CATEGORYNAME NVARCHAR(255),
 DESCRIPTION NVARCHAR(255), 
 CATEGORYTYPE NVARCHAR(2)
 UNIQUE (CATEGORYID)
)
go
CREATE TABLE CRREPORTTABLE
( 
 REPORTID INT, 
 CATEGORYID INT,
 REPORTNAME NVARCHAR(255),
 DESCRIPTION NVARCHAR(255), 
 REPORTTYPE NVARCHAR(10),
 CREATIONDATETIME DATETIME,
 MODIFIEDDATETIME DATETIME,
 REPORTDEFXML NTEXT,
 UNIQUE (REPORTID)
)

go 
 CREATE TABLE CRALERTTABLE
( 
 ALERTID BIGINT, 
 USERID SMALLINT,
 REPORTINSTANCEID BIGINT, 
 REPORTINSTANCENAME NVARCHAR(255), 
 ALERTDATE DATETIME,
 RULEEXECUTED NTEXT,
 ALERTDATA NTEXT, 
 MAILTEMPLET NTEXT,  
 UNIQUE (ALERTID)
)

go
CREATE TABLE CRHistory 
(
	HistoryID int IDENTITY (1, 1) NOT NULL ,
	ActionID int NOT NULL ,
	SubActionID int ,
	ObjectType int,
	ObjectID int,
	ObjectName nvarchar (100),
	FieldValue1 nvarchar (4000),
	FieldValue2 nvarchar (4000),
	FieldValue3 ntext,
	FieldValue4 ntext,
	UserID1 nvarchar (64) ,
	UserName1 nvarchar (64) ,
	UserID2 nvarchar (64) ,
	UserName2 nvarchar (64) ,
	ActionDateTime datetime default getdate() ,
	Status int,
	CONSTRAINT [PK_CRHistory] PRIMARY KEY  CLUSTERED 
	(
		[HistoryID]
	)  ON [PRIMARY] 
)

go
CREATE TABLE CRREPORTINSTANCETABLE
( 
 REPORTINSTANCEID BIGINT,
 REPORTID BIGINT, 
 REPORTINSTANCENAME NVARCHAR(255),
 REFRESHINTERVAL NVARCHAR(10),
 REPORTINPUT NTEXT,
 ISRULEDEFINED CHAR, 
 DEFAULTDISPLAY CHAR,
 ALERTDELAYINTERVAL NVARCHAR(10),
 CONTAINERID INT,
 INSTANCETYPE CHAR,
 UNIQUE (REPORTINSTANCEID)
)
go
CREATE TABLE CRREPORTRULESTABLE
( 
 REPORTINSTANCEID BIGINT,
 RULEID BIGINT,
 RULENAME NVARCHAR(255),
 RULEDESC NTEXT,
 RULEORDER SMALLINT,
 UNIQUE (RULEID)
)
go
CREATE TABLE CRTABREPORTTABLE
( 
 TABID SMALLINT,
 REPORTINSTANCEID BIGINT,  
 UNIQUE (REPORTINSTANCEID)
)
go
 CREATE TABLE CRUSERPREFTABLE
( 
 USERID SMALLINT,
 TABSWITCHINTERVAL NVARCHAR(10),
 ISTABSWITCH CHAR,
 HOMETABID SMALLINT, 
 ALERTREFRESHINTERVAL NVARCHAR(10),
 BATCHSIZE INT,
 REFRESHINTERVAL CHAR,
 DEFAULTDASHBOARID SMALLINT,
 UNIQUE (USERID)
)
go
CREATE TABLE CRUSERTABTABLE
(
 USERID SMALLINT ,
 GROUPID SMALLINT,
 TABID SMALLINT,
 TABORDER SMALLINT,
 TOGGLABLE CHAR, 
 TABNAME NVARCHAR(255), 
 TEMPLATEID SMALLINT,
 UNIQUE (TABID)
 )
go
CREATE TABLE CRTEMPLATETABLE
(
 TEMPLATEID SMALLINT ,
 TEMPLATENAME NVARCHAR(255),
 TEMPLATEDEF NTEXT,
 CREATEDBYUSERID SMALLINT,
 UNIQUE (TEMPLATEID)
 )

go
 CREATE TABLE CRSCHEDULERDESTPROP 
 (
   SCHEDULERID BIGINT,
   DESTTYPE NVARCHAR(10),
   EMLFROM NVARCHAR(255),
   EMLTO NVARCHAR(255),
   EMLCC NVARCHAR(255),
   EMLSUBJECT NVARCHAR(255),
   EMLMESSAGE NTEXT,
   HDDLOCATION NVARCHAR(255),
   ARCHFOLDERNAME NVARCHAR(255),
   ARCHPARENTINDEX BIGINT,
   UNIQUE(SCHEDULERID)
 )
 go
 CREATE TABLE CRSCHEDULERIDUSERIDTABLE
 (
   SCHEDULERID BIGINT,
   USERID NVARCHAR(64),
   UNIQUE(SCHEDULERID)
 ) 
 go
 CREATE TABLE CRSCHEDULERINSTANCEMAPPING
 (
	SCHEDULERID BIGINT,
	REPORTINSTANCEID BIGINT, 
	INSTANCEORDER SMALLINT,
	STATUS NVARCHAR(10), 
	LASTEXECUTIONDATETIME DATETIME,
	NEXTEXECUTIONDATETIME DATETIME, 
	FAILCOUNT SMALLINT,
	TEMPFILENAME NVARCHAR(255)
 )
 go
 CREATE TABLE CRSCHEDULERPROPERTIES
 (
	SCHEDULERID BIGINT,
	OUTPUTFORMAT NVARCHAR(10), 
	NOOFTRIALS SMALLINT DEFAULT 0, 
	RETRYINTERVAL SMALLINT DEFAULT 0, 
	FILEOPTION NVARCHAR(10),
	SPLITSIZE SMALLINT,
	USERID NVARCHAR(256), 
	PASSWORD NVARCHAR(256), 
	TIMEZONE NVARCHAR(64),
	LOCALE NVARCHAR(64),
	UNIQUE(SCHEDULERID)
 )
 go
CREATE TABLE CRSCHEDULERRECURRENCE
(
	OCCURRENCE NVARCHAR(10),
	STARTDATE DATETIME,
	ENDDATE DATETIME,
    TIMEGAP SMALLINT,
	WEEKDAYS NVARCHAR(20),
	WEEKS NVARCHAR(256),
	DAYS NVARCHAR(256),
	MONTHS NVARCHAR(256),
	HOURS NVARCHAR(256), 
	MINUTES NVARCHAR(256),
	HOURGAP SMALLINT,
        MINGAP SMALLINT,
	STARTHOUR SMALLINT, 
    ENDHOUR SMALLINT,
	STARTMINUTE SMALLINT,
	ENDMINUTE SMALLINT, 
    DESCRIPTION NVARCHAR(512), 
	SCHEDULERID BIGINT,
	UNIQUE(SCHEDULERID)
)
go
 CREATE TABLE CRSCHEDULERSTATETABLE
 (
	SERVICEID NVARCHAR(255), 
	SCHEDULERID BIGINT, 
	TIMERHASHCODE NVARCHAR(255),
	TIMERSTATE NVARCHAR(20), 
	TIMERSTATUS NVARCHAR(20),
	APPSERVERIP NVARCHAR(20), 
	APPSERVERPORT INT,
	ERRORMSG NVARCHAR(255)
 )
go
 CREATE TABLE CRSCHEDULERTABLE
 (
	SCHEDULERID BIGINT,
	CREATEDBYUSERID NVARCHAR(64), 
	CREATEDDATETIME DATETIME,
	SCHEDULERSTATUS NVARCHAR(5),
	SCHEDULERTYPE VARCHAR(2),
	SCHEDULERSTATE NVARCHAR(10), 
	TITLE NVARCHAR(255), 
	STARTDATETIME DATETIME, 
	NEXTRUNTIME DATETIME, 
	LASTRUNTIME DATETIME, 
	TEMPFOLDERNAME NVARCHAR(256),
	DESCRIPTION NVARCHAR(1024), 
	FAILCOUNT SMALLINT DEFAULT 0 NOT NULL, 
    EXECUTIONCOUNT INT DEFAULT 0,
    REPORTID INT DEFAULT 0,
	UNIQUE(SCHEDULERID)
 ) 
 go
 CREATE TABLE CRUSERIDSESSIONIDTABLE
 (
	USERID NVARCHAR(64),
	SESSIONID BIGINT,
	UNIQUE(USERID)
 )
 go
 CREATE TABLE CRSchedulerHistory 
(
	HistoryID int IDENTITY (1, 1) NOT NULL ,
	ActionID int NOT NULL ,
	SubActionID int ,
	ObjectID int,
	ObjectName nvarchar (100),
	FieldValue1 nvarchar (4000),
	FieldValue2 nvarchar (4000),
	FieldValue3 ntext,
	FieldValue4 ntext,
	ActionDateTime datetime default getdate() ,
	SchedulerType nvarchar(10),
	CONSTRAINT [PK_CRSchedulerHistory] PRIMARY KEY  CLUSTERED 
	(
		[HistoryID]
	)  ON [PRIMARY] 
)
 go
INSERT INTO CRTEMPLATETABLE(TEMPLATEID,TEMPLATENAME,TEMPLATEDEF,CREATEDBYUSERID) VALUES(1,'Default','<TemplateData><Resolution><WindowHeight>604</WindowHeight><WindowWidth>804</WindowWidth><ParentLeft>22</ParentLeft><ParentTop>95</ParentTop><ParentHeight>509</ParentHeight><ParentWidth>782</ParentWidth></Resolution><Containers><Container><ContainerId>1</ContainerId><ContainerLeft>22</ContainerLeft><ContainerTop>97</ContainerTop><ContainerRight>492</ContainerRight><ContainerBottom>375</ContainerBottom></Container><Container><ContainerId>2</ContainerId><ContainerLeft>498</ContainerLeft><ContainerTop>97</ContainerTop><ContainerRight>778</ContainerRight><ContainerBottom>375</ContainerBottom></Container><Container><ContainerId>3</ContainerId><ContainerLeft>22</ContainerLeft><ContainerTop>388</ContainerTop><ContainerRight>779</ContainerRight><ContainerBottom>571</ContainerBottom></Container></Containers></TemplateData>',-9999)

go
CREATE VIEW CRGROUPVIEW 
		AS 
		SELECT groupindex, groupname, CreatedDatetime, expiryDATETIME, 
			privilegecontrollist, owner, comment as commnt, grouptype, maingroupindex 
		FROM PDBGROUP
go
CREATE TABLE CRGROUPDASHBOARDTABLE
(
 DASHBOARDID INT,
 GROUPID INT,
 DASHBOARDNAME NVARCHAR(255),
 OWNERID INT,
 CONTROLLERID INT,
 UNIQUE (DASHBOARDID),
 UNIQUE(GROUPID)
)
go

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			:  BAM_AverageProcReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create Average Process Time Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
_28/10/2010    Dinesh Sharma      13218 Average duration is showing zero for all processes               _______________________________________________________________________________________________*/ 

CREATE      Procedure BAM_AverageProcReport
(

     	@in_ProcessDefId varchar(50),		
	@in_FromDate varchar(50),
	@in_ToDate varchar(50)	
)
AS
BEGIN

Declare @in_QueryString varchar(2000)

if(@in_ProcessDefId='' or @in_ProcessDefId='A_L_C_9_C_L_A')  /***** All processes case ******/
  begin
	set @in_QueryString ='select (select processname + ''('' + CONVERT( varchar(6) , versionno)  + '')''
	 from processdeftable where processdefid = SummaryTable.processdefid )as "Process Name",processdefid as "ProcessDefId"
	  ,case when sum(totalwicount) = 0 then 0 
	else cast((sum(TotalDuration)/(sum(totalwicount)*60.0))as decimal(20,2))
	 end as "Average Duration(Mins)" 
	from SummaryTable where actionid = 20 AND ActionDateTime > 
	CONVERT( DateTime , '''+@in_FromDate+''')  AND 
	ActionDateTime <= CONVERT( DateTime , '''+@in_ToDate+''') group by processdefid'
  end

else if(@in_ProcessDefId='-1000')    /***** To get All column to create report in BAM ******/
  begin
	set @in_QueryString ='select ''Process Name'' as "Process Name",''Process Name'' as "Process_Name", 1 as "ProcessDefId",
	''Workstep Name'' as "Workstep Name", 1.0 as "Average Processing Time(Min)",
	1.0 as "Average Duration(Mins)"'
  end

else
   begin
	set @in_QueryString = 'select (select processname + ''('' + CONVERT( varchar(6) , versionno)  + '')'' 
	from processdeftable where processdefid = WFActivityReportTable.processdefid ) as "Process_Name"
	,processdefid as "ProcessDefId" ,activityName as "Workstep Name"  ,
	case when sum(totalwicount) = 0 then 0 
	else cast((sum(totalprocessingtime)/(sum(totalwicount)*60.0))as decimal(20,2))
	 end as "Average Processing Time(Min)",
	case when sum(totalwicount) = 0 then 0 
	else cast((sum(TotalDuration)/(sum(totalwicount)*60.0))as decimal(20,2))
	 end as "Average Duration(Mins)" from WFActivityReportTable
	 where  processdefId = '''+@in_ProcessDefId+''' AND ActionDateTime > CONVERT( DateTime , 
	'''+@in_FromDate+''')  AND ActionDateTime <= CONVERT( DateTime , '''+@in_ToDate+''')
	 group by processdefid ,activityName,activityid'
  end

exec (@in_QueryString)
end

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			:  BAM_DelayReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create Delay Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

CREATE  Procedure BAM_DelayReport
(

     	@in_ProcessDefId varchar(50),		
	@in_FromDate varchar(50),
	@in_ToDate varchar(50)	
)
AS
BEGIN

Declare @in_QueryString varchar(3000)

if(@in_ProcessDefId='' or @in_ProcessDefId='A_L_C_9_C_L_A')  /***** All processes case ******/
  begin
	set @in_QueryString ='Select ProcessDefId as "ProcessDefId",
		(select processname + ''('' + CONVERT( varchar(6) , versionno)  + '')''
		from processdeftable where processdefid = SummaryTable.processdefid )as "Process Name",
		sum(totalwicount*(1-abs(sign ( actionid - 20))))  as "Process Instances Completed",
		Sum (wkindelay ) as "Delayed Instances" ,
		case when sum(wkindelay) = 0 then 0 
		else cast((sum(delaytime)/(sum(wkindelay)*60.0))as decimal(20,2))end 
		as "Average Delay(Mins)"
		from summaryTable  WITH (NOLOCK) where ActionId IN ( 25,20, 5 ) AND 
		ActionDateTime > CONVERT( DateTime , '''+@in_FromDate+''') 
		AND ActionDateTime <= CONVERT( DateTime ,'''+@in_ToDate+''') 
		Group By summaryTable.ProcessDefId '
  end

else if(@in_ProcessDefId='-1000')    /***** To get All column to create report in BAM ******/
  begin
	set @in_QueryString ='select 1 as "ProcessDefId",''Process Name'' as "Process Name",''Workstep Name'' as "Workstep Name",1 as "Total Processed",
	1 as "Processed with Delay", 1 as "Process Instances Completed" , 1 as "Delayed Instances",1.0 as "Average Delay(Mins)"'
  end

else
   begin
	set @in_QueryString ='Select  ActivityName as "Workstep Name", TotalWorkItems as "Total Processed", 
	Delayed as "Processed with Delay", DelayTime as "Average Delay(Mins)" 
	from ( Select  Sum (wkindelay) as Delayed ,case when sum(wkindelay) = 0 then 0 
	else cast((sum(delaytime)/(sum(wkindelay)*60.0))as decimal(20,2))end as   DelayTime ,
 	ActivityId ,ActivityName ,
	(sum(totalwicount*(1-abs(sign ( actionid - 27)))) + sum(totalwicount*(1-abs(sign ( actionid - 2)))))
 	as TotalWorkItems
 	from summaryTable  WITH (NOLOCK)
	where ActionId IN ( 27 , 28, 2 )  and  ProcessDefId = '''+@in_ProcessDefId+''' AND
 	ActionDateTime >  CONVERT( DateTime , '''+@in_FromDate+''') 
 	AND ActionDateTime <=  CONVERT( DateTime ,'''+@in_ToDate+''') 
 	Group by ActivityID ,ActivityName ) a where a.ActivityId > 0'
  end

exec (@in_QueryString)
end

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			: BAM_ExceptionDetailsReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create Exception Details Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

CREATE     Procedure BAM_ExceptionDetailsReport
(
     	@in_ProcessDefId 	varchar(50),
	@in_Exceptionid 	varchar(50),
	@in_ReportType 		varchar(5),		
	@in_FromDate 		varchar(50),
	@in_ToDate 		varchar(50)
)
AS
BEGIN
DECLARE @v_tempFromDate		datetime, 	/* Date Type variable required for createing from dateranges based on reporttype */
@v_tempToDate			datetime, 	/* Date Type variable required for createing To dateranges based on reporttype */
@v_FromDateFinal 		datetime,	/* Date Type variable used to save Final From Date */
@v_ToDateFinal			datetime,	/* Date Type variable used to save Final To Date */
@v_QueryString 			varchar(4000),	/* Hold complete Query string to be executed*/
@v_dateQueryString 		varchar(150),	/* Hold Complete From date ,To date  Query  Cndition*/
@v_datepartQueryString 		varchar(100),	/* Hold DatePart of Query*/
@v_datefromPartQueryString 	varchar(300),	/* Hold Date From Part of Query*/
@v_datetoPartQueryString 	varchar(300),	/* Hold Date To Part of Query*/
@v_processsStrQuery 		varchar(100),	/* Hold Process part of Query condition*/
@v_exceptionStrQuery 		varchar(100),	/* Hold Exception part of Query condition*/
@v_DisplayColumnQueryString 	varchar(500)	/* Hold columns To be displayed by procedure based on Report type */

  set @v_dateQueryString=' and actiondatetime>=CONVERT( DateTime ,'''+@in_FromDate+''') and actiondatetime<=CONVERT( DateTime ,'''+@in_ToDate+''')'
  IF(@in_ProcessDefId='' or @in_ProcessDefId='-1')	 /***** In case of -1 processdef id or ProcessDefId is null show all the possible columns ,this is used by bam to get column Defination of report******/
  BEGIN
	select 'keyfield' as "Key Field",'Hour' as "Hour", GETDATE() as "Day" ,'Week' as "Week",'Month'as "Month",'Quarter'as "Quarter",GETDATE() as "From" ,GETDATE() as "To",0 as "Exceptions Raised"
  END
  ELSE
  BEGIN

	set @v_processsStrQuery=' and summarytable.ProcessDefId='+@in_ProcessDefId 
	set @v_tempFromDate=CONVERT( DateTime , @in_FromDate) 
	set @v_tempToDate=CONVERT( DateTime , @in_ToDate) 
	 
	if(@in_Exceptionid='' or @in_Exceptionid='0')
	begin
		set @v_exceptionStrQuery=''--this procedure is not calculate exceptin count for all exception 
	end
	else
	begin
		set @v_exceptionStrQuery=' and summarytable.AssociatedFieldId ='+@in_Exceptionid
	end


	if(@in_ReportType='H')
	Begin
		set @v_tempFromDate= DATEADD ( hh, DATEPART ( hh,@v_tempFromDate) ,  DATEADD ( dd, DATEPART ( dy,@v_tempFromDate)-1,  DATENAME ( yy,@v_tempFromDate) ) )
		set @v_tempToDate=DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,@v_tempToDate) ,DATEADD ( dd, DATEPART ( dy,@v_tempToDate) -1,  DATENAME ( yy,@v_tempToDate) ) ) ) )
		set @v_datepartQueryString='DATEPART ( hh,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) )'
		set @v_datetoPartQueryString='DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) ) ) )'
		set @v_DisplayColumnQueryString='Interval as "Hour",FromRange as "From" ,ToRange as "To"'
	end
	else if(@in_ReportType='D')
	Begin
		set @v_tempFromDate=DATEADD ( dd, DATEPART ( dy,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) ) 
		set @v_tempToDate=DATEADD ( dd, DATEPART ( dy,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString='DATEPART ( dy,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='FromRange as "Day"'
	end
	else if(@in_ReportType='W')
	Begin
		set @v_tempFromDate=DATEADD ( wk,( DATEPART ( wk,@v_tempFromDate) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,@v_tempFromDate) ) ,  DATENAME ( yy,@v_tempFromDate) ) )
		set @v_tempToDate=DATEADD ( wk,( DATEPART ( wk,@v_tempToDate) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,@v_tempToDate) ) ,  DATENAME ( yy,@v_tempToDate) ) )
		set @v_datepartQueryString='DATEPART ( wk,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
		set @v_datetoPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
		set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Week", FromRange as "From" ,ToRange as "To"'
	end
	else if(@in_ReportType='M')
	Begin
		set @v_tempFromDate=DATEADD ( mm, DATEPART ( mm,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) )
		set @v_tempToDate=DATEADD ( mm, DATEPART ( mm,@v_tempToDate) ,DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString='DATEPART ( mm,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Month", FromRange as "From" ,ToRange as "To"'
	end
	else if(@in_ReportType='Q')
	Begin 
		set @v_tempFromDate=DATEADD ( qq,( DATEPART ( qq,@v_tempFromDate) -1),  DATENAME ( yy,@v_tempFromDate) ) 
		set @v_tempToDate=DATEADD ( qq, DATEPART ( qq,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString=' DATEPART ( qq,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( qq,( DATEPART ( qq,actionDatetime) -1),  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( qq, DATEPART ( qq,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Quarter", FromRange as "From" ,ToRange as "To"'
	end
	
	set @v_FromDateFinal = @v_tempFromDate
	set @v_ToDateFinal = @v_tempToDate
	
	set @v_QueryString =  ' Select '+ @v_datepartQueryString + ' as Interval, '
	+ @v_datefromPartQueryString + ' as FromRange , '+ @v_datetoPartQueryString + ' as ToRange , '
	+ ' AssociatedFieldId as "AssociatedFieldId",  sum(totalwicount)as ExcepionRaised
	from Summarytable WITH(NOLOCK) where 1=1' 
	+ @v_processsStrQuery+@v_exceptionStrQuery+@v_dateQueryString+ ' and ActionId = 9'
	+ ' Group By '+ @v_datepartQueryString + ' , '+ @v_datefromPartQueryString + ', '+ @v_datetoPartQueryString + ' , '
	+ ' AssociatedFieldId' 
	
	CREATE TABLE #tempTable
	(
		[Interval]	[BIGINT] default 0,
		[FromRange]	DATETIME	NOT NULL,
		[ToRange] 	DATETIME	NOT NULL,
		[AssociatedFieldId]	[int] default 0,
		[ExcepionRaised]	[int] default 0,
		PRIMARY KEY (FromRange,ToRange)
	
	)
	CREATE TABLE #tempTableQueryResult
	(
		[Interval]	[BIGINT] default 0,
		[FromRange]	DATETIME	NOT NULL,
		[ToRange] 	DATETIME	NOT NULL,
		[AssociatedFieldId]	[int] default 0,
		[ExcepionRaised]	[int] default 0,
		PRIMARY KEY (FromRange,ToRange)
	)
	--print CONVERT(VARCHAR(26), @v_tempFromDate, 109)
	--print CONVERT(VARCHAR(26), @v_tempToDate, 109)

	/***** insert into #tempTable  from and to date range based on report type******/

	While @v_tempFromDate<=@v_tempToDate
	begin
		if(@in_ReportType='H')
		Begin
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(ss,-1,DATEADD(hh,1,@v_tempFromDate)),DATEPART ( hh,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(hh,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='D')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,@v_tempFromDate,DATEPART ( dd,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='W')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate)),DATEPART ( wk,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate))))
			set @v_tempFromDate=DATEADD(wk,1,@v_tempFromDate)
		end
		else if(@in_ReportType='M')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(mm,1,@v_tempFromDate)),DATEPART ( mm,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(mm,1,@v_tempFromDate)
		end
		else if(@in_ReportType='Q')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(qq,1,@v_tempFromDate)),DATEPART ( qq,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(qq,1,@v_tempFromDate)
		end
		else
		begin
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate)
		end	
	end
	
	--select * from #tempTable
	--print @v_QueryString

	/***** Insert the data from Query to table #tempTableQueryResult******/

	insert into #tempTableQueryResult (Interval , FromRange , ToRange , AssociatedFieldId , ExcepionRaised)
	 exec(@v_QueryString )
	
	
	--select * from #tempTableQueryResult

	/***** Update the table #tempTable with Data coming from #tempTableQueryResult******/			
	
	UPDATE #tempTable
	SET Interval=Q.Interval, AssociatedFieldId=Q.AssociatedFieldId, ExcepionRaised=Q.ExcepionRaised
	from  #tempTableQueryResult Q
	where Q.FromRange=#tempTable.FromRange and Q.ToRange= #tempTable.ToRange
	

	drop table #tempTableQueryResult 
	
	--select * from #tempTable
	
	/***** Update the From date to exect date entered by user******/	
	update  #tempTable set FromRange=CONVERT( DateTime , @in_FromDate)
	where  FromRange=@v_FromDateFinal

	/***** Update the To date to exect date entered by user ******/	
	update  #tempTable set ToRange=CONVERT( DateTime , @in_ToDate)
	where  ToRange=@v_ToDateFinal
	
	/***** Execute the query to get final report result******/	
	exec('select '+@v_DisplayColumnQueryString+' ,ExcepionRaised as "Exceptions Raised" from #tempTable order by FromRange, Interval')
  END

END

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			: BAM_ExpiredWorkitemsReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create Expired Workitems Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

CREATE    Procedure BAM_ExpiredWorkitemsReport
(
     	@in_ProcessDefId 	varchar(50),
	@in_ReportType 		varchar(5),		
	@in_FromDate 		varchar(50),
	@in_ToDate 		varchar(50)
)
AS
BEGIN
DECLARE @v_tempFromDate		datetime, 	/* Date Type variable required for createing from dateranges based on reporttype */
@v_tempToDate			datetime, 	/* Date Type variable required for createing To dateranges based on reporttype */
@v_FromDateFinal 		datetime,	/* Date Type variable used to save Final From Date */
@v_ToDateFinal			datetime,	/* Date Type variable used to save Final To Date */
@v_QueryString 			varchar(4000),	/* Hold complete Query string to be executed*/
@v_dateQueryString 		varchar(150),	/* Hold Complete From date ,To date  Query  Cndition*/
@v_datepartQueryString 		varchar(100),	/* Hold DatePart of Query*/
@v_datefromPartQueryString 	varchar(300),	/* Hold Date From Part of Query*/
@v_datetoPartQueryString 	varchar(300),	/* Hold Date To Part of Query*/
@v_processsStrQuery 		varchar(100),	/* Hold Process part of Query condition*/
@v_DisplayColumnQueryString 	varchar(500)	/* Hold columns To be displayed by procedure based on Report type */


  set @v_dateQueryString=' and actiondatetime>=CONVERT( DateTime ,'''+@in_FromDate+''') and actiondatetime<=CONVERT( DateTime ,'''+@in_ToDate+''')'
  IF(@in_ProcessDefId='' or @in_ProcessDefId='-1') /***** In case of -1 processdef id or ProcessDefId is null show all the possible columns ,this is used by bam to get column Defination of report******/
  BEGIN
	select 'keyfield' as "Key Field",'Hour' as "Hour", GETDATE() as "Day" ,'Week' as "Week",'Month'as "Month",'Quarter'as "Quarter",GETDATE() as "From" ,GETDATE() as "To",0 as "Workitems Expired"
  END
  ELSE
  BEGIN

	set @v_processsStrQuery=' and summarytable.ProcessDefId='+@in_ProcessDefId 
	set @v_tempFromDate=CONVERT( DateTime , @in_FromDate) 
	set @v_tempToDate=CONVERT( DateTime , @in_ToDate) 
	 
	if(@in_ReportType='H')
	Begin
		set @v_tempFromDate= DATEADD ( hh, DATEPART ( hh,@v_tempFromDate) ,  DATEADD ( dd, DATEPART ( dy,@v_tempFromDate)-1,  DATENAME ( yy,@v_tempFromDate) ) )
		set @v_tempToDate=DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,@v_tempToDate) ,DATEADD ( dd, DATEPART ( dy,@v_tempToDate) -1,  DATENAME ( yy,@v_tempToDate) ) ) ) )
		set @v_datepartQueryString='DATEPART ( hh,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) )'
		set @v_datetoPartQueryString='DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) ) ) )'
		set @v_DisplayColumnQueryString='Interval as "Hour",FromRange as "From" ,ToRange as "To"'
	end
	else if(@in_ReportType='D')
	Begin
		set @v_tempFromDate=DATEADD ( dd, DATEPART ( dy,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) ) 
		set @v_tempToDate=DATEADD ( dd, DATEPART ( dy,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString='DATEPART ( dy,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='FromRange as "Day"'
	end
	else if(@in_ReportType='W')
	Begin
		set @v_tempFromDate=DATEADD ( wk,( DATEPART ( wk,@v_tempFromDate) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,@v_tempFromDate) ) ,  DATENAME ( yy,@v_tempFromDate) ) )
		set @v_tempToDate=DATEADD ( wk,( DATEPART ( wk,@v_tempToDate) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,@v_tempToDate) ) ,  DATENAME ( yy,@v_tempToDate) ) )
		set @v_datepartQueryString='DATEPART ( wk,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
		set @v_datetoPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
		set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Week", FromRange as "From" ,ToRange as "To"'
	end
	else if(@in_ReportType='M')
	Begin
		set @v_tempFromDate=DATEADD ( mm, DATEPART ( mm,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) )
		set @v_tempToDate=DATEADD ( mm, DATEPART ( mm,@v_tempToDate) ,DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString='DATEPART ( mm,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Month", FromRange as "From" ,ToRange as "To"'
	end
	else if(@in_ReportType='Q')
	Begin 
		set @v_tempFromDate=DATEADD ( qq,( DATEPART ( qq,@v_tempFromDate) -1),  DATENAME ( yy,@v_tempFromDate) ) 
		set @v_tempToDate=DATEADD ( qq, DATEPART ( qq,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString=' DATEPART ( qq,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( qq,( DATEPART ( qq,actionDatetime) -1),  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( qq, DATEPART ( qq,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Quarter", FromRange as "From" ,ToRange as "To"'
	end
	
	set @v_FromDateFinal = @v_tempFromDate
	set @v_ToDateFinal = @v_tempToDate

	set @v_QueryString ='Select '+ @v_datepartQueryString + 'as Interval, '
	+ @v_datefromPartQueryString + ' as FromRange , '+ @v_datetoPartQueryString + ' as ToRange , '
	+ ' summaryTable.ProcessDefId as ProcessDefId, ProcessName ,  sum(totalwicount) as TotalWorked
	from summaryTable WITH(NOLOCK), ProcessDefTable WITH (NOLOCK) where 1=1'
	+ @v_processsStrQuery+@v_dateQueryString
	+ ' and ActionId = 28  and summaryTable.ProcessDefId = ProcessDefTable.ProcessDefId '
	+ ' Group By '+ @v_datepartQueryString + ' , '+ @v_datefromPartQueryString + ', '+ @v_datetoPartQueryString + ' , '
	+ ' summaryTable.ProcessDefId , ProcessName '
	
	
	CREATE TABLE #tempTable
	(
		[Interval]	[BIGINT] default 0,
		[FromRange]	DATETIME	NOT NULL,
		[ToRange] 	DATETIME	NOT NULL,
		[ProcessDefId]	[int] default 0,
		[ProcessName]	[varchar](200) ,
		[TotalWorked]	[int] default 0,
		PRIMARY KEY (FromRange,ToRange)
	
	)
	CREATE TABLE #tempTableQueryResult
	(
		[Interval]	[BIGINT] default 0,
		[FromRange]	DATETIME	NOT NULL,
		[ToRange] 	DATETIME	NOT NULL,
		[ProcessDefId]	[int] default 0,
		[ProcessName]	[varchar](200) ,
		[TotalWorked]	[int] default 0,
		PRIMARY KEY (FromRange,ToRange)
	
	)
	--print CONVERT(VARCHAR(26), @v_tempFromDate, 109)
	--print CONVERT(VARCHAR(26), @v_tempToDate, 109)

/***** insert into #tempTable  from and to date range based on report type******/

	While @v_tempFromDate<=@v_tempToDate
	begin
		if(@in_ReportType='H')
		Begin
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(ss,-1,DATEADD(hh,1,@v_tempFromDate)),DATEPART ( hh,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(hh,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='D')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,@v_tempFromDate,DATEPART ( dd,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='W')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate)),DATEPART ( wk,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate))))
			set @v_tempFromDate=DATEADD(wk,1,@v_tempFromDate)
		end
		else if(@in_ReportType='M')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(mm,1,@v_tempFromDate)),DATEPART ( mm,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(mm,1,@v_tempFromDate)
		end
		else if(@in_ReportType='Q')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(qq,1,@v_tempFromDate)),DATEPART ( qq,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(qq,1,@v_tempFromDate)
		end
		else
		begin
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate)
		end	
	end
	
	--select * from #tempTable
	--print @v_QueryString
	--create table #temphist1Table as (exec(@v_QueryString ))

	/***** Insert the data from Query to table #tempTableQueryResult******/

	insert into #tempTableQueryResult (Interval , FromRange , ToRange , ProcessDefId , ProcessName ,TotalWorked)
	 exec(@v_QueryString )
	
	
	--select * from #tempTableQueryResult
		
	/***** Update the table #tempTable with Data coming from #tempTableQueryResult******/			

	UPDATE #tempTable
	SET Interval=Q.Interval, ProcessDefId=Q.ProcessDefId, ProcessName=Q.ProcessName, TotalWorked=Q.TotalWorked
	from  #tempTableQueryResult Q
	where Q.FromRange=#tempTable.FromRange and Q.ToRange= #tempTable.ToRange
	

	drop table #tempTableQueryResult 
	
	--select * from #tempTable

	/***** Update the From date to exect date entered by user******/	
	update  #tempTable set FromRange=CONVERT( DateTime , @in_FromDate)
	where  FromRange=@v_FromDateFinal

	/***** Update the To date to exect date entered by user ******/	
	update  #tempTable set ToRange=CONVERT( DateTime , @in_ToDate)
	where  ToRange=@v_ToDateFinal
	
	/***** Execute the query to get final report result******/	
	exec('select '+@v_DisplayColumnQueryString+' ,TotalWorked as "Workitems Expired" from #tempTable order by FromRange, Interval')
  END

END

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			: BAM_GetReportType.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to get Report Type
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

CREATE  procedure BAM_GetReportType
(
	@in_FromDate varchar(50),
	@in_ToDate varchar(50)
)
as
begin
DECLARE @v_FromDateFinal	datetime, 	/* Date Type variable used to save Final From Date */
@v_ToDateFinal			datetime	/* Date Type variable used to save Final To Date */
CREATE TABLE #temp
(
	[ReportType]		[varchar](20) NULL,
	[hidReportType]		[varchar](10) NULL

)
set @v_FromDateFinal=CONVERT( DateTime , @in_FromDate) 
set @v_ToDateFinal=CONVERT( DateTime , @in_ToDate)
if(@v_ToDateFinal>@v_FromDateFinal)
begin
	if(DATEDIFF(month, @v_FromDateFinal , @v_ToDateFinal)/12>10)
	begin
		insert into #temp values ('Quarter','Q')
	end
	else if(DATEDIFF(month, @v_FromDateFinal , @v_ToDateFinal)/12>5)
	begin
		insert into #temp values ('Month','M')
		insert into #temp values ('Quarter','Q')
	end
	else if(DATEDIFF(month, @v_FromDateFinal , @v_ToDateFinal)>12)
	begin
		insert into #temp values ('Week','W')
		insert into #temp values ('Month','M')
		insert into #temp values ('Quarter','Q')
	end
	else if(DATEDIFF(month, @v_FromDateFinal , @v_ToDateFinal)>=3)
	begin
		insert into #temp values ('Day','D')
		insert into #temp values ('Week','W')
		insert into #temp values ('Month','M')
		insert into #temp values ('Quarter','Q')
	end
	else if(DATEDIFF(month, @v_FromDateFinal , @v_ToDateFinal)>0)
	begin
		insert into #temp values ('Day','D')
		insert into #temp values ('Week','W')
		insert into #temp values ('Month','M')
	end
	else if((DATEPART(wk,@v_ToDateFinal)-DATEPART(wk,@v_FromDateFinal))>0)
	begin
		insert into #temp values ('Day','D')
		insert into #temp values ('Week','W')
	end
	else if((DATEPART(dy,@v_ToDateFinal)-DATEPART(dy,@v_FromDateFinal))>1)
	begin
		insert into #temp values ('Day','D')
	end
	else
	begin
		insert into #temp values ('Hour','H')
	end		 
end
select ReportType as "Report Type",hidReportType from #temp
end

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			: BAM_ParticipantReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create Participant Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

CREATE   Procedure BAM_ParticipantReport
(

     	@in_ProcessDefId varchar(50),
	@in_ActivityId varchar(50),
	@in_UserId varchar(50),		
	@in_FromDate varchar(50),
	@in_ToDate varchar(50)	
)
AS
BEGIN

Declare @v_QueryString varchar(1024)

set @v_QueryString='select activityid as "ActivityId", activityname as "Workstep Name", 
userid as "UserId", username as "User Name",processdefid as "ProcessDefId",sum(totalwicount) as "Workitems Processed",
case when sum(totalwicount) = 0 then 0 
else cast((sum(totalprocessingtime)/(sum(totalwicount)*60.0))as decimal(20,2))
 end as "Average Processing Time(Min)",
case when sum(totalwicount) = 0 then 0 
else cast((sum(TotalDuration)/(sum(totalwicount)*60.0))as decimal(20,2))
 end as "Average Duration(Mins)" from summarytable  
WITH (NOLOCK)  where actionid in (27,2) 
and processdefid='''+@in_ProcessDefId+''''

if(@in_ActivityId<>'' and @in_ActivityId<>'A_L_C_9_C_L_A')  /***** If some activityid is coming ,A_L_C_9_C_L_A means all activity******/
  begin
	set @v_QueryString = @v_QueryString+'and activityid='''+@in_ActivityId+''''
  end

if(@in_UserId<>'') /***** If some userid is coming ******/
  begin
	set @v_QueryString = @v_QueryString+'and userId='''+@in_UserId+''''
  end

set @v_QueryString = @v_QueryString+'AND ActionDateTime >= CONVERT( DateTime , '''+@in_FromDate+''')
  AND ActionDateTime <= CONVERT( DateTime , '''+@in_ToDate+''') group by processdefid,
 activityid, activityname, userid, username' 

--print @v_QueryString
exec (@v_QueryString)
end

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			: BAM_ProcessHistoryReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create Process History Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

CREATE   Procedure BAM_ProcessHistoryReport
(
     	@in_ProcessDefId 	varchar(50),
	@in_ActivityId 		varchar(50),
	@in_ReportType 		varchar(5),		
	@in_FromDate 		varchar(50),
	@in_ToDate 		varchar(50)
)
AS
BEGIN
DECLARE @v_tempFromDate		datetime,	/* Date Type variable required for createing from dateranges based on reporttype */
@v_tempToDate			datetime,	/* Date Type variable required for createing To dateranges based on reporttype */
@v_FromDateFinal 		datetime,	/* Date Type variable used to save Final From Date */
@v_ToDateFinal			datetime,	/* Date Type variable used to save Final To Date */
@v_QueryString 			varchar(4000),	/* Hold complete Query string to be executed*/
@v_dateQueryString 		varchar(150),	/* Hold Complete From date ,To date  Query  Cndition*/
@v_datepartQueryString 		varchar(100),	/* Hold DatePart of Query*/
@v_datefromPartQueryString 	varchar(300),	/* Hold Date From Part of Query*/
@v_datetoPartQueryString 	varchar(300),	/* Hold Date To Part of Query*/
@v_activitystrQuery 		varchar(100),	/*Hold the Activity condition of Query */
@v_tempColumnQueryString 	varchar(1000),	/*Hold the columns of temprary table  */
@v_DisplayColumnQueryString 	varchar(300),	/* Hold columns To be displayed by procedure based on Report type */
@v_DisplayColumnActivityQuery 	varchar(500)	/* Hold columns To be displayed by procedure based on Activity Id */

set @v_dateQueryString=' and actiondatetime>=CONVERT( DateTime ,'''+@in_FromDate+''') and actiondatetime<=CONVERT( DateTime ,'''+@in_ToDate+''')'

IF(@in_ProcessDefId='' or  @in_ProcessDefId='-1')  /***** In case of -1 processdef id or ProcessDefId is null show all the possible columns ,this is used by bam to get column Defination of report******/
  BEGIN
	select 'keyfield' as "Key Field",'Hour' as "Hour", GETDATE() as "Day" ,'Week' as "Week",'Month'as "Month",'Quarter'as "Quarter",GETDATE() as "From" ,GETDATE() as "To",0 as "Introduced",0 as "Completed",0 as "Aborted",0 as "Entered in Workstep",0 as "Expired",0 as "Processed"
  END
ELSE
  BEGIN
	if(@in_ActivityId='' or @in_ActivityId='A_L_C_9_C_L_A')/***** If No activity is selected,bam return A_L_C_9_C_L_A in all cases******/
	begin
		set @v_activitystrQuery=''
		set @v_tempColumnQueryString=' 0 as expired,0 as process,  0 as routed,sum(totalwicount*(1-abs(sign ( actionid - 2)))) as intro,  sum(totalwicount*(1-abs(sign ( actionid - 20)))) as comp,  sum(totalwicount*(1-abs(sign ( actionid - 3)))) as abrt,  0 as term, '
		set @v_DisplayColumnActivityQuery='intro as "Introduced",comp as "Completed",abrt as "Aborted" ' 
	end
	else
	begin
	
		set @v_activitystrQuery=' and activityid='+@in_ActivityId
		SET @v_tempColumnQueryString='sum(totalwicount*(1- abs(sign( actionid - 28)))) as expired, sum(totalwicount*(1-abs(sign ( actionid - 27)))) + sum(totalwicount*(1-abs(sign ( actionid - 2)))) as process,  sum(totalwicount*(1-abs(sign ( actionid - 4)))) + sum(totalwicount*(1-abs(sign ( actionid - 6)))) + sum(totalwicount*(1-abs(sign ( actionid - 45)))) as routed,0 as intro,0 as comp,0 as abrt ,0 as term,'
		set @v_DisplayColumnActivityQuery='routed as "Entered in Workstep",expired as "Expired",process as "Processed"'
	end
	 
	set @v_tempFromDate=CONVERT( DateTime , @in_FromDate) 
	set @v_tempToDate=CONVERT( DateTime , @in_ToDate) 
	 
	
	if(@in_ReportType='H')
	Begin
		set @v_tempFromDate= DATEADD ( hh, DATEPART ( hh,@v_tempFromDate) ,  DATEADD ( dd, DATEPART ( dy,@v_tempFromDate)-1,  DATENAME ( yy,@v_tempFromDate) ) )
		set @v_tempToDate=DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,@v_tempToDate) ,DATEADD ( dd, DATEPART ( dy,@v_tempToDate) -1,  DATENAME ( yy,@v_tempToDate) ) ) ) )
		set @v_datepartQueryString='DATEPART ( hh,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) )'
		set @v_datetoPartQueryString='DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) ) ) )'
		set @v_DisplayColumnQueryString='datpart as "Hour",datefrompart as "From" ,datetopart as "To"'
	end
	else if(@in_ReportType='D')
	Begin
		set @v_tempFromDate=DATEADD ( dd, DATEPART ( dy,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) ) 
		set @v_tempToDate=DATEADD ( dd, DATEPART ( dy,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString='DATEPART ( dy,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='datefrompart as "Day"'
	end
	else if(@in_ReportType='W')
	Begin
		set @v_tempFromDate=DATEADD ( wk,( DATEPART ( wk,@v_tempFromDate) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,@v_tempFromDate) ) ,  DATENAME ( yy,@v_tempFromDate) ) )
		set @v_tempToDate=DATEADD ( wk,( DATEPART ( wk,@v_tempToDate) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,@v_tempToDate) ) ,  DATENAME ( yy,@v_tempToDate) ) )
		set @v_datepartQueryString='DATEPART ( wk,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
		set @v_datetoPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
		set @v_DisplayColumnQueryString='CAST(datpart as varchar)+''(''+DATEName ( yy,datefrompart)+'')'' as "Week", datefrompart as "From" ,datetopart as "To"'
	end
	else if(@in_ReportType='M')
	Begin
		set @v_tempFromDate=DATEADD ( mm, DATEPART ( mm,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) )
		set @v_tempToDate=DATEADD ( mm, DATEPART ( mm,@v_tempToDate) ,DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString='DATEPART ( mm,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='CAST(datpart as varchar)+''(''+DATEName ( yy,datefrompart)+'')'' as "Month", datefrompart as "From" ,datetopart as "To"'
	end
	else if(@in_ReportType='Q')
	Begin 
		set @v_tempFromDate=DATEADD ( qq,( DATEPART ( qq,@v_tempFromDate) -1),  DATENAME ( yy,@v_tempFromDate) ) 
		set @v_tempToDate=DATEADD ( qq, DATEPART ( qq,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
		set @v_datepartQueryString=' DATEPART ( qq,actionDatetime)'
		set @v_datefromPartQueryString='DATEADD ( qq,( DATEPART ( qq,actionDatetime) -1),  DATENAME ( yy,actionDatetime) )'
		set @v_datetoPartQueryString='DATEADD ( qq, DATEPART ( qq,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
		set @v_DisplayColumnQueryString='CAST(datpart as varchar)+''(''+DATEName ( yy,datefrompart)+'')'' as "Quarter", datefrompart as "From" ,datetopart as "To"'
	end
	
	set @v_FromDateFinal = @v_tempFromDate
	set @v_ToDateFinal = @v_tempToDate
	--print CONVERT(VARCHAR(26), @v_tempFromDate, 109)
	--print CONVERT(VARCHAR(26), @v_tempToDate, 109)
	set @v_QueryString = 'select count(processdefid) as A , '+@v_tempColumnQueryString+' '+
	                     @v_datefromPartQueryString + ' as datefromPart, ' + @v_datetoPartQueryString
	                    + ' as datetoPart, ' + @v_datepartQueryString + ' as datpart from summarytable T ' + 'WITH (NOLOCK)'
	                    + ' where ' + ' processdefid = ' + @in_ProcessDefId + @v_activitystrQuery +@v_dateQueryString
	                    + ' group by ' + @v_datefromPartQueryString + ', ' + @v_datetoPartQueryString + ', ' + @v_datepartQueryString
	CREATE TABLE #tempTable
	(
		[A]		[int] default 0,
		[expired]	[int] default 0,
		[process]	[int] default 0,
		[routed]	[int] default 0,
		[intro]		[int] default 0,
		[comp]		[int] default 0,
		[abrt]		[int] default 0,
		[term]		[int] default 0,
		[datefrompart]	DATETIME	NOT NULL,
		[datetopart] 	DATETIME	NOT NULL,
		[datpart]		[BIGINT] default 0,
		PRIMARY KEY (datefrompart,datetopart)
	
	)
	CREATE TABLE #tempTableQueryResult
	(
		[A]		[int] default 0,
		[expired]	[int] default 0,
		[process]	[int] default 0,
		[routed]	[int] default 0,
		[intro]		[int] default 0,
		[comp]		[int] default 0,
		[abrt]		[int] default 0,
		[term]		[int] default 0,
		[datefrompart]	DATETIME	NOT NULL,
		[datetopart] 	DATETIME	NOT NULL,
		[datpart]		[BIGINT] default 0,
		PRIMARY KEY (datefrompart,datetopart)
	
	)
	--print CONVERT(VARCHAR(26), @v_tempFromDate, 109)
	--print CONVERT(VARCHAR(26), @v_tempToDate, 109)

/***** insert into #tempTable  from and to date range based on report type******/

	While @v_tempFromDate<=@v_tempToDate
	begin
		if(@in_ReportType='H')
		Begin
			insert into #tempTable (datefrompart ,datetopart,datpart) values(@v_tempFromDate,DATEADD(ss,-1,DATEADD(hh,1,@v_tempFromDate)),DATEPART ( hh,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(hh,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='D')
		Begin 
			insert into #tempTable (datefrompart ,datetopart,datpart) values(@v_tempFromDate,@v_tempFromDate,DATEPART ( dd,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='W')
		Begin 
			insert into #tempTable (datefrompart ,datetopart,datpart) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate)),DATEPART ( wk,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate))))
			set @v_tempFromDate=DATEADD(wk,1,@v_tempFromDate)
		end
		else if(@in_ReportType='M')
		Begin 
			insert into #tempTable (datefrompart ,datetopart,datpart) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(mm,1,@v_tempFromDate)),DATEPART ( mm,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(mm,1,@v_tempFromDate)
		end
		else if(@in_ReportType='Q')
		Begin 
			insert into #tempTable (datefrompart ,datetopart,datpart) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(qq,1,@v_tempFromDate)),DATEPART ( qq,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(qq,1,@v_tempFromDate)
		end
		else
		begin
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate)
		end
	end
	
	--select * from #tempTable
	--print @v_QueryString
	--create table #temphist1Table as (exec(@v_QueryString ))

/***** Insert the data from Query to table #tempTableQueryResult******/

	insert into #tempTableQueryResult (A, expired, process, routed, intro, comp, abrt, term, datefromPart, datetoPart, datpart)
	 exec(@v_QueryString )
	
	
	--select * from #tempTableQueryResult
	
/***** Update the table #tempTable with Data coming from #tempTableQueryResult******/				
	UPDATE #tempTable
	SET A=Q.A, expired=Q.expired, process=Q.process, routed=Q.routed, intro=Q.intro, comp=Q.comp, abrt=Q.abrt, term=Q.term, datefromPart=Q.datefromPart, datetoPart=Q.datetoPart, datpart=Q.datpart
	from  #tempTableQueryResult Q
	where Q.datefromPart=#tempTable.datefromPart and Q.datetoPart= #tempTable.datetoPart
	
	drop table #tempTableQueryResult 
	
	--select * from #tempTable

/***** Update the From date to exect date entered by user******/	
	update  #tempTable set datefromPart=CONVERT( DateTime , @in_FromDate)
	where  datefromPart=@v_FromDateFinal

/***** Update the To date to exect date entered by user ******/	
	update  #tempTable set datetoPart=CONVERT( DateTime , @in_ToDate)
	where  datetoPart=@v_ToDateFinal
	
	/***** Execute the query to get final report result******/	
	exec('select '+@v_DisplayColumnQueryString+' ,'+ @v_DisplayColumnActivityQuery +' from #tempTable order by datefromPart, datpart')
  END

END

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: GENESIS
	Product / Project		: Omniflow
	Module				: BAM
	File Name			:  BAM_TATReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create Turn Around Time Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
07/09/2016      Nusbah Suroor       Bug 56565 - Turnaroundtime to be calculated on the basis of TotalDuration instead of Totalprocessingtime
____________________________________________________________________________________________________*/ 

CREATE   Procedure BAM_TATReport
(

     	@in_ProcessDefId varchar(50),		
	@in_FromDate varchar(50),
	@in_ToDate varchar(50)	
)
AS
BEGIN

Declare @in_QueryString varchar(4000)

if(@in_ProcessDefId='' or @in_ProcessDefId='A_L_C_9_C_L_A')  /***** All processes case ******/
  begin
	set @in_QueryString ='SELECT  a.processname as "Process Name",a.processdefid as "ProcessDefId",
	cast(case when b.wfdays IS NULL  then 0 else  b.wfdays end  as varchar) 
	+'' Day(s) ''+
	cast(case when b.wfhours IS NULL  then 0 else  b.wfhours end as varchar)
	+'' Hour(s) ''+
	cast(case when b.wfminutes IS NULL  then 0 else  b.wfminutes end as varchar)
	+'' Minute(s) '' as "Set TAT",
	cast(cast (case when c.avgDuration IS NULL  then 0 else  c.avgDuration end/60 as bigint) as varchar)
	+'' Hour(s) ''+
	cast(cast (case when c.avgDuration IS NULL  then 0 else  c.avgDuration end as bigint)%60 as varchar)
	+'' Minute(s) '' as "Actual TAT"
	FROM
	(select processname + ''('' + CONVERT( varchar(6) , versionno)  + '')'' as processname
	,processdefid,processturnaroundtime
	from processdeftable WITH(NOLOCK))a

	left outer join 

	(select processdefid,durationid,wfdays,wfhours,wfminutes 
	from wfdurationtable WITH(NOLOCK))b

	ON a.processdefid=b.processdefid and a.processturnaroundtime=b.durationid

	left outer join

	(select processdefid, case when sum(totalwicount) = 0 then 0 
	else cast((sum(TotalDuration)/(sum(totalwicount)*60.0))as decimal(20,2))
	end as avgDuration 
	from SummaryTable WITH(NOLOCK) where actionid = 20 AND ActionDateTime > 
	CONVERT( DateTime ,'''+@in_FromDate+''')  AND 
	ActionDateTime <= CONVERT( DateTime , '''+@in_ToDate+''') group by processdefid)c

	ON a.processdefid=c.processdefid'
  end

else if(@in_ProcessDefId='-1000')    /***** To get All column to create report in BAM ******/
  begin
	set @in_QueryString ='select ''Process Name'' as "Process Name" , 1 as "ProcessDefId",''Workstep Name'' as "Workstep Name",''Set TAT'' as "Set TAT",
	''Actual TAT'' as "Actual TAT"'
  end

else
   begin
	set @in_QueryString ='SELECT a.activityname as "Workstep Name",
	cast(case when b.wfdays IS NULL  then 0 else  b.wfdays end  as varchar) 
	+'' Day(s) ''+
	cast(case when b.wfhours IS NULL  then 0 else  b.wfhours end as varchar)
	+'' Hour(s) ''+
	cast(case when b.wfminutes IS NULL  then 0 else  b.wfminutes end as varchar)
	+'' Minute(s) '' as "Set TAT",
	cast(cast (case when c.avgProcessingTime IS NULL  then 0 else  c.avgProcessingTime end/60 as bigint) as varchar)
	+'' Hour(s) ''+
	cast(cast (case when c.avgProcessingTime IS NULL  then 0 else  c.avgProcessingTime end as bigint)%60 as varchar)
	+'' Minute(s) '' as "Actual TAT"
	FROM 
	(select  DISTINCT activityTable.activityid,activityname,activityturnaroundtime  from 
	activitytable WITH(NOLOCK) where activitytype IN (1,10) and 
	activitytable.processdefid = '''+@in_ProcessDefId+''')a

	left outer join 

	(select durationid,wfdays,wfhours,wfminutes 
	from wfdurationtable WITH(NOLOCK) where processdefid	= '''+@in_ProcessDefId+''')b

	ON a.activityturnaroundtime=b.durationid 

	left outer join 

	(Select ActivityId ,case when sum(totalwicount) = 0 then 0 
	else cast((sum(TotalDuration)/(sum(totalwicount)*60.0))as decimal(20,2))
	end as avgProcessingTime from summaryTable  WITH 
	(NOLOCK)  where  ActionId in( 27,2) and ProcessDefId = '''+@in_ProcessDefId+''' 
	AND ActionDateTime >= CONVERT( DateTime , '''+@in_FromDate+''')  
	AND ActionDateTime < CONVERT( DateTime , '''+@in_ToDate+''')  
	Group By ActivityID , ActivityName HAVING ActivityId > 0) c

	ON  a.activityid=c.activityid'
  end

exec (@in_QueryString)
end


go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project		: Omniflow
	Module				: BAM
	File Name			: BAM_UserPerformanceLogReport.sql
	Author				: Vijay Kumar
	Date written (DD/MM/YYYY)	: 
	Description			: Stored procedure to Create User Performance  Report
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

CREATE     Procedure BAM_UserPerformanceLogReport
(
     	@in_ProcessDefId 	varchar(50),
	@in_ActivityId 		varchar(50),
	@in_UserIds 		varchar(500),
	@in_ReportType 		varchar(5),		
	@in_FromDate 		varchar(50),
	@in_ToDate 		varchar(50)
)
AS
BEGIN
DECLARE @v_tempFromDate		datetime, 	/* Date Type variable required for createing from dateranges based on reporttype */
@v_tempToDate			datetime, 	/* Date Type variable required for createing To dateranges based on reporttype */
@v_FromDateFinal 		datetime,	/* Date Type variable used to save Final From Date */
@v_ToDateFinal			datetime,	/* Date Type variable used to save Final To Date */
@v_QueryString 			varchar(4000),	/* Hold complete Query string to be executed*/
@v_dateQueryString 		varchar(150),	/* Hold Complete From date ,To date  Query  Cndition*/
@v_datepartQueryString 		varchar(100),	/* Hold DatePart of Query*/
@v_datefromPartQueryString 	varchar(300),	/* Hold Date From Part of Query*/
@v_datetoPartQueryString 	varchar(300),	/* Hold Date To Part of Query*/
@v_processsStrQuery 		varchar(100),	/* Hold Process part of Query condition*/
@v_ActivitystrQuery 		varchar(100),	/* Hold Activity part of Query condition*/
@v_DisplayColumnQueryString 	varchar(500)	/* Hold columns To be displayed by procedure based on Report type */


set @v_dateQueryString=' and actiondatetime>=CONVERT( DateTime ,'''+@in_FromDate+''') and actiondatetime<=CONVERT( DateTime ,'''+@in_ToDate+''')'
IF(@in_ProcessDefId='-1') /***** In case of processdef id  -1 show all the possible columns ,this is used by bam to get column Defination of report******/
  BEGIN
	select 'keyfield' as "Key Field",'Hour' as "Hour", GETDATE() as "Day" ,'Week' as "Week",'Month'as "Month",'Quarter'as "Quarter",GETDATE() as "From" ,GETDATE() as "To",0 as "Workitems Processed"
  END
ELSE
BEGIN

 IF(@in_ProcessDefId='' or @in_ProcessDefId='A_L_C_9_C_L_A') /***** ALL processes case*****/
BEGIN
	set @v_processsStrQuery=''
END
ELSE
BEGIN
	set @v_processsStrQuery=' and ProcessDefId='+@in_ProcessDefId
END
IF(@in_ActivityId='' or @in_ActivityId='A_L_C_9_C_L_A') /***** ALL acitivity case*****/
BEGIN
	set @v_ActivitystrQuery=''
END
ELSE
BEGIN
	set @v_ActivitystrQuery=' and activityid='+@in_ActivityId
END
	 
set @v_tempFromDate=CONVERT( DateTime , @in_FromDate) 
set @v_tempToDate=CONVERT( DateTime , @in_ToDate) 
	 
	
if(@in_ReportType='H')
Begin
	set @v_tempFromDate= DATEADD ( hh, DATEPART ( hh,@v_tempFromDate) ,  DATEADD ( dd, DATEPART ( dy,@v_tempFromDate)-1,  DATENAME ( yy,@v_tempFromDate) ) )
	set @v_tempToDate=DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,@v_tempToDate) ,DATEADD ( dd, DATEPART ( dy,@v_tempToDate) -1,  DATENAME ( yy,@v_tempToDate) ) ) ) )
	set @v_datepartQueryString='DATEPART ( hh,actionDatetime)'
	set @v_datefromPartQueryString='DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) )'
	set @v_datetoPartQueryString='DATEADD ( ss,59,  DATEADD ( mi,59,  DATEADD ( hh, DATEPART ( hh,actionDatetime) ,  DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) ) ) ) )'
	set @v_DisplayColumnQueryString='Interval as "Hour",FromRange as "From" ,ToRange as "To"'
end
else if(@in_ReportType='D')
Begin
	set @v_tempFromDate=DATEADD ( dd, DATEPART ( dy,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) ) 
	set @v_tempToDate=DATEADD ( dd, DATEPART ( dy,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
	set @v_datepartQueryString='DATEPART ( dy,actionDatetime)'
	set @v_datefromPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
	set @v_datetoPartQueryString='DATEADD ( dd, DATEPART ( dy,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
	set @v_DisplayColumnQueryString='FromRange as "Day"'
end
else if(@in_ReportType='W')
Begin
	set @v_tempFromDate=DATEADD ( wk,( DATEPART ( wk,@v_tempFromDate) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,@v_tempFromDate) ) ,  DATENAME ( yy,@v_tempFromDate) ) )
	set @v_tempToDate=DATEADD ( wk,( DATEPART ( wk,@v_tempToDate) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,@v_tempToDate) ) ,  DATENAME ( yy,@v_tempToDate) ) )
	set @v_datepartQueryString='DATEPART ( wk,actionDatetime)'
	set @v_datefromPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd,1- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
	set @v_datetoPartQueryString='DATEADD ( wk,( DATEPART ( wk,actionDatetime) -1),  DATEADD ( dd, 7- DATEPART ( dw, DATENAME ( yy,actionDatetime) ) ,  DATENAME ( yy,actionDatetime) ) )'
	set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Week", FromRange as "From" ,ToRange as "To"'
end
else if(@in_ReportType='M')
Begin
	set @v_tempFromDate=DATEADD ( mm, DATEPART ( mm,@v_tempFromDate) -1,  DATENAME ( yy,@v_tempFromDate) )
	set @v_tempToDate=DATEADD ( mm, DATEPART ( mm,@v_tempToDate) ,DATENAME ( yy,@v_tempToDate) )  -1
	set @v_datepartQueryString='DATEPART ( mm,actionDatetime)'
	set @v_datefromPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) -1,  DATENAME ( yy,actionDatetime) )'
	set @v_datetoPartQueryString='DATEADD ( mm, DATEPART ( mm,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
	set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Month", FromRange as "From" ,ToRange as "To"'
end
else if(@in_ReportType='Q')
Begin 
	set @v_tempFromDate=DATEADD ( qq,( DATEPART ( qq,@v_tempFromDate) -1),  DATENAME ( yy,@v_tempFromDate) ) 
	set @v_tempToDate=DATEADD ( qq, DATEPART ( qq,@v_tempToDate) , DATENAME ( yy,@v_tempToDate) )  -1
	set @v_datepartQueryString=' DATEPART ( qq,actionDatetime)'
	set @v_datefromPartQueryString='DATEADD ( qq,( DATEPART ( qq,actionDatetime) -1),  DATENAME ( yy,actionDatetime) )'
	set @v_datetoPartQueryString='DATEADD ( qq, DATEPART ( qq,actionDatetime) ,  DATENAME ( yy,actionDatetime) )  -1'
	set @v_DisplayColumnQueryString='CAST(Interval as varchar)+''(''+DATEName ( yy,FromRange)+'')'' as "Quarter", FromRange as "From" ,ToRange as "To"'
end
	
	set @v_FromDateFinal = @v_tempFromDate
	set @v_ToDateFinal = @v_tempToDate
	--print CONVERT(VARCHAR(26), @v_tempFromDate, 109)
	--print CONVERT(VARCHAR(26), @v_tempToDate, 109)
	set @v_QueryString ='Select Interval , FromRange , ToRange , UserName , UserId ,TotalWorked , 
			Totalprocessingtime from ( Select ' + @v_datepartQueryString + ' as Interval, '
                        + @v_datefromPartQueryString + ' as FromRange, '+ @v_datetoPartQueryString + ' as ToRange , '
                        + 'sum(Totalwicount) as TotalWorked, sum (TotalProcessingtime)  as Totalprocessingtime ,
			 UserId , UserName from summaryTable WITH(NOLOCK) where ActionId in ( 27,2)'
                        + @v_processsStrQuery+ @v_ActivitystrQuery+ @v_dateQueryString
                        + ' Group BY '+ @v_datepartQueryString + ' , '+ @v_datefromPartQueryString + ' , '+ @v_datetoPartQueryString 
			+ ' , UserID , UserName ) a where UserId in ('+@in_UserIds+') ORDER BY 2 ASC , 1 ASC '

	CREATE TABLE #tempTable
	(
		[Interval]	[BIGINT] default 0,
		[FromRange]	DATETIME	NOT NULL,
		[ToRange] 	DATETIME	NOT NULL,
		[UserName]	[varchar](200) ,
		[UserId]	[int] default 0,
		[TotalWorked]	[int] default 0,
		[Totalprocessingtime]	[BIGINT] default 0,
		PRIMARY KEY (FromRange,ToRange)
	
	)
	CREATE TABLE #tempTableQueryResult
	(
		[Interval]	[BIGINT] default 0,
		[FromRange]	DATETIME	NOT NULL,
		[ToRange] 	DATETIME	NOT NULL,
		[UserName]	[varchar](200) ,
		[UserId]	[int] default 0,
		[TotalWorked]	[int] default 0,
		[Totalprocessingtime]	[BIGINT] default 0,
		PRIMARY KEY (FromRange,ToRange)
	
	)
	--print CONVERT(VARCHAR(26), @v_tempFromDate, 109)
	--print CONVERT(VARCHAR(26), @v_tempToDate, 109)

/***** insert into #tempTable  from and to date range based on report type******/
	While @v_tempFromDate<=@v_tempToDate
	begin
		if(@in_ReportType='H')
		Begin
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(ss,-1,DATEADD(hh,1,@v_tempFromDate)),DATEPART ( hh,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(hh,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='D')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,@v_tempFromDate,DATEPART ( dd,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate) 
		end
		else if(@in_ReportType='W')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate)),DATEPART ( wk,DATEADD(dd,-1,DATEADD(wk,1,@v_tempFromDate))))
			set @v_tempFromDate=DATEADD(wk,1,@v_tempFromDate)
		end
		else if(@in_ReportType='M')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(mm,1,@v_tempFromDate)),DATEPART ( mm,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(mm,1,@v_tempFromDate)
		end
		else if(@in_ReportType='Q')
		Begin 
			insert into #tempTable (FromRange ,ToRange,Interval) values(@v_tempFromDate,DATEADD(dd,-1,DATEADD(qq,1,@v_tempFromDate)),DATEPART ( qq,@v_tempFromDate))
			set @v_tempFromDate=DATEADD(qq,1,@v_tempFromDate)
		end
		else
		begin
			set @v_tempFromDate=DATEADD(dd,1,@v_tempFromDate)
		end	
	end
	
	--select * from #tempTable
	--print @v_QueryString
	--create table #temphist1Table as (exec(@v_QueryString ))

/***** Insert the data from Query to table #tempTableQueryResult******/

	insert into #tempTableQueryResult (Interval , FromRange , ToRange , UserName , UserId ,TotalWorked ,Totalprocessingtime)
	 exec(@v_QueryString )
	
	
	--select * from #tempTableQueryResult
	
/***** Update the table #tempTable with Data coming from #tempTableQueryResult******/			
	
	UPDATE #tempTable
	SET Interval=Q.Interval, UserName=Q.UserName, UserId=Q.UserId, TotalWorked=Q.TotalWorked, Totalprocessingtime=Q.Totalprocessingtime
	from  #tempTableQueryResult Q
	where Q.FromRange=#tempTable.FromRange and Q.ToRange= #tempTable.ToRange
	
	drop table #tempTableQueryResult 
	
	--select * from #tempTable

/***** Update the From date to exect date entered by user******/	
	update  #tempTable set FromRange=CONVERT( DateTime , @in_FromDate)
	where  FromRange=@v_FromDateFinal

/***** Update the To date to exect date entered by user ******/	
	update  #tempTable set ToRange=CONVERT( DateTime , @in_ToDate)
	where  ToRange=@v_ToDateFinal
	
/***** Execute the query to get final report result******/	
	exec('select '+@v_DisplayColumnQueryString+' ,TotalWorked as "Workitems Processed" from #tempTable order by FromRange, Interval')
END

END

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project	: iBPSCaseManagement
	Module				: BAM
	File Name			: BAM_CaseInProgessWithHealth_Userwise.sql
	Author				: Rishi Meel
	Date written (DD/MM/YYYY)	: 09/12/2015
	Description			: Stored procedure to generate report for Case in Progress With Health 
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'BAM_CaseInProgessWithHealth_Userwise' AND xType = 'P')
BEGIN
	Drop Procedure BAMUpgrade
	PRINT 'As Procedure BAM_CaseInProgessWithHealth_Userwise exists dropping old procedure ........... '
END

PRINT 'Creating procedure BAM_CaseInProgessWithHealth_Userwise ........... '
go

CREATE PROCEDURE BAM_CaseInProgessWithHealth_Userwise(
@DBUserId	INTEGER
)
AS    
SET NOCOUNT ON    
BEGIN

	Declare @entryDateTime					datetime 
	Declare @expectedWorkitemDelaytime		datetime
	Declare @actionDateTime					datetime
	Declare @Green                          INT
	Declare @Yellow  						INT
	Declare @Red 							INT
	select @Green=0
    select @Yellow =0
    select @Red=0
    CREATE TABLE #temp 
(   Category [varchar](20) NULL,
	No_Of_Cases INTEGER
 
) 
	DECLARE caseinprogress CURSOR  FOR 
	    select b.EntryDATETIME ,b.ExpectedWorkitemDelay, a.ActionDatetime    from WFCURRENTROUTELOGTABLE a inner join  WFINSTRUMENTTABLE b on
		a.activityname=b.activityname and
		a.activityid=b.activityid and
		a.processdefid=b.processdefid and
		a.processinstanceid=b.processinstanceid and
		a.userid=b.Q_UserId  where b.ActivityType=32 and b.Q_UserId=@DBUserId
		and ActionId=17  
	OPEN caseinprogress
	FETCH NEXT FROM caseinprogress INTO @entryDateTime, @expectedWorkitemDelaytime, @actionDateTime
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF ((GETDATE()-@actionDateTime) > (@expectedWorkitemDelaytime - @entryDateTime)) 
		BEGIN 
			Set  @Red = @Red + 1
		END 
		ELSE IF( CONVERT(INT,(GETDATE()-@actionDateTime)) < ((CONVERT(INT,(@expectedWorkitemDelaytime - @entryDateTime))))/2.0) 
		BEGIN 
			set @Green = @Green + 1
		END  	
		ELSE   
		BEGIN 
			set  @Yellow = @Yellow + 1
		END  	
		FETCH NEXT FROM caseinprogress INTO @entryDateTime, @expectedWorkitemDelaytime, @actionDateTime
	END
	CLOSE 		caseinprogress
	DEALLOCATE 	caseinprogress
	insert into #temp values ('Delayed',@Red) 
	insert into #temp values ('In Time',@Green) 
	insert into #temp values ('At Risk',@Yellow) 
	select Category, No_Of_Cases as "No of Cases" from #temp
	
	RETURN
 
END

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project	: iBPSCaseManagement
	Module				: BAM
	File Name			: BAM_CaseStatus_Userwise.sql
	Author				: Rishi Meel
	Date written (DD/MM/YYYY)	: 09/12/2015
	Description			: Stored procedure to generate report for Cases - total pending Case , Today new Case , Today Completed case 
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 

If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'BAM_CaseStatus_Userwise' AND xType = 'P')
BEGIN
	Drop Procedure BAMUpgrade
	PRINT 'As Procedure BAM_CaseStatus_Userwise exists dropping old procedure ........... '
END

PRINT 'Creating procedure BAM_CaseStatus_Userwise ........... '
go

CREATE PROCEDURE BAM_CaseStatus_Userwise(
@DBUserId	INTEGER
)
AS    
SET NOCOUNT ON    
BEGIN

	
    CREATE TABLE #temp 
(   Category [varchar](20) NULL,
	No_Of_Cases INTEGER
 
)	
	insert into #temp (Category,No_Of_Cases) select 'TotalPending',count(*)   from WFCURRENTROUTELOGTABLE a inner join  WFINSTRUMENTTABLE b on
		a.activityname=b.activityname and
		a.activityid=b.activityid and
		a.processdefid=b.processdefid and
		a.processinstanceid=b.processinstanceid and
		a.userid=b.Q_UserId  where b.ActivityType=32 and b.Q_UserId=@DBUserId
		and ActionId=17 
	insert into #temp (Category,No_Of_Cases) select 'TodayNew',count(*) from WFCURRENTROUTELOGTABLE a inner join ACTIVITYTABLE b on a.ProcessDefId=b.ProcessDefID and 
a.ActivityId=b.ActivityId and a.ActivityName=b.ActivityName where ActivityType=32 and ActionId=17 and  UserId=@DBUserId and CAST(ActionDatetime AS DATE)=CAST(GETDATE() as DATE)
	insert into #temp (Category,No_Of_Cases) select 'TodayCompleted',count(*) from WFCURRENTROUTELOGTABLE a inner join ACTIVITYTABLE b on a.ProcessDefId=b.ProcessDefID and 
a.ActivityId=b.ActivityId and a.ActivityName=b.ActivityName where ActivityType=32 and ActionId=27 and  UserId=@DBUserId and CAST(ActionDatetime AS DATE)=CAST(GETDATE() as DATE) 
	select Category,No_Of_Cases as "No of Cases" from #temp
	RETURN
 
END

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project	: iBPSCaseManagement
	Module				: BAM
	File Name			: BAM_TaskInProgessWithHealth_Userwise.sql
	Author				: Rishi Meel
	Date written (DD/MM/YYYY)	: 09/12/2015
	Description			: Stored procedure to generate report for Task in Progress With Health 
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 
If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'BAM_TaskInProgessWithHealth_Userwise' AND xType = 'P')
BEGIN
	Drop Procedure BAMUpgrade
	PRINT 'As Procedure BAM_TaskInProgessWithHealth_Userwise exists dropping old procedure ........... '
END

PRINT 'Creating procedure BAM_TaskInProgessWithHealth_Userwise ........... '
go

CREATE PROCEDURE BAM_TaskInProgessWithHealth_Userwise(
@DBUserId	INTEGER
)
AS    
SET NOCOUNT ON    
BEGIN

	Declare @dueDtae		                datetime
	Declare @actionDateTime					datetime
	Declare @Green                          INT
	Declare @Yellow  						INT
	Declare @Red 							INT
	select @Green=0
    select @Yellow =0
    select @Red=0
    CREATE TABLE #temp 
(   Category [varchar](20) NULL,
	No_Of_Tasks INTEGER
 
) 
	DECLARE caseinprogress CURSOR  FOR 
	  select   ActionDatetime ,DueDate from WFTaskstatustable where AssignedTo=(select UserName from PDBUser where Userindex=@DBUserId) and TaskStatus=2
	OPEN caseinprogress
	FETCH NEXT FROM caseinprogress INTO @actionDateTime, @dueDtae
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF ((GETDATE()-@actionDateTime) > (@dueDtae - @actionDateTime)) 
		BEGIN 
			Set  @Red = @Red + 1
		END 
		ELSE IF( CONVERT(INT,(GETDATE()-@actionDateTime)) < ((CONVERT(INT,(@dueDtae - @actionDateTime))))/2.0) 
		BEGIN 
			set @Green = @Green + 1
		END  	
		ELSE   
		BEGIN 
			set  @Yellow = @Yellow + 1
		END  	
		FETCH NEXT FROM caseinprogress INTO @actionDateTime, @dueDtae
	END
	CLOSE 		caseinprogress
	DEALLOCATE 	caseinprogress
	insert into #temp values ('Delayed',@Red) 
	insert into #temp values ('In Time',@Green) 
	insert into #temp values ('At Risk',@Yellow) 
	select Category, No_Of_Tasks as "No of Tasks" from #temp
	RETURN
 
END

go

/*____________________________________________________________________________________________________ 
			NEWGEN SOFTWARE TECHNOLOGIES LIMITED 
_____________________________________________________________________________________________________ 
	Group				: Application – Products 
	Product / Project	: iBPSCaseManagement
	Module				: BAM
	File Name			: BAM_TaskStatus_Userwise.sql
	Author				: Rishi Meel
	Date written (DD/MM/YYYY)	: 09/12/2015
	Description			: Stored procedure to generate report for Tasks - total pending Task , Today new Task , Today Completed Task 
 ______________________________________________________________________________________________________ 
				CHANGE HISTORY 
______________________________________________________________________________________________________ 
 Date		Change By		Change Description (Bug No. (If Any)) 
____________________________________________________________________________________________________*/ 
If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'BAM_TaskStatus_Userwise' AND xType = 'P')
BEGIN
	Drop Procedure BAMUpgrade
	PRINT 'As Procedure BAM_TaskStatus_Userwise exists dropping old procedure ........... '
END

PRINT 'Creating procedure BAM_TaskStatus_Userwise ........... '
go

CREATE PROCEDURE BAM_TaskStatus_Userwise(
@DBUserId	INTEGER
)
AS    
SET NOCOUNT ON    
BEGIN

	
    CREATE TABLE #temp 
(   Category [varchar](20) NULL,
	No_Of_Tasks INTEGER
 
)	
	insert into #temp (Category,No_Of_Tasks) select  'TotalPending',count(*) from WFTaskstatustable where AssignedTo=(select UserName from PDBUser where Userindex=@DBUserId) and TaskStatus=2
	insert into #temp (Category,No_Of_Tasks) select 'TodayNew',count(*) from WFCURRENTROUTELOGTABLE  where ActionId=701 and  UserId=@DBUserId and CAST(ActionDatetime AS DATE)=CAST(GETDATE() as DATE)
	insert into #temp (Category,No_Of_Tasks) select 'TodayCompleted',count(*) from WFCURRENTROUTELOGTABLE  where ActionId=702 and  UserId=@DBUserId and CAST(ActionDatetime AS DATE)=CAST(GETDATE() as DATE)
	select Category,No_Of_Tasks as "No of Tasks" from #temp
	RETURN
 
END


go


go

go
CREATE TABLE CFColumnInfo 
(
	ColumnID int NOT NULL ,
	TableID int NOT NULL ,
	ColumnName nvarchar (255),
	TempColumnName nvarchar (255),
	ColumnAlias nvarchar (255),
	TempColumnAlias nvarchar (255),
	ColumnType int ,
	TempColumnType int ,
	ColumnLength int ,
	TempColumnLength int ,
	DefaultValue nvarchar (255),
	TempDefaultValue nvarchar (255),
	Mandatory int ,
	TempMandatory int ,
	ISIdentityType int ,
	TempISIdentityType int ,
	UniqueField int ,
	ColUniqueIndex nvarchar (255),
	ColSeqName nvarchar (255),
	TempColSeqName nvarchar (255),
	TempUniqueField int ,
	Filter int ,
	TempFilter int ,
	HookReq int,
	TempHookReq int,
	ISReadOnly int,
	TempISReadOnly int,
	ISNonModifiable int,
	TempISNonModifiable int,
	Status int ,
	CustomPickListData text,
	TempCustomPickListData text,
        ExtraColDetails nvarchar (4000),
        TempExtraColDetails nvarchar (4000)
	CONSTRAINT [PK_CFColumnInfo] PRIMARY KEY  CLUSTERED 
	(
		[ColumnID],
		[TableID]
	)  ON [PRIMARY] 
)
go
CREATE TABLE CFHistory 
(
	HistoryID int IDENTITY (1, 1) NOT NULL ,
	ActionID int NOT NULL ,
	SubActionID int ,
	FieldValue1 nvarchar (255),
	FieldValue2 nvarchar (255),
	OldVal NVARCHAR (1024)  ,
	NewVal NVARCHAR (1024)  ,
	TableID int ,
	ColumnID int ,
	UserID1 nvarchar (64) ,
	UserName1 nvarchar (64) ,
	UserID2 nvarchar (64) ,
	UserName2 nvarchar (64) ,
	Comments nvarchar (1024) ,
	ActionDateTime datetime default getdate() ,
	Status int ,
	FIELDVALUE3 nvarchar (1024),
	FIELDVALUE4 text,
	CONSTRAINT [PK_CFHistory] PRIMARY KEY  CLUSTERED 
	(
		[HistoryID]
	)  ON [PRIMARY] 
)
go
CREATE TABLE CFindexInfo
(
	IndexID int NULL ,
	TableID int NOT NULL ,
	IndexName nvarchar (255) NOT NULL,
	IndexType int ,
	columnid int ,
	indexcolumns nvarchar(255) ,
	indexstatus int ,
	CONSTRAINT [PK_CFindexInfo] PRIMARY KEY  CLUSTERED 
	(
		[IndexName]
	)  ON [PRIMARY] 
)
go
CREATE TABLE CFPreferences 
(
	CreateChecker int ,
	DeleteChecker int ,
	ModifyChecker int ,
	DataChecker int ,
	UploadChecker int ,
	BatchSize int  ,
        TableId int
) 
go
INSERT INTO CFPreferences ("CreateChecker","DeleteChecker","ModifyChecker","DataChecker","UploadChecker","BatchSize") VALUES (0 ,0 ,0 ,0 ,0 ,10 )
go
CREATE TABLE CFTableInfo
(
	TableID int IDENTITY (1,1) NOT NULL ,
	TableName nvarchar(255) UNIQUE,
	TempTableName nvarchar(255),
	CreatedByUserName nvarchar(64),
	CreatedByUserID nvarchar(64),
	ModifyUserName nvarchar(64),
	ModifyUserID nvarchar(64),
	Comments nvarchar(1024),
	Description nvarchar(1024),
	ApproverUserID nvarchar(64),
	ApproverUserName nvarchar(64),
	Status int NOT NULL,
	LockStatus int ,
	LockedByUserName nvarchar(64),
	LockedByUserID nvarchar(64),
	CreatedDateTime datetime NULL ,
	LastActionDateTime datetime NULL ,
	CSVFile nvarchar(255),
	FileSeparator nvarchar(25),
	ISViewAttached int,
	TempISViewAttached int,
	CFViewName nvarchar (255),
	TempCFViewName nvarchar (255),
	ViewMappingData text,
	TempViewMappingData text,
	TABLEDOCINDEX int,
	CFRightXML text,
	CREATEDONSTAGING CHAR,
	CONSTRAINT [PK_CFTableInfo] PRIMARY KEY  CLUSTERED 
	(
		[TableID]
	)  ON [PRIMARY] 
) 
go
create table CFUploadMapping 
(	
	TableID int,
	ColumnID int,
	CSVColumn nvarchar(255),
	FlagExists nvarchar(2),
	DefaultVal nvarchar(1024)
)
go


CREATE VIEW CFGROUPVIEW 
		AS 
		SELECT groupindex, groupname, CreatedDatetime, expiryDATETIME, 
			privilegecontrollist, owner, comment as commnt, grouptype, maingroupindex 
		FROM PDBGROUP

go

create table CFAPPROVERUGTABLE(
        UGINDEX int,
	UGTYPE nvarchar(50),
	APPROVEROBJECTTYPE nvarchar(50),
	OBJECTID int
)

go


go

go
CREATE TABLE OA_APPS(
	APP_ID INT NOT NULL,
	APP_NAME NVARCHAR(50),
	APP_DOMAIN NVARCHAR(255),
	APP_CONTEXT NVARCHAR(255),
	APP_PORT INT,
	SSL_SECURED NVARCHAR(5),
	APP_LOCATION INT NOT NULL,
	DEFAULT_APP NVARCHAR(5) DEFAULT 'N',
	CONSTRAINT PK_OA_APPS PRIMARY KEY CLUSTERED (APP_ID ASC)
)
go
CREATE TABLE OA_APPCONFIG(
	APP_ID INT NOT NULL,
	S_C_URL NVARCHAR(255),
	S_I_URL NVARCHAR(255),
	C_L_URL NVARCHAR(255),
	C_D_URL NVARCHAR(255),
	C_D_PRM NVARCHAR(255),
	C_CUSTOM_JS NVARCHAR(255),
	CUSTOM_THEME NVARCHAR(5) DEFAULT 'N',
	CUSTOM_THEME_DEF NTEXT,
	APP_UNIQUE_ID NVARCHAR(50)
)
go
CREATE TABLE OA_COMPONENTS(
	COMP_ID INT NOT NULL,
	APP_ID INT NOT NULL,
	COMP_NAME NVARCHAR(50),
	COMP_DESC NVARCHAR(255),
	COMP_URI NVARCHAR(255),
	COMP_DEF_ID INT,
    COMP_REFRESH NVARCHAR(5),	
	COLUMN_LAYOUT_TYPE VARCHAR(5),
	DEFAULT_MIN_HEIGHT VARCHAR(5),
	DEFAULT_HEIGHT VARCHAR(5),
	CONSTRAINT PK_OA_COMPONENTS PRIMARY KEY CLUSTERED (COMP_ID ASC)
)
go
CREATE TABLE OA_C_INPUTS(
	INPUT_ID INT NOT NULL,
	COMP_ID INT NOT NULL,
	INPUT_NAME NVARCHAR(50),
	INPUT_DEFAULT_VALUE NVARCHAR(255),		
	INPUT_TYPE INT,	
	INPUT_ORDER INT,	
	INPUT_DEF_ID INT,	
	MULTIPLE NVARCHAR(5),
	INPUT_DESC NVARCHAR(255),
	CONSTRAINT PK_OA_C_INPUTS PRIMARY KEY CLUSTERED (INPUT_ID ASC)
)
go
CREATE TABLE OA_C_INPUT_OPTIONS(
	OPTION_ID INT NOT NULL,
	INPUT_ID INT NOT NULL,		
	OPTION_DISPLAY_NAME NVARCHAR(50) NOT NULL,	
	OPTION_VALUE NVARCHAR(50) NOT NULL,	
	OPTION_DEF_ID INT NOT NULL,	
	CONSTRAINT PK_OA_C_INPUT_OPTIONS PRIMARY KEY CLUSTERED (OPTION_ID ASC)
)
go
CREATE TABLE OA_METHODS(
	METHOD_ID INT NOT NULL,
	COMP_ID INT NOT NULL,	
	METHOD_NAME NVARCHAR(50),	
	METHOD_DEF_ID INT,	
	METHOD_DESC NVARCHAR(255),
	CONSTRAINT PK_OA_METHODS PRIMARY KEY CLUSTERED (METHOD_ID ASC)
)
go
CREATE TABLE OA_M_INPUTS(
	INPUT_ID INT NOT NULL,
	METHOD_ID INT NOT NULL,
	INPUT_NAME NVARCHAR(50),
	INPUT_DEFAULT_VALUE NVARCHAR(255),		
	INPUT_TYPE INT,	
	INPUT_ORDER INT,	
	INPUT_DEF_ID INT,	
	MULTIPLE NVARCHAR(5),	
	INPUT_DESC NVARCHAR(255),
	CONSTRAINT PK_OA_M_INPUTS PRIMARY KEY CLUSTERED (INPUT_ID ASC)
)
go
CREATE TABLE OA_M_INPUT_OPTIONS(
	OPTION_ID INT NOT NULL,
	INPUT_ID INT NOT NULL,		
	OPTION_DISPLAY_NAME NVARCHAR(50) NOT NULL,	
	OPTION_VALUE NVARCHAR(50) NOT NULL,	
	OPTION_DEF_ID INT NOT NULL,	
	CONSTRAINT PK_OA_M_INPUT_OPTIONS PRIMARY KEY CLUSTERED (OPTION_ID ASC)
)
go
CREATE TABLE OA_OUTPUTS(
	OUTPUT_ID INT NOT NULL,
	COMP_ID INT NOT NULL,
	OUTPUT_NAME NVARCHAR(50),
	OUTPUT_DEFAULT_VALUE NVARCHAR(255),		
	OUTPUT_TYPE INT,		
	OUTPUT_DEF_ID INT,	
	MULTIPLE NVARCHAR(5),
	OUTPUT_DESC NVARCHAR(255),
	CONSTRAINT PK_OA_OUTPUTS PRIMARY KEY CLUSTERED (OUTPUT_ID ASC)
)
go
CREATE TABLE OA_OUTPUT_OPTIONS(
	OPTION_ID INT NOT NULL,
	OUTPUT_ID INT NOT NULL,		
	OPTION_DISPLAY_NAME NVARCHAR(50) NOT NULL,	
	OPTION_VALUE NVARCHAR(50) NOT NULL,	
	OPTION_DEF_ID INT NOT NULL,	
	CONSTRAINT PK_OA_OUTPUT_OPTIONS PRIMARY KEY CLUSTERED (OPTION_ID ASC)
)
go
CREATE TABLE OA_EVENTS(
	EVENT_ID INT NOT NULL,
	COMP_ID INT NOT NULL,	
	EVENT_NAME NVARCHAR(50),	
	EVENT_DEF_ID INT,	
	EVENT_DESC NVARCHAR(255),
	CONSTRAINT PK_OA_EVENTS PRIMARY KEY CLUSTERED (EVENT_ID ASC)
)
go
CREATE TABLE OA_PROXY_CONFIG(
	PROXY_ENABLED VARCHAR(3),	
	PROXY_IP NVARCHAR(255),	
	PROXY_PORT INT,	
	PROXY_AUTHENTICATION VARCHAR(3),		
	PROXY_USER NVARCHAR(255),	
	PROXY_PASSWORD NVARCHAR(512)
)
go
CREATE TABLE OA_C_INSTANCES(
	INS_ID INT NOT NULL,
	COMP_ID INT NOT NULL,
	INS_NAME NVARCHAR(50),	
	INS_DESC NVARCHAR(255),
	CONSTRAINT PK_OA_C_INSTANCES PRIMARY KEY CLUSTERED (INS_ID ASC)
)
go
CREATE TABLE OA_I_C_INPUTS(
	INS_ID INT NOT NULL,
	INPUT_ID INT NOT NULL,		
	INPUT_VALUE NVARCHAR(255),	
	MANDATORY VARCHAR(3),	
	REQPARAMFLAG VARCHAR(3)
)
go
CREATE TABLE OA_I_OUTPUTS(
	INS_ID INT NOT NULL,
	OUTPUT_ID INT NOT NULL,	
	OUTPUT_VALUE NVARCHAR(255),	
	DEFAULTFLAG VARCHAR(3)
)
go
CREATE TABLE OA_I_M_INPUTS(
	INS_ID INT NOT NULL,
	METHOD_ID INT NOT NULL,
	INPUT_ID INT NOT NULL,		
	INPUT_VALUE NVARCHAR(255),	
	MANDATORY VARCHAR(3),	
	REQPARAMFLAG VARCHAR(3)
)
go
CREATE TABLE OA_I_EVENTS(
	INS_ID INT NOT NULL,
	EVENT_ID INT NOT NULL
)
go
CREATE TABLE OA_I_EVENT_ACTION(
	INS_ID INT NOT NULL,
	EVENT_ID INT NOT NULL,
	EVENT_TYPE INT NOT NULL,
	EVENT_SUB_TYPE INT,
	EXT_URL NVARCHAR(1024),	
	COMP_ID INT,	
	METHOD_ID INT
)
go
CREATE TABLE OA_ACTION_MAPPING(
	MAPPING_ID INT NOT NULL,
	INS_ID INT NOT NULL,
	EVENT_ID INT NOT NULL,
	MAPPING_TYPE INT,	
	INPUT_ID INT,	
	OUTPUT_ID INT,		
	ALIAS NVARCHAR(255),			
	CONSTRAINT PK_OA_ACTION_MAPPING PRIMARY KEY CLUSTERED (MAPPING_ID ASC)
)
go
CREATE TABLE OA_VIEWS(
	VIEW_ID INT NOT NULL,
	VIEW_NAME NVARCHAR(50),
	DESCRIPTION NVARCHAR(255),
	NAVIGATION VARCHAR(3) ,	
	MINMAX VARCHAR(3),
	RESIZEDRAGDROP VARCHAR(3),
	CLOSEBTN VARCHAR(3),
	LAYOUT_MERGING VARCHAR(3) DEFAULT 'N',
	GROUP_ID INT,
	MAPPED_COLS VARCHAR(3),
	MAPPED_COLS_PERCENTAGE VARCHAR(50),
	MAPPED_MIN_COLS_PERCENTAGE VARCHAR(50),
	TABLE_DEF NTEXT,
	CONSTRAINT PK_OA_VIEWS PRIMARY KEY CLUSTERED (VIEW_ID ASC)	
)
go
CREATE TABLE OA_VIEW_MAPPING(
	VIEW_ID INT NOT NULL,
	INS_ID  INT NOT NULL,
	INS_TYPE INT,
	X_COORD INT,
	Y_COORD INT,
	COMP_DEFAULT_HEIGHT VARCHAR(50),
	COMP_DEFAULT_MIN_HEIGHT VARCHAR(50)
)
go
CREATE TABLE OA_THEMES(
	THEME_ID INT NOT NULL,
	THEME_NAME NVARCHAR(50),
	DESCRIPTION NVARCHAR(255),
	THEME_DEF NTEXT
	CONSTRAINT PK_OA_THEMES PRIMARY KEY CLUSTERED (THEME_ID ASC)	
)
go
CREATE TABLE OA_CabinetPreferences(
	THEME_ID INT NOT NULL
)
go
CREATE TABLE OA_USER_VIEW(
	USER_ID INT NOT NULL,
	VIEW_ID INT NOT NULL,
	TABLE_DEF NTEXT
)
go
CREATE TABLE OA_USER_VIEW_MAPPING(
	USER_ID INT NOT NULL,
	VIEW_ID INT NOT NULL,
	INS_ID INT NOT NULL,
	INS_TYPE INT,
	COL1_W VARCHAR(50),
	COL2_W VARCHAR(50),
	COL3_W VARCHAR(50),
	INS_HEIGHT INT,
	X_POS INT,
	Y_POS INT,
	INS_INVIEW INT,
	INS_STATE INT
	)
go	
CREATE TABLE OA_USER_PROPERTIES(
	PROPERTY_ID INT NOT NULL,
	USER_ID INT NOT NULL,
	CURRENT_VIEW_ID INT NOT NULL
	)	
go
CREATE TABLE OA_EXT_APPS(
	EXT_APP_ID INT NOT NULL,
	EXT_APP_NAME NVARCHAR(50),
	EXT_APP_TYPE NVARCHAR(255),
	EXT_APP_URL NVARCHAR(4000),
	SYSVAR NVARCHAR(5)
	)
	
go

CREATE TABLE OA_PROPERTIES(
	PROPERTY_ID INT NOT NULL,
	COMP_ID INT NOT NULL,
	PROPERTY_FLAG NVARCHAR(5),
	PROPERTY_URL NVARCHAR(255),
	CONSTRAINT PK_OA_PROPERTIES PRIMARY KEY CLUSTERED (PROPERTY_ID ASC)
)
go
CREATE TABLE OA_APPSCREENS(	
	S_ID INT NOT NULL,
	APP_ID INT NOT NULL,
	S_TITLE NVARCHAR(255),
	S_URL NVARCHAR(255),
    S_HEIGHT INT,
    S_WIDTH INT
)
	
go

INSERT INTO OA_THEMES(THEME_ID,THEME_NAME,DESCRIPTION,THEME_DEF) VALUES(0,'Professional','Professional Theme','<ThemeDef><BGColor>#FFFFFF</BGColor><Text><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></Text><ScreenDesc><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></ScreenDesc><FieldLabel><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#363636</FontColor></FieldLabel><Link><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>normal</FontStyle><FontWeight>normal</FontWeight><FontColor>#000000</FontColor><HoverColor>#0072c6</HoverColor><SelectedTextColor>#0072c6</SelectedTextColor></Link><TableHeader><FontSize>12</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><BGColor>#CCCCCC</BGColor></TableHeader><TableContent><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#050505</FontColor><OddRowColor>#ffffff</OddRowColor><EvenRowColor>#ffffff</EvenRowColor><SelectedRowColor>#e3f0f9</SelectedRowColor></TableContent><Panel><FontSize>13</FontSize><FontFamily>Arial</FontFamily><FontStyle>normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#FFFFff</FontColor><HeaderColor>#0072c6</HeaderColor></Panel><ScrollBar><FaceColor>#d7d7d7</FaceColor></ScrollBar><Toolbar><FontSize>12</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><FontDisableColor>#727272</FontDisableColor><BGColor>#f3f3f3</BGColor><SelectedTabFontColor>#0072c6</SelectedTabFontColor></Toolbar><InputElements><TextBoxSelectedBorderColor>#0072c6</TextBoxSelectedBorderColor></InputElements><FormTab><SelectedTabFontColor>#FFFFFF</SelectedTabFontColor><SelectedTabBackColor>#0072c6</SelectedTabBackColor><DeSelectedTabFontColor>#000000</DeSelectedTabFontColor><DeSelectedTabBackColor>#f3f3f3</DeSelectedTabBackColor></FormTab><FormFrame><FrameHeaderFontColor>#FFFFFF</FrameHeaderFontColor><FrameHeaderBackColor>#0072c6</FrameHeaderBackColor><FrameCollapsibleBackColor>#f3f3f3</FrameCollapsibleBackColor><FrameExpandedBackColor>#0072c6</FrameExpandedBackColor><FrameHoverBackColor>#00599a</FrameHoverBackColor><FrameCollapsibleFontColor>#000000</FrameCollapsibleFontColor></FormFrame></ThemeDef>')
go
INSERT INTO OA_THEMES(THEME_ID,THEME_NAME,DESCRIPTION,THEME_DEF) VALUES(1,'Classic','Classic Theme','<ThemeDef><BGColor>#FFFFFF</BGColor><Text><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></Text><ScreenDesc><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></ScreenDesc><FieldLabel><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></FieldLabel><Link><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>normal</FontStyle><FontWeight>normal</FontWeight><FontColor>#000000</FontColor><HoverColor>#0072c6</HoverColor><SelectedTextColor>#d4d6d4</SelectedTextColor></Link><TableHeader><FontSize>12</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><BGColor>#CCCCCC</BGColor></TableHeader><TableContent><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><OddRowColor>#FFFFFF</OddRowColor><EvenRowColor>#FFFFFF</EvenRowColor><SelectedRowColor>#e3f0f9</SelectedRowColor></TableContent><Panel><FontSize>13</FontSize><FontFamily>Arial</FontFamily><FontStyle>normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><HeaderColor>#d4d6d4</HeaderColor></Panel><ScrollBar><FaceColor>#d7d7d7</FaceColor></ScrollBar><Toolbar><FontSize>12</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><FontDisableColor>#727272</FontDisableColor><BGColor>#f3f3f3</BGColor><SelectedTabFontColor>#d4d6d4</SelectedTabFontColor></Toolbar><InputElements><TextBoxSelectedBorderColor>#0072c6</TextBoxSelectedBorderColor></InputElements><FormTab><SelectedTabFontColor>#000000</SelectedTabFontColor><SelectedTabBackColor>#d4d6d4</SelectedTabBackColor><DeSelectedTabFontColor>#000000</DeSelectedTabFontColor><DeSelectedTabBackColor>#f3f3f3</DeSelectedTabBackColor></FormTab><FormFrame><FrameHeaderFontColor>#000000</FrameHeaderFontColor><FrameHeaderBackColor>#d4d6d4</FrameHeaderBackColor><FrameCollapsibleBackColor>#f3f3f3</FrameCollapsibleBackColor><FrameExpandedBackColor>#d4d6d4</FrameExpandedBackColor><FrameHoverBackColor>#727272</FrameHoverBackColor><FrameCollapsibleFontColor>#000000</FrameCollapsibleFontColor></FormFrame></ThemeDef>')
go	
INSERT INTO OA_THEMES(THEME_ID,THEME_NAME,DESCRIPTION,THEME_DEF) VALUES(2,'Oceanic','Oceanic Theme','<ThemeDef><BGColor>#e3efff</BGColor><Text><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></Text><ScreenDesc><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></ScreenDesc><FieldLabel><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor></FieldLabel><Link><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>normal</FontStyle><FontWeight>normal</FontWeight><FontColor>#000000</FontColor><HoverColor>#425584</HoverColor><SelectedTextColor>#0072c6</SelectedTextColor></Link><TableHeader><FontSize>12</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><BGColor>#CCCCCC</BGColor></TableHeader><TableContent><FontSize>11</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><OddRowColor>#FFFFFF</OddRowColor><EvenRowColor>#FFFFFF</EvenRowColor><SelectedRowColor>#becbe3</SelectedRowColor></TableContent><Panel><FontSize>13</FontSize><FontFamily>Arial</FontFamily><FontStyle>normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#FFFFFF</FontColor><HeaderColor>#425584</HeaderColor></Panel><ScrollBar><FaceColor>#d7d7d7</FaceColor></ScrollBar><Toolbar><FontSize>12</FontSize><FontFamily>Arial</FontFamily><FontStyle>Normal</FontStyle><FontWeight>Normal</FontWeight><FontColor>#000000</FontColor><FontDisableColor>#727272</FontDisableColor><BGColor>#f3f3f3</BGColor><SelectedTabFontColor>#425584</SelectedTabFontColor></Toolbar><InputElements><TextBoxSelectedBorderColor>#425584</TextBoxSelectedBorderColor></InputElements><FormTab><SelectedTabFontColor>#FFFFFF</SelectedTabFontColor><SelectedTabBackColor>#425584</SelectedTabBackColor><DeSelectedTabFontColor>#000000</DeSelectedTabFontColor><DeSelectedTabBackColor>#f3f3f3</DeSelectedTabBackColor></FormTab><FormFrame><FrameHeaderFontColor>#FFFFFF</FrameHeaderFontColor><FrameHeaderBackColor>#425584</FrameHeaderBackColor><FrameCollapsibleBackColor>#f3f3f3</FrameCollapsibleBackColor><FrameExpandedBackColor>#425584</FrameExpandedBackColor><FrameHoverBackColor>#e3efff</FrameHoverBackColor><FrameCollapsibleFontColor>#000000</FrameCollapsibleFontColor></FormFrame></ThemeDef>')
go	


INSERT INTO OA_CabinetPreferences (THEME_ID) VALUES(0)

go



INSERT INTO OA_PROXY_CONFIG(PROXY_ENABLED) VALUES('N')

go

CREATE TABLE OA_USERPREFERENCES(
	USER_ID INT NOT NULL,
	USER_PREF NTEXT,
	CONSTRAINT PK_OA_USERPREFERENCES PRIMARY KEY CLUSTERED (USER_ID ASC)	
)

go

CREATE TABLE OA_CUSTOM_THEME(
	THEME_ID INT NOT NULL,
	APP_ID INT NOT NULL,
	CUSTOM_THEME_DEF NTEXT	
)

go

CREATE TABLE OA_History 
(
	HistoryID int IDENTITY (1, 1) NOT NULL ,
	ActionID int NOT NULL ,
	ObjectID int,
	ObjectName nvarchar (100),
	FieldValue1 nvarchar (4000),
	FieldValue2 nvarchar (4000),
	FieldValue3 text,
	FieldValue4 text,
	UserID1 nvarchar (64) ,
	UserName1 nvarchar (64) ,
	UserID2 nvarchar (64) ,
	UserName2 nvarchar (64) ,
	ActionDateTime datetime default getdate() ,
	Status int,
	CONSTRAINT [PK_OA_History] PRIMARY KEY  CLUSTERED 
	(
		[HistoryID]
	)  ON [PRIMARY] 
)

go

Create Table CHAT_USERGROUP_INFO (
	USER_ID INT NOT NULL,
	GROUP_ID int IDENTITY NOT NULL,
	GROUP_NAME NVARCHAR(255) NOT NULL,
	GROUP_TYPE NVARCHAR(10) NOT NULL
)

go

Create Table CHAT_USERFRIEND_INFO (
	GROUP_ID INT NOT NULL,
	FRIEND_USER_ID INT NOT NULL,
	FRIEND_USER_NAME NVARCHAR(255) NOT NULL
)

go

Create Table CHAT_USER_REQUEST_STATUS (
	SENDER NVARCHAR(255) NOT NULL,
	APPROVER NVARCHAR(255) NOT NULL,
	STATUS NVARCHAR(30) NOT NULL
	
)

go

Create Table CONVERSATION_RECORD (
	CONVERSATION_ID INT IDENTITY NOT NULL,
	CONVERSATION_TITLE NVARCHAR(255),
	RECORDED_TIME DATETIME,
	RECORDED_BY_USER_ID INT NOT NULL,
	CONVERSATION NTEXT	
)

go

CREATE TABLE OA_GLOBALCODEFRAGMENTSDEF(
	CF_ID INT NOT NULL,
	CF_NAME NVARCHAR(50),
	CF_TYPE NVARCHAR(20),
	CF_METHODNAME NVARCHAR(50),
	CODESNIPPET TEXT,
	CF_SCOPE NVARCHAR(5),
	APPLICATION_ID INT NOT NULL default(0)
	CONSTRAINT PK_OA_GLOBALCODEFRAGMENTSDEF PRIMARY KEY CLUSTERED (CF_ID ASC)
)

go

CREATE TABLE OA_MULTILINGUALDEF(
	MAPPING_ID INT NOT NULL,
	ENTITY_TYPE INT NOT NULL,
	ENTITY_ID INT NOT NULL,
	ENGLISH_NAME NVARCHAR(255) NOT NULL,
	LOCALE NVARCHAR(20) NOT NULL,
	LOCALIZED_NAME NVARCHAR(255) NOT NULL,
	CONSTRAINT [PK_OA_MULTILINGUALDEF] PRIMARY KEY  CLUSTERED 
	(
		[MAPPING_ID]
	)  ON [PRIMARY] 
)

go

go

go
/*Cabinet Scripts for Rights Management for
1. orm
2. webdesktop
3. BAM
4. MDM
*/
go
 
 If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'OFWebRightsMgmtData' AND xType = 'P')
BEGIN
	Drop Procedure OFWebRightsMgmtData
	PRINT 'As Procedure OFWebRightsMgmtData exists dropping old procedure ........... '
END

PRINT 'Creating procedure OFWebRightsMgmtData ........... '
go
CREATE procedure OFWebRightsMgmtData as
begin
Declare @iden_val int
--print ''
SELECT @iden_val = 0

/*###############Classificator Starts############################*/
insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('MDM Table Rights','MDMTR',0,'com.newgen.omni.classificator.rightsmgmt.CFRightsGetTableList','1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111','Y')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'VDATA','View Data', 1)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'ADATA','Add Data', 2)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'MDATA','Modify Data', 3)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'DDATA','Delete Data', 4)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'UDATA','Upload Data', 5)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'VDEF','View Definition', 6)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'MDEF','Modify Definition', 7)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'MTBL','Modify Table', 8)

insert into wffilterlisttable (ObjectTypeId,FilterName,TagName) values (@iden_val,'Table Name','TableName')

/*-------------------------------------*/

insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('MDM General Rights','MDMMNU',0,'','1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111','N')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'CT','Create Table', 1)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'DT','Delete Table', 2)
/*###############Classificator Ends############################*/

/*###############BAM Starts############################*/
insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('BAM Report Rights','BAMTRR',0,'com.newgen.omni.customreports.rightsmgmt.CRRightsGetReportList','1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111','Y')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'GR','Generate Report', 1)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'MR','Modify Report', 2)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'DR','Delete Report', 3)

insert into wffilterlisttable (ObjectTypeId,FilterName,TagName) values (@iden_val,'Report Name','ReportName')

/*-------------------------------------*/

insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('BAM General Rights','BAMGR',0,'','1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111','N')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'CR','Create Report', 1)
/*-------------------------------------*/

/*###############BAM Ends############################*/

/*###############Webdesktop Starts############################*/
insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('Process Client Menu','WDGENMNU',0,'','1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111','N')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'AQ','Add Queue', 1)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'PRGC','Purge Criteria', 2)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'ATQ','Add User To Queue', 3)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'SETD','Set User Diversion', 4)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'SWADT','Set User Work Audit', 5)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'VWADT','View Work Audit Details', 6)

/*-------------------------------------*/

insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('Process Client Worklist','WDWLMNU',0,'','1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111','N')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'QL','Query List', 1)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'QS','Quick Search', 2)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'NEW','New', 3)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'DONE','Done', 4)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'INI','Initiate', 5)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'RFR','Refer', 6)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'RVK','Revoke', 7)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'RLS','Release', 8)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'RAS','Reassign', 9)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'PRI','Priority', 10)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'PRO','Properties', 11)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'DLT','Delete', 12)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'GL','Get Lock', 13)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'SW','Save Worklist', 14)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'RL','Reminder List', 15)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'SR','Set Reminder', 16)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'SF','Set Filter', 17)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'CW','Count Workitem', 18)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'PRF','Preferences', 19)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'AR','Adhoc Routing', 20)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'UNLOCK','Unlock', 21)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'HOLD','Hold', 22)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'UNHOLD','Unhold', 23)


/*###############Webdesktop Ends############################*/

/*###############ORM Starts############################*/
insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('ORM General Rights','RMPMGMT',0,'','1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111','N')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'ORMNGPR','Manage Profiles', 1)
/*###############ORM Ends############################*/

end
go

PRINT 'Executing procedure OFWebRightsMgmtData ........... '
EXEC OFWebRightsMgmtData
go			

DROP PROCEDURE OFWebRightsMgmtData

go	
 
 
 

 


go


go

create TABLE PMWActivityTable(
	ProcessDefId integer NOT NULL,
	ActivityId integer NOT NULL,
	ActivityType integer NOT NULL,
	ActivityName nvarchar(30) NOT NULL,
	Description ntext NULL,
	xLeft integer NOT NULL,
	yTop integer NOT NULL,
	NeverExpireFlag nvarchar(1) NOT NULL,
	Expiry nvarchar(255) NULL,
	ExpiryActivity nvarchar(30) NULL,
	TargetActivity integer NULL,
	AllowReassignment nvarchar(1) NULL,
	CollectNoOfInstances integer NULL,
	PrimaryActivity nvarchar(30) NULL,
	ExpireOnPrimaryFlag nvarchar(1) NULL,
	TriggerID integer NULL,
	HoldExecutable nvarchar(255) NULL,
	HoldTillVariable nvarchar(255) NULL,
	ExtObjID integer NULL,
	MainClientInterface nvarchar(255) NULL,
	ServerInterface nvarchar(1) NULL,
	WebClientInterface nvarchar(255) NULL,
	ActivityIcon NTEXT NULL,
	ActivityTurnAroundTime integer NULL,
	AppExecutionFlag nvarchar(1) NULL,
	AppExecutionValue integer NULL,
	ExpiryOperator integer NULL,
	TATCalFlag nvarchar(1) NULL,
	ExpCalFlag nvarchar(1) NULL,
	DeleteOnCollect nvarchar(1) NULL,
	Width integer DEFAULT 100 NOT NULL,
	Height integer DEFAULT 50 NOT NULL,
	BlockId integer DEFAULT 0 NOT NULL,
	associatedUrl nvarchar(255) NULL,
	allowSOAPRequest nvarchar(1) DEFAULT 'N' NOT NULL ,
	AssociatedActivityId integer NULL,
	EventId integer NULL,
    ActivitySubType integer NOT NULL,
	Color integer NULL,
	Cost numeric(15,2) NULL,
	Duration nvarchar(15) NULL,
	SwimLaneId   int NULL,
    DummyStrColumn1 nvarchar(255) NULL,
	CustomValidation ntext NULL,
	MobileEnabled nvarchar(1) DEFAULT 'N' NOT NULL,
	GenerateCaseDoc nvarchar(1) DEFAULT 'N' NOT NULL,
	DoctypeId int DEFAULT -1 NOT NULL,
    CONSTRAINT pk_PMWActivityTable PRIMARY KEY(ProcessDefId,ActivityId),
    CONSTRAINT uk_PMWActivityTable UNIQUE (ProcessDefId,ActivityName),
    CONSTRAINT ck_PMWActivityTable_A CHECK (allowSOAPRequest = N'N' or allowSOAPRequest = N'Y'),
    CONSTRAINT ck_PMWActivityTable_S CHECK (ServerINTerface = N'E' or ServerINTerface = N'N' or ServerINTerface = N'Y')  
)

go

create TABLE PMWWORKSTAGELINKTABLE(
	ProcessDefId int NOT NULL,
	SourceId int NOT NULL,
	TargetId int NOT NULL,
	Color int NULL,
	Type nvarchar(1) NULL,
	ConnectionId int NOT NULL
)

go

CREATE TABLE PMWActivitySequenceTABLE(
	ProcessDefId int NOT NULL,
	MileStoneId int NOT NULL,
	ActivityId int NOT NULL,
	SequenceId int NOT NULL,
	SubSequenceId int NOT NULL,
	CONSTRAINT pk_PMWActivitySequenceTABLE PRIMARY KEY(ProcessDefId,MileStoneId,SequenceId,SubSequenceId)
)

go

create TABLE PMWPROCESSINTERFACETABLE(
	ProcessDefId int NOT NULL,
	InterfaceId int NOT NULL,
	InterfaceName nvarchar(255) NOT NULL,
	ClientInvocation nvarchar(255) NULL,
	MenuName nvarchar(50) NULL,
	ExecuteClass nvarchar(255) NULL,
	ExecuteClassWeb nvarchar(255) NULL,
	CONSTRAINT pk_PMWPROCESS_INTERFACETABLE PRIMARY KEY(ProcessDefId,InterfaceId)
)

go

create TABLE PMWPROCESSDEFTABLE(
	ProcessDefId int IDENTITY (1,1) PRIMARY KEY,
	ProcessType nvarchar(2) DEFAULT 'S' NOT NULL,
    ProcessName nvarchar(30) NOT NULL,
	ProcessState nvarchar(10) NULL,
	RegPrefix nvarchar(20) NULL,
	RegSuffix nvarchar(20) NULL,
	RegStartingNo int NULL,
	ProcessTurnAroundTime int NULL,
	RegSeqLength int NULL,
	CreatedOn datetime NULL,
	LastModifiedOn datetime NULL,
	WSFont nvarchar(255) NULL,
	WSColor int NULL,
	CommentsFont nvarchar(255) NULL,
	CommentsColor int NULL,
	Backcolor int NULL,
	Description ntext NULL,
	TATCalFlag nvarchar(1) NULL,
	VersionNo numeric(3, 1) NOT NULL,
	CreatedBy nvarchar(255) NULL,
	LastModifiedBy nvarchar(255) NULL,
	ProcessShared nchar(1) NULL,
	ProjectId int NULL,
	Cost numeric(15,2) NULL,
	Duration nvarchar(255) NULL,
	FormViewerApp nchar(1) NOT NULL,
	ThresholdRoutingCount int NULL,
	CreateWebService  nvarchar(2) NULL,
	OwnerEmailId  nvarchar(255) NULL,
	DisplayName   nvarchar(20) NULL,
    CONSTRAINT uk_PMWPROCESSDEFTABLE UNIQUE (ProcessName,VersionNo)
)go
CREATE INDEX indexPROCESSDEFTABLE ON PMWPROCESSDEFTABLE (ProcessType,ProjectId,CreatedBy)
go

create TABLE PMWSwimLaneTable(
	ProcessDefId int NOT NULL,
	SwimLaneId int NOT NULL,
	SwimLaneWidth int NOT NULL,
	SwimLaneHeight int NOT NULL,
	ITop int NOT NULL,
	ILeft int NOT NULL,
	BackColor bigint NOT NULL,
	SwimLaneType nvarchar(1) NOT NULL,
	SwimLaneText nvarchar(255) NOT NULL,
	SwimLaneTextColor int NOT NULL,
	PoolId            int NULL,
	IndexInPool       int NULL,
    CONSTRAINT pk_PMWSwimLaneTable PRIMARY KEY(ProcessDefId,SwimLaneId),
    CONSTRAINT uk_PMWSwimLaneTable UNIQUE (ProcessDefId,SwimLaneText)
)

go

create TABLE PMWMileStoneTable(
	ProcessDefId int NOT NULL,
	MileStoneId int NOT NULL,
	MileStoneSeqId int NOT NULL,
	MileStoneName nvarchar(255) NULL,
	MileStoneWidth int NOT NULL,
	MileStoneHeight int NOT NULL,
	ITop int NOT NULL,
	ILeft int NOT NULL,
	BackColor int NOT NULL,
	Description ntext NULL,
	isExpanded nvarchar(50) NULL,
	Cost numeric(15,2) NULL,
	Duration nvarchar(255) NULL,
    CONSTRAINT pk_PMWMileStoneTable PRIMARY KEY(ProcessDefId,MileStoneId),
    CONSTRAINT uk_PMWMileStoneTable UNIQUE (ProcessDefId,MileStoneName)
)

go

create TABLE PMWProjectListTable(
	ProjectID int NOT NULL,
	ProjectName nvarchar(255) NOT NULL,
	Description ntext NULL,
	CreationDateTime datetime NOT NULL,
	CreatedBy nvarchar(255) NOT NULL,
	LastModifiedOn datetime NULL,
	LastModifiedBy nvarchar(255) NULL,
	ProjectShared nchar(1) NULL,
    CONSTRAINT pk_PMProjectListTable PRIMARY KEY(ProjectID),
    CONSTRAINT UNQ_1 UNIQUE(ProjectName)
)

go
create TABLE PMWEventDetailsTable(
	EventID int NOT NULL,
	EventName nvarchar(255) NOT NULL,
	Description nvarchar(255) NULL,
	CreationDateTime datetime NOT NULL,
	ModificationDateTime datetime NULL,
	CreatedBy nvarchar(255) NOT NULL,
	StartTimeHrs int NOT NULL,
	StartTimeMins int NOT NULL,
	EndTimeMins int NOT NULL,
	EndTimeHrs int NOT NULL,
	StartDate datetime NOT NULL,
	EndDate datetime NOT NULL,
	EventRecursive nvarchar(1) NOT NULL,
	FullDayEvent nvarchar(1) NOT NULL,
	ReminderType nvarchar(1) NULL,
	ReminderTime int NULL,
	ReminderTimeType nvarchar(1) NULL,
	ReminderDismissed nvarchar(1) NOT NULL Default 'N',
	SnoozeTime int NOT NULL DEFAULT -1,
	EventSummary nvarchar(255) NULL,
	UserID int NULL,
	ParticipantName nvarchar(1024) NOT NULL,
    CONSTRAINT pk_PMEventDetailsTable PRIMARY KEY(EventID)
)

go

create TABLE PMWRepeatEventTable(
	EventID int NOT NULL,
	RepeatType nvarchar(1) NOT NULL,
	RepeatDays nvarchar(255) NOT NULL,
	RepeatEndDate datetime NOT NULL,
	RepeatSummary nvarchar(255) NULL
)

go

create table PMWOwnerTable(
	Type int NOT NULL,
	TypeId int NOT NULL,
	ProcessDefId int NOT NULL,	
	OwnerOrderId int not null,
	UserName  nvarchar(255) not null,
	constraint pk_PMWOwnerTable PRIMARY KEY (Type,TypeId,ProcessDefId,OwnerOrderId)
)

go

create table PMWConsultantsTable(
	Type int NOT NULL,
	TypeId int NOT NULL,
	ProcessDefId int NOT NULL,	
	ConsultantOrderId int not null,
	UserName  nvarchar(255) not null,
	constraint pk_PMWConsultantsTable PRIMARY KEY (Type,TypeId,ProcessDefId,ConsultantOrderId)
)

go

create table PMWSystemTable(
	Type int NOT NULL,
	TypeId int NOT NULL,
	ProcessDefId int NOT NULL,	
	SystemOrderId int not null,
	SystemName  nvarchar(255) not null,
	constraint pk_PMWSystemTable PRIMARY KEY (Type,TypeId,ProcessDefId,SystemOrderId)
)

go

create table PMWProviderTable(
	Type int NOT NULL,
	TypeId int NOT NULL,
	ProcessDefId int NOT NULL,	
	ProviderOrderId int not null,
	ProviderName  nvarchar(255) not null,
	constraint pk_PMWProviderTable PRIMARY KEY (Type,TypeId,ProcessDefId,ProviderOrderId)
)

go

create table PMWConsumerTable(
	Type int NOT NULL,
	TypeId int NOT NULL,
	ProcessDefId int NOT NULL,	
	ConsumerOrderId int not null,
	ConsumerName nvarchar(255) not null,
	constraint pk_PMWConsumerTable PRIMARY KEY (Type,TypeId,ProcessDefId,ConsumerOrderId)
)

go

CREATE TABLE PMWAdminLogTable  (
 AdminLogId int IDENTITY (1,1) PRIMARY KEY,        
 ActionId int NOT NULL,                                        
 ActionDateTime datetime NOT NULL,                       
 ProcessDefId int,                                                       
 QueueId int,                                                         
 QueueName nvarchar(64),                                  
 FieldId1 int,                                                               
 FieldName1 nvarchar(255),                                    
 FieldId2 int,                                                              
 FieldName2 nvarchar(255),                          
 Property nvarchar(64),                                
 UserId int,                                              
 UserName nvarchar(64),                                    
 OldValue nvarchar(255),                                    
 NewValue nvarchar(255),                                    
 WEFDate datetime,                                      
 ValidTillDate datetime,
 RegdProcessDefId int
)

go

create TABLE PMWPoolTable(
	ProcessDefId int NOT NULL,
	PoolId int NOT NULL,
	PoolName nvarchar(255) NULL,
	PoolWidth int NOT NULL,
	PoolHeight int NOT NULL,
	ITop int NOT NULL,
	ILeft int NOT NULL,
	BackColor nvarchar(255) NULL,   
    CONSTRAINT pk_PMWPoolTable PRIMARY KEY (ProcessDefId,PoolId),
    CONSTRAINT uk_PMWPoolTable UNIQUE (ProcessDefId,PoolName) 
)

go 

CREATE TABLE  PMWPROCESSDEFCOMMENTTABLE (
  ProcessDefId  int NOT NULL,
  LeftPos  int NOT NULL,
  TopPos  int NOT NULL,
  Width   int NOT NULL,
  Height int  NOT NULL,
  Type  nvarchar(1)  NOT NULL,
  Comments nvarchar(255) NOT NULL,
  SourceId int NULL,
  Targetid int  NULL,
  RuleId  int NULL,
  CommentFont nvarchar(255) NOT NULL,
  CommentForeColor  int   NULL,
  CommentBackColor   int    NULL,
  CommentBorderStyle   int    NULL,
  AnnotationId  int NOT NULL,
  SwimLaneId int NULL
)

go

CREATE TABLE PMWDurationTable(
	 ProcessDefId   integer  NOT NULL,
	 DurationId   integer  NOT NULL,
	 WFYears   nvarchar (255) NULL,
	 VariableId_Years   integer  NULL,
	 VarFieldId_Years   integer  NULL,
	 WFMonths   nvarchar (255)  NULL,
	 VariableId_Months   integer  NULL,
	 VarFieldId_Months   integer  NULL,
	 WFDays   nvarchar (255)  NULL,
	 VariableId_Days   integer  NULL,
	 VarFieldId_Days   integer  NULL,
	 WFHours   nvarchar (255)  NULL,
	 VariableId_Hours   integer  NULL,
	 VarFieldId_Hours   integer  NULL,
	 WFMinutes   nvarchar (255)  NULL,
	 VariableId_Minutes   integer  NULL,
	 VarFieldId_Minutes   integer  NULL,
	 WFSeconds   nvarchar (255)  NULL,
	 VariableId_Seconds   integer  NULL,
	 VarFieldId_Seconds   integer  NULL,
     CONSTRAINT UK_PMWDurationTable UNIQUE (ProcessDefId,DurationId)
)

go

CREATE TABLE PMWCalDefTable(
	ProcessDefId integer NOT NULL,
	CalId integer NOT NULL,
	CalName nvarchar(255)  NOT NULL,
	GMTDiff integer NULL,
	LastModifiedOn datetime NULL,
	Comments nvarchar(1024)  NULL,
	CONSTRAINT PK_PMWCalDefTable PRIMARY KEY (ProcessDefId,CalId)
)

go

CREATE TABLE PMWCalendarAssocTable(
	CalId integer NOT NULL,
	ProcessDefId integer NOT NULL,
	ActivityId integer NOT NULL,
	CalType nvarchar(1) NOT NULL,
CONSTRAINT UK_PMWCalendarAssocTable UNIQUE (ProcessDefId,ActivityId)
)

go

CREATE TABLE PMWCalHourDefTable(
	ProcessDefId integer NOT NULL,
	CalId integer NOT NULL,
	CalRuleId integer NOT NULL,
	RangeId integer NOT NULL,
	StartTime integer NULL,
	EndTime integer NULL,
    CONSTRAINT PK_PMWCalHourDefTable PRIMARY KEY(ProcessDefId,CalId,CalRuleId,RangeId)
)

go

CREATE TABLE PMWCalRuleDefTable(
	ProcessDefId integer NOT NULL,
	CalId integer NOT NULL,
	CalRuleId integer NOT NULL,
	Def nvarchar(255) NULL,
	CalDate datetime NULL,
	Occurrence smallint NULL,
	WorkingMode nvarchar(1) NULL,
	DayOfWeek smallint NULL,
	WEF datetime NULL,
    CONSTRAINT PK_PMWCalRuleDefTable PRIMARY KEY(ProcessDefId,CalId,CalRuleId)
)

go

CREATE TABLE PMWTypeDefTable(
	 ProcessDefId   int  NOT NULL,
	 ParentTypeId   smallint  NOT NULL,
	 TypeFieldId   smallint  NOT NULL,
	 FieldName   nvarchar (128) NOT NULL,
	 WFType   smallint  NOT NULL,
	 TypeId   smallint  NOT NULL,
	 Unbounded   nvarchar (1) NOT NULL DEFAULT 'N',
	 ExtensionTypeId   smallint  NULL,
    CONSTRAINT PK_PMWTypeDefTable PRIMARY KEY (ProcessDefId,ParentTypeId,TypeFieldId),
    CONSTRAINT ck_PMWTypeDefTable CHECK (Unbounded = N'N' or Unbounded = N'Y')
)

go

CREATE TABLE  PMWTypeDescTable (
	 ProcessDefId   int  NOT NULL,
	 TypeId   smallint  NOT NULL,
	 TypeName   nvarchar (128) NOT NULL,
	 ExtensionTypeId   smallint  NULL,
    CONSTRAINT PK_PMWTypeDescTable PRIMARY KEY (ProcessDefId,TypeId)
)

go

CREATE TABLE PMWVARMAPPINGTABLE(
	ProcessDefId int NOT NULL,
	VariableId int NOT NULL,
	SystemDefinedName nvarchar(50) NOT NULL,
	UserDefinedName nvarchar(50) NULL,
	VariableType smallint NOT NULL,
	VariableScope nvarchar(1) NOT NULL,
	ExtObjId int NULL,
	DefaultValue nvarchar(255) NULL,
	VariableLength int NULL,
	VarPrecision int NULL,
	Unbounded nvarchar(1) NOT NULL DEFAULT (N'N'),
	IsEncrypted nvarchar(1) NULL DEFAULT (N'N'),
	IsMasked nvarchar(1) NULL DEFAULT (N'N'),
	MaskingPattern nvarchar(10) NULL DEFAULT(N'X'),
    CONSTRAINT ck_PMWVarMappingTABLE CHECK (VariableScope = N'M' or (VariableScope = N'I' or (VariableScope = N'U' or (VariableScope = N'S')))),
    CONSTRAINT ck_PMWVarMappingTABLE_U CHECK (Unbounded = N'N' or Unbounded = N'Y'),
    CONSTRAINT pk_PMWVarMappingTABLE PRIMARY KEY(ProcessDefId,VariableId)
)

go 

CREATE TABLE PMWActivityAssociationTable(
	ProcessDefId integer NOT NULL,
	ActivityId integer NOT NULL,
	DefinitionType nvarchar(1) NOT NULL,
	DefinitionId smallint NOT NULL,
	AccessFlag nvarchar(3) NULL,
	FieldName nvarchar(255) NULL,
	Attribute nvarchar(1) NULL,
	ExtObjID integer NULL,
	VariableId integer NOT NULL,
	CONSTRAINT pk_PMWActivityAssociationTable PRIMARY KEY (ProcessDefId,ActivityId,DefinitionType,DefinitionId),
    CONSTRAINT ck_PMWActivityAssociationTable CHECK (DefinitionType = N'I' or (DefinitionType = N'Q' or (DefinitionType = N'N' or (DefinitionType = N'S' or (DefinitionType = N'P' or (DefinitionType = N'T' ))))))
)

go
    
CREATE TABLE PMWEXTDBCONFTABLE(
	ProcessDefId int NOT NULL,
	DatabaseName nvarchar(255) NOT NULL,
	DatabaseType nvarchar(20) NOT NULL,
	UserId nvarchar(255) NULL,
	PWD nvarchar(255) NULL,
	TABLEName nvarchar(255) NOT NULL,
	ExtObjID int NOT NULL,
	HostName nvarchar(255) NULL,
	Service nvarchar(255) NULL,
	Port int NULL,
	SecurityFlag nvarchar(1) NULL CHECK (SecurityFlag IN (N'Y', N'N')),
	SortingColumn nvarchar(255)	NULL,
CONSTRAINT pk_PMWEXTDBCONFTABLE PRIMARY KEY (ProcessDefId,ExtObjID)
)

go

CREATE TABLE PMWEXTDBFIELDDEFINITIONTABLE(
	ProcessDefId int NOT NULL,
	FieldName nvarchar(50) NOT NULL,
	FieldType nvarchar(255) NOT NULL,
	FieldLength int NULL,
	DefaultValue nvarchar(255) NULL,
	Attribute nvarchar(255) NULL,
	VarPrecision int NULL,
    ExtObjId int NOT NULL,
CONSTRAINT pk_PMWEXTDBFIELDDEFINITIONTABLE PRIMARY KEY (ProcessDefId,ExtObjId,FieldName)
)

go    

CREATE TABLE PMWCONSTANTDEFTABLE(
	ProcessDefId int NOT NULL,
	ConstantName nvarchar(64) NOT NULL,
	ConstantValue nvarchar(255) NULL,
    LastModifiedOn DATETIME	NOT NULL,
CONSTRAINT pk_PMWCONSTANTDEFTABLE PRIMARY KEY (ProcessDefId,ConstantName)
)

go

CREATE TABLE PMWEXTMETHODDEFTABLE(
	ProcessDefId int NOT NULL,
	ExtMethodIndex int NOT NULL,
	ExtAppName nvarchar(64) NOT NULL,
	ExtAppType nvarchar(1) NOT NULL CHECK (ExtAppType in (N'E', N'W', N'S', N'Z', N'B', N'R')),
	ExtMethodName nvarchar(64) NOT NULL ,
	SearchMethod nvarchar(255) NULL,
	SearchCriteria integer NULL,
	ReturnType smallint NULL CHECK (ReturnType in (0, 3, 4, 6, 8, 10, 11, 12, 14, 15, 16)),
	MappingFile nvarchar(1) NULL,
	ConfigurationID INT NULL,
CONSTRAINT pk_PMWEXTMETHODDEFTABLE PRIMARY KEY (ProcessDefId,ExtMethodIndex)
)

go

CREATE TABLE PMWEXTMETHODPARAMDEFTABLE(
	ProcessDefId int NOT NULL,
	ExtMethodParamIndex int NOT NULL,
	ExtMethodIndex int NOT NULL,
	ParameterName nvarchar(64) NULL,
	ParameterType smallint NULL CHECK (ParameterType in (0, 3, 4, 6, 8, 10, 11, 12, 14, 15, 16)),
	ParameterOrder smallint NULL,
	DataStructureId int NULL,
	ParameterScope nvarchar(1)  NULL,
	Unbounded nvarchar(1) NOT NULL DEFAULT (N'N') CHECK (Unbounded IN (N'Y' , N'N' ,N'Z' ,N'X' ,N'M',N'P')),
CONSTRAINT pk_PMWEXTMETHODPARAMDEFTABLE PRIMARY KEY (ProcessDefId,ExtMethodIndex, ExtMethodParamIndex)
)

go 

CREATE TABLE PMWInitiateWorkItemDefTable
(
	ProcessDefID integer NOT NULL,
	ActivityId integer NOT NULL,
	ImportedProcessName nvarchar(30)  NOT NULL,
	ImportedFieldName nvarchar(63) NOT NULL,
	ImportedVariableId integer NULL,
	ImportedVarFieldId integer NULL,
	MappedFieldName nvarchar(63) NOT NULL,
	MappedVariableId integer NULL,
	MappedVarFieldId integer NULL,
	FieldType nvarchar(1)  NOT NULL,
	MapType nvarchar(1) NULL,
	DisplayName nvarchar(2000) NULL,
    ImportedProcessDefId integer  NOT NULL
)

go 

CREATE TABLE PMWImportedProcessDefTable
(
	ImportedProcessDefID integer NOT NULL,
	ActivityId integer NOT NULL,
	ImportedProcessName nvarchar(30) NOT NULL,
	ImportedFieldName nvarchar(63) NOT NULL,
	FieldDataType integer NULL,
	FieldType nvarchar(1) NULL,
	VariableId integer NULL,
	VarFieldId integer NULL,
	DisplayName nvarchar(2000)  NULL,
    ProcessDefID integer NOT NULL,
	ProcessType nvarchar(1) NOT NULL
)

go

CREATE TABLE PMWUDTVarMappingTable(
	ProcessDefId int NOT NULL,
	VariableId int NOT NULL,
	VarFieldId smallint NOT NULL,
	TypeId smallint NOT NULL,
	TypeFieldId smallint NOT NULL,
	ParentVarFieldId smallint NOT NULL,
	MappedObjectName nvarchar(256) NULL,
	ExtObjId int NULL,
	MappedObjectType nvarchar(1) NULL,
	DefaultValue nvarchar(256) NULL,
	FieldLength int NULL,
	VarPrecision int NULL,
	RelationId int NULL,
	IsEncrypted nvarchar(1) NULL DEFAULT (N'N'),
	IsMasked nvarchar(1) NULL DEFAULT (N'N'),
	MaskingPattern nvarchar(10) NULL DEFAULT(N'X'),
constraint pk_PMWUDTVarMappingTable PRIMARY KEY (ProcessDefId ,VariableId ,	VarFieldId, TypeId,TypeFieldId )
)

go 

CREATE TABLE PMWTODOLISTDEFTABLE(
	ProcessDefId int NOT NULL,
	ToDoId int NOT NULL,
	ToDoName nvarchar(255) NOT NULL,
	Description nvarchar(255) NOT NULL,
	Mandatory nvarchar(1) NOT NULL,
	ViewType nvarchar(1) NULL,
	AssociatedField nvarchar(255) NULL,
	ExtObjID int NULL,
	VariableId int NULL,
	VarFieldId int NULL,
	TriggerName nvarchar(50) NULL,
constraint pk_PMWTODOLISTDEFTABLE PRIMARY KEY (ProcessDefId ,ToDoId)
)

go 

CREATE TABLE PMWTODOPICKLISTTABLE(
	ProcessDefId int NOT NULL,
	ToDoId int NOT NULL,
	PickListValue nvarchar(50) NOT NULL,
	CONSTRAINT pk_PMWTODOPICKLISTTABLE PRIMARY KEY(ProcessDefId,ToDoId,PickListValue)
)

go 

CREATE TABLE PMWVarRelationTable(
	ProcessDefId int NOT NULL,
	RelationId int NOT NULL,
	OrderId int NOT NULL,
	ParentObject nvarchar(256) NOT NULL,
	Foreignkey nvarchar(256) NOT NULL,
	FautoGen nvarchar(1) NULL,
	ChildObject nvarchar(256) NOT NULL,
	Refkey nvarchar(256) NOT NULL,
	RautoGen nvarchar(1) NULL,
constraint pk_PMWVarRelationTable PRIMARY KEY (ProcessDefId,RelationId,OrderId)
)

go

CREATE TABLE PMWDataStructureTable(
	DataStructureId int NOT NULL,
	ProcessDefId int NOT NULL,
	ActivityId int NULL,
	ExtMethodIndex int NOT NULL,
	Name nvarchar(256)  NULL,
	Type smallint NULL,
	ParentIndex int NULL,
	ClassName nvarchar(255) NULL,
	Unbounded nvarchar(1) NOT NULL DEFAULT (N'N'),
	constraint pk_PMWDataStructureTable PRIMARY KEY (ProcessDefId,ExtMethodIndex,DataStructureId),
	constraint chk_PMWDataStructureTable_Unbounded CHECK (Unbounded='N' OR Unbounded='Y' OR Unbounded='Z' OR Unbounded='X' OR Unbounded='M' OR Unbounded='P')
)

go

CREATE TABLE PMWWebServiceInfoTable(
	ProcessDefId int NOT NULL,
	WSDLURLId int NOT NULL,
	WSDLURL nvarchar(2000) NULL,
	USERId nvarchar(255) NULL,
	PWD nvarchar(255) NULL,
	SecurityFlag nvarchar(1) NULL,
	constraint pk_PMWWebserviceInfoTable PRIMARY KEY (ProcessDefId,WSDLURLId)
)

go

CREATE TABLE PMWExtMethodParamMappingTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	RuleId int NOT NULL,
	RuleOperationOrderId smallint NOT NULL,
	ExtMethodIndex int NOT NULL,
	MapType nvarchar(1) NULL,
	ExtMethodParamIndex int NOT NULL,
	MappedField nvarchar(255) NULL,
	MappedFieldType nvarchar(1) NULL,
	VariableId int NULL,
	VarFieldId int NULL,
	DataStructureId int NULL,
	constraint chk_MappedFieldType CHECK (MappedFieldType IN ('U','M','I','S','C','F','Q')),
	constraint chk_PMWExtMethodParamMappingTable_MapType CHECK (MapType IN ('R','F'))
)

go

CREATE TABLE PMWRecordedChats(
	ProcessDefId int NOT NULL,
	ProcessName nvarchar(255) NULL,
	SavedBy nvarchar(255) NULL,
	SavedAt datetime NOT NULL,
	ChatId nvarchar(255) NOT NULL,
	Chat nvarchar(max) NULL,
	ChatStartTime datetime NOT NULL,
	ChatEndTime datetime NOT NULL
)

go

CREATE TABLE PMWWebServiceTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	ExtMethodIndex int NOT NULL,
	ProxyEnabled nvarchar(1) NULL,
	TimeOutInterval int NULL,
	InvocationType nvarchar(1) NULL,
	FunctionType nvarchar(1) NOT NULL DEFAULT 'L',
    ReplyPath NVarchar(256), 
	AssociatedActivityId INT,
	InputBuffer nvarchar(max) NULL,
	OutputBuffer nvarchar(max) NULL,
	OrderId int NOT NULL DEFAULT 1,
	Constraint pk_PMWWebServiceTable PRIMARY KEY ( ProcessDefId ASC,ActivityId ASC,ExtMethodIndex ASC), 
	constraint chk_PMWWebServiceTable_FunctionType CHECK (FunctionType IN ('L','G'))
)

go

CREATE TABLE PMWInterfaceDefTable(
	InterfaceId int NOT NULL,
	InterfaceName nvarchar(255) NOT NULL,
	ClientInvocation nvarchar(255) NOT NULL,
	ButtonName nVarchar(50) NOT NULL,
	MenuName nVarchar(50) NOT NULL,
	ExecuteClass nvarchar(255) NOT NULL,
	ExecuteClassWeb nvarchar(255) NULL,
	CONSTRAINT pk_PMWInterfaceDefTable Primary Key (InterfaceName)
)
 
go

INSERT INTO PMWInterfaceDefTable 
SELECT 1,'ToDoList','ToDoList.clsToDo',' ','ToDoList',' ',' ' 
UNION ALL
SELECT 2,'Action','Action.clsAction',' ','Action',' ',' '
UNION ALL
SELECT 3,'FormView','FormView.clsFormView',' ','FormView',' ',' '
UNION ALL
SELECT 4,'Exceptions','Exceptions.clsExceptions',' ','Exceptions',' ',' '
UNION ALL
SELECT 5,'Document','DocumentDef.clsDocumentProp',' ','Document',' ',' '
UNION ALL
SELECT 6,'Archive','Archive.clsArchive',' ','Archive',' ',' '
UNION ALL
SELECT 7,'PrintFaxEmail','PrintFaxEmail.clsPrintFaxEmail',' ','PrintFaxEmail',' ',' '
UNION ALL
SELECT 8,'ScanTool','ScanTool.clsScanTool',' ','ScanTool',' ',' '
UNION ALL
SELECT 9,'Mobile','Mobile.clsMobile',' ','Mobile',' ',' '
UNION ALL
SELECT 11,'FormExtView','FormView.clsFormView',' ','FormExtView',' ',' '
UNION ALL
SELECT 10,'SAPGUIAdapter','SAPGUIAdapter.clsSAPGUIAdapter','SAPGUIAdapter','SAPGUIAdapter','SAPGUIAdapter','SAPGUIAdapter'
UNION ALL
SELECT 12,'DynamicCase','DynamicCase.clsDynamicCase','DynamicCase','DynamicCase','DynamicCase','DynamicCase';
go

CREATE TABLE PMWACTIVITYINTERFACEASSOCTABLE(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	ActivityName nvarchar(30) NOT NULL,
	InterfaceElementId int NOT NULL,
	InterfaceType nvarchar(1) NOT NULL,
	Attribute nvarchar(2) NULL,
	TriggerName nvarchar(255) NULL,
)

go 

CREATE TABLE  PMWRuleConditionTable(
	 ProcessDefId int NOT NULL,
	 ActivityId int NOT NULL,
	 RuleType nvarchar(1) NOT NULL,
	 RuleOrderId smallint  NOT NULL,
	 RuleId smallint  NOT NULL,
	 ConditionOrderId smallint  NOT NULL,
	 Param1 nvarchar(255) NOT NULL,
	 Type1 nvarchar(1) NOT NULL,
	 ExtObjID1 int  NULL,
	 VariableId_1 int  NULL,
	 VarFieldId_1 int  NULL,
	 Param2 nvarchar (255) NOT NULL,
	 Type2 nvarchar (1) NOT NULL,
	 ExtObjID2 int  NULL,
	 VariableId_2 int  NULL,
	 VarFieldId_2 int  NULL,
	 Operator smallint  NOT NULL,
	 LogicalOp smallint  NOT NULL
)

go   
 
CREATE TABLE  PMWRuleOperationTable (
	 ProcessDefId int  NOT NULL,
	 ActivityId int  NOT NULL,
	 RuleType nvarchar (1) NOT NULL,
	 RuleId smallint  NOT NULL,
	 OperationType smallint  NOT NULL,
	 Param1 nvarchar (255) NOT NULL,
	 Type1 nvarchar (1) NOT NULL,
	 ExtObjID1 int  NULL,
	 VariableId_1 int  NULL,
	 VarFieldId_1 int  NULL,
	 Param2 nvarchar (255) NOT NULL,
	 Type2 nvarchar (1) NOT NULL,
	 ExtObjID2 int  NULL,
	 VariableId_2 int  NULL,
	 VarFieldId_2 int  NULL,
	 Param3 nvarchar (255) NULL,
	 Type3 nvarchar (1) NULL,
	 ExtObjID3 int  NULL,
	 VariableId_3 int  NULL,
	 VarFieldId_3 int  NULL,
	 Operator smallint NOT NULL,
	 OperationOrderId smallint  NOT NULL,
	 CommentFlag nvarchar (1) NULL,
	 RuleCalFlag nvarchar (1) NULL,
	 FunctionType nvarchar (1) NOT NULL DEFAULT ('L') CHECK (FunctionType IN (N'G' , N'L')),
     CONSTRAINT pk_PMWRuleOperationTable PRIMARY KEY  (ProcessDefId,ActivityId,RuleType,RuleId,OperationOrderId ) 
)

go

CREATE TABLE PMWEXCEPTIONDEFTABLE
(
	ProcessDefId int NOT NULL,
	ExceptionId int NOT NULL,
	ExceptionName nvarchar(50) NOT NULL,
	Description nvarchar(255) NOT NULL,
    CONSTRAINT pk_PMWEXCEPTIONDEFTABLE PRIMARY KEY(ProcessDefId,ExceptionId)
)

go 

CREATE TABLE PMWDocumentTypeDefTable (
	 ProcessDefId int  NOT NULL,
	 DocId int  NOT NULL,
	 DocName nvarchar (50) NOT NULL,
	 DCName nvarchar (250) NULL,
	 DocType nvarchar (2) DEFAULT 'D' NOT NULL,
     CONSTRAINT pk_PMWDocumentTypeDefTable PRIMARY KEY  (ProcessDefId,DocId) 
)

go 

CREATE TABLE  PMWExtInterfaceConditionTable(
	 ProcessDefId int NOT NULL,
	 ActivityId int  NOT NULL,
	 InterFaceType nvarchar (1) NOT NULL,
	 RuleOrderId int NOT NULL,
	 RuleId int  NOT NULL,
	 ConditionOrderId int  NOT NULL,
	 Param1 nvarchar (255) NOT NULL,
	 Type1 nvarchar (1) NOT NULL,
	 ExtObjID1 int NULL,
	 VariableId_1 int  NULL,
	 VarFieldId_1 int  NULL,
	 Param2   nvarchar (255) NOT NULL,
	 Type2 nvarchar (1) NOT NULL,
	 ExtObjID2 int  NULL,
	 VariableId_2 int NULL,
	 VarFieldId_2 int  NULL,
	 Operator int  NOT NULL,
	 LogicalOp int  NOT NULL
	 CONSTRAINT pk_PMWExtInterfaceConditionTable PRIMARY KEY  (ProcessDefId,InterFaceType,RuleId,ConditionOrderId ) 
)

go 

CREATE TABLE   PMWSearchVariableTable (
	 ProcessDefID int NOT NULL,
	 ActivityID int  NOT NULL,
	 FieldName nvarchar(2000)   NOT NULL,
	 Scope nvarchar (1)   NOT NULL CHECK (Scope = 'C' or Scope = 'F' or Scope = 'R'),
	 OrderID int  NOT NULL,
	 VariableId int NULL,
     CONSTRAINT pk_PMWSearchVariableTable PRIMARY KEY  (ProcessDefID,ActivityID,FieldName, Scope) 
)

go  

CREATE TABLE PMWDATAENTRYTRIGGERTABLE(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	VariableName nvarchar(255) NOT NULL,
	Type nvarchar(1) NOT NULL,
	ExtObjID int NULL,
	VariableId int NULL,
	VarFieldId int NULL,
PRIMARY KEY (ProcessDefId,TriggerID,VariableName)
)

go
 
CREATE TABLE  PMWExtInterfaceOperationTable (
	 ProcessDefId int  NOT NULL,
	 ActivityId int  NOT NULL,
	 InterFaceType nvarchar (1) NOT NULL,
	 RuleId int  NOT NULL,
	 InterfaceElementId int  NOT NULL
	 CONSTRAINT pk_PMWExtInterfaceOperationTable PRIMARY KEY  (ProcessDefId,InterFaceType,RuleId,InterfaceElementId ) 
)

go  

create table PMWDataSetTriggerTable
(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	Param1 nvarchar(255) NOT NULL,
	Type1 nvarchar(1) NOT NULL,
	ExtObjID1 int NULL,
	VariableId_1 int NULL,
	VarFieldId_1 int NULL,
	Param2 nvarchar(255) NOT NULL,
	Type2 nvarchar(1) NOT NULL,
	ExtObjID2 int NULL,
	VariableId_2 int NULL,
	VarFieldId_2 int NULL
)

go 

CREATE TABLE PMWEXCEPTIONTRIGGERTABLE(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	ExceptionName nvarchar(255) NOT NULL,
	Attribute nvarchar(255) NOT NULL,
	RaiseViewComment nvarchar(255) NULL,
	ExceptionId int NOT NULL,
PRIMARY KEY (ProcessDefId, TriggerID)
)

go 

CREATE TABLE PMWEXECUTETRIGGERTABLE(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	FunctionName nvarchar(255) NOT NULL,
	ArgList nvarchar(255) NULL,
	HttpPath nvarchar(255) NULL,
PRIMARY KEY (ProcessDefId ,TriggerID)
)

go

CREATE TABLE PMWMAILTRIGGERTABLE(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	Subject nvarchar(255) NULL,
	FromUser nvarchar(255) NULL,
	FromUserType nvarchar(1) NULL,
	ExtObjIDFromUser int NULL,
	VariableIdFrom int NULL,
	VarFieldIdFrom int NULL,
	ToUser nvarchar(255) NOT NULL,
	ToType nvarchar(1) NOT NULL,
	ExtObjIDTo int NULL,
	VariableIdTo int NULL,
	VarFieldIdTo int NULL,
	CCUser nvarchar(255) NULL,
	CCType nvarchar(1) NULL,
	ExtObjIDCC int NULL,
	VariableIdCc int NULL,
	VarFieldIdCc int NULL,
	Message ntext NULL,
	BCCUser                nvarchar(255)        NULL,
    BCCType             nvarchar(1)            Default 'C' NULL,
    ExtObjIDBCC         int                    NULL,
    VariableIdBCc         int                    NULL,
    VarFieldIdBCc         int                    NULL,
    MailPriority nvarchar(255)     DEFAULT NULL,
    MailPriorityType nvarchar(1)  default 'C' NOT NULL ,
    ExtObjIdMailPriority int      default 0 NOT NULL,
    VariableIdMailPriority int    default 0 NOT NULL,
    VarFieldIdMailPriority int    default 0 NOT NULL,
PRIMARY KEY (ProcessDefId,TriggerID )
)

go

CREATE TABLE PMWLAUNCHAPPTRIGGERTABLE(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	ApplicationName nvarchar(255) NOT NULL,
	ArgList nvarchar(255) NULL,
PRIMARY KEY (ProcessDefId,TriggerID)
)

go

CREATE TABLE PMWGENERATERESPONSETABLE(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	FileName nvarchar(255) NOT NULL,
	ApplicationName nvarchar(255) NOT NULL,
	GenDocType nvarchar(255) NULL,
PRIMARY KEY (ProcessDefId ,TriggerID )
)

go

CREATE TABLE PMWTRIGGERDEFTABLE(
	ProcessDefId int NOT NULL,
	TriggerID smallint NOT NULL,
	TriggerName nvarchar(50) NOT NULL,
	TriggerType nvarchar(1) NOT NULL,
	TriggerTypeName nvarchar(50) NULL,
	Description nvarchar(255) NULL,
	AssociatedTAId int NULL,
PRIMARY KEY(ProcessDefId,TriggerID)
)

go  

CREATE TABLE PMWTRIGGERTYPEDEFTABLE(
	ProcessDefId int NOT NULL,
	TypeName nvarchar(50) NOT NULL,
	ClassName nvarchar(255) NOT NULL,
	ExecutableClass nvarchar(255) NULL,
	HttpPath nvarchar(255) NULL,
PRIMARY KEY (ProcessDefId,TypeName) 
)

go

CREATE TABLE PMWJMSPublishTable(
	ProcessDefId int NULL,
	ActivityId int NULL,
	DestinationId int NULL,
	Template ntext NULL
)

go

CREATE TABLE PMWJMSDestInfo(
	DestinationId int NOT NULL,
	AppServerIP nvarchar(16)  NULL,
	AppServerPort int NULL,
	AppServerType nvarchar(16)  NULL,
	JmsDestName nvarchar(256)  NOT NULL,
	JmsDestType nvarchar(1)  NOT NULL,
	CONSTRAINT pk_PMWJMSDestInfo PRIMARY KEY (destinationId)
)

go

CREATE TABLE PMWJMSSubscribeTable(
	ProcessDefId int NULL,
	ActivityId int NULL,
	DestinationId int NULL,
	ExtParamName nvarchar(256)  NULL,
	ProcessVariableName nvarchar(256)  NULL,
	VariableProperty nvarchar(1)  NULL,
	VariableId int NULL,
	VarFieldId int NULL
)

go

CREATE TABLE PMWSCANACTIONSTABLE(
	ProcessDefId int NOT NULL,
	DocTypeId int NOT NULL,
	ActivityId int NOT NULL,
	Param1 nvarchar(255) NOT NULL,
	Type1 nvarchar(1) NOT NULL,
	ExtObjId1 int NOT NULL,
	VariableId_1 int NULL,
	VarFieldId_1 int NULL,
	Param2 nvarchar(255) NOT NULL,
	Type2 nvarchar(1) NOT NULL,
	ExtObjId2 int NOT NULL,
	VariableId_2 int NULL,
	VarFieldId_2 int NULL,
)

go
 
CREATE TABLE  PMWACTIONDEFTABLE(
	 ProcessDefId int  NOT NULL,
	 ActionId int  NOT NULL,
	 ActionName nvarchar (50) NOT NULL,
	 ViewAs nvarchar (50) NULL,
	 IconBuffer  NText  NULL,
	 ActivityId int  NOT NULL,
	 isEncrypted nvarchar (1) NULL,
     CONSTRAINT pk_PMWACTIONDEFTABLE PRIMARY KEY  (ProcessDefID,ActivityID,ActionId) 
)

go   

CREATE TABLE  PMWACTIONCONDITIONTABLE (
	 ProcessDefId int  NOT NULL,
	 ActivityId int  NOT NULL,
	 RuleType nvarchar (1) NOT NULL,
	 RuleOrderId int  NOT NULL,
	 RuleId int  NOT NULL,
	 ConditionOrderId int  NOT NULL,
	 Param1 nvarchar (255) NOT NULL,
	 Type1 nvarchar (1) NOT NULL,
	 ExtObjID1 int  NULL,
	 VariableId_1 int  NULL,
	 VarFieldId_1 int  NULL,
	 Param2 nvarchar (255) NOT NULL,
	 Type2 nvarchar (1) NOT NULL,
	 ExtObjID2 int  NULL,
	 VariableId_2 int  NULL,
	 VarFieldId_2 int  NULL,
	 Operator int  NOT NULL,
	 LogicalOp int  NOT NULL
)

go  

CREATE TABLE  PMWACTIONOPERATIONTABLE (
	 ProcessDefId int  NOT NULL,
	 ActivityId int  NOT NULL,
	 RuleType nvarchar (1) NOT NULL,
	 RuleId int  NOT NULL,
	 OperationType int NOT NULL,
	 Param1 nvarchar (255) NULL,
	 Type1 nvarchar (1) NOT NULL,
	 Param2 nvarchar (255) NULL,
	 Type2 nvarchar (1) NOT NULL,
	 Param3 nvarchar (255) NULL,
	 Type3 nvarchar (1) NULL,
	 Operator int NULL,
	 OperationOrderId int NOT NULL,
	 CommentFlag nvarchar(1) NOT NULL,
	 ExtObjID1 int NULL,
	 ExtObjID2 int NULL,
	 ExtObjID3 int NULL,
	 ActionCalFlag nvarchar(1) NULL,
	 VariableId_1 int NULL,
	 VarFieldId_1 int NULL,
	 VariableId_2 int NULL,
	 VarFieldId_2 int NULL,
	 VariableId_3 int NULL,
	 VarFieldId_3 int NULL
)

go

CREATE TABLE PMWQUEUEDEFTABLE(
	 ProcessDefId integer NOT NULL,
	 QueueID   integer NOT NULL,
	 QueueName   nvarchar (63) NOT NULL,
	 QueueType   nvarchar (1)  NOT NULL,
	 Comments   nvarchar (255)  NULL,
	 AllowReassignment   nvarchar (1)  NULL,
	 FilterOption   integer  NULL,
	 FilterValue   nvarchar (63)  NULL,
	 OrderBy   integer  NULL,
	 QueueFilter   nvarchar (2000)  NULL,
	 RefreshInterval   integer  NULL,
	 SortOrder   nvarchar (1)  NULL,
	 ProcessName  NVARCHAR(30) NULL,
	  CONSTRAINT pk_PMWQUEUEDEFTABLE PRIMARY KEY  (ProcessDefID,QueueID) ,
	  CONSTRAINT UK_PMWQUEUEDEFTABLE UNIQUE (ProcessDefId,QueueName)
)

go

CREATE TABLE PMWARCHIVETABLE (
	ProcessDefId            INTEGER         NOT NULL,
	ActivityID              INTEGER         NOT NULL,
	CabinetName             NVARCHAR(255)   NOT NULL,
	IPAddress               NVARCHAR(15)    NOT NULL,
	PortId                  NVARCHAR(5)     NOT NULL,
	ArchiveAs               NVARCHAR(255)   NOT NULL,
	UserId                  NVARCHAR(50)    NOT NULL,
	Passwd                  NVARCHAR(256)   NULL,
	ArchiveDataClassId      INTEGER         NULL,
	AppServerIP				NVARCHAR(15)	NULL,
	AppServerPort			NVARCHAR(5)		NULL,
	AppServerType			NVARCHAR(255)	NULL,
	SecurityFlag			NVARCHAR(1)		CHECK (SecurityFlag IN (N'Y', N'N')),
	ArchiveDataClassName    NVARCHAR(255)	NULL,
	DeleteAudit			    NVARCHAR(1)    default 'N'
)

go

CREATE TABLE PMWARCHIVEDATAMAPTABLE (
	ProcessDefId            INTEGER			NOT NULL,
	ArchiveID               INTEGER			NOT NULL,
	DocTypeID               INTEGER			NOT NULL,
	DataFieldId             INTEGER			NOT NULL,
	DataFieldName           NVARCHAR(50)	NOT NULL,
	AssocVar                NVARCHAR(255)		NULL,
	ExtObjID                INTEGER				NULL,
	VariableId				INT					NULL,
	VarFieldId				INT					NULL,
	DataFieldType           INTEGER			NOT NULL,
	
)

go

CREATE TABLE PMWARCHIVEDOCTYPETABLE (
	ProcessDefId            INTEGER		NOT NULL,
	ArchiveID               INTEGER		NOT NULL,
	DocTypeID               INTEGER		NOT NULL,
	AssocClassName          NVARCHAR(255)	NULL,
	AssocClassID            INTEGER		NULL
)

go

CREATE TABLE PMWPRINTFAXEMAILDOCTYPETABLE
(
	ProcessDefId int NOT NULL,
	ElementId int NOT NULL,
	PFEType nvarchar(1) NOT NULL,
	DocTypeId int NOT NULL,
	CreateDoc nvarchar(1) NOT NULL,
	VariableId int NULL,
	VarFieldId int NULL
)

go

CREATE TABLE PMWPRINTFAXEMAILTABLE(
	ProcessDefId int NOT NULL,
	PFEInterfaceId int NOT NULL,
	InstrumentData nvarchar(1) NULL,
	FitToPage nvarchar(1) NULL,
	Annotations nvarchar(1) NULL,
	FaxNo nvarchar(255) NULL,
	FaxNoType nvarchar(1) NULL,
	ExtFaxNoId int NULL,
	VariableIdFax int NULL,
	VarFieldIdFax int NULL,
	CoverSheet nvarchar(50) NULL,
	CoverSheetBuffer NText NULL,
	ToUser nvarchar(255) NULL,
	FromUser nvarchar(255) NULL,
	ToMailId nvarchar(255) NULL,
	ToMailIdType nvarchar(1) NULL,
	ExtToMailId int NULL,
	VariableIdTo int NULL,
	VarFieldIdTo int NULL,
	CCMailId nvarchar(255) NULL,
	CCMailIdType nvarchar(1) NULL,
	ExtCCMailId int NULL,
	VariableIdCc int NULL,
	VarFieldIdCc int NULL,
	SenderMailId nvarchar(255) NULL,
	SenderMailIdType nvarchar(1) NULL,
	ExtSenderMailId int NULL,
	VariableIdFrom int NULL,
	VarFieldIdFrom int NULL,
	Message ntext NULL,
	Subject nvarchar(255) NULL,
	BCCMailId                nvarchar(255)        NULL,
    BCCMailIdType            nvarchar(1)            NULL,
    ExtBCCMailId            INT                    NULL,
    VariableIdBCC            INT                    NULL,
    VarFieldIdBCC            INT                    NULL,
    MailPriority nvarchar(255)          DEFAULT null,
    MailPriorityType nvarchar(1)      DEFAULT null,
    ExtObjIdMailPriority     int     default 0 NOT NULL,
    VariableIdMailPriority     int     default 0 NOT NULL,
    VarFieldIdMailPriority     int     default 0 NOT NULL,
	CONSTRAINT pk_PMWPRINTFAXEMAILTABLE PRIMARY KEY (ProcessDefId,PFEInterfaceId)
)

go

CREATE TABLE PMWLaneQueueTable (
	 ProcessDefId   integer  NOT NULL,
	 SwimLaneId   integer  NOT NULL,
	 QueueID   integer NOT NULL,
	 DefaultQueue nvarchar(1) NOT NULL 	default 'N',
     CONSTRAINT pk_PMWLaneQueueTable PRIMARY KEY (ProcessDefId,SwimLaneId,QueueId)
)
go
CREATE TABLE  PMWQUEUESTREAMTABLE (
	 ProcessDefID   integer  NOT NULL,
	 ActivityID   integer  NOT NULL,
	 StreamId   integer  NOT NULL,
	 QueueId   integer  NULL,
CONSTRAINT pk_PMQUEUESTREAMTABLE PRIMARY KEY (ProcessDefId,ActivityID,StreamId)
)

go

CREATE TABLE PMWRegProcessMappingTable(
	LocalProcessDefId int NOT NULL,
	RegisteredProcessDefId int NOT NULL
)

go

CREATE TABLE PMWSoapReqCorrelationTable(
	Processdefid int NOT NULL,
	ActivityId int NOT NULL,
	PropAlias nvarchar(255) NOT NULL,
	VariableId int NOT NULL,
	VarFieldId int NOT NULL,
	SearchField nvarchar(255) NOT NULL,
	SearchVariableId int NOT NULL,
	SearchVarFieldId int NOT NULL
)

go

CREATE TABLE  PMWTEMPLATEDEFINITIONTABLE(
	 ProcessDefId int  NOT NULL,
	 TemplateId int  NOT NULL,
	 TemplateFileName nvarchar (255) NOT NULL,
	 TemplateBuffer ntext  NULL,
	 isEncrypted nvarchar (1) NULL,
	 ArgList nvarchar (2000) NULL,
     Format nvarchar(255) null,
     CONSTRAINT pk_PMWTEMPLATEDEFINITIONTABLE PRIMARY KEY (ProcessDefId,TemplateId)
)

go   

CREATE TABLE PMWTemplateMultiLanguageTable(
	 ProcessDefId int  NOT NULL,
	 TemplateId int  NOT NULL,
	 Locale nchar (100) NOT NULL,
	 TemplateBuffer  ntext NULL,
	 isEncrypted nvarchar (1) NULL,
     CONSTRAINT pk_PMWTemplateMultiLanguageTable PRIMARY KEY (ProcessDefId,TemplateId,Locale)
)

go

CREATE TABLE PMWFORM_TABLE (
	ProcessDefId            INT             NOT NULL,
	FormId                  INT             NOT NULL,
	FormName                NVARCHAR(50)    NOT NULL,
	FormBuffer              NTEXT           NULL,
	isEncrypted				NVARCHAR(1),
    LastModifiedOn          datetime        NOT NULL,
	DeviceType 				nvarchar(1) 	NOT NULL 	default 'D',
	FormHeight 				int 			NOT NULL 	default 100,
	FormWidth 				int 			NOT NULL 	default 100	,
	ExistingFormId			int				NULL,		
	FormType      			NVARCHAR(1)  	NOT NULL 	default 'P' 
	CONSTRAINT PK_PMWFORM_TABLE PRIMARY KEY(ProcessDefID,FormId,DeviceType)
)

go

CREATE TABLE  PMWQUEUEUSERTABLE (
	 ProcessDefId int NOT NULL,
	 QueueId   int  NOT NULL,
	 Userid   smallint  NOT NULL,
	 AssociationType   smallint  NOT NULL,
	 AssignedTillDATETIME   datetime  NULL,
	 QueryFilter   nvarchar (2000)  NULL,
	 QueryPreview   nvarchar (1) NULL DEFAULT ('Y'),
	 OperationType  nvarchar (1) NULL DEFAULT ('I'),
     RevisionNo  INT,
	 CONSTRAINT pk_PMWQUEUEUSERTABLE PRIMARY KEY (ProcessDefId,QueueId,Userid,AssociationType)
)

go

CREATE TABLE PMWExportTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	DatabaseType nvarchar(10)  NULL,
	DatabaseName nvarchar(50) NULL,
	UserId nvarchar(50) NULL,
	UserPwd nvarchar(255) NULL,
	TableName nvarchar(50) NOT NULL,
	CSVType int NULL,
	NoOfRecords int NULL,
	HostName nvarchar(255) NULL,
	ServiceName nvarchar(255) NULL,
	Port nvarchar(255)  NULL,
	Header nvarchar(1) NULL, 
	CSVFileName nvarchar(255) NULL ,
	OrderBy nvarchar(255) NULL,
	FileExpireTrigger nvarchar(255) NULL,
	BreakOn nvarchar(1) NULL,
	FieldSeperator NVARCHAR(1), 
	FileType INT,
	FilePath NVARCHAR(255),
	HeaderString NVARCHAR(255),
	FooterString NVARCHAR(255),
	SleepTime INT,
	MaskedValue NVARCHAR(255),
	DateTimeFormat nvarchar(50) NULL,
	CONSTRAINT pk_PMWExportTable PRIMARY KEY (ProcessDefId,ActivityId,TableName)
)

go

CREATE TABLE PMWDataMapTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	OrderId int NOT NULL,
	FieldName nvarchar(255) NULL ,
	MappedFieldName nvarchar(255) NULL,
	FieldLength int NULL,
	DocTypeDefId int NULL,
	DateTimeFormat nvarchar(50) NULL ,
	QuoteFlag nvarchar(10) NULL,
	VariableId int NULL,
	VarFieldId int NULL,
    EXTMETHODINDEX INT NULL,
	ALIGNMENT NVARCHAR(5),	
	ExportAllDocs NVARCHAR(2),
	CONSTRAINT pk_PMWDataMapTable PRIMARY KEY (ProcessDefId,ActivityId,OrderId)
)

go

CREATE TABLE PMWFieldDefTable(
	ProcessDefId int  NOT NULL,
	ActivityID int NOT NULL,
	FieldLength int NULL,
	FieldName nvarchar(50) NOT NULL,
	FieldType nvarchar(50) NULL,
	FieldAttribute nvarchar(50) NULL,
	CONSTRAINT pk_PMWFieldDefTable PRIMARY KEY (ProcessDefId,ActivityId,FieldName)
)

go

CREATE TABLE PMWRequirementTable(
	ProcessDefId int  NOT NULL,
	ReqType  int NOT NULL,
	ReqTypeId int NOT NULL,
	ReqId int NOT NULL,
	ReqName nvarchar(255) NOT NULL,
	ReqDesc ntext NULL,
	ReqImpl ntext NULL,
	ReqPriority int NOT NULL,	
	CONSTRAINT pk_PMWRequirementTable PRIMARY KEY (ReqType,ReqTypeId,ProcessDefId,ReqId)
)

go

CREATE TABLE PMWSAPConnectTable(
	ProcessDefId int NOT NULL,
	SAPHostName nvarchar(64) NOT NULL,
	SAPInstance nvarchar(2) NOT NULL,
	SAPClient nvarchar(3) NOT NULL,
	SAPUserName nvarchar(256) NULL,
	SAPPassword nvarchar(512) NULL,
	SAPHttpProtocol nvarchar(8) NULL,
	SAPITSFlag nvarchar(1) NULL,
	SAPLanguage nvarchar(8) NULL,
	SAPHttpPort int NULL,
	ConfigurationID INT NOT NULL,
	RFCHostName NVarChar(64) NULL,
	ConfigurationName NVarChar(64) NULL,
	SecurityFlag nvarchar(1) NULL,
CONSTRAINT pk_PMWSAPConnectTable PRIMARY KEY (ProcessDefId,SAPHostName,ConfigurationID)
)

go

CREATE TABLE PMWDocBuffer(
	ProcessDefId int NOT NULL,
	ActivityId int  NULL,
	DocumentBuffer ntext  NULL,
	DocName    nvarchar(50) NOT NULL ,
	DocId    int NOT NULL,  
	Status nvarchar(1) DEFAULT 'S' NOT NULL,
	CONSTRAINT pk_PMWDocBuffer PRIMARY KEY(ProcessDefId,DocId)
)

go

 CREATE TABLE   PMWPDATable (
	 ProcessDefId   int  NOT NULL,
	 ActivityId   int  NOT NULL,
	 InterfaceId   int  NOT NULL,
	 InterfaceType   nvarchar (1)  NULL
)

go

CREATE TABLE PMWPDA_FormTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	VariableID int NOT NULL,
	VarfieldID int NOT NULL	
)
go
CREATE TABLE PMWFormFragmentTable
(
	ProcessDefId int NOT NULL,
	FragmentId int NOT NULL,
	FragmentName varchar(50) NOT NULL,
	FragmentBuffer nText NULL,
	IsEncrypted varchar(1) NOT NULL,
	StructureName varchar(128) NOT NULL,
	StructureId int NOT NULL,
    LastModifiedOn datetime NOT NULL,
	DeviceType nvarchar(1) NOT NULL default 'D',
	FormHeight int NOT NULL default 100,
	FormWidth int NOT NULL default 100	
	CONSTRAINT pk_PMWFormFragmentTable PRIMARY KEY(ProcessDefId,FragmentId,DeviceType)
)

go 

CREATE TABLE PMWSAPGUIDefTable(
	ProcessDefId int NOT NULL,
	DefinitionId int NOT NULL,
	DefinitionName nvarchar(256) NOT NULL,
	SAPTCode nvarchar(64) NOT NULL,
	TCodeType nvarchar(1) NOT NULL,
	VariableId int NULL,
	VarFieldId int NULL,
CONSTRAINT pk_PMWSAPGUIDefTable PRIMARY KEY(ProcessDefId,DefinitionId)
)

go

CREATE TABLE PMWSAPGUIFieldMappingTable(
	ProcessDefId int NOT NULL,
	DefinitionId int NOT NULL,
	SAPFieldName nvarchar(512) NOT NULL,
	MappedFieldName nvarchar(256) NOT NULL,
	MappedFieldType nvarchar(1) NULL,
	VariableId int NULL,
	VarFieldId int NULL
)

go 

CREATE TABLE PMWSAPGUIAssocTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	DefinitionId int NOT NULL,
	Coordinates nvarchar(255) NULL,
	ConfigurationID INT NOT NULL,
CONSTRAINT UK_PMWSAPGUIAssocTable UNIQUE (ProcessDefId,ActivityId,DefinitionId)
)

go

CREATE TABLE PMWGroupBoxTable(
	ProcessDefId int NOT NULL,
	GroupBoxId int NOT NULL,
	GroupBoxWidth int NULL,
	GroupBoxHeight int NULL,
	iTop int NULL,
	iLeft int NULL,
	BlockName nvarchar(255) NOT NULL,
	SwimLaneId int null,
    PRIMARY KEY (ProcessDefId,GroupBoxId)
)

go  

CREATE TABLE PMWCustomTablesInfo (
	ProcessDefId int NOT NULL,
	TableName nvarchar(255) NOT NULL,
	InterfaceType nvarchar(2) NOT NULL,
	InterfaceName nvarchar(255) NOT NULL
)

go

CREATE TABLE PMWSAPAdapterAssocTable (
	ProcessDefId INT NULL,
	ActivityId INT NULL,
	EXTMETHODINDEX INT NULL,
	ConfigurationID INT NOT NULL
)
go
CREATE TABLE PMWSTREAMDEFTABLE(
	ProcessDefId int NOT NULL,
	StreamId int NOT NULL,
	ActivityId int NOT NULL,
	StreamName nvarchar(30) NOT NULL,
	SortType nvarchar(1) NOT NULL,
	SortOn nvarchar(50) NOT NULL,
	StreamCondition nvarchar(255) NOT NULL,
 CONSTRAINT pk_PMWStreamDefTable PRIMARY KEY 
(
	ProcessDefId ASC,
	ActivityId ASC,
	StreamId ASC
))
go
CREATE TABLE PMWRECORDMAPPINGTABLE(
	ProcessDefId int NOT NULL,
	Rec1 nvarchar(255) NULL,
	Rec2 nvarchar(255) NULL,
	Rec3 nvarchar(255) NULL,
	Rec4 nvarchar(255) NULL,
	Rec5 nvarchar(255) NULL,
CONSTRAINT pk_PMWRecordMappingTable PRIMARY KEY 
(
	ProcessDefId ASC
))
go
CREATE TABLE PMWSTATESDEFTABLE(
	ProcessDefId int NOT NULL,
	StateId int NOT NULL,
	StateName nvarchar(255) NOT NULL,
CONSTRAINT pk_pmwStateDefTable PRIMARY KEY  
(
	ProcessDefId ASC,
	StateId ASC
))
go
CREATE TABLE PMWEventDefTable(
	ProcessDefId int NOT NULL,
	EventId int NOT NULL ,
	ScopeId int NULL,
	EventType nvarchar(1) NULL DEFAULT N'M',
	EventDuration int NULL,
	EventFrequency nvarchar(1) NULL,
	EventInitiationActivityId int NOT NULL,
	EventName nvarchar(64) NOT NULL,
	associatedUrl nvarchar(255) NULL,
CONSTRAINT pk_PMWEventDefTable PRIMARY KEY 
(
	ProcessDefId ASC,
	EventId ASC
),
CONSTRAINT chk_EventType CHECK (EventType=N'M' OR EventType=N'A'),
CONSTRAINT chk_EventFrequency CHECK (EventFrequency=N'M' OR EventFrequency=N'O')
)
go
CREATE TABLE PMWScopeDefTable(
	ProcessDefId int NOT NULL,
	ScopeId int NOT NULL,
	ScopeName nvarchar(256) NOT NULL,
CONSTRAINT pk_PMWScopeDefTable PRIMARY KEY 
(
	ProcessDefId ASC,
	ScopeId ASC
))
go
CREATE TABLE PMWActivityScopeAssocTable(
	ProcessDefId int NOT NULL,
	ScopeId int NOT NULL,
	ActivityId int NOT NULL,
 CONSTRAINT UK_PMWActivityScopeAssocTable UNIQUE NONCLUSTERED 
(
	ProcessDefId ASC,
	ScopeId ASC,
	ActivityId ASC
))
go
CREATE TABLE PMWDataObjectTable(
	ProcessDefId int NOT NULL,
	iId int NOT NULL,
	xLeft int NULL,
	yTop int NULL,
	Data nvarchar(255) NULL,
	SwimLaneId int NOT NULL,
CONSTRAINT pk_PMWDataObjectTable PRIMARY KEY 
(
	ProcessDefId ASC,
	iId ASC,
	SwimLaneId ASC
)) 
go
CREATE TABLE PMWMsgAFTable(
	ProcessDefId int NOT NULL,
	MsgAFId int NOT NULL,
	xLeft int NULL,
	yTop int NULL,
	MsgAFName nvarchar(255) NULL,
	SwimLaneId int NOT NULL,
CONSTRAINT pk_PMWMessageTable PRIMARY KEY 
(
	ProcessDefId,
	MsgAFId,
	SwimLaneId 
)) 
go
CREATE TABLE PMWUserSnapShotTable(
	UserId int NOT NULL,
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	ProcessName nvarchar(255) NOT NULL,
	RegisteredMode nvarchar(1) NOT NULL,
	CollaborationState nvarchar(50) NULL,
	OwnerIndex nvarchar(5) NULL,
	CollaborationLock nvarchar(25) NULL,
	SharedProcessId nvarchar(5) NULL,
	Data nvarchar(1024)
)

go
CREATE TABLE MenuListTable(
	MenuDefId int IDENTITY (1,1) PRIMARY KEY,
	AppName nvarchar(255) NOT NULL,
	MenuLabel nvarchar(255) NOT NULL,
    MenuName nvarchar(255) NOT NULL	
)
 go
  
CREATE TABLE PMWDocTypeSearchMapping(
	ProcessDefId int NOT NULL,
	ActivityID int NOT NULL,
	DCName nvarchar(30) NULL,
	DCField nvarchar(30) NOT NULL,
	VariableID int NOT NULL,
	VarFieldID int NOT NULL,
	MappedFieldType nvarchar(1) NOT NULL,
	MappedFieldName nvarchar(255) NOT NULL,
	FieldType int NOT NULL
)

go
CREATE TABLE PMValidateObjectTemp
(
	[objectName]		[nvarchar](50) NULL,
	[objectType]		[nvarchar](50) NULL,
	[Association]		[nvarchar](250) NULL,
	[TabName]		[nvarchar](50) NULL,
        [ActId]                 [nvarchar](50) NULL,
        [RuleId]                [nvarchar](50) NULL,
        [OpOrderId]             [nvarchar](50) NULL
)
go
CREATE TABLE PMUserFriendList(
	UserId int NOT NULL,
	FriendUserId int NOT NULL,
	FriendUserName nvarchar(256),
	Status nvarchar(10),
	Type nvarchar(30)
)

go 

create table PMWBRMSConnectTable(
ConfigName	nvarchar(128) NOT NULL,
ServerIdentifier	integer NOT NULL,
ServerHostName	nvarchar(128) NOT NULL,
ServerPort	integer NOT NULL,
ServerProtocol	nvarchar(32) NOT NULL,
URLSuffix	nvarchar(32) NOT NULL,
UserName	nvarchar(128) NULL,
Password	nvarchar(128) NULL,
ProxyEnabled	nvarchar(1) NOT NULL,
CONSTRAINT pk_PMWBRMSConnectTable PRIMARY KEY(ServerIdentifier)
) 
go 

create table PMWBRMSRuleSetInfo(
ExtMethodIndex	integer NOT NULL,
ServerIdentifier	integer NOT NULL,
RuleSetName	nvarchar(128) NOT NULL,
VersionNo	nvarchar(5) NOT NULL,
InvocationMode	nvarchar(128) NOT NULL,
CONSTRAINT pk_PMWBRMSRuleSetInfo PRIMARY KEY(ExtMethodIndex)
) 
go 
create table PMWBRMSActivityAssocTable(
ProcessDefId	integer NOT NULL,
ActivityId	integer NOT NULL,
ExtMethodIndex	integer NOT NULL,
OrderId	integer NOT NULL,
TimeoutDuration	integer NOT NULL,
CONSTRAINT pk_PMWBRMSActivityAssocTable PRIMARY KEY(ProcessDefId,ActivityId,ExtMethodIndex)
) 
go 
create table PMWProcessVariantData(
VariantList nText null,
VariantDetails nText null,
ProcessDefId int not null
)
go
CREATE TABLE PMWCreateChildWITable(
ProcessDefId int NOT NULL,
TriggerId int NOT NULL,
WorkstepName nvarchar(255) NULL,
Type nvarchar(1) NULL,
GenerateSameParent nvarchar(1) NULL,
VariableId int NULL,
VarFieldId int NULL,
CONSTRAINT pk_PMWCreateChildWITable PRIMARY KEY(ProcessDefId,TriggerId)
)
go
create TABLE PMWTaskDefTable(
	ProcessDefId int NOT NULL,
	TaskId int NOT NULL,
	TaskType int NOT NULL,
	TaskName nvarchar(100) NOT NULL,
	Description nText NULL,
	xLeft int NULL,
	yTop int NULL,
	IsRepeatable nvarchar(1) DEFAULT 'Y' NOT NULL ,
	TurnAroundTime int NULL,
	CreatedOn DateTime Not NULL,	
	CreatedBy nvarchar(255) Not NULL,
	Scope nvarchar(1) Not NULL,
	Goal nvarchar(1000) NULL,
	Instructions nvarchar(1000) NULL,
	TATCalFlag nvarchar(1) NOT NULL,
	Cost  numeric(15,2) NULL, 
	NotifyEmail nvarchar(1) DEFAULT 'N' NOT NULL ,
	TaskTableFlag nvarchar(1) DEFAULT 'N',
	TaskMode nvarchar(1) NULL,
	UseSeparateTable nvarchar(1)  DEFAULT 'Y' NOT NULL,
  CONSTRAINT pk_PMWTaskDefTable PRIMARY KEY(ProcessDefId,TaskId)
)
go
create TABLE PMWTaskTemplateDefTable(
	ProcessDefId int NOT NULL,	
	TemplateName nvarchar(255) Not NULL,
	TaskId int NOT NULL
)
go	
create TABLE PMWTaskTemplateFieldDefTable(
	ProcessDefId int NOT NULL,
	TemplateVariableId int NOT NULL,
	TaskVariableName nvarchar(255) Not NULL,
	DisplayName nvarchar(255) NULL,
	VariableType int NOT NULL,
	OrderId int NOT NULL,
	ControlType	int NOT NULL,
	DBLinking NVARCHAR(1) default 'N' NOT NULL,
	TaskId int NOT NULL
)
go
create TABLE PMWTaskTempControlValues(
	ProcessDefId int NOT NULL,
	TemplateVariableId int NOT NULL,	
	ControlValue nvarchar(255) NOT NULL,
    TaskId int NOT NULL
)
go
create TABLE PMWTaskVariableMappingTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	TaskId int NOT NULL,	
	TemplateVariableId int NOT NULL,	
	TaskVariableName nvarchar(255) NOT NULL,
	VariableId int NOT NULL,
	TypeFieldId int NOT NULL,
	ReadOnly nvarchar(1) NULL,
	VariableName nvarchar(255) NULL,
	CONSTRAINT pk_PMWTaskVariableMappingTable PRIMARY KEY(ProcessDefId,ActivityId,TaskId,TemplateVariableId)
)
go	 
create TABLE  PMWTaskRulePreConditionTable(
	 ProcessDefId int NOT NULL,
	 ActivityId int NOT NULL,
	 TaskId int NOT NULL,
	 RuleType nvarchar(1) NOT NULL,
	 RuleOrderId int  NOT NULL,
	 RuleId int  NOT NULL,
	 ConditionOrderId int  NOT NULL,
	 Param1 nvarchar(255) NOT NULL,
	 Type1 nvarchar(1) NOT NULL,
	 ExtObjID1 int  NULL,
	 VariableId_1 int  Not NULL,
	 VarFieldId_1 int  NULL,
	 Param2 nvarchar(255) NULL,
	 Type2 nvarchar(1)  NULL,
	 ExtObjID2 int  NULL,
	 VariableId_2 int  NULL,
	 VarFieldId_2 int  NULL,
	 Operator int NULL,
	 LogicalOp int  NOT NULL
  )
go 
create TABLE PMWTaskInterfaceAssocTable(
	ProcessDefId int NOT NULL,
	ActivityId int NOT NULL,
	TaskId int NOT NULL,
	InterfaceId int NOT NULL,
	InterfaceType nvarchar(1) NOT NULL,
	Attribute nvarchar(2) NULL	
  )
go 
create TABLE TaskTemplateLibraryDefTable(
	TemplateId integer NOT NULL,
	TemplateName nvarchar(255) Not NULL,
	Description nText NULL,	
	IsRepeatable nvarchar(1) DEFAULT 'Y' NOT NULL ,		
	Goal nvarchar(1000) NULL,
	Instructions nvarchar(1000) NULL,
	TATCalFlag nvarchar(1) NOT NULL,
	Cost  numeric(15,2) NULL, 
	NotifyEmail nvarchar(1) DEFAULT 'N' NOT NULL ,
	TATDays int NOT NULL,
	TATHours int NOT NULL,
	TATMinutes int NOT NULL	
)
go
create TABLE TaskTempFieldLibraryDefTable(	
	TemplateId integer NOT NULL,
	TemplateVariableId integer NOT NULL,
	TaskVariableName nvarchar(255) Not NULL,
	DisplayName nvarchar(255) NULL,
	VariableType integer NOT NULL,
	OrderId integer NOT NULL,
	ControlType	integer NOT NULL,
	DBLinking NVARCHAR(1) default 'N' NOT NULL
)
go
create TABLE TaskTempLibraryControlValues(	
	TemplateId integer NOT NULL,
	TemplateVariableId integer NOT NULL,	
	ControlValue nvarchar(255) NOT NULL
)
go

CREATE TABLE PMWTaskFormTable (
	ProcessDefId            INT             NOT NULL,
	TaskId                  INT             NOT NULL,			
	FormBuffer              NTEXT           NULL,		
	DeviceType 				nvarchar(1) 	NOT NULL 	default 'D',
	FormHeight 				int 			NOT NULL 	default 100,
	FormWidth 				int 			NOT NULL 	default 100,
	StatusFlag 				nvarchar(1) 	NULL
	CONSTRAINT PK_PMWTaskFormTable PRIMARY KEY(ProcessDefID,TaskId)
)
go

CREATE TABLE TaskTemplateFormDefTable (	
	TemplateId              INT             NOT NULL,		
	FormBuffer              NTEXT           NULL,		
	DeviceType 				nvarchar(1) default 'D'	NOT NULL 	,
	FormHeight 				int 		default 100	NOT NULL 	,
	FormWidth 				int 			default 100	NOT NULL ,
	StatusFlag				nvarchar(1)		NULL,
	UserIndex				int				NOT NULL,
	TemplateName 			nvarchar(255) 	NULL
)
go

create table TaskTemplateAdvisorTable(    
    TemplateId INT NOT NULL,    
    AdvisorOrderId INT NOT NULL,
    UserName  nvarchar(255) NOT NULL,
    constraint PK_TaskTemplateAdvisorTable PRIMARY KEY (TemplateId,AdvisorOrderId)
)
go

create TABLE PMWHoldEventsDeftable(
	ProcessDefId int NOT NULL,
    ActivityId int NOT NULL,
    EventId int NOT NULL,
    EventName nvarchar(50) NOT NULL,
    TriggerName nvarchar(50) NULL,
	TargetActId int NULL,
	TargetActName nvarchar(50) NOT NULL,
	CONSTRAINT PK_PMWHoldEventsDeftable PRIMARY KEY(ProcessDefID,ActivityId,EventId)			
	
)
go
create TABLE PMW_OMSConnectInfoTable(
	ProcessDefId 	int NOT NULL,
	ActivityId 		int NOT NULL,		
	CabinetName     NVARCHAR(255)    NULL,                
	UserId          NVARCHAR(50)     NULL,
	Passwd          NVARCHAR(256)   NULL,                
	AppServerIP		NVARCHAR(15)	NULL,
	AppServerPort	NVARCHAR(5)		NULL,
	AppServerType	NVARCHAR(255)	NULL,
	SecurityFlag	NVARCHAR(1)		NULL
)
go
create TABLE PMW_OMSTemplateInfoTable(
	ProcessDefId 	int NOT NULL,
	ActivityId 		int NOT NULL,
	ProductName 	nvarchar(255) NOT NULL,
	VersionNo 		nvarchar(3) NOT NULL,
	CommGroupName 	nvarchar(255) NULL,
	CategoryName 	nvarchar(255) NULL,
	ReportName 		nvarchar(255) NULL,
	Description 	nvarchar(255) NULL,	
	InvocationType 	nvarchar(1) NULL,
	TimeOutInterval int NULL,
	DocTypeName 	nvarchar(255) NULL,	
	CONSTRAINT PK_PMW_OMSTemplateInfoTable PRIMARY KEY(ProcessDefID,ActivityId,ProductName,VersionNo)
)
go
create TABLE PMW_OMSTemplateMappingTable(
	ProcessDefId 	int NOT NULL,
	ActivityId 		int NOT NULL,
	ProductName 	nvarchar(255) NULL,
	VersionNo 		nvarchar(3) NULL,
	MapType 		nvarchar(1) NULL,
	TemplateVarName nvarchar(255) NULL,
	TemplateVarType int NULL,
	MappedName 		nvarchar(255) NULL,	
	MaxOccurs 		nvarchar(255)  NULL,
	MinOccurs 		nvarchar(255)  NULL,
	VarId 			int 		   NULL,
	VarFieldId 		int 		   NULL,
	VarScope 		nvarchar(255)  NULL,
	OrderId			int			   NULL
)	
go
create TABLE PMWActivityMaskingInfoTable(
		ProcessDefId int not null,
		ActivityId integer NOT NULL,
        ActivityName nvarchar(30) NOT NULL,
        VariableId int NOT NULL,
        VarFieldId  int NOT NULL,
        VariableName nvarchar(1000) NOT NULL
)
go	
create table PMWTaskRuleOperationTable(
ProcessDefId 	INT	NOT NULL,
ActivityId 	INT 	NOT NULL, 
TaskId 	INT 	NOT NULL, 
RuleId 	SMALLINT 	NOT NULL, 
OperationType 	SMALLINT 	NOT NULL, 
Param1 nvarchar(255) NOT NULL,
Type1 nvarchar(1) NOT NULL,
ExtObjID1 int  NULL,
VariableId_1 int  NULL,
VarFieldId_1 int  NULL,	
Param2 nvarchar(255) NOT NULL,
Type2 nvarchar(1) NOT NULL,
ExtObjID2 int  NULL,
VariableId_2 int  NULL,
VarFieldId_2 int  NULL,
Param3 nvarchar(255) NULL,
Type3 nvarchar(1) NULL,
ExtObjID3 int  NULL,
VariableId_3 int  NULL,
VarFieldId_3 int  NULL,	
Operator 	SMALLINT 	NOT NULL, 
AssignedTo	nvarchar(63),	
OperationOrderId 	SMALLINT 	NOT NULL, 
RuleCalFlag nvarchar (1) NULL,
CONSTRAINT pk_PMWTaskRuleOprTable PRIMARY KEY  (ProcessDefId,ActivityId,TaskId,RuleId,OperationOrderId ) 

)
go
Create Table PMWTaskPropertyTable(
ProcessDefId integer NOT NULL,
ActivityId INT NOT NULL ,
TaskId  integer NOT NULL,
DefaultStatus integer NOT NULL,
AllowReassignment nvarchar(1),
AllowDecline nvarchar(1),
ApprovalRequired nvarchar(1),
MandatoryText nvarchar(255),
CONSTRAINT pk_PMWTaskPropertyTable PRIMARY KEY  ( ProcessDefId,ActivityId ,TaskId)
)	
go	
Create Table PMWTaskUserAssocTable(
ProcessDefId int NOT NULL,
ActivityId int NOT NULL,
TaskId int NOT NULL,
UserId int NOT NULL,
AssociationType int NOT NULL
)	
go
Create Table PMWTaskExpiryOperation(
ProcessDefId int NOT NULL,
TaskId                    int                NOT NULL,
NeverExpireFlag            nvarchar(1)        NOT NULL,
ExpireUntillVariable    nvarchar(255)        NULL,
ExtObjID                 int                    NULL,
ExpCalFlag                nvarchar(1)              NULL,
Expiry                    int                NOT NULL,
ExpiryOperation            int                NOT NULL,
ExpiryOpType            nvarchar(64)     NOT NULL,
ExpiryOperator            int                NOT NULL,
UserType                nvarchar(1)     NOT NULL,
VariableId                int                    NULL,
VarFieldId                int                    NULL,
Value                     nvarchar(255)          NULL,
TriggerID                 int            NULL,
CONSTRAINT pk_PMWTaskExpiryOperation PRIMARY KEY (ProcessDefId, TaskId)
)	
go
CREATE TABLE PMWCaseINITIATEWORKITEMTABLE ( 
    ProcessDefID         INT                NOT NULL ,
    TaskId          INT   NOT NULL DEFAULT 0,
    ImportedProcessName NVARCHAR(30)    NOT NULL  ,
    ImportedFieldName     NVARCHAR(63)    NOT NULL ,
    ImportedVariableId    INT                    NULL,
    ImportedVarFieldId    INT                    NULL,
    MappedFieldName        NVARCHAR(63)    NOT NULL ,
    MappedVariableId    INT                    NULL,
    MappedVarFieldId    INT                    NULL,
    FieldType            NVARCHAR(1)        NOT NULL,
    MapType                NVARCHAR(1)            NULL,
    DisplayName            NVARCHAR(2000)        NULL,
    ImportedProcessDefId    INT                NULL,
    EntityType             NVARCHAR(1)    NOT NULL DEFAULT 'A'
)
go
CREATE TABLE PMWCaseIMPORTEDPROCESSDEFTABLE (
    ProcessDefID             INT             NOT NULL,
    TaskId          INT   NOT NULL DEFAULT 0,
    ImportedProcessName     NVARCHAR(30)    NOT NULL ,
    ImportedFieldName         NVARCHAR(63)    NOT NULL ,
    FieldDataType            INT                    NULL ,    
    FieldType                NVARCHAR(1)        NOT NULL,
    VariableId                INT                    NULL,
    VarFieldId                INT                    NULL,
    DisplayName                NVARCHAR(2000)        NULL,
    ImportedProcessDefId    INT                    NULL,
    ProcessType                NVARCHAR(1)            NULL   DEFAULT (N'R')    
) 
go
create table TaskTempRuleOperationTable(
TemplateId 	INT 	NOT NULL, 
RuleId 	SMALLINT 	NOT NULL, 
OperationType 	SMALLINT 	NOT NULL, 
Param1 nvarchar(255) NOT NULL,
Type1 nvarchar(1) NOT NULL,
ExtObjID1 int  NULL,
VariableId_1 int  NULL,
VarFieldId_1 int  NULL,	
Param2 nvarchar(255) NOT NULL,
Type2 nvarchar(1) NOT NULL,
ExtObjID2 int  NULL,
VariableId_2 int  NULL,
VarFieldId_2 int  NULL,
Param3 nvarchar(255) NULL,
Type3 nvarchar(1) NULL,
ExtObjID3 int  NULL,
VariableId_3 int  NULL,
VarFieldId_3 int  NULL,	
Operator 	SMALLINT 	NOT NULL, 
AssignedTo	nvarchar(63),	
OperationOrderId 	SMALLINT 	NOT NULL, 
RuleCalFlag nvarchar (1) NULL,
CONSTRAINT pk_TaskTempRuleOperationTable PRIMARY KEY  (TemplateId,RuleId,OperationOrderId) 

)
go
Create Table TaskTempExpiryOperation(
TemplateId                    int                NOT NULL,
NeverExpireFlag            nvarchar(1)        NOT NULL,
ExpireUntillVariable    nvarchar(255)        NULL,
ExtObjID                 int                    NULL,
ExpCalFlag                nvarchar(1)              NULL,
Expiry                    int                NOT NULL,
ExpiryOperation            int                NOT NULL,
ExpiryOpType            nvarchar(64)     NOT NULL,
ExpiryOperator            int                NOT NULL,
UserType                nvarchar(1)     NOT NULL,
VariableId                int                    NULL,
VarFieldId                int                    NULL,
Value                    nvarchar(255)           NULL,
TriggerID                 int            NULL
)	
go
CREATE TABLE TaskTempDurationTable(
     TemplateId int  NOT NULL,
	 DurationId   integer  NOT NULL,
	 WFYears   nvarchar (255) NULL,
	 VariableId_Years   integer  NULL,
	 VarFieldId_Years   integer  NULL,
	 WFMonths   nvarchar (255)  NULL,
	 VariableId_Months   integer  NULL,
	 VarFieldId_Months   integer  NULL,
	 WFDays   nvarchar (255)  NULL,
	 VariableId_Days   integer  NULL,
	 VarFieldId_Days   integer  NULL,
	 WFHours   nvarchar (255)  NULL,
	 VariableId_Hours   integer  NULL,
	 VarFieldId_Hours   integer  NULL,
	 WFMinutes   nvarchar (255)  NULL,
	 VariableId_Minutes   integer  NULL,
	 VarFieldId_Minutes   integer  NULL,
	 WFSeconds   nvarchar (255)  NULL,
	 VariableId_Seconds   integer  NULL,
	 VarFieldId_Seconds   integer  NULL

)
go
CREATE TABLE TaskTempMailTriggerTable(
	TemplateId int NOT NULL,
	TriggerID int NOT NULL,
	Subject nvarchar(255) NULL,
	FromUser nvarchar(255) NULL,
	FromUserType nvarchar(1) NULL,
	ExtObjIDFromUser int NULL,
	VariableIdFrom int NULL,
	VarFieldIdFrom int NULL,
	ToUser nvarchar(255) NOT NULL,
	ToType nvarchar(1) NOT NULL,
	ExtObjIDTo int NULL,
	VariableIdTo int NULL,
	VarFieldIdTo int NULL,
	CCUser nvarchar(255) NULL,
	CCType nvarchar(1) NULL,
	ExtObjIDCC int NULL,
	VariableIdCc int NULL,
	VarFieldIdCc int NULL,
	Message ntext NULL,
	BCCUser                nvarchar(255)        NULL,
    BCCType             nvarchar(1)            Default 'C' NULL,
    ExtObjIDBCC         int                    NULL,
    VariableIdBCc         int                    NULL,
    VarFieldIdBCc         int                    NULL,
    MailPriority nvarchar(255)     DEFAULT NULL,
    MailPriorityType nvarchar(1)  default 'C' NOT NULL ,
    ExtObjIdMailPriority int      default 0 NOT NULL,
    VariableIdMailPriority int    default 0 NOT NULL,
    VarFieldIdMailPriority int    default 0 NOT NULL,
PRIMARY KEY (TemplateId,TriggerID )
)
go
CREATE TABLE PMWRestServiceInfoTable (
	ProcessDefId		INT		NOT NULL,
	ResourceId			INT		NOT NULL,
	ResourceName		NVARCHAR(255)		NULL,
	BaseURI		NVARCHAR(2000)		NULL,
	ResourcePath		NVARCHAR(2000)		NULL,
	ResponseType		NVARCHAR(2)		NULL,		
	ContentType			NVARCHAR(2)		NULL,		
	OperationType		NVARCHAR(50)		NULL,	
	AuthenticationType	NVARCHAR(500)		NULL,	
	AuthUser			NVARCHAR(1000)		NULL,
	AuthPassword		NVARCHAR(1000)		NULL,
	AuthenticationDetails			NVARCHAR(2000) NULL,
	AuthToken			NVARCHAR(2000)		NULL,
	ProxyEnabled			NVARCHAR(2)		NULL,
	SecurityFlag		NVARCHAR(1)		    NULL,
	PRIMARY KEY (ProcessDefId, ResourceId)
)
go
create table PMWRestActivityAssocTable(
	ProcessDefId integer NOT NULL,
	ActivityId integer NOT NULL,
	ExtMethodIndex integer NOT NULL,
	OrderId integer NOT NULL,
	TimeoutDuration integer NOT NULL,
	CONSTRAINT pk_PMRestServiceActAssoc PRIMARY KEY(ProcessDefId,ActivityId,ExtMethodIndex)
)
go		
INSERT INTO MenuListTable values ('PMWMENU','Save Process','SAVEPROCESS')
INSERT INTO MenuListTable values ('PMWMENU','Version','VERSION')
INSERT INTO MenuListTable values ('PMWMENU','Audit Trail','AUDITRAIL')
INSERT INTO MenuListTable values ('PMWMENU','Include Window','INCLUDEWINDOW')
INSERT INTO MenuListTable values ('PMWMENU','ToDoList','TODOLIST')
INSERT INTO MenuListTable values ('PMWMENU','Documents','DOCUMENTS')
INSERT INTO MenuListTable values ('PMWMENU','Catalog Definition','CATLOGDEFINATION')
INSERT INTO MenuListTable values ('PMWMENU','Exception','EXCEPTION')
INSERT INTO MenuListTable values ('PMWMENU','Trigger','TRIGGER')
INSERT INTO MenuListTable values ('PMWMENU','Register Template','REGISTERTEMPLATE')
INSERT INTO MenuListTable values ('PMWMENU','Register Window','REGISTERWINDOW')  
INSERT INTO MenuListTable values ('PMWMENU','Register Trigger','RIGSTERTRIGGER')
INSERT INTO MenuListTable values ('PMWMENU','Constants','CONSTANTS')
INSERT INTO MenuListTable values ('PMWMENU','Define Table','DEFINETABLE')
INSERT INTO MenuListTable values ('PMWMENU','External Variables','EXTERNALVARIABLE')
INSERT INTO MenuListTable values ('PMWMENU','Complex Types','COMPLEXTYPES')
INSERT INTO MenuListTable values ('PMWMENU','Queue Variables','QUEUEVARIABLES')
INSERT INTO MenuListTable values ('PMWMENU','Search Variables','SEARCHVARIABLES')  
INSERT INTO MenuListTable values ('PMWMENU','Create Project','CREATEPROJECT')
INSERT INTO MenuListTable values ('PMWMENU','Delete Project','DELETEPROJECT')
INSERT INTO MenuListTable values ('PMWMENU','Create Process','CREATEPROCESS')
INSERT INTO MenuListTable values ('PMWMENU','Delete Process','DELETEPROCESS')
INSERT INTO MenuListTable values ('PMWMENU','Register Process','REGISTERPROCESS')
INSERT INTO MenuListTable values ('PMWMENU','Import Process','IMPORTPROCESS')
INSERT INTO MenuListTable values ('PMWMENU','Export Process','EXPORTPROCESS')
INSERT INTO MenuListTable values ('PMWMENU','Report Generation','REPORTGENERATION')
INSERT INTO MenuListTable values ('PMWMENU','Create Milestone','CREATEMILESTONE') 
INSERT INTO MenuListTable values ('PMWMENU','Delete Milestone','DELETEMILESTONE')
INSERT INTO MenuListTable values ('PMWMENU','Modify Milestone','MODIFYMILESTONE')
INSERT INTO MenuListTable values ('PMWMENU','Add Activity','ADDACTIVITY')
INSERT INTO MenuListTable values ('PMWMENU','Create SwimLane','CREATESWIMLANE')
INSERT INTO MenuListTable values ('PMWMENU','Delete SwimLane','DELETESWIMLANE')  
INSERT INTO MenuListTable values ('PMWMENU','Modify SwimLane','MODIFYSWIMLANE')
INSERT INTO MenuListTable values ('PMWMENU','Queue Management','QUEUEMANAGEMENT')
INSERT INTO MenuListTable values ('PMWMENU','Delete Activity','DELETEACTIVITY')
INSERT INTO MenuListTable values ('PMWMENU','Modify Activity','MODIFYACTIVITY')
INSERT INTO MenuListTable values ('PMWMENU','Manage Form','MANAGEFORM')
INSERT INTO MenuListTable values ('PMWMENU','Import Business Objects','IMPORTBUSINESSOBJECT')
INSERT INTO MenuListTable values ('PMWMENU','View Form','VIEWFORM')
INSERT INTO MenuListTable values ('PMWMENU','Maker-Checker','MAKERCHECKER')
INSERT INTO MenuListTable values ('PMWMENU','Add Queue','ADDQUEUE')
INSERT INTO MenuListTable values ('PMWMENU','Define Variable Alias','DEFINEVARALIAS')
go
If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'PMWebRightsMgmtData' AND xType = 'P')
BEGIN
	Drop Procedure PMWebRightsMgmtData
	PRINT 'As Procedure PMWebRightsMgmtData exists dropping old procedure ........... '
END

PRINT 'Creating procedure PMWebRightsMgmtData ........... '
go
CREATE procedure PMWebRightsMgmtData as
BEGIN
Declare @iden_val int
Declare @iden_valProfile int
Declare @profileId_procDesign int
Declare @menuDefId int
Declare @menuName NVARCHAR(255)
Declare @menuLabel NVARCHAR(255)
Declare @iOrderId int
Declare @sysAdminRights NVARCHAR(255)
Declare @procDesnRights NVARCHAR(255)
DECLARE v_menuCursor CURSOR FAST_FORWARD FOR
SELECT  MenuDefId ,MenuName,MenuLabel from MenuListTable
SELECT @iden_val = 0
SELECT @iOrderId = 1
SET @sysAdminRights=''
SET @procDesnRights=''
INSERT INTO WFProfileTable values('PROCESSDESIGNER','Process Designer Profile','N',getDate(),getDate(), 0,'Administrator')
SELECT @iden_valProfile = @@IDENTITY 
/*###############PMWeb Menu Management############################*/
insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('PMWeb Menu Management','PMWMENU',0,'','0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000','N')
SELECT @iden_val = @@IDENTITY 
Insert into WFUserObjAssocTable values (0,@iden_val,@iden_valProfile,5,1,null,null);
OPEN v_menuCursor
FETCH   v_menuCursor 
		INTO @menuDefId ,@menuName,@menuLabel
IF (@@FETCH_STATUS = -1 OR @@FETCH_STATUS = -2)
	 BEGIN				
			CLOSE v_menuCursor
			DEALLOCATE v_menuCursor 
    END
/*SELECT @profileId = ProfileId from WFProfileTable where ProfileName='SYSADMIN'*/
 
WHILE (@@FETCH_STATUS  <> -1)
BEGIN
IF (@@FETCH_STATUS <> -2)
BEGIN
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,@menuName,@menuLabel, @iOrderId)
PRINT @iOrderId
SET @iOrderId=@iOrderId + 1
PRINT @iOrderId
END 
SET @sysAdminRights=@sysAdminRights+ '1'
IF (@menuName<> 'REGISTERPROCESS' AND  @menuName<> 'UNREGISTERPROCESS')
SET @procDesnRights=@procDesnRights+'1'
ELSE
SET @procDesnRights=@procDesnRights+'0'
ProcessNext:
			FETCH NEXT FROM v_menuCursor INTO    
			@menuDefId ,@menuName,@menuLabel
END
CLOSE v_menuCursor
DEALLOCATE v_menuCursor
 
insert into  WFProfileObjTypeTable (UserId,AssociationType,ObjectTypeId,RightString) values (@iden_valProfile,2,@iden_val,'1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111')
 

/*###############PMWeb Menu Management############################*/

/*###############Project Management############################*/
insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('Project Management','PROJECT',0,'com.newgen.omni.pm_Web.rightmgmt.PMRightsGetProjectList','0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000','Y')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'V','View', 1)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'U','Unregister', 2)


insert into wffilterlisttable (ObjectTypeId,FilterName,TagName) values (@iden_val,'Project Filter','ProjectName')
/*###############Project Management############################*/

/*###############Local Project Management############################*/
insert into wfobjectlisttable (ObjectTypeName,ObjectType,ParentObjectTypeId,ClassName,DefaultRight,List) values ('Local Project Management','LPROJECT',0,'com.newgen.omni.pm_Web.rightmgmt.PMRightsGetLocalProjectList','0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000','Y')
SELECT @iden_val = @@IDENTITY 

insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'V','View',1)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'M','Modify',2)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'D','Delete',3)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'CPRC','Create Process',4)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'IMPPRC','Import Process',5)
insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'AT','Audit Trail',6)
/*commented for Bug 39274:27/05/2013 insert into wfassignablerightstable (ObjectTypeId,RightFlag,RightName,OrderBy) values (@iden_val,'SH','Share',7)*/

insert into wffilterlisttable (ObjectTypeId,FilterName,TagName) values (@iden_val,'Local Project Filter','ProjectName')

/*###############Local Project Management############################*/
end 
go

PRINT 'Executing procedure PMWebRightsMgmtData ........... '
EXEC PMWebRightsMgmtData
go 
Print 'Dropping procedure PMWebRightsMgmtData ........... '
Drop Procedure PMWebRightsMgmtData

go

If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'spPMValidateObject' AND xType = 'P')
BEGIN
	Drop Procedure spPMValidateObject
	PRINT 'As Procedure spPMValidateObject exists dropping old procedure ........... '
END
PRINT 'Creating procedure spPMValidateObject ........... '
go

Create procedure spPMValidateObject
(
	@in_ObjectName nvarchar(4000),
	@in_ObjectType nvarchar(50),
	@in_ObjectId nvarchar(1000),
	@in_processDefId nvarchar(50),
	@in_DeviceType nvarchar(100)
    
)
as
begin
DECLARE @v_QueryString 		nvarchar(4000),
@v_InterfaceElementId		nvarchar(15),
@v_ActivityName		nvarchar(50),
@InterfaceType 		nvarchar(50),
@tempstr 	nvarchar(55),
@ActivityId nvarchar(50),
@v_ToDoName nvarchar(50),
@v_TriggerName nvarchar(50),
@v_TriggerType nvarchar(2),
@v_MapType nvarchar(2),
@v_ActivityType nvarchar(2),
@v_FormfragName nvarchar(50),
@v_MethodName nvarchar(50),
@v_MobileEnabled nvarchar(2),
@v_DeviceType nvarchar(4),
@v_RuleId nvarchar(50),
@v_OpOrderId nvarchar(50),
@v_CondOrderId nvarchar(50),
@v_ObjectName nvarchar(50),
@v_ComplexMappingCursor nvarchar(50),
@v_TableMappingCursor nvarchar(50)
exec('truncate table PMValidateObjectTemp');
--exec('insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName) values (''temp1'',''temp1'',''temp1'',''temp1'')');
	if(@in_ObjectType='TD')
		Begin
		set @InterfaceType='T'
		Execute ('DECLARE v_ToDoRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  InterfaceElementId
		FROM    PMWExtInterfaceOperationTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)
		
		OPEN    v_ToDoRuleCursor 
		FETCH   v_ToDoRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'ToDo','Global','ToDo Rule',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_ToDoRuleCursor 
		DEALLOCATE v_ToDoRuleCursor 
	
		Execute ('DECLARE v_ToDoWorkDeskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityInterfaceAssocTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)

		OPEN    v_ToDoWorkDeskCursor 
		FETCH   v_ToDoWorkDeskCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'ToDo',@v_ActivityName,'WorkDesk',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoWorkDeskCursor INTO @v_ActivityName
			END 
		END

		CLOSE v_ToDoWorkDeskCursor 
		DEALLOCATE v_ToDoWorkDeskCursor 
		
		Execute ('DECLARE v_ToDoTaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,TaskName
		FROM    PMWActivityTable PMWAT WITH (NOLOCK), PMWTaskInterfaceAssocTable PMWPT WITH (NOLOCK), PMWTaskDefTable PMWTask WITH (NOLOCK)
		WHERE   PMWAT.ProcessDefId ='+@in_processDefId+' and PMWPT.ProcessDefId ='+@in_processDefId+' and PMWTask.ProcessDefId ='+@in_processDefId+
		'and PMWAT.ActivityId=PMWPT.ActivityId and PMWPT.TaskId=PMWTask.TaskId and PMWPT.InterfaceType='''+@InterfaceType+''' and PMWPT.InterfaceId='+@in_ObjectId)

		OPEN    v_ToDoTaskCursor 
		FETCH   v_ToDoTaskCursor  
		INTO    @v_ActivityName,@tempstr
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'ToDo',@v_ActivityName,'Task:'+@tempstr,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoTaskCursor INTO @v_ActivityName,@tempstr				
			END	
		END
		CLOSE v_ToDoTaskCursor 
		DEALLOCATE v_ToDoTaskCursor

	

		Execute ('DECLARE v_ToDoPDACursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityTable PMWAT WITH (NOLOCK), PMWPDATAble PMWPT WITH (NOLOCK)
		WHERE   PMWAT.ProcessDefId ='+@in_processDefId+' and PMWPT.ProcessDefId ='+@in_processDefId+
		'and PMWAT.ActivityId=PMWPT.ActivityID and PMWPT.InterfaceType='''+@InterfaceType+''' and PMWPT.InterfaceId='+@in_ObjectId)

		OPEN    v_ToDoPDACursor 
		FETCH   v_ToDoPDACursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'ToDo',@v_ActivityName,'WorkDesk_PDA',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoPDACursor INTO @v_ActivityName				
			END	
		END
		CLOSE v_ToDoPDACursor 
		DEALLOCATE v_ToDoPDACursor
		
	end  
	else if(@in_ObjectType='RCX')
		Begin
		print('in RCX')
		print('in methofindex'+@in_ObjectName)
		print('in datastructids '+@in_ObjectId)
	    Execute ('DECLARE v_RestVarMappingCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  Distinct(PMActivity.ActivityName),PMActivity.processdefid FROM  pmwactivitytable PMActivity WITH (NOLOCK), PMWExtMethodParammappingTable MethodParammappingTable WITH (NOLOCK) WHERE MethodParammappingTable.ExtMethodIndex ='+@in_ObjectName+' and  MethodParammappingTable.DataStructureId in ('+@in_ObjectId+') and PMActivity.processdefid=MethodParammappingTable.processdefid and PMActivity.ActivityId=MethodParammappingTable.ActivityId ')		
		
		OPEN    v_RestVarMappingCursor
		FETCH   v_RestVarMappingCursor  
		INTO    @v_ActivityName,@v_InterfaceElementId	
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
			print('in loop')
				Select @v_ObjectName = Processname from PMWProcessDefTable with(nolock) where processdefid=@v_InterfaceElementId
				print('in loop1')
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_DeviceType,'RestVariable',@v_ActivityName,@v_ObjectName,@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_RestVarMappingCursor INTO @v_ActivityName,@v_InterfaceElementId	
			END 
		END
		CLOSE v_RestVarMappingCursor 
		DEALLOCATE v_RestVarMappingCursor
	END
	else if(@in_ObjectType='RST')
		Begin
		print('in RST')
		print('in methofindex'+@in_ObjectName)
		print('in datastructids '+@in_ObjectId)
	    Execute ('DECLARE v_RestMappingCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  Distinct(PMActivity.ActivityName),PMActivity.processdefid FROM  pmwactivitytable PMActivity WITH (NOLOCK), PMWRestActivityAssocTable RestActivityAssocTable WITH (NOLOCK) WHERE RestActivityAssocTable.ExtMethodIndex ='+@in_ObjectId+' and PMActivity.processdefid=RestActivityAssocTable.processdefid and PMActivity.ActivityId=RestActivityAssocTable.ActivityId ')		
		
		OPEN    v_RestMappingCursor
		FETCH   v_RestMappingCursor  
		INTO    @v_ActivityName,@v_InterfaceElementId	
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
			print('in loop'+@v_InterfaceElementId)
				Select @v_ObjectName = Processname from PMWProcessDefTable with(nolock) where processdefid=@v_InterfaceElementId
				print('in loop123'+@v_ObjectName)
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'RestMethod',@v_ActivityName,@v_ObjectName,@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_RestMappingCursor INTO @v_ActivityName,@v_InterfaceElementId	
			END 
		END
		CLOSE v_RestMappingCursor 
		DEALLOCATE v_RestMappingCursor
	END
	else if(@in_ObjectType='TR')
		Begin
		set @InterfaceType='E'	
	
		Execute ('DECLARE v_TriggerOptionsCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityName from pmwactivitytable WITH (NOLOCK) where processdefid='+@in_processDefId+' and triggerId='+@in_ObjectId)
		
		OPEN    v_TriggerOptionsCursor 
		FETCH   v_TriggerOptionsCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Trigger',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TriggerOptionsCursor INTO @v_ActivityName
			END 
		END
		
		Execute ('DECLARE v_TriggerExpCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TaskName from PMWTaskDefTable WITH (NOLOCK) where processdefid='+@in_processDefId+' and TaskId in (Select DISTINCT(TaskId) from PMWTaskExpiryOperation where processdefid='+@in_processDefId+'  and TriggerID='+@in_ObjectId+')')
		
		OPEN    v_TriggerExpCursor 
		FETCH   v_TriggerExpCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Trigger',@v_ActivityName,'Task Expiry',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TriggerExpCursor INTO @v_ActivityName
			END 
		END

		CLOSE v_TriggerExpCursor 
		DEALLOCATE v_TriggerExpCursor 

		Execute ('DECLARE v_ToDoDefCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ToDoName from pmwtodolistdeftable WITH (NOLOCK) where TriggerName='''+@in_ObjectName+''' and processdefid='+@in_processDefId)
		print @InterfaceType
	print @in_processDefId
		
		OPEN    v_ToDoDefCursor 
		FETCH   v_ToDoDefCursor  
		INTO    @v_ToDoName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ToDoName,'ToDo','Global','ToDodefinition',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoDefCursor INTO @v_ToDoName
			END 
		END

		CLOSE v_ToDoDefCursor 
		DEALLOCATE v_ToDoDefCursor
		
		Execute ('DECLARE v_ExceptionAssocCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityName from PMWACTIVITYINTERFACEASSOCTABLE WITH (NOLOCK) where  TriggerName ='''+@in_ObjectName+''' and InterfaceType ='''+@InterfaceType+''' and processdefid='+@in_processDefId)
		
		
		OPEN    v_ExceptionAssocCursor 
		FETCH   v_ExceptionAssocCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Trigger',@v_ActivityName,'Workdesk_Exceptions',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExceptionAssocCursor INTO @v_ActivityName
			END 
		END

		CLOSE v_ExceptionAssocCursor 
		DEALLOCATE v_ExceptionAssocCursor
		
		Execute ('DECLARE v_EntrySettingsRuleCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName from pmwactivitytable PMActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId ='+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1= '''+@in_ObjectName+''' and PMRuleOperation.operationType = 15')		
		OPEN    v_EntrySettingsRuleCursor 
		FETCH   v_EntrySettingsRuleCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Trigger',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Trigger',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Trigger',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)	
				END
				FETCH NEXT FROM v_EntrySettingsRuleCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END

		CLOSE v_EntrySettingsRuleCursor 
		DEALLOCATE v_EntrySettingsRuleCursor

	Execute ('DECLARE v_ActionsRuleCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityName from pmwactivitytable PMActivity WITH (NOLOCK), PMWACTIONOPERATIONTABLE PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId ='+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1= '''+@in_ObjectName+''' and PMRuleOperation.operationType = 15')		
		OPEN    v_ActionsRuleCursor 
		FETCH   v_ActionsRuleCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Trigger','WorkDesk_Actions',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ActionsRuleCursor INTO @v_ActivityName
			END 
		END

		CLOSE v_ActionsRuleCursor 
		DEALLOCATE v_ActionsRuleCursor

	end  
	
	else if(@in_ObjectType='EX')
	Begin
		set @InterfaceType='E'
			
		Execute ('DECLARE v_ExcRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivityinterfaceassoctable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)		
		
		OPEN    v_ExcRuleCursor 
		FETCH   v_ExcRuleCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Exceptions',@v_ActivityName,'WorkDesk_Exception',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ExcRuleCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_ExcRuleCursor 
		DEALLOCATE v_ExcRuleCursor
		
		Execute ('DECLARE v_ExcTaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,TaskName
		FROM    PMWActivityTable PMWAT WITH (NOLOCK), PMWTaskInterfaceAssocTable PMWPT WITH (NOLOCK), PMWTaskDefTable PMWTask WITH (NOLOCK)
		WHERE   PMWAT.ProcessDefId ='+@in_processDefId+' and PMWPT.ProcessDefId ='+@in_processDefId+' and PMWTask.ProcessDefId ='+@in_processDefId+
		'and PMWAT.ActivityId=PMWPT.ActivityId and PMWPT.TaskId=PMWTask.TaskId and PMWPT.InterfaceType='''+@InterfaceType+''' and PMWPT.InterfaceId='+@in_ObjectId)

		OPEN    v_ExcTaskCursor 
		FETCH   v_ExcTaskCursor  
		INTO    @v_ActivityName,@tempstr
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Exceptions',@v_ActivityName,'Task:'+@tempstr,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExcTaskCursor INTO @v_ActivityName,@tempstr				
			END	
		END
		CLOSE v_ExcTaskCursor 
		DEALLOCATE v_ExcTaskCursor
		
		
		set @v_TriggerType='X'		
		
		Execute ('DECLARE v_ExcTriggerCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TriggerName from pmwtriggerdeftable PMTrigger WITH (NOLOCK), pmwexceptiontriggertable PMExcTrigger WITH (NOLOCK)  WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+' and PMTrigger.TriggerId=PMExcTrigger.TriggerId and PMTrigger.TriggerType='''+@v_TriggerType+''' and PMExcTrigger.exceptionName = '''+@in_ObjectName+''' and PMExcTrigger.ProcessDefId ='+@in_processDefId)
			
		
		OPEN    v_ExcTriggerCursor 
		FETCH   v_ExcTriggerCursor  
		INTO    @v_TriggerName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)		
				FETCH NEXT FROM v_ExcTriggerCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_ExcTriggerCursor 
		DEALLOCATE v_ExcTriggerCursor
		
		

		Execute ('DECLARE v_ActionsRuleCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityName from pmwactivitytable PMActivity WITH (NOLOCK), PMWACTIONOPERATIONTABLE PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId ='+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1= '''+@in_ObjectName+''' and PMRuleOperation.operationType in (25,5,6)')		
		OPEN    v_ActionsRuleCursor 
		FETCH   v_ActionsRuleCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Exceptions','WorkDesk_Actions',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ActionsRuleCursor INTO @v_ActivityName
			END 
		END

		CLOSE v_ActionsRuleCursor 
		DEALLOCATE v_ActionsRuleCursor
		
		Execute ('DECLARE v_ExceptRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  InterfaceElementId
		FROM    PMWExtInterfaceOperationTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)
		
		OPEN    v_ExceptRuleCursor 
		FETCH   v_ExceptRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Exceptions','Global','Exceptions Rule',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExceptRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_ExceptRuleCursor 
		DEALLOCATE v_ExceptRuleCursor 
		
		Execute ('DECLARE v_ExcPDACursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityTable PMWAT WITH (NOLOCK), PMWPDATAble PMWPT WITH (NOLOCK)
		WHERE   PMWAT.ProcessDefId ='+@in_processDefId+' and PMWPT.ProcessDefId ='+@in_processDefId+
		'and PMWAT.ActivityId=PMWPT.ActivityID and PMWPT.InterfaceType='''+@InterfaceType+''' and PMWPT.InterfaceId='+@in_ObjectId)

		OPEN    v_ExcPDACursor 
		FETCH   v_ExcPDACursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Exceptions',@v_ActivityName,'WorkDesk_PDA',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExcPDACursor INTO @v_ActivityName				
			END	
		END
		CLOSE v_ExcPDACursor 
		DEALLOCATE v_ExcPDACursor
	end

	else if(@in_ObjectType='DC')
		Begin
		set @InterfaceType='D'
		set @v_TriggerType='G'
		Execute ('DECLARE v_DocTriggerCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  TriggerName
		FROM    pmwtriggerdeftable PMTrigger WITH (NOLOCK), PMWGENERATERESPONSETABLE PMGenRespTrigger WITH (NOLOCK)
		WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+
		'and PMTrigger.TriggerId=PMGenRespTrigger.TriggerId and PMGenRespTrigger.GenDocType='''+@in_ObjectName+''' and PMTrigger.TriggerType='''+@v_TriggerType+''' and PMGenRespTrigger.ProcessDefId ='+@in_processDefId)		
		

		OPEN    v_DocTriggerCursor 
		FETCH   v_DocTriggerCursor  
		INTO    @v_TriggerName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocTriggerCursor INTO @v_TriggerName				
			END	
		END
		CLOSE v_DocTriggerCursor 
		DEALLOCATE v_DocTriggerCursor
		
		Execute ('DECLARE v_DocRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  InterfaceElementId
		FROM    PMWExtInterfaceOperationTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)
		
		OPEN    v_DocRuleCursor 
		FETCH   v_DocRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Documents','Documents Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_DocRuleCursor 
		DEALLOCATE v_DocRuleCursor 
		
		Execute ('DECLARE v_DocWorkDeskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityInterfaceAssocTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId+ ' and Attribute in (''T'',''B'',''M'',''V'')')

		OPEN    v_DocWorkDeskCursor 
		FETCH   v_DocWorkDeskCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Documents',@v_ActivityName,'WorkDesk_Documents',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocWorkDeskCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_DocWorkDeskCursor 
		DEALLOCATE v_DocWorkDeskCursor 

                Execute ('DECLARE v_DocWorkDeskScanCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityInterfaceAssocTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId+ ' and Attribute in (''A'',''T'',''B'')')

		OPEN    v_DocWorkDeskScanCursor 
		FETCH   v_DocWorkDeskScanCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Documents',@v_ActivityName,'WorkDesk_ScanTool',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocWorkDeskScanCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_DocWorkDeskScanCursor 
		DEALLOCATE v_DocWorkDeskScanCursor 
		
		Execute ('DECLARE v_DocTaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,TaskName
		FROM    PMWActivityTable PMWAT WITH (NOLOCK), PMWTaskInterfaceAssocTable PMWPT WITH (NOLOCK), PMWTaskDefTable PMWTask WITH (NOLOCK)
		WHERE   PMWAT.ProcessDefId ='+@in_processDefId+' and PMWPT.ProcessDefId ='+@in_processDefId+' and PMWTask.ProcessDefId ='+@in_processDefId+
		'and PMWAT.ActivityId=PMWPT.ActivityId and PMWPT.TaskId=PMWTask.TaskId and PMWPT.InterfaceType='''+@InterfaceType+''' and PMWPT.InterfaceId='+@in_ObjectId)

		OPEN    v_DocTaskCursor 
		FETCH   v_DocTaskCursor  
		INTO    @v_ActivityName,@tempstr
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'Task:'+@tempstr,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocTaskCursor INTO @v_ActivityName,@tempstr				
			END	
		END
		CLOSE v_DocTaskCursor 
		DEALLOCATE v_DocTaskCursor
		
		
		set @tempstr=@in_ObjectName+'.doc'
		Execute ('DECLARE v_DocRegTempCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  templateId
		FROM    PMWTEMPLATEDEFINITIONTABLE WITH (NOLOCK)
		WHERE   templateFileName='''+@tempstr+''' and ProcessDefId='+@in_processDefId)		

		OPEN    v_DocRegTempCursor 
		FETCH   v_DocRegTempCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'RegisteredTemplate','Template Definition','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocRegTempCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_DocRegTempCursor 
		DEALLOCATE v_DocRegTempCursor 
		
		set @v_MapType='F'
		Execute ('DECLARE v_DocFwdMapCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwinitiateworkitemdeftable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityID and PMMapping.MapType='''+@v_MapType+''' and PMMapping.FieldType='''+@InterfaceType+''' and PMMapping.MappedFieldName='''+@in_ObjectName+''' and PMMapping.ProcessDefId ='+@in_processDefId)			


		OPEN    v_DocFwdMapCursor 
		FETCH   v_DocFwdMapCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '2') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document','InitiateWorkItem',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '18') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document','ForwardMapping',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_DocFwdMapCursor INTO @v_ActivityType,@v_ActivityName			
			END	
		END
		CLOSE v_DocFwdMapCursor 
		DEALLOCATE v_DocFwdMapCursor

		set @v_MapType='R'
		Execute ('DECLARE v_DocRevMapCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwinitiateworkitemdeftable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityID and PMMapping.MapType='''+@v_MapType+''' and PMMapping.FieldType='''+@InterfaceType+''' and PMMapping.ImportedFieldName='''+@in_ObjectName+''' and PMMapping.ProcessDefId ='+@in_processDefId)	

		OPEN    v_DocRevMapCursor 
		FETCH   v_DocRevMapCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document','ReverseMapping',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocRevMapCursor INTO @v_ActivityName			
			END	
		END
		CLOSE v_DocRevMapCursor 
		DEALLOCATE v_DocRevMapCursor
		
		Execute ('DECLARE v_DocCCMMappingCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMW_OMSTemplateInfoTable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityID and PMMapping.DocTypeName='''+@in_ObjectName+''' and PMMapping.ProcessDefId ='+@in_processDefId)	

		OPEN    v_DocCCMMappingCursor 
		FETCH   v_DocCCMMappingCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document','CCM Document Mapping',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocCCMMappingCursor INTO @v_ActivityName			
			END	
		END
		CLOSE v_DocCCMMappingCursor 
		DEALLOCATE v_DocCCMMappingCursor
		
		Execute ('DECLARE v_DocPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PFEType
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILDOCTYPETABLE PMSend WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.ElementId and PMSend.DocTypeId='+@in_ObjectId+' and  PMSend.ProcessDefId ='+@in_processDefId)
		OPEN    v_DocPFECursor 
		FETCH   v_DocPFECursor  
		INTO    @v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_MapType = 'P') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'Send_Print',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = 'F') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'Send_Fax',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = 'E') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'Send_Email',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_DocPFECursor INTO @v_ActivityName,@v_MapType		
			END	
		END
		CLOSE v_DocPFECursor 
		DEALLOCATE v_DocPFECursor
		
		Execute ('DECLARE v_DocArchiveCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWARCHIVEDATAMAPTABLE PMWArchive WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWArchive.ArchiveId and PMWArchive.DocTypeID='+@in_ObjectId+' and  PMWArchive.ProcessDefId ='+@in_processDefId)		

		OPEN    v_DocArchiveCursor 
		FETCH   v_DocArchiveCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'Archive',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocArchiveCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_DocArchiveCursor 
		DEALLOCATE v_DocArchiveCursor
		
		Execute ('DECLARE v_DocExportCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityTable PMActivity WITH (NOLOCK), pmwdatamaptable PMWDataMap WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWDataMap.ActivityId and PMWDataMap.MappedFieldName='''+@in_ObjectName+''' and  PMWDataMap.ProcessDefId ='+@in_processDefId)					
		
		OPEN    v_DocExportCursor 
		FETCH   v_DocExportCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'Export',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocExportCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_DocExportCursor 
		DEALLOCATE v_DocExportCursor
		
		Execute ('DECLARE v_DocPDACursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityTable PMActivity WITH (NOLOCK), PMWPDATAble PMWPT WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWPT.ActivityId and PMWPT.InterfaceType='''+@InterfaceType+''' and  PMWPT.ProcessDefId ='+@in_processDefId +' and  PMWPT.InterfaceId ='+@in_ObjectId)		
				
		OPEN    v_DocPDACursor 
		FETCH   v_DocPDACursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'WorkDesk_PDA',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocPDACursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_DocPDACursor 
		DEALLOCATE v_DocPDACursor
		
		set @v_MapType='D'
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and PMPreCondition.param1='''+@in_ObjectName+''' and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document',@v_ActivityName,'Task_Preconditions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
		/*[Temporarily commented]
		Execute ('DECLARE v_DocCaseActCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityTable WITH (NOLOCK)
		WHERE  ActivitySpecificInfo='''+@in_ObjectId+''' and ProcessDefId='+@in_processDefId)

		OPEN    v_DocCaseActCursor 
		FETCH   v_DocCaseActCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Documents','Activity',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocCaseActCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_DocCaseActCursor 
		DEALLOCATE v_DocCaseActCursor 
		*/
	end  
	else if(@in_ObjectType='QV')
	Begin
	set @InterfaceType='T'
		Execute ('DECLARE v_ToDoRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and (Param1='''+@in_ObjectName+''' or Param2='''+@in_ObjectName+''') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ToDoRuleCursor 
		FETCH   v_ToDoRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'ToDo','ToDo Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_ToDoRuleCursor 
		DEALLOCATE v_ToDoRuleCursor 
		
		set @InterfaceType='D'
		Execute ('DECLARE v_DocRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and (Param1='''+@in_ObjectName+''' or Param2='''+@in_ObjectName+''') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_DocRuleCursor 
		FETCH   v_DocRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Document','Document Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_DocRuleCursor 
		DEALLOCATE v_DocRuleCursor 
		
		set @InterfaceType='I'
		Execute ('DECLARE v_ComplexRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and (Param1='''+@in_ObjectName+''' or Param2='''+@in_ObjectName+''') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ComplexRuleCursor 
		FETCH   v_ComplexRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'ComplextType','ComplextType Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ComplexRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_ComplexRuleCursor 
		DEALLOCATE v_ComplexRuleCursor 	
		
		set @InterfaceType='E'
		Execute ('DECLARE v_ExcpRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and (Param1='''+@in_ObjectName+''' or Param2='''+@in_ObjectName+''') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ExcpRuleCursor 
		FETCH   v_ExcpRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Exceptions','Exceptions Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExcpRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_ExcpRuleCursor 
		DEALLOCATE v_ExcpRuleCursor 
		
		set @InterfaceType='F'
		Execute ('DECLARE v_FormRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and (Param1='''+@in_ObjectName+''' or Param2='''+@in_ObjectName+''') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_FormRuleCursor 
		FETCH   v_FormRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Form','Form Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_FormRuleCursor 
		DEALLOCATE v_FormRuleCursor
		
		Execute ('DECLARE v_ToDoDefCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ToDoName
		FROM    pmwtodolistdeftable WITH (NOLOCK)
		WHERE    AssociatedField='''+@in_ObjectName+''' and  ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ToDoDefCursor 
		FETCH   v_ToDoDefCursor  
		INTO    @v_ToDoName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ToDoName,'ToDo','ToDoDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoDefCursor INTO @v_ToDoName
			END 
		END
		CLOSE v_ToDoDefCursor 
		DEALLOCATE v_ToDoDefCursor 
		
		
		Execute ('DECLARE v_HoldOptionsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivityTable WITH (NOLOCK)
		WHERE    HoldTillVariable='''+@in_ObjectName+''' and  ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_HoldOptionsCursor 
		FETCH   v_HoldOptionsCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_HoldOptionsCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_HoldOptionsCursor 
		DEALLOCATE v_HoldOptionsCursor 
		
		set @tempstr='C'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName='''+@in_ObjectName+''' and ActivityId=0 and  ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','SearchVariables','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		set @tempstr='R'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName='''+@in_ObjectName+''' and ActivityId=0 and  ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','SearchResults','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		
		Execute ('DECLARE v_MailTriggerCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TriggerName from pmwtriggerdeftable PMTrigger WITH (NOLOCK), pmwmailtriggertable PMMailTrigger WITH (NOLOCK)  WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+' and PMTrigger.TriggerId=PMMailTrigger.TriggerId and  (PMMailTrigger.CCuser='''+@in_ObjectName+''' or PMMailTrigger.touser='''+@in_ObjectName+''' or PMMailTrigger.fromuser='''+@in_ObjectName+''') and  PMMailTrigger.ProcessDefId ='+@in_processDefId)
			
		
		OPEN    v_MailTriggerCursor 
		FETCH   v_MailTriggerCursor  
		INTO    @v_TriggerName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MailTriggerCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_MailTriggerCursor 
		DEALLOCATE v_MailTriggerCursor
		
		
		Execute ('DECLARE v_DataEntryTrigCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TriggerName from pmwtriggerdeftable PMTrigger WITH (NOLOCK), PMWDATAENTRYTRIGGERTABLE PMDataEntryTrigger WITH (NOLOCK)  WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+' and PMTrigger.TriggerId=PMDataEntryTrigger.TriggerId and  PMDataEntryTrigger.VariableName='''+@in_ObjectName+''' and  PMDataEntryTrigger.ProcessDefId ='+@in_processDefId)	
			
		
		OPEN    v_DataEntryTrigCursor 
		FETCH   v_DataEntryTrigCursor  
		INTO    @v_TriggerName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DataEntryTrigCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_DataEntryTrigCursor 
		DEALLOCATE v_DataEntryTrigCursor
		
		
		Execute ('DECLARE v_DataSetTrigCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TriggerName from pmwtriggerdeftable PMTrigger WITH (NOLOCK), PMWDataSetTriggerTable PMDataSet WITH (NOLOCK)  WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+' and PMTrigger.TriggerId=PMDataSet.TriggerId and  (PMDataSet.Param1='''+@in_ObjectName+''' or PMDataSet.Param2='''+@in_ObjectName+''') and  PMDataSet.ProcessDefId ='+@in_processDefId)		
			
		
		OPEN    v_DataSetTrigCursor 
		FETCH   v_DataSetTrigCursor  
		INTO    @v_TriggerName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DataSetTrigCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_DataSetTrigCursor 
		DEALLOCATE v_DataSetTrigCursor
		
		
		Execute ('DECLARE v_DataTabCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWActivityAssociationTable PMWActAssoc WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMWActAssoc.ActivityID and PMWActAssoc.FieldName='''+@in_ObjectName+''' and  PMWActAssoc.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_DataTabCursor 
		FETCH   v_DataTabCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '26') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'OutputVariables',@in_processDefId,@in_processDefId,@in_processDefId)	
				END
				ELSE
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'Data',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_DataTabCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_DataTabCursor 
		DEALLOCATE v_DataTabCursor		
		
		
		Execute ('DECLARE v_ActionsCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWACTIONCONDITIONTABLE PMRuleCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleCondition.ActivityID and (PMRuleCondition.param1='''+@in_ObjectName+''' or PMRuleCondition.param2='''+@in_ObjectName+''') and  PMRuleCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_ActionsCondCursor 
		FETCH   v_ActionsCondCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ActionsCondCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_ActionsCondCursor 
		DEALLOCATE v_ActionsCondCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWACTIONOPERATIONTABLE PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and (PMRuleOperation.param1='''+@in_ObjectName+''' or PMRuleOperation.param2='''+@in_ObjectName+''' or PMRuleOperation.param3='''+@in_ObjectName+''') and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and (PMRuleOperation.param1='''+@in_ObjectName+''' or PMRuleOperation.param2='''+@in_ObjectName+''' or PMRuleOperation.param3='''+@in_ObjectName+''') and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)	
				END
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		set @InterfaceType='S'	
		Execute ('DECLARE v_ActionsCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleconditiontable PMRuleCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleCondition.ActivityID and PMRuleCondition.RuleType !='''+@InterfaceType+''' and (PMRuleCondition.param1='''+@in_ObjectName+''' or PMRuleCondition.param2='''+@in_ObjectName+''') and  PMRuleCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_ActionsCondCursor 
		FETCH   v_ActionsCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)				
				END	
				FETCH NEXT FROM v_ActionsCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_ActionsCondCursor 
		DEALLOCATE v_ActionsCondCursor
		
		Execute ('DECLARE v_ScanActionsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWSCANACTIONSTABLE PMScanAction WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMScanAction.ActivityID and (PMScanAction.param1='''+@in_ObjectName+''' or PMScanAction.param2='''+@in_ObjectName+''') and  PMScanAction.ProcessDefId ='+@in_processDefId)		
				
		OPEN    v_ScanActionsCursor 
		FETCH   v_ScanActionsCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'WorkDesk_Scan',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ScanActionsCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_ScanActionsCursor 
		DEALLOCATE v_ScanActionsCursor
		
		
			set @v_MapType='F'
	set @InterfaceType='V'
		Execute ('DECLARE v_DocFwdMapCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwinitiateworkitemdeftable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityID and PMMapping.MapType='''+@v_MapType+''' and PMMapping.FieldType='''+@InterfaceType+''' and PMMapping.MappedFieldName='''+@in_ObjectName+''' and PMMapping.ProcessDefId ='+@in_processDefId)			


		OPEN    v_DocFwdMapCursor 
		FETCH   v_DocFwdMapCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '2') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables','InitiateWorkItem',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '18') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables','ForwardMapping',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_DocFwdMapCursor INTO @v_ActivityType,@v_ActivityName			
			END	
		END
		CLOSE v_DocFwdMapCursor 
		DEALLOCATE v_DocFwdMapCursor

		set @v_MapType='R'
		Execute ('DECLARE v_DocRevMapCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwinitiateworkitemdeftable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityID and PMMapping.MapType='''+@v_MapType+''' and PMMapping.FieldType='''+@InterfaceType+''' and PMMapping.ImportedFieldName='''+@in_ObjectName+''' and PMMapping.ProcessDefId ='+@in_processDefId)	

		OPEN    v_DocRevMapCursor 
		FETCH   v_DocRevMapCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables','ReverseMapping',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocRevMapCursor INTO @v_ActivityName			
			END	
		END
		CLOSE v_DocRevMapCursor 
		DEALLOCATE v_DocRevMapCursor
		
		Execute ('DECLARE v_QVarPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PFEType
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILDOCTYPETABLE PMSend WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.ElementId and PMSend.VariableId='+@in_ObjectId+' and  PMSend.ProcessDefId ='+@in_processDefId)
				
		OPEN    v_QVarPFECursor 
		FETCH   v_QVarPFECursor  
		INTO    @v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_MapType = 'P') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Send_Print',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = 'F') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Send_Fax',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = 'E') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Send_Email',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_QVarPFECursor INTO @v_ActivityName,@v_MapType		
			END	
		END
		CLOSE v_QVarPFECursor 
		DEALLOCATE v_QVarPFECursor
		
		Execute ('DECLARE v_QVarPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILTABLE PMSend WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.PFEInterfaceId and  (PMSend.ToMailId='''+@in_ObjectName+''' or PMSend.CCMailId='''+@in_ObjectName+''' or PMSend.SendermailId='''+@in_ObjectName+''') and  PMSend.ProcessDefId ='+@in_processDefId)
			
		OPEN    v_QVarPFECursor 
		FETCH   v_QVarPFECursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Send_Print',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_QVarPFECursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_QVarPFECursor 
		DEALLOCATE v_QVarPFECursor
		
		Execute ('DECLARE v_QVarExportCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWDataMapTable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityId and  PMMapping.MappedFieldName='''+@in_ObjectName+'''  and  PMMapping.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_QVarExportCursor 
		FETCH   v_QVarExportCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Export',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_QVarExportCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_QVarExportCursor 
		DEALLOCATE v_QVarExportCursor
		
		Execute ('DECLARE v_QVarExportCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWExtMethodParamMappingTable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityId and  PMMapping.MappedField='''+@in_ObjectName+'''  and  PMMapping.ProcessDefId ='+@in_processDefId)
				
		OPEN    v_QVarExportCursor 
		FETCH   v_QVarExportCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				IF (@v_ActivityType = '20') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Export',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '22') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'WebService',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE IF (@v_ActivityType = '29') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'SAP',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)
				END								
				FETCH NEXT FROM v_QVarExportCursor INTO @v_ActivityType,@v_ActivityName	
			END	
		END
		CLOSE v_QVarExportCursor 
		DEALLOCATE v_QVarExportCursor
		
		set @tempstr='C'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName='''+@in_ObjectName+''' and ActivityId<>0 and ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','SearchVariables','Query',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		set @tempstr='R'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName='''+@in_ObjectName+''' and ActivityId<>0 and  ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','SearchResults','Query',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		

		Execute ('DECLARE v_DocArchiveCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWARCHIVEDATAMAPTABLE PMWArchive WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWArchive.ArchiveId and PMWArchive.AssocVar='''+@in_ObjectName+''' and  PMWArchive.ProcessDefId ='+@in_processDefId)		

		OPEN    v_DocArchiveCursor 
		FETCH   v_DocArchiveCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Archive',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocArchiveCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_DocArchiveCursor 
		DEALLOCATE v_DocArchiveCursor	

		Execute ('DECLARE v_CCMMappingCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMW_OMSTemplateMappingTable PMWCCMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWCCMMapping.ActivityId and PMWCCMMapping.MappedName='''+@in_ObjectName+''' and  PMWCCMMapping.ProcessDefId ='+@in_processDefId)		

		OPEN    v_CCMMappingCursor 
		FETCH   v_CCMMappingCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'CCM Template Mapping',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_CCMMappingCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_CCMMappingCursor 
		DEALLOCATE v_CCMMappingCursor			
		

		Execute ('DECLARE v_DocSearchCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWDocTypeSearchMapping PMWSearch WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWSearch.ActivityId and PMWSearch.MappedFieldName='''+@in_ObjectName+''' and  PMWSearch.ProcessDefId ='+@in_processDefId)	

		OPEN    v_DocSearchCursor 
		FETCH   v_DocSearchCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'WorkDesk_DMSSearch',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocSearchCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_DocSearchCursor 
		DEALLOCATE v_DocSearchCursor	
		

		Execute ('DECLARE v_MessageEventCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWSoapReqCorrelationTable PMWSoapReq WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWSoapReq.ActivityId and PMWSoapReq.SearchField='''+@in_ObjectName+''' and  PMWSoapReq.ProcessDefId ='+@in_processDefId)		

		OPEN    v_MessageEventCursor 
		FETCH   v_MessageEventCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Message',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MessageEventCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_MessageEventCursor 
		DEALLOCATE v_MessageEventCursor

		Execute ('DECLARE v_JMSConsCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWJMSSubscribeTable PMWJMSCons WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWJMSCons.ActivityId and PMWJMSCons.ProcessVariableName='''+@in_ObjectName+''' and  PMWJMSCons.ProcessDefId ='+@in_processDefId)	

		OPEN    v_JMSConsCursor 
		FETCH   v_JMSConsCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'JMS Consumer',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_JMSConsCursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_JMSConsCursor 
		DEALLOCATE v_JMSConsCursor

		

		Execute ('DECLARE v_ExpiryCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwdurationtable PMWDuration WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.expiry=PMWDuration.DurationId and (PMWDuration.WFDays='''+@in_ObjectName+''' or PMWDuration.WFHours='''+@in_ObjectName+''' or PMWDuration.WFMinutes='''+@in_ObjectName+''' or PMWDuration.WFSeconds='''+@in_ObjectName+''') and  PMWDuration.ProcessDefId ='+@in_processDefId)

		OPEN    v_ExpiryCursor 
		FETCH   v_ExpiryCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '4') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				END					
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_ExpiryCursor INTO @v_ActivityType,@v_ActivityName	
			END			
		END
		CLOSE v_ExpiryCursor 
		DEALLOCATE v_ExpiryCursor		

        Execute ('DECLARE v_ExpiryTaskCursor CURSOR FAST_FORWARD FOR '+ 
		'Select Top 100 TaskName from PMWTaskDefTable where processdefid='+@in_processDefId+' and TaskId in (Select Distinct(TaskId) from PMWTaskExpiryOperation TaskExpiryOperation WITH (NOLOCK), pmwdurationtable PMWDuration WITH (NOLOCK)  WHERE   TaskExpiryOperation.ProcessDefId ='+@in_processDefId+' and TaskExpiryOperation.expiry=PMWDuration.DurationId  and (PMWDuration.WFDays='''+@in_ObjectName+''' or PMWDuration.WFHours='''+@in_ObjectName+''' or PMWDuration.WFMinutes='''+@in_ObjectName+''' or PMWDuration.WFSeconds='''+@in_ObjectName+''') and  PMWDuration.ProcessDefId ='+@in_processDefId+')')

		OPEN    v_ExpiryTaskCursor 
		FETCH   v_ExpiryTaskCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'Task Expiry',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExpiryTaskCursor INTO @v_ActivityName	
			END			
		END
		CLOSE v_ExpiryTaskCursor 
		DEALLOCATE v_ExpiryTaskCursor			
				

		Execute ('DECLARE v_FormPDACursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPDA_FormTable PMWPDA WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWPDA.ActivityId and PMWPDA.variableid='+@in_ObjectId+' and  PMWPDA.ProcessDefId ='+@in_processDefId)

		OPEN    v_FormPDACursor 
		FETCH   v_FormPDACursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariables',@v_ActivityName,'WorkDesk_PDA_Form',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_FormPDACursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_FormPDACursor 
		DEALLOCATE v_FormPDACursor	
		
		set @v_MapType='V'
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and (PMPreCondition.param1='''+@in_ObjectName+''' or PMPreCondition.param2='''+@in_ObjectName+''') and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Queue Variables',@v_ActivityName,'Task Condition',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
		
		Execute ('DECLARE v_TaskOprCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWTaskRuleOperationTable PMOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMOperation.ActivityID and (PMOperation.param1='''+@in_ObjectName+''' or PMOperation.param2='''+@in_ObjectName+''' or PMOperation.param3='''+@in_ObjectName+''')  and PMOperation.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskOprCursor 
		FETCH   v_TaskOprCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'Task Operation',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskOprCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskOprCursor 
		DEALLOCATE v_TaskOprCursor
		
		Execute ('DECLARE v_TaskMappingCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWTaskVariableMappingTable PMMapping WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMMapping.ActivityID and PMMapping.VariableName='''+@in_ObjectName+''' and PMMapping.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskMappingCursor 
		FETCH   v_TaskMappingCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable',@v_ActivityName,'Task_VariableMapping',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskMappingCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskMappingCursor 
		DEALLOCATE v_TaskMappingCursor
		
		set @tempstr='Y'
		Execute ('DECLARE v_MappingExceptCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  UserDefinedName FROM PMWVarMappingTable PMMaskExcept WITH (NOLOCK) WHERE    PMMaskExcept.UserDefinedName='''+@in_ObjectName+''' and PMMaskExcept.IsMasked = '''+@tempstr+''' and  PMMaskExcept.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_MappingExceptCursor 
		FETCH   v_MappingExceptCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','Mask Data','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MappingExceptCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_MappingExceptCursor 
		DEALLOCATE v_MappingExceptCursor
		
		set @tempstr=@in_ObjectName+'.%'
		Execute ('DECLARE v_MappingExceptCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  VariableName FROM PMWActivityMaskingInfoTable PMMaskExcept WITH (NOLOCK) WHERE     PMMaskExcept.VariableName like '''+@tempstr+''' and  PMMaskExcept.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_MappingExceptCursor 
		FETCH   v_MappingExceptCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ActivityName,'QueueVariable','Mask Data','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MappingExceptCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_MappingExceptCursor 
		DEALLOCATE v_MappingExceptCursor
		
		set @tempstr='Y'
		Execute ('DECLARE v_EncryptCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  UserDefinedName FROM PMWVarMappingTable PMVarMap WITH (NOLOCK) WHERE    PMVarMap.UserDefinedName='''+@in_ObjectName+''' and PMVarMap.IsEncrypted = '''+@tempstr+''' and  PMVarMap.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_EncryptCursor 
		FETCH   v_EncryptCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','Encrypt Data','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_EncryptCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_EncryptCursor 
		DEALLOCATE v_EncryptCursor
					
		set @tempstr='Y'
		Execute ('DECLARE v_EncryptComplexCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  distinct TOP 100  UserDefinedName FROM PMWVarMappingTable PMVarMap WITH (NOLOCK), PMWUDTVarMappingTable PMWUDT WHERE PMVarMap.ExtObjId=PMWUDT.ExtObjId and PMWUDT.IsEncrypted = '''+@tempstr+''' and  UserDefinedName='''+@in_ObjectName+''' and PMVarMap.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_EncryptComplexCursor 
		FETCH   v_EncryptComplexCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','Encrypt Data','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_EncryptComplexCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_EncryptComplexCursor 
		DEALLOCATE v_EncryptComplexCursor
		
		set @tempstr='Y'
		Execute ('DECLARE v_MaskComplexCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  distinct TOP 100  UserDefinedName FROM PMWVarMappingTable PMVarMap WITH (NOLOCK), PMWUDTVarMappingTable PMWUDT WHERE PMVarMap.ExtObjId=PMWUDT.ExtObjId and PMWUDT.IsMasked = '''+@tempstr+''' and  UserDefinedName='''+@in_ObjectName+''' and PMVarMap.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_MaskComplexCursor 
		FETCH   v_MaskComplexCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'QueueVariable','Mask Data','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MaskComplexCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_MaskComplexCursor 
		DEALLOCATE v_MaskComplexCursor
		
	end 
	ELSE IF(@in_ObjectType='FR')
		Begin
		set @InterfaceType='F'
		Execute ('DECLARE v_FormAssocCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT distinct   TOP 100  Assoc.ActivityName,Act.MobileEnabled,form.devicetype
		FROM    PMWACTIVITYINTERFACEASSOCTABLE Assoc,pmwactivitytable Act,pmwform_table form WITH (NOLOCK) WHERE  Assoc.ProcessDefId ='+@in_processDefId+
		' and Assoc.ProcessDefId = Act.ProcessDefId and Assoc.Activityid  = Act.ActivityId 
		and Assoc.InterfaceType = '''+@InterfaceType+''' and  Assoc.InterfaceElementId='+@in_ObjectId +'and form.formId = Assoc.InterfaceElementId ')
		
		OPEN    v_FormAssocCursor 
		FETCH   v_FormAssocCursor  
		INTO    @v_ActivityName,@v_MobileEnabled,@v_DeviceType
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				
                If (@v_DeviceType = @in_DeviceType and  @v_DeviceType in ('L','M','H','D','A') and @v_MobileEnabled = 'Y')
                Begin
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Form',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				End	
				Else if(@v_DeviceType = @in_DeviceType and  @v_DeviceType in ('D','A') and @v_MobileEnabled = 'N')
				Begin
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Form',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				End	
				FETCH NEXT FROM v_FormAssocCursor INTO @v_ActivityName,@v_MobileEnabled,@v_DeviceType
			END 
		END
		CLOSE v_FormAssocCursor 
		DEALLOCATE v_FormAssocCursor 
		
		Execute ('DECLARE v_FormTaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,TaskName
		FROM    PMWActivityTable PMWAT WITH (NOLOCK), PMWTaskInterfaceAssocTable PMWPT WITH (NOLOCK), PMWTaskDefTable PMWTask WITH (NOLOCK)
		WHERE   PMWAT.ProcessDefId ='+@in_processDefId+' and PMWPT.ProcessDefId ='+@in_processDefId+' and PMWTask.ProcessDefId ='+@in_processDefId+
		'and PMWAT.ActivityId=PMWPT.ActivityId and PMWPT.TaskId=PMWTask.TaskId and PMWPT.InterfaceType='''+@InterfaceType+''' and PMWPT.InterfaceId='+@in_ObjectId)

		OPEN    v_FormTaskCursor 
		FETCH   v_FormTaskCursor  
		INTO    @v_ActivityName,@tempstr
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Forms',@v_ActivityName,'Task:'+@tempstr,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormTaskCursor INTO @v_ActivityName,@tempstr				
			END	
		END
		CLOSE v_FormTaskCursor 
		DEALLOCATE v_FormTaskCursor
		
		Execute ('DECLARE v_FormExistingCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  FormName
		FROM    PMWForm_Table WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and ExistingFormId='+@in_ObjectId)

		OPEN    v_FormExistingCursor 
		FETCH   v_FormExistingCursor  
		INTO    @tempstr
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Form','Global','ExistingForm in '+@tempstr,@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormExistingCursor INTO @tempstr				
			END	
		END
		CLOSE v_FormExistingCursor 
		DEALLOCATE v_FormExistingCursor
		
		Execute ('DECLARE v_FormRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  InterfaceElementId
		FROM    PMWExtInterfaceOperationTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)
		
		OPEN    v_FormRuleCursor 
		FETCH   v_FormRuleCursor  
		INTO    @v_InterfaceElementId
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Form','Global','Form Rule',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormRuleCursor INTO @v_InterfaceElementId
			END 
		END
		CLOSE v_FormRuleCursor 
		DEALLOCATE v_FormRuleCursor
		END
		else if(@in_ObjectType='TP')
		Begin
		set @tempstr=@in_ObjectName+'.doc'
		set @v_TriggerType='G'		
		Execute ('DECLARE v_RegTempCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  TriggerName
		FROM    pmwtriggerdeftable PMTrigger WITH (NOLOCK), PMWGENERATERESPONSETABLE PMGenRespTrigger WITH (NOLOCK)
		WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+
		'and PMTrigger.TriggerId=PMGenRespTrigger.TriggerId and PMGenRespTrigger.FileName='''+@tempstr+''' and PMTrigger.TriggerType='''+@v_TriggerType+''' and PMGenRespTrigger.ProcessDefId ='+@in_processDefId)		

		OPEN    v_RegTempCursor 
		FETCH   v_RegTempCursor  
		INTO    @v_TriggerName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','Triggers Definition','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_RegTempCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_RegTempCursor 				
		DEALLOCATE v_RegTempCursor 
		
		set @InterfaceType='Y'
		Execute ('DECLARE v_TempPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivityTable A WITH (NOLOCK), PMWDocumentTypeDefTable D WITH (NOLOCK), PMWPRINTFAXEMAILDOCTYPETABLE P WITH (NOLOCK)
		WHERE   A.ProcessDefId ='+@in_processDefId+' and D.ProcessDefId ='+@in_processDefId+' and P.ProcessDefId ='+@in_processDefId+' and A.ActivityId=P.ElementId and P.CreateDoc='''+@InterfaceType+'''  and D.DocName='''+@in_ObjectName+''' and D.DocId=P.DocTypeId')		

		OPEN    v_TempPFECursor 
		FETCH   v_TempPFECursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Template',@v_ActivityName,'Send',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TempPFECursor INTO @v_ActivityName
			END 
		END
		CLOSE v_TempPFECursor
		DEALLOCATE v_TempPFECursor 
		
		END
		else if(@in_ObjectType='CX')
		Begin	
		Execute ('DECLARE v_ComplexCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  FragmentName
		FROM    PMWFormFragmentTable WITH (NOLOCK) WHERE  StructureName='''+@in_ObjectName+''' and  ProcessDefId ='+@in_processDefId)	

		OPEN    v_ComplexCursor 
		FETCH   v_ComplexCursor  
		INTO    @v_FormfragName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_FormfragName,'Fragments','Fragment In Complex','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ComplexCursor INTO @v_FormfragName
			END 
		END
		CLOSE v_ComplexCursor 
		DEALLOCATE v_ComplexCursor 
		END
		Else if(@in_ObjectType='EF')
		Begin
		set @v_MapType='E'
		Execute ('DECLARE v_CallCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  PMActivity.ActivityType,PMActivity.ActivityName FROM pmwactivitytable PMActivity WITH (NOLOCK), PMWEXTMETHODDEFTABLE PMWEXT WITH (NOLOCK),  pmwruleoperationtable PMWRule WITH (NOLOCK)   WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMActivity.ActivityId=PMWRule.ActivityId and PMWEXT.extmethodIndex=PMWRule.Param1 and  PMWEXT.ProcessDefId ='+@in_processDefId+' and  PMWEXT.ExtAppType='''+@v_MapType+''' and PMWExt.ExtMethodName = '''+@in_ObjectName+''' and PMWRule.ProcessDefId ='+@in_processDefId+' and PMWRule.OperationType=22')		
		OPEN    v_CallCursor 
		FETCH   v_CallCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values 
				(@in_ObjectName,'External Functions',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'External Functions',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'External Functions',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_CallCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END

		CLOSE v_CallCursor 
		DEALLOCATE v_CallCursor
		
		Execute ('DECLARE v_SetExecCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  PMActivity.ActivityType,PMActivity.ActivityName FROM pmwactivitytable PMActivity WITH (NOLOCK), PMWEXTMETHODDEFTABLE PMWEXT WITH (NOLOCK),  pmwruleoperationtable PMWRule WITH (NOLOCK)   WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMActivity.ActivityId=PMWRule.ActivityId and PMWEXT.extmethodIndex=PMWRule.Param2 and  PMWEXT.ProcessDefId ='+@in_processDefId+' and  PMWEXT.ExtAppType='''+@v_MapType+''' and PMWExt.ExtMethodName = '''+@in_ObjectName+''' and PMWRule.ProcessDefId ='+@in_processDefId+' and PMWRule.OperationType=23')		
		OPEN    v_SetExecCursor 
		FETCH   v_SetExecCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values 
				(@in_ObjectName,'External Functions',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'External Functions',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'External Functions',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_SetExecCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END

		CLOSE v_SetExecCursor 
		DEALLOCATE v_SetExecCursor
	END
	
	else if(@in_ObjectType='WS')
	Begin
	set @v_MapType='W'
	Execute ('DECLARE v_WSMethodCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  PMActivity.ActivityType,PMActivity.ActivityName		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwwebservicetable PMWWebService WITH (NOLOCK),  PMWEXTMETHODDEFTABLE PMWMapping WITH (NOLOCK)   WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMActivity.ActivityId=PMWWebService.ActivityId and PMWWebService.extmethodIndex=PMWMapping.extmethodIndex and  PMWWebService.ProcessDefId ='+@in_processDefId+'  and PMWMapping.ProcessDefId ='+@in_processDefId+' and  PMWMapping.ExtAppType='''+@v_MapType+''' and PMWWebService.extmethodIndex='+@in_ObjectId)		
		OPEN    v_WSMethodCursor 
		FETCH   v_WSMethodCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'WebService Methods',@v_ActivityName,'Webservice',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_WSMethodCursor INTO @v_ActivityType,@v_ActivityName	
			END 
		END
		CLOSE v_WSMethodCursor 
		DEALLOCATE v_WSMethodCursor
	END
	Else if(@in_ObjectType='SP')
		Begin
		set @v_MapType='Z'
		Execute ('DECLARE v_SAPCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  PMActivity.ActivityName		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWEXTMETHODDEFTABLE PMWEXT WITH (NOLOCK),  PMWSAPAdapterAssocTable PMWSAP WITH (NOLOCK)   WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMActivity.ActivityId=PMWSAP.ActivityId and PMWEXT.extmethodIndex=PMWSAP.extmethodIndex and  PMWEXT.ProcessDefId ='+@in_processDefId+' and  PMWEXT.ExtAppType='''+@v_MapType+''' and PMWSAP.ProcessDefId ='+@in_processDefId+' and PMWEXT.extmethodIndex='+@in_ObjectId)			
		OPEN    v_SAPCursor 
		FETCH   v_SAPCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'SAP Functions',@v_ActivityName,'SAP',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_SAPCursor INTO @v_ActivityName
			END 
		END

		CLOSE v_SAPCursor 
		DEALLOCATE v_SAPCursor
	END
	Else if(@in_ObjectType='CN')
	Begin
	Execute ('DECLARE v_ActionsRuleCursor CURSOR FAST_FORWARD FOR '+
	'select TOP 100 ActivityName from pmwactivitytable PMActivity WITH (NOLOCK), PMWACTIONOPERATIONTABLE PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+'  and PMActivity.ActivityId=PMRuleOperation.ActivityID and (PMRuleOperation.param2= '''+@in_ObjectName+''' or PMRuleOperation.param3= '''+@in_ObjectName+''' ) and PMRuleOperation.ProcessDefId ='+@in_processDefId)		
	OPEN    v_ActionsRuleCursor 
	FETCH   v_ActionsRuleCursor  
	INTO    @v_ActivityName
	WHILE (@@FETCH_STATUS  <> -1) 
	BEGIN 
		IF (@@FETCH_STATUS <> -2) 
		BEGIN 
			insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)
			FETCH NEXT FROM v_ActionsRuleCursor INTO @v_ActivityName
		END 
	END

	CLOSE v_ActionsRuleCursor 
	DEALLOCATE v_ActionsRuleCursor
	
	Execute ('DECLARE v_ActionConditionCursor CURSOR FAST_FORWARD FOR '+
	'select TOP 100 ActivityName from pmwactivitytable PMActivity WITH (NOLOCK), PMWACTIONCONDITIONTABLE PMRuleCondition WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+'  and PMActivity.ActivityId=PMRuleCondition.ActivityID and PMRuleCondition.param2= '''+@in_ObjectName+''' and PMRuleCondition.ProcessDefId ='+@in_processDefId)
	
	OPEN    v_ActionConditionCursor 
	FETCH   v_ActionConditionCursor  
	INTO    @v_ActivityName
	WHILE (@@FETCH_STATUS  <> -1) 
	BEGIN 
		IF (@@FETCH_STATUS <> -2) 
		BEGIN 
			insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)
			FETCH NEXT FROM v_ActionConditionCursor INTO @v_ActivityName
		END 
	END

	CLOSE v_ActionConditionCursor 
	DEALLOCATE v_ActionConditionCursor
	
	Execute ('DECLARE v_TimerCursor CURSOR FAST_FORWARD FOR '+ 
	'SELECT  TOP 100  ActivityName
	FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwdurationtable PMWDuration WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
	' and PMActivity.expiry=PMWDuration.DurationId and (PMWDuration.WFDays='''+@in_ObjectName+''' or PMWDuration.WFHours='''+@in_ObjectName+''' or PMWDuration.WFMinutes='''+@in_ObjectName+''' or PMWDuration.WFSeconds='''+@in_ObjectName+''') and  PMWDuration.ProcessDefId ='+@in_processDefId)

	OPEN    v_TimerCursor 
	FETCH   v_TimerCursor  
	INTO    @v_ActivityName
	WHILE (@@FETCH_STATUS  <> -1) 
	BEGIN 
		IF (@@FETCH_STATUS <> -2) 
		BEGIN 				
			INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)			
			FETCH NEXT FROM v_TimerCursor INTO @v_ActivityName		
		END	
	END
	CLOSE v_TimerCursor 
	DEALLOCATE v_TimerCursor
	
	Execute ('DECLARE v_RulesOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and (PMRuleOperation.param1='''+@in_ObjectName+''' or PMRuleOperation.param2='''+@in_ObjectName+''' or PMRuleOperation.param3='''+@in_ObjectName+''') and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_RulesOperatCursor 
		FETCH   v_RulesOperatCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_RulesOperatCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_RulesOperatCursor 
		DEALLOCATE v_RulesOperatCursor
		
		set @InterfaceType='S'
		Execute ('DECLARE v_RulesCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleconditiontable PMRuleCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleCondition.ActivityID and PMRuleCondition.RuleType !='''+@InterfaceType+''' and (PMRuleCondition.param1='''+@in_ObjectName+''' or PMRuleCondition.param2='''+@in_ObjectName+''') and  PMRuleCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_RulesCondCursor 
		FETCH   v_RulesCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)				
				END	
				FETCH NEXT FROM v_RulesCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_RulesCondCursor 
		DEALLOCATE v_RulesCondCursor
		
		Execute ('DECLARE v_QVarPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILTABLE PMSend WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.PFEInterfaceId and  PMSend.FaxNo='''+@in_ObjectName+'''   and  PMSend.ProcessDefId ='+@in_processDefId)
			
		OPEN    v_QVarPFECursor 
		FETCH   v_QVarPFECursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Constants',@v_ActivityName,'Send_Fax',@in_processDefId,@in_processDefId,@in_processDefId)			
				FETCH NEXT FROM v_QVarPFECursor INTO @v_ActivityName		
			END	
		END
		CLOSE v_QVarPFECursor 
		DEALLOCATE v_QVarPFECursor
	
END
Else if(@in_ObjectType='SC')
	Begin
	set @v_MapType='Z'
	Execute ('DECLARE v_SAPConfigCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ExtMethodName
		FROM    pmwsapconnecttable PMSAPCONFIG WITH (NOLOCK), PMWEXTMETHODDEFTABLE PMSAPMETHOD WITH (NOLOCK)  WHERE   PMSAPCONFIG.ProcessDefId ='+@in_processDefId+
		' and PMSAPCONFIG.ConfigurationId=PMSAPMETHOD.ConfigurationId and  PMSAPCONFIG.configurationname='''+@in_ObjectName+''' and  PMSAPMETHOD.extapptype='''+@v_MapType+'''   and  PMSAPCONFIG.ProcessDefId ='+@in_processDefId)		
			
		OPEN    v_SAPConfigCursor 
		FETCH   v_SAPConfigCursor  
		INTO    @v_MethodName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'SAP Configuration','CatalogDefinition_SAP','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_SAPConfigCursor INTO @v_MethodName		
			END	
		END
		CLOSE v_SAPConfigCursor 
		DEALLOCATE v_SAPConfigCursor		
	END
	
	Else if(@in_ObjectType='AC')		
		Begin
		Execute ('DECLARE v_TargetWorkStepCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivitytable  WITH (NOLOCK)  WHERE  TargetActivity in ('+@in_ObjectId+') and activityid not in ('+@in_ObjectId+') and ProcessDefId ='+@in_processDefId)	
			
		
		OPEN    v_TargetWorkStepCursor 
		FETCH   v_TargetWorkStepCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('TargetActivity','WorkStep',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TargetWorkStepCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_TargetWorkStepCursor 
		Deallocate v_TargetWorkStepCursor
		Execute ('DECLARE v_ExpiryWorkStepCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivitytable  WITH (NOLOCK)  WHERE ExpiryActivity in ('+@in_ObjectName+')  and ActivityName not in ('+@in_ObjectName+') and ProcessDefId ='+@in_processDefId)	
		OPEN    v_ExpiryWorkStepCursor 
		FETCH   v_ExpiryWorkStepCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('ExpiryActivity','WorkStep',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExpiryWorkStepCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_ExpiryWorkStepCursor 
		Deallocate v_ExpiryWorkStepCursor
		Execute ('DECLARE v_PrimaryActivityCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    PMWActivitytable  WITH (NOLOCK)  WHERE PrimaryActivity in ('+@in_ObjectName+') and ActivityName not in ('+@in_ObjectName+')  and ProcessDefId ='+@in_processDefId)	
		OPEN    v_PrimaryActivityCursor 
		FETCH   v_PrimaryActivityCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('PrimaryActivity','WorkStep',@v_ActivityName,'Collect',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_PrimaryActivityCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_PrimaryActivityCursor 
		Deallocate v_PrimaryActivityCursor
		
		Execute ('DECLARE v_ReplyAfterActCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType from PMWActivitytable  WITH (NOLOCK) WHERE    AssociatedActivityId in ('+@in_ObjectId+')  and ActivityId not in ('+@in_ObjectId+')  and ProcessDefId ='+@in_processDefId)	
		OPEN    v_ReplyAfterActCursor 
		FETCH   v_ReplyAfterActCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '1') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('ReplyActivity','WorkStep',@v_ActivityName,'Receive',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '24') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('ReplyActivity','WorkStep',@v_ActivityName,'Request Consumer SOAP',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE IF (@v_ActivityType = '6') 
				BEGIN
				IF (@v_MapType = '1') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeActivity','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = '2') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeActivity','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				END	
				FETCH NEXT FROM v_ReplyAfterActCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType
			END 
		END
		CLOSE v_ReplyAfterActCursor 
		DEALLOCATE v_ReplyAfterActCursor		
		set @InterfaceType='D'
		Execute ('DECLARE v_DistributeCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType from pmwactivitytable PMActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId = '+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1 in (' +@in_ObjectName+') and PMActivity.ActivityId not in (' +@in_ObjectId+') and PMRuleOperation.RuleType='''+@InterfaceType+''' and PMRuleOperation.operationType = 21')		
		OPEN    v_DistributeCursor 
		FETCH   v_DistributeCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 				
				IF (@v_MapType = '1') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeRules','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = '2') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeRules','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				END	
				FETCH NEXT FROM v_DistributeCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType
			END 
		END
		CLOSE v_DistributeCursor 
		DEALLOCATE v_DistributeCursor		
		set @InterfaceType='X'
		Execute ('DECLARE v_DecisionCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName from pmwactivitytable PMActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId = '+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1 in (' +@in_ObjectName+') and PMActivity.ActivityId not in (' +@in_ObjectId+') and PMRuleOperation.RuleType='''+@InterfaceType+''' and PMRuleOperation.operationType = 4')
		OPEN    v_DecisionCursor 
		FETCH   v_DecisionCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('RoutingCriteria','WorkStep',@v_ActivityName,'Data Based Exclusive',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DecisionCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_DecisionCursor 
		DEALLOCATE v_DecisionCursor	

                set @InterfaceType='C'
		Execute ('DECLARE v_ChildWICursor CURSOR FAST_FORWARD FOR '+		
                'select TOP 100 ActivityName,ActivityId,PMCreateChildWI.TriggerId,PMTrigger.TriggerName from pmwactivitytable PMActivity WITH (NOLOCK), PMWCreateChildWITable PMCreateChildWI WITH (NOLOCK) , PMWTriggerDefTable PMTrigger WITH (NOLOCK)   WHERE  PMActivity.ActivityName=PMCreateChildWI.WorkStepName and PMCreateChildWI.WorkStepName in (' +@in_ObjectName+') and PMCreateChildWI.Type='''+@InterfaceType+''' and PMActivity.ProcessDefId ='+@in_processDefId+' and PMCreateChildWI.ProcessDefId = '+@in_processDefId+' and PMTrigger.ProcessDefId = '+@in_processDefId)
		OPEN    v_ChildWICursor
		FETCH   v_ChildWICursor
		INTO    @v_ActivityName,@ActivityId,@v_RuleId,@v_TriggerName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','Global','Trigger Properties',@ActivityId,@v_RuleId,@v_TriggerName)                                                               
				FETCH NEXT FROM v_ChildWICursor INTO @v_ActivityName,@ActivityId,@v_RuleId,@v_TriggerName
			END 
		END
		CLOSE v_ChildWICursor 
		DEALLOCATE v_ChildWICursor

		Execute ('DECLARE v_SubProcessCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 Pmwactivitytable.ActivityName,Pmwudtvarmappingtable.mappedobjectname 
		 from Pmwudtvarmappingtable Pmwudtvarmappingtable WITH (NOLOCK),Pmwimportedprocessdeftable Pmwimportedprocessdeftable WITH (NOLOCK),
         Pmwactivitytable Pmwactivitytable WITH (NOLOCK) where pmwactivitytable.processdefid  ='+@in_processDefId+' and 
         ( (pmwactivitytable.activitytype = 18	and pmwactivitytable.activitysubtype = 1)   
		  or ( pmwactivitytable.activitytype = 2 and pmwactivitytable.activitysubtype = 2 )
		 ) and  
          pmwudtvarmappingtable.processdefid = pmwimportedprocessdeftable.processdefid 
		 and pmwudtvarmappingtable.processdefid =  pmwactivitytable.processdefid  and  
  pmwimportedprocessdeftable.processdefid  = pmwactivitytable.processdefid and
      pmwudtvarmappingtable.mappedobjecttype = ''T'' and  pmwimportedprocessdeftable.FieldType = ''T''	
         and pmwactivitytable.activityid = pmwimportedprocessdeftable.activityid  and  
LTRIM(RTRIM(pmwudtvarmappingtable.mappedobjectname))  = LTRIM(RTRIM(pmwimportedprocessdeftable.importedfieldname)) ')
		OPEN    v_SubProcessCursor 
		FETCH   v_SubProcessCursor
       INTO    @v_ActivityName,@in_ObjectName
       WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ActivityName,'WorkStep','Complex Mapping','Global',@in_processDefId,@in_processDefId,@in_processDefId)					
				FETCH NEXT FROM v_SubProcessCursor INTO @v_ActivityName,@in_ObjectName
			END 
		END
		CLOSE v_SubProcessCursor 
		DEALLOCATE v_SubProcessCursor		

         set @InterfaceType='F'
		Execute ('DECLARE v_FormRulesActivityCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType from pmwactivitytable PMActivity WITH (NOLOCK), PMWExtInterfaceConditionTable PMInterfaceConditionTable WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMInterfaceConditionTable.ProcessDefId = '+@in_processDefId+' and PMInterfaceConditionTable.InterFaceType='''+@InterfaceType+''' and PMInterfaceConditionTable.Param2=PMActivity.ActivityName
  and PMInterfaceConditionTable.param2 in (' +@in_ObjectName+')')	
		OPEN    v_FormRulesActivityCursor 
		FETCH   v_FormRulesActivityCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('FormRules','Form',@v_ActivityName,'Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormRulesActivityCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType	
			END 
		END
		CLOSE v_FormRulesActivityCursor 
		DEALLOCATE v_FormRulesActivityCursor
		
		Execute ('DECLARE v_MaskActivityCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  VariableName
		FROM    PMWActivityMaskingInfoTable  WITH (NOLOCK)  WHERE ActivityName in ('+@in_ObjectName+') and ProcessDefId ='+@in_processDefId)	
		OPEN    v_MaskActivityCursor 
		FETCH   v_MaskActivityCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ActivityName,'Mask Data','Global','Mask Data Exceptions',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_MaskActivityCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_MaskActivityCursor 
		Deallocate v_MaskActivityCursor
		
	END
	Else if(@in_ObjectType='AR')		
			Begin			
		Execute ('DECLARE v_ExpiryWorkStepCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,ActivityId
		FROM    PMWActivitytable  WITH (NOLOCK)  WHERE ExpiryActivity in ('+@in_ObjectName+')  and ActivityName not in ('+@in_ObjectName+') and ProcessDefId ='+@in_processDefId)	
		OPEN    v_ExpiryWorkStepCursor 
		FETCH   v_ExpiryWorkStepCursor  
		INTO    @v_ActivityName,@ActivityId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('ExpiryActivity','WorkStep',@v_ActivityName,'Options',@ActivityId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExpiryWorkStepCursor INTO @v_ActivityName,@ActivityId
			END 
		END
		CLOSE v_ExpiryWorkStepCursor 
		Deallocate v_ExpiryWorkStepCursor
		Execute ('DECLARE v_PrimaryActivityCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,ActivityId
		FROM    PMWActivitytable  WITH (NOLOCK)  WHERE PrimaryActivity in ('+@in_ObjectName+') and ActivityName not in ('+@in_ObjectName+')  and ProcessDefId ='+@in_processDefId)	
		OPEN    v_PrimaryActivityCursor 
		FETCH   v_PrimaryActivityCursor  
		INTO    @v_ActivityName,@ActivityId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('PrimaryActivity','WorkStep',@v_ActivityName,'Collect',@ActivityId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_PrimaryActivityCursor INTO @v_ActivityName,@ActivityId
			END 
		END
		CLOSE v_PrimaryActivityCursor 
		Deallocate v_PrimaryActivityCursor		
				
		set @InterfaceType='D'
		Execute ('DECLARE v_DistributeCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType,PMActivity.ActivityId,RuleId,OperationOrderId from pmwactivitytable PMActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId = '+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1 in (' +@in_ObjectName+') and PMActivity.ActivityId not in (' +@in_ObjectId+') and PMRuleOperation.RuleType='''+@InterfaceType+''' and PMRuleOperation.operationType = 21')		
		OPEN    v_DistributeCursor 
		FETCH   v_DistributeCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType,@ActivityId,@v_RuleId,@v_OpOrderId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 				
				IF (@v_MapType = '1') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeRules','WorkStep',@v_ActivityName,'Distribute',@ActivityId,@v_RuleId,@v_OpOrderId)
				END
				ELSE IF (@v_MapType = '2') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeRules','WorkStep',@v_ActivityName,'Distribute',@ActivityId,@v_RuleId,@v_OpOrderId)
				END	
				END	
				FETCH NEXT FROM v_DistributeCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType,@ActivityId,@v_RuleId,@v_OpOrderId
			END 
		END
		CLOSE v_DistributeCursor 
		DEALLOCATE v_DistributeCursor		
		set @InterfaceType='X'
		Execute ('DECLARE v_DecisionCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,PMActivity.ActivityId,RuleId,OperationOrderId from pmwactivitytable PMActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId = '+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1 in (' +@in_ObjectName+') and PMActivity.ActivityId not in (' +@in_ObjectId+') and PMRuleOperation.RuleType='''+@InterfaceType+''' and PMRuleOperation.operationType = 4')
		OPEN    v_DecisionCursor 
		FETCH   v_DecisionCursor  
		INTO    @v_ActivityType,@v_ActivityName,@ActivityId,@v_RuleId,@v_OpOrderId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('RoutingCriteria','WorkStep',@v_ActivityName,'Data Based Exclusive',@ActivityId,@v_RuleId,@v_OpOrderId)					
				FETCH NEXT FROM v_DecisionCursor INTO @v_ActivityType,@v_ActivityName,@ActivityId,@v_RuleId,@v_OpOrderId
			END 
		END
		CLOSE v_DecisionCursor 
		DEALLOCATE v_DecisionCursor					
                
                set @InterfaceType='C'
		Execute ('DECLARE v_ChildWICursor CURSOR FAST_FORWARD FOR '+		
                'select TOP 100 ActivityName,ActivityId,PMCreateChildWI.TriggerId,PMTrigger.TriggerName from pmwactivitytable PMActivity WITH (NOLOCK), PMWCreateChildWITable PMCreateChildWI WITH (NOLOCK) , PMWTriggerDefTable PMTrigger WITH (NOLOCK)   WHERE  PMActivity.ActivityName=PMCreateChildWI.WorkStepName and PMCreateChildWI.WorkStepName in (' +@in_ObjectName+') and PMCreateChildWI.Type='''+@InterfaceType+''' and PMActivity.ProcessDefId ='+@in_processDefId+' and PMCreateChildWI.ProcessDefId = '+@in_processDefId+' and PMTrigger.ProcessDefId = '+@in_processDefId)
		OPEN    v_ChildWICursor
		FETCH   v_ChildWICursor
		INTO    @v_ActivityName,@ActivityId,@v_RuleId,@v_TriggerName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','Global','Trigger Properties',@ActivityId,@v_RuleId,@v_TriggerName)                                
				FETCH NEXT FROM v_ChildWICursor INTO @v_ActivityName,@ActivityId,@v_RuleId,@v_TriggerName
			END 
		END
		CLOSE v_ChildWICursor 
		DEALLOCATE v_ChildWICursor

				
		set @InterfaceType='F'
		Execute ('DECLARE v_FormRulesActivityRenCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType,PMInterfaceConditionTable.RuleId,PMInterfaceConditionTable.ConditionOrderId from pmwactivitytable PMActivity WITH (NOLOCK), PMWExtInterfaceConditionTable PMInterfaceConditionTable WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMInterfaceConditionTable.ProcessDefId = '+@in_processDefId+' and PMInterfaceConditionTable.InterFaceType='''+@InterfaceType+''' and PMInterfaceConditionTable.Param2=PMActivity.ActivityName
  and PMInterfaceConditionTable.param2 in (' +@in_ObjectName+')')	
		OPEN    v_FormRulesActivityRenCursor 
		FETCH   v_FormRulesActivityRenCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType,@v_RuleId,@v_CondOrderId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('FormRules','Form',@v_ActivityName,'Global',@in_processDefId,@v_RuleId,@v_CondOrderId)
				FETCH NEXT FROM v_FormRulesActivityRenCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType,@v_RuleId,@v_CondOrderId	
			END 
		END
		CLOSE v_FormRulesActivityRenCursor 
		DEALLOCATE v_FormRulesActivityRenCursor
		
		Execute ('DECLARE v_MaskActivityCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  VariableName,ActivityId
		FROM    PMWActivityMaskingInfoTable  WITH (NOLOCK)  WHERE ActivityName in ('+@in_ObjectName+') and ProcessDefId ='+@in_processDefId)	
		OPEN    v_MaskActivityCursor 
		FETCH   v_MaskActivityCursor  
		INTO    @v_ActivityName,@ActivityId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ActivityName,'MaskData','Global','Mask Data Exceptions',@in_processDefId,@ActivityId,@in_processDefId)
				FETCH NEXT FROM v_MaskActivityCursor INTO @v_ActivityName,@ActivityId
			END 
		END
		CLOSE v_MaskActivityCursor 
		Deallocate v_MaskActivityCursor

	END
	
	Else if(@in_ObjectType='TA')
		Begin
		set @InterfaceType='J'	
	
		Execute ('DECLARE v_TaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,ActivityId
		FROM    PMWActivityInterfaceAssocTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)

		OPEN    v_TaskCursor 
		FETCH   v_TaskCursor  
		INTO    @v_ActivityName,@ActivityId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'TaskTab',@ActivityId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TaskCursor INTO @v_ActivityName,@ActivityId
			END 
		END
		CLOSE v_TaskCursor 
		DEALLOCATE v_TaskCursor 				

		set @v_MapType='T'
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and PMPreCondition.param1='''+@in_ObjectName+''' and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'Task Condition',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
	end 
	
	Else if(@in_ObjectType='RT')
		Begin
		set @InterfaceType='J'	
	
		Execute ('DECLARE v_TaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,ActivityId
		FROM    PMWActivityInterfaceAssocTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)

		OPEN    v_TaskCursor 
		FETCH   v_TaskCursor  
		INTO    @v_ActivityName,@ActivityId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'TaskTab',@ActivityId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TaskCursor INTO @v_ActivityName,@ActivityId
			END 
		END

		CLOSE v_TaskCursor 
		DEALLOCATE v_TaskCursor 		

		set @v_MapType='T'
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and PMPreCondition.param1='''+@in_ObjectName+''' and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'Task Condition',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
		
	end 
	else if(@in_ObjectType='EV')
	Begin
	set @InterfaceType='T'
		Execute ('DECLARE v_ToDoRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param1
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and Param1 in ('+@in_ObjectName+')  and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ToDoRuleCursor 
		FETCH   v_ToDoRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ToDo','ToDo Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_ToDoRuleCursor 
		DEALLOCATE v_ToDoRuleCursor 
		
		Execute ('DECLARE v_ToDoRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param2
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and  Param2 in ('+@in_ObjectName+') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ToDoRuleCursor 
		FETCH   v_ToDoRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ToDo','ToDo Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_ToDoRuleCursor 
		DEALLOCATE v_ToDoRuleCursor 
		
		set @InterfaceType='D'
		Execute ('DECLARE v_DocRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param1
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and Param1 in ('+@in_ObjectName+')  and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_DocRuleCursor 
		FETCH   v_DocRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'Document','Document Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_DocRuleCursor 
		DEALLOCATE v_DocRuleCursor 
		
		Execute ('DECLARE v_DocRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param2
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and  Param2 in ('+@in_ObjectName+') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_DocRuleCursor 
		FETCH   v_DocRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'Document','Document Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DocRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_DocRuleCursor 
		DEALLOCATE v_DocRuleCursor 
		
		set @InterfaceType='I'
		Execute ('DECLARE v_ComplexRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param1
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and (Param1 in ('+@in_ObjectName+') or Param2 in ('+@in_ObjectName+') ) and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ComplexRuleCursor 
		FETCH   v_ComplexRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ComplextType','ComplextType Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ComplexRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_ComplexRuleCursor 
		DEALLOCATE v_ComplexRuleCursor 

	    Execute ('DECLARE v_ComplexRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param1
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and Param1 in ('+@in_ObjectName+')  and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ComplexRuleCursor 
		FETCH   v_ComplexRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ComplextType','ComplextType Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ComplexRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_ComplexRuleCursor 
		DEALLOCATE v_ComplexRuleCursor 		
		
		set @InterfaceType='E'
		Execute ('DECLARE v_ExcpRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param2
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and  Param2 in ('+@in_ObjectName+') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_ExcpRuleCursor 
		FETCH   v_ExcpRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'Exceptions','Exceptions Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExcpRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_ExcpRuleCursor 
		DEALLOCATE v_ExcpRuleCursor 
		
		set @InterfaceType='F'
		Execute ('DECLARE v_FormRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param1
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and Param1 in ('+@in_ObjectName+')  and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_FormRuleCursor 
		FETCH   v_FormRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'Form','Form Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_FormRuleCursor 
		DEALLOCATE v_FormRuleCursor
		
		Execute ('DECLARE v_FormRuleCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityId,Param2
		FROM    PMWExtInterfaceConditionTable WITH (NOLOCK)
		WHERE    InterfaceType='''+@InterfaceType+''' and Param2 in ('+@in_ObjectName+') and  ProcessDefId ='+@in_processDefId)
				
		OPEN    v_FormRuleCursor 
		FETCH   v_FormRuleCursor  
		INTO    @v_InterfaceElementId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'Form','Form Rule','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormRuleCursor INTO @v_InterfaceElementId,@v_ObjectName
			END 
		END
		CLOSE v_FormRuleCursor 
		DEALLOCATE v_FormRuleCursor
		
		Execute ('DECLARE v_ToDoDefCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ToDoName
		FROM    pmwtodolistdeftable WITH (NOLOCK)
		WHERE    AssociatedField in ('+@in_ObjectName+') and  ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ToDoDefCursor 
		FETCH   v_ToDoDefCursor  
		INTO    @v_ToDoName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ToDoName,'ToDo','ToDoDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ToDoDefCursor INTO @v_ToDoName
			END 
		END
		CLOSE v_ToDoDefCursor 
		DEALLOCATE v_ToDoDefCursor 
		
		
		Execute ('DECLARE v_HoldOptionsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,HoldTillVariable
		FROM    pmwactivityTable WITH (NOLOCK)
		WHERE    HoldTillVariable in ('+@in_ObjectName+') and  ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_HoldOptionsCursor 
		FETCH   v_HoldOptionsCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_HoldOptionsCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_HoldOptionsCursor 
		DEALLOCATE v_HoldOptionsCursor 
		
		set @tempstr='C'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID,FieldName
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName in ('+@in_ObjectName+') and ActivityId=0 and  ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable','SearchVariables','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId,@v_ObjectName
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		set @tempstr='R'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID,FieldName
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName in ('+@in_ObjectName+') and ActivityId=0 and  ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable','SearchResults','Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId,@v_ObjectName
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		
		Execute ('DECLARE v_MailTriggerCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TriggerName from pmwtriggerdeftable PMTrigger WITH (NOLOCK), pmwmailtriggertable PMMailTrigger WITH (NOLOCK)  WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+' and PMTrigger.TriggerId=PMMailTrigger.TriggerId and  (PMMailTrigger.CCuser in ('+@in_ObjectName+') or PMMailTrigger.touser in ('+@in_ObjectName+') or PMMailTrigger.fromuser in ('+@in_ObjectName+') ) and  PMMailTrigger.ProcessDefId ='+@in_processDefId)
			
		
		OPEN    v_MailTriggerCursor 
		FETCH   v_MailTriggerCursor
		INTO    @v_TriggerName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MailTriggerCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_MailTriggerCursor 
		DEALLOCATE v_MailTriggerCursor
		
		
		Execute ('DECLARE v_DataEntryTrigCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TriggerName from pmwtriggerdeftable PMTrigger WITH (NOLOCK), PMWDATAENTRYTRIGGERTABLE PMDataEntryTrigger WITH (NOLOCK)  WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+' and PMTrigger.TriggerId=PMDataEntryTrigger.TriggerId and  PMDataEntryTrigger.VariableName in ('+@in_ObjectName+') and  PMDataEntryTrigger.ProcessDefId ='+@in_processDefId)	
			
		
		OPEN    v_DataEntryTrigCursor 
		FETCH   v_DataEntryTrigCursor  
		INTO    @v_TriggerName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DataEntryTrigCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_DataEntryTrigCursor 
		DEALLOCATE v_DataEntryTrigCursor
		
		
		Execute ('DECLARE v_DataSetTrigCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 TriggerName from pmwtriggerdeftable PMTrigger WITH (NOLOCK), PMWDataSetTriggerTable PMDataSet WITH (NOLOCK)  WHERE   PMTrigger.ProcessDefId ='+@in_processDefId+' and PMTrigger.TriggerId=PMDataSet.TriggerId and  (PMDataSet.Param1 in ('+@in_ObjectName+') or PMDataSet.Param2 in ('+@in_ObjectName+') ) and  PMDataSet.ProcessDefId ='+@in_processDefId)		
			
		
		OPEN    v_DataSetTrigCursor 
		FETCH   v_DataSetTrigCursor  
		INTO    @v_TriggerName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','TriggerDefinition','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DataSetTrigCursor INTO @v_TriggerName
			END 
		END
		CLOSE v_DataSetTrigCursor 
		DEALLOCATE v_DataSetTrigCursor
		
		
		Execute ('DECLARE v_DataTabCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMWActAssoc.FieldName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWActivityAssociationTable PMWActAssoc WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMWActAssoc.ActivityID and PMWActAssoc.FieldName in ('+@in_ObjectName+') and  PMWActAssoc.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_DataTabCursor 
		FETCH   v_DataTabCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '26') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'OutputVariables',@in_processDefId,@in_processDefId,@in_processDefId)	
				END
				ELSE
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'Data',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_DataTabCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_DataTabCursor 
		DEALLOCATE v_DataTabCursor		
		
		
		Execute ('DECLARE v_ActionsCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,PMRuleCondition.param1 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWACTIONCONDITIONTABLE PMRuleCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleCondition.ActivityID and  PMRuleCondition.param1 in ('+@in_ObjectName+')  and  PMRuleCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_ActionsCondCursor 
		FETCH   v_ActionsCondCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ActionsCondCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsCondCursor 
		DEALLOCATE v_ActionsCondCursor
		
		Execute ('DECLARE v_ActionsCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,PMRuleCondition.param2 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWACTIONCONDITIONTABLE PMRuleCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleCondition.ActivityID and   PMRuleCondition.param2 in ('+@in_ObjectName+') and  PMRuleCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_ActionsCondCursor 
		FETCH   v_ActionsCondCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ActionsCondCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsCondCursor 
		DEALLOCATE v_ActionsCondCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,PMRuleOperation.param1 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWACTIONOPERATIONTABLE PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and  PMRuleOperation.param1 in ('+@in_ObjectName+')  and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,PMRuleOperation.param2 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWACTIONOPERATIONTABLE PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and  PMRuleOperation.param2 in ('+@in_ObjectName+')  and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,PMRuleOperation.param3 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWACTIONOPERATIONTABLE PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and   PMRuleOperation.param3 in ('+@in_ObjectName+') and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'WorkDesk_Actions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMRuleOperation.param1 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and  PMRuleOperation.param1 in ('+@in_ObjectName+')  and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)	
				END
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMRuleOperation.param2 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and  PMRuleOperation.param2 in ('+@in_ObjectName+') and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)	
				END
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		
		Execute ('DECLARE v_ActionsOperatCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMRuleOperation.param3 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleoperationtable PMRuleOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleOperation.ActivityID and  PMRuleOperation.param3 in ('+@in_ObjectName+') and  PMRuleOperation.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_ActionsOperatCursor 
		FETCH   v_ActionsOperatCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)	
				END
				FETCH NEXT FROM v_ActionsOperatCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsOperatCursor 
		DEALLOCATE v_ActionsOperatCursor
		
		set @InterfaceType='S'
		Execute ('DECLARE v_ActionsCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMRuleCondition.param1 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleconditiontable PMRuleCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleCondition.ActivityID and PMRuleCondition.RuleType !='''+@InterfaceType+''' and  PMRuleCondition.param1 in ('+@in_ObjectName+')  and  PMRuleCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_ActionsCondCursor 
		FETCH   v_ActionsCondCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)				
				END	
				FETCH NEXT FROM v_ActionsCondCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsCondCursor 
		DEALLOCATE v_ActionsCondCursor
		
		set @InterfaceType='S'
		Execute ('DECLARE v_ActionsCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMRuleCondition.param2 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwruleconditiontable PMRuleCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMRuleCondition.ActivityID and PMRuleCondition.RuleType !='''+@InterfaceType+''' and   PMRuleCondition.param2 in ('+@in_ObjectName+') and  PMRuleCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_ActionsCondCursor 
		FETCH   v_ActionsCondCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '7') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Routing Criteria',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)				
				END	
				FETCH NEXT FROM v_ActionsCondCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ActionsCondCursor 
		DEALLOCATE v_ActionsCondCursor
		
		Execute ('DECLARE v_ScanActionsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,PMScanAction.param1 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWSCANACTIONSTABLE PMScanAction WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMScanAction.ActivityID and PMScanAction.param1 in ('+@in_ObjectName+')  and  PMScanAction.ProcessDefId ='+@in_processDefId)		
				
		OPEN    v_ScanActionsCursor 
		FETCH   v_ScanActionsCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'WorkDesk_Scan',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ScanActionsCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ScanActionsCursor 
		DEALLOCATE v_ScanActionsCursor
		
		Execute ('DECLARE v_ScanActionsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityName,PMScanAction.param2 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWSCANACTIONSTABLE PMScanAction WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMScanAction.ActivityID and  PMScanAction.param2 in ('+@in_ObjectName+')  and  PMScanAction.ProcessDefId ='+@in_processDefId)		
				
		OPEN    v_ScanActionsCursor 
		FETCH   v_ScanActionsCursor  
		INTO    @v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable',@v_ActivityName,'WorkDesk_Scan',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ScanActionsCursor INTO @v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_ScanActionsCursor 
		DEALLOCATE v_ScanActionsCursor
		
		
		set @v_MapType='F'
	    set @InterfaceType='V'
		Execute ('DECLARE v_DocFwdMapCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName,PMMapping.MappedFieldName 
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwinitiateworkitemdeftable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityID and PMMapping.MapType='''+@v_MapType+''' and PMMapping.FieldType='''+@InterfaceType+''' and PMMapping.MappedFieldName in ('+@in_ObjectName+') and PMMapping.ProcessDefId ='+@in_processDefId)			


		OPEN    v_DocFwdMapCursor 
		FETCH   v_DocFwdMapCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '2') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables','InitiateWorkItem',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '18') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables','ForwardMapping',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_DocFwdMapCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName			
			END	
		END
		CLOSE v_DocFwdMapCursor 
		DEALLOCATE v_DocFwdMapCursor

		set @v_MapType='R'
		Execute ('DECLARE v_DocRevMapCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMMapping.ImportedFieldName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwinitiateworkitemdeftable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityID and PMMapping.MapType='''+@v_MapType+''' and PMMapping.FieldType='''+@InterfaceType+''' and PMMapping.ImportedFieldName in ('+@in_ObjectName+') and PMMapping.ProcessDefId ='+@in_processDefId)	

		OPEN    v_DocRevMapCursor 
		FETCH   v_DocRevMapCursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables','ReverseMapping',@v_ActivityName,@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocRevMapCursor INTO @v_ActivityName,@v_ObjectName			
			END	
		END
		CLOSE v_DocRevMapCursor 
		DEALLOCATE v_DocRevMapCursor
		
		Execute ('DECLARE v_QVarPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PFEType,SystemDefinedName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILDOCTYPETABLE PMSend WITH (NOLOCK),PMWVARMAPPINGTABLE PMVar WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.ElementId and PMSend.VariableId in ('+@in_ObjectId+') and  PMSend.ProcessDefId ='+@in_processDefId+' and PMVar.ProcessDefId='+@in_processDefId+' and PMVar.VariableId in ('+@in_ObjectId+')')
				
		OPEN    v_QVarPFECursor 
		FETCH   v_QVarPFECursor  
		INTO    @v_ActivityName,@v_MapType,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_MapType = 'P') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Send_Print',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = 'F') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Send_Fax',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = 'E') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Send_Email',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_QVarPFECursor INTO @v_ActivityName,@v_MapType,@v_ObjectName		
			END	
		END
		CLOSE v_QVarPFECursor 
		DEALLOCATE v_QVarPFECursor
		
		Execute ('DECLARE v_QVarPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMSend.ToMailId
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILTABLE PMSend WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.PFEInterfaceId and  PMSend.ToMailId in ('+@in_ObjectName+')  and  PMSend.ProcessDefId ='+@in_processDefId)
			
		OPEN    v_QVarPFECursor 
		FETCH   v_QVarPFECursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Send_Print',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_QVarPFECursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_QVarPFECursor 
		DEALLOCATE v_QVarPFECursor
		
		Execute ('DECLARE v_QVarPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMSend.CCMailId
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILTABLE PMSend WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.PFEInterfaceId and   PMSend.CCMailId in ('+@in_ObjectName+') and  PMSend.ProcessDefId ='+@in_processDefId)
			
		OPEN    v_QVarPFECursor 
		FETCH   v_QVarPFECursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Send_Print',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_QVarPFECursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_QVarPFECursor 
		DEALLOCATE v_QVarPFECursor
		
		Execute ('DECLARE v_QVarPFECursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMSend.SendermailId
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPRINTFAXEMAILTABLE PMSend WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMSend.PFEInterfaceId and  PMSend.SendermailId in ('+@in_ObjectName+') and  PMSend.ProcessDefId ='+@in_processDefId)
			
		OPEN    v_QVarPFECursor 
		FETCH   v_QVarPFECursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Send_Print',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_QVarPFECursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_QVarPFECursor 
		DEALLOCATE v_QVarPFECursor
		
		Execute ('DECLARE v_QVarExportCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMMapping.MappedFieldName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWDataMapTable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityId and  PMMapping.MappedFieldName in ('+@in_ObjectName+')  and  PMMapping.ProcessDefId ='+@in_processDefId)
		
		OPEN    v_QVarExportCursor 
		FETCH   v_QVarExportCursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Export',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_QVarExportCursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_QVarExportCursor 
		DEALLOCATE v_QVarExportCursor
		
		Execute ('DECLARE v_QVarExportCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName,PMMapping.MappedField
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWExtMethodParamMappingTable PMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMMapping.ActivityId and  PMMapping.MappedField in ('+@in_ObjectName+')  and  PMMapping.ProcessDefId ='+@in_processDefId)
				
		OPEN    v_QVarExportCursor 
		FETCH   v_QVarExportCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				 
				IF (@v_ActivityType = '20') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Export',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '22') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'WebService',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE IF (@v_ActivityType = '29') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'SAP',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'EntrySettings',@in_processDefId,@in_processDefId,@in_processDefId)
				END								
				FETCH NEXT FROM v_QVarExportCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName	
			END	
		END
		CLOSE v_QVarExportCursor 
		DEALLOCATE v_QVarExportCursor
		
		set @tempstr='C'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID,FieldName
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName in ('+@in_ObjectName+') and ActivityId<>0 and ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable','SearchVariables','Query',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId,@v_ObjectName
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		set @tempstr='R'
		Execute ('DECLARE v_SearchVarsCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityID,FieldName
		FROM    pmwsearchvariabletable WITH (NOLOCK)
		WHERE    scope='''+@tempstr+''' and FieldName in ('+@in_ObjectName+') and ActivityId<>0 and  ProcessDefId ='+@in_processDefId)	
		
		OPEN    v_SearchVarsCursor 
		FETCH   v_SearchVarsCursor  
		INTO    @ActivityId,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariable','SearchResults','Query',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_SearchVarsCursor INTO @ActivityId,@v_ObjectName
			END 
		END
		CLOSE v_SearchVarsCursor 
		DEALLOCATE v_SearchVarsCursor 
		
		

		Execute ('DECLARE v_DocArchiveCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMWArchive.AssocVar
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWARCHIVEDATAMAPTABLE PMWArchive WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWArchive.ArchiveId and PMWArchive.AssocVar in ('+@in_ObjectName+') and  PMWArchive.ProcessDefId ='+@in_processDefId)		

		OPEN    v_DocArchiveCursor 
		FETCH   v_DocArchiveCursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Archive',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocArchiveCursor INTO @v_ActivityName	,@v_ObjectName	
			END	
		END
		CLOSE v_DocArchiveCursor 
		DEALLOCATE v_DocArchiveCursor	

		Execute ('DECLARE v_CCMMappingCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMWCCMMapping.MappedName 
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMW_OMSTemplateMappingTable PMWCCMMapping WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWCCMMapping.ActivityId and PMWCCMMapping.MappedName in ('+@in_ObjectName+') and  PMWCCMMapping.ProcessDefId ='+@in_processDefId)		

		OPEN    v_CCMMappingCursor 
		FETCH   v_CCMMappingCursor  
		INTO    @v_ActivityName,@v_ObjectName	
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'CCM Template Mapping',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_CCMMappingCursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_CCMMappingCursor 
		DEALLOCATE v_CCMMappingCursor			
		

		Execute ('DECLARE v_DocSearchCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMWSearch.MappedFieldName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWDocTypeSearchMapping PMWSearch WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWSearch.ActivityId and PMWSearch.MappedFieldName in ('+@in_ObjectName+') and  PMWSearch.ProcessDefId ='+@in_processDefId)	

		OPEN    v_DocSearchCursor 
		FETCH   v_DocSearchCursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'WorkDesk_DMSSearch',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_DocSearchCursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_DocSearchCursor 
		DEALLOCATE v_DocSearchCursor	
		

		Execute ('DECLARE v_MessageEventCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMWSoapReq.SearchField
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWSoapReqCorrelationTable PMWSoapReq WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWSoapReq.ActivityId and PMWSoapReq.SearchField in ('+@in_ObjectName+') and  PMWSoapReq.ProcessDefId ='+@in_processDefId)		

		OPEN    v_MessageEventCursor 
		FETCH   v_MessageEventCursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Message',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MessageEventCursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_MessageEventCursor 
		DEALLOCATE v_MessageEventCursor

		Execute ('DECLARE v_JMSConsCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,PMWJMSCons.ProcessVariableName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWJMSSubscribeTable PMWJMSCons WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWJMSCons.ActivityId and PMWJMSCons.ProcessVariableName in ('+@in_ObjectName+') and  PMWJMSCons.ProcessDefId ='+@in_processDefId)	

		OPEN    v_JMSConsCursor 
		FETCH   v_JMSConsCursor  
		INTO    @v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'JMS Consumer',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_JMSConsCursor INTO @v_ActivityName,@v_ObjectName		
			END	
		END
		CLOSE v_JMSConsCursor 
		DEALLOCATE v_JMSConsCursor

		

		Execute ('DECLARE v_ExpiryCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName,PMWDuration.WFDays
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwdurationtable PMWDuration WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.expiry=PMWDuration.DurationId and PMWDuration.WFDays in ('+@in_ObjectName+') and  PMWDuration.ProcessDefId ='+@in_processDefId)

		OPEN    v_ExpiryCursor 
		FETCH   v_ExpiryCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '4') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				END					
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_ExpiryCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName	
			END			
		END
		CLOSE v_ExpiryCursor 
		DEALLOCATE v_ExpiryCursor

		Execute ('DECLARE v_ExpiryCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName,PMWDuration.WFHours 
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwdurationtable PMWDuration WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.expiry=PMWDuration.DurationId and  PMWDuration.WFHours in ('+@in_ObjectName+')  and  PMWDuration.ProcessDefId ='+@in_processDefId)

		OPEN    v_ExpiryCursor 
		FETCH   v_ExpiryCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '4') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				END					
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_ExpiryCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName	
			END			
		END
		CLOSE v_ExpiryCursor 
		DEALLOCATE v_ExpiryCursor
		
		Execute ('DECLARE v_ExpiryCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName,PMWDuration.WFMinutes
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwdurationtable PMWDuration WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.expiry=PMWDuration.DurationId and  PMWDuration.WFMinutes in ('+@in_ObjectName+')  and  PMWDuration.ProcessDefId ='+@in_processDefId)

		OPEN    v_ExpiryCursor 
		FETCH   v_ExpiryCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '4') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				END					
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_ExpiryCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName	
			END			
		END
		CLOSE v_ExpiryCursor 
		DEALLOCATE v_ExpiryCursor
		
		Execute ('DECLARE v_ExpiryCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityType,ActivityName,PMWDuration.WFSeconds
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), pmwdurationtable PMWDuration WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.expiry=PMWDuration.DurationId and  PMWDuration.WFSeconds in ('+@in_ObjectName+') and  PMWDuration.ProcessDefId ='+@in_processDefId)

		OPEN    v_ExpiryCursor 
		FETCH   v_ExpiryCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '4') 
				BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				END					
				ELSE 
				BEGIN
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				FETCH NEXT FROM v_ExpiryCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName	
			END			
		END
		CLOSE v_ExpiryCursor 
		DEALLOCATE v_ExpiryCursor
				

		Execute ('DECLARE v_FormPDACursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,SystemDefinedName
		FROM    pmwactivitytable PMActivity WITH (NOLOCK), PMWPDA_FormTable PMWPDA WITH (NOLOCK),PMWVARMAPPINGTABLE PMVar WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+
		' and PMActivity.ActivityId=PMWPDA.ActivityId and PMWPDA.variableid in ('+@in_ObjectId+') and  PMWPDA.ProcessDefId ='+@in_processDefId+' and 
		 PMVar.ProcessDefId='+@in_processDefId+' and PMVar.variableid in ('+@in_ObjectId+')')

		OPEN    v_FormPDACursor 
		FETCH   v_FormPDACursor  
		INTO    @v_ActivityName,@v_ObjectName	
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 				
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'ExternalVariables',@v_ActivityName,'WorkDesk_PDA_Form',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_FormPDACursor INTO @v_ActivityName,@v_ObjectName			
			END	
		END
		CLOSE v_FormPDACursor 
		DEALLOCATE v_FormPDACursor	
		
		set @v_MapType='V'
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMPreCondition.param1 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and PMPreCondition.param1 in   ('+@in_ObjectName+')  and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'External Variables',@v_ActivityName,'Task Condition',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
		
      /*pmwTaskRuleOperationTable validate call start here*/
		Execute ('DECLARE v_TaskOprCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMOperation.param1 FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWTaskRuleOperationTable PMOperation WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMOperation.ActivityID and (PMOperation.param1='+@in_ObjectName+' or PMOperation.param2='+@in_ObjectName+' or PMOperation.param3='+@in_ObjectName+')   and PMOperation.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskOprCursor 
		FETCH   v_TaskOprCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'External Variables',@v_ActivityName,'Task Operation',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskOprCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_TaskOprCursor 
		DEALLOCATE v_TaskOprCursor
		/*pmwTaskRuleOperationTable validate call end here*/
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMPreCondition.param2  FROM    PMWActivityTable PMWActivity WITH (NOLOCK), pmwTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and  PMPreCondition.param2 in ('+@in_ObjectName+') and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'External Variable',@v_ActivityName,'Task Condition',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
		
	    Execute ('DECLARE v_TaskMappingCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName,PMMapping.VariableName FROM    PMWActivityTable PMWActivity WITH (NOLOCK), PMWTaskVariableMappingTable PMMapping WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMMapping.ActivityID and PMMapping.VariableName in ('+@in_ObjectName+') and PMMapping.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskMappingCursor 
		FETCH   v_TaskMappingCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_ObjectName	
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ObjectName,'External Variable',@v_ActivityName,'Task_VariableMapping',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskMappingCursor INTO @v_ActivityType,@v_ActivityName,@v_ObjectName	
			END 
		END
		CLOSE v_TaskMappingCursor 
		DEALLOCATE v_TaskMappingCursor
		
		set @tempstr='Y'
		Execute ('DECLARE v_MappingExcCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  UserDefinedName FROM PMWVarMappingTable PMMaskExcept WITH (NOLOCK) WHERE    PMMaskExcept.UserDefinedName in ('+@in_ObjectName+') and PMMaskExcept.IsMasked = '''+@tempstr+''' and  PMMaskExcept.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_MappingExcCursor 
		FETCH   v_MappingExcCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ActivityName,'External Variable','Mask Data','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_MappingExcCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_MappingExcCursor 
		DEALLOCATE v_MappingExcCursor
		
		set @tempstr='Y'
		Execute ('DECLARE v_EncryptDataCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  UserDefinedName FROM PMWVarMappingTable PMEncryptVar WITH (NOLOCK) WHERE    PMEncryptVar.UserDefinedName in ('+@in_ObjectName+') and PMEncryptVar.IsEncrypted = '''+@tempstr+''' and  PMEncryptVar.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_EncryptDataCursor 
		FETCH   v_EncryptDataCursor  
		INTO    @v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ActivityName,'External Variable','Encrypt Data','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_EncryptDataCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_EncryptDataCursor 
		DEALLOCATE v_EncryptDataCursor
		
			
	end 
	else if(@in_ObjectType='DT')
	Begin
	set @v_MapType='T'
	Execute ('DECLARE v_ComplexMappingCursor CURSOR FAST_FORWARD FOR '+
		'SELECT TOP 100 MappedObjectType from PMWUDTVARMAPPINGTABLE where  MappedObjectName ='''+@in_ObjectName+''' and MappedObjectType='''+@v_MapType+''' and ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_ComplexMappingCursor 
		FETCH   v_ComplexMappingCursor  
		INTO    @v_ObjectName	
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Table','Queue Variable','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_ComplexMappingCursor INTO @v_ObjectName	
			END 
		END
		CLOSE v_ComplexMappingCursor 
		DEALLOCATE v_ComplexMappingCursor
		
		Execute ('DECLARE v_TableMappingCursor CURSOR FAST_FORWARD FOR '+
		'SELECT TOP 100 TABLEName from PMWEXTDBCONFTABLE where ExtObjID=1 and TABLEName ='''+@in_ObjectName+''' and ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TableMappingCursor 
		FETCH   v_TableMappingCursor  
		INTO    @v_ObjectName	
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Table','External Table','Global',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TableMappingCursor INTO @v_ObjectName	
			END 
		END
		CLOSE v_TableMappingCursor 
		DEALLOCATE v_TableMappingCursor
	
	end
select objectName as "objName" ,objectType as "objType",TabName as "objTab", Association as "objAssociation", ActId as "ObjActId", RuleId as "ObjRuleId", OpOrderId as "ObjOpOrderId" from PMValidateObjectTemp order by objectName,objectType,Association
end		


go

If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'spPMValidateObjectWF' AND xType = 'P')
BEGIN
	Drop Procedure spPMValidateObjectWF
	PRINT 'As Procedure spPMValidateObjectWF exists dropping old procedure ........... '
END
PRINT 'Creating procedure spPMValidateObjectWF ........... '
go

Create procedure spPMValidateObjectWF
(
	@in_ObjectName nvarchar(4000),
	@in_ObjectType nvarchar(50),
	@in_ObjectId nvarchar(1000),
	@in_processDefId nvarchar(50),
	@in_DeviceType nvarchar(2)    
)
as
begin
DECLARE 
@v_ActivityName		nvarchar(50),
@InterfaceType 		nvarchar(50),
@ActivityId nvarchar(50),
@v_MapType nvarchar(2),
@v_TriggerName nvarchar(50),
@v_ActivityType nvarchar(2),
@v_RuleId nvarchar(50),
@v_OpOrderId nvarchar(50)
exec('truncate table PMValidateObjectTemp');
--exec('insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName) values (''temp1'',''temp1'',''temp1'',''temp1'')');
	if(@in_ObjectType='AC')		
		Begin
		Execute ('DECLARE v_TargetWorkStepCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    Activitytable  WITH (NOLOCK)  WHERE  TargetActivity in ('+@in_ObjectId+') and activityid not in ('+@in_ObjectId+') and ProcessDefId ='+@in_processDefId)	
			
		
		OPEN    v_TargetWorkStepCursor 
		FETCH   v_TargetWorkStepCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('TargetActivity','WorkStep',@v_ActivityName,'Activity',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TargetWorkStepCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_TargetWorkStepCursor 
		Deallocate v_TargetWorkStepCursor
		Execute ('DECLARE v_ExpiryWorkStepCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    Activitytable  WITH (NOLOCK)  WHERE ExpiryActivity in ('+@in_ObjectName+')  and ActivityName not in ('+@in_ObjectName+') and ProcessDefId ='+@in_processDefId)	
		OPEN    v_ExpiryWorkStepCursor 
		FETCH   v_ExpiryWorkStepCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('ExpiryActivity','WorkStep',@v_ActivityName,'Options',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_ExpiryWorkStepCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_ExpiryWorkStepCursor 
		Deallocate v_ExpiryWorkStepCursor
		Execute ('DECLARE v_PrimaryActivityCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName
		FROM    Activitytable  WITH (NOLOCK)  WHERE PrimaryActivity in ('+@in_ObjectName+') and ActivityName not in ('+@in_ObjectName+')  and ProcessDefId ='+@in_processDefId)	
		OPEN    v_PrimaryActivityCursor 
		FETCH   v_PrimaryActivityCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('PrimaryActivity','WorkStep',@v_ActivityName,'Collect',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_PrimaryActivityCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_PrimaryActivityCursor 
		Deallocate v_PrimaryActivityCursor
		
		Execute ('DECLARE v_ReplyAfterActCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType from Activitytable  WITH (NOLOCK) WHERE    AssociatedActivityId in ('+@in_ObjectId+')  and ActivityId not in ('+@in_ObjectId+')  and ProcessDefId ='+@in_processDefId)	
		OPEN    v_ReplyAfterActCursor 
		FETCH   v_ReplyAfterActCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '1') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('ReplyActivity','WorkStep',@v_ActivityName,'Receive',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_ActivityType = '24') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('ReplyActivity','WorkStep',@v_ActivityName,'Request Consumer SOAP',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				ELSE IF (@v_ActivityType = '6') 
				BEGIN
				IF (@v_MapType = '1') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeActivity','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = '2') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeActivity','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				END	
				FETCH NEXT FROM v_ReplyAfterActCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType
			END 
		END
		CLOSE v_ReplyAfterActCursor 
		DEALLOCATE v_ReplyAfterActCursor		
		set @InterfaceType='D'
		Execute ('DECLARE v_DistributeCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType from Activitytable PMActivity WITH (NOLOCK), ruleoperationtable PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId = '+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1 in (' +@in_ObjectName+') and PMActivity.ActivityId not in (' +@in_ObjectId+') and PMRuleOperation.RuleType='''+@InterfaceType+''' and PMRuleOperation.operationType = 21')		
		OPEN    v_DistributeCursor 
		FETCH   v_DistributeCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				IF (@v_ActivityType = '5') 
				BEGIN 				
				IF (@v_MapType = '1') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeRules','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END
				ELSE IF (@v_MapType = '2') 
				BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('DistributeRules','WorkStep',@v_ActivityName,'Distribute',@in_processDefId,@in_processDefId,@in_processDefId)
				END	
				END	
				FETCH NEXT FROM v_DistributeCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType
			END 
		END
		CLOSE v_DistributeCursor 
		DEALLOCATE v_DistributeCursor		
		set @InterfaceType='X'
		Execute ('DECLARE v_DecisionCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName from Activitytable PMActivity WITH (NOLOCK), ruleoperationtable PMRuleOperation WITH (NOLOCK)  WHERE   PMActivity.ProcessDefId ='+@in_processDefId+' and PMRuleOperation.ProcessDefId = '+@in_processDefId+' and PMActivity.ActivityId=PMRuleOperation.ActivityID and PMRuleOperation.param1 in (' +@in_ObjectName+') and PMActivity.ActivityId not in (' +@in_ObjectId+') and PMRuleOperation.RuleType='''+@InterfaceType+''' and PMRuleOperation.operationType = 4')
		OPEN    v_DecisionCursor 
		FETCH   v_DecisionCursor  
		INTO    @v_ActivityType,@v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('RoutingCriteria','WorkStep',@v_ActivityName,'Data Based Exclusive',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_DecisionCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_DecisionCursor 
		DEALLOCATE v_DecisionCursor	

                set @InterfaceType='C'
		Execute ('DECLARE v_ChildWICursor CURSOR FAST_FORWARD FOR '+		
                'select TOP 100 ActivityName,ActivityId,PMCreateChildWI.TriggerId,PMTrigger.TriggerName from activitytable PMActivity WITH (NOLOCK), WFCreateChildWITable PMCreateChildWI WITH (NOLOCK) , TriggerDefTable PMTrigger WITH (NOLOCK)   WHERE  PMActivity.ActivityName=PMCreateChildWI.WorkStepName and PMCreateChildWI.WorkStepName in (' +@in_ObjectName+') and PMCreateChildWI.Type='''+@InterfaceType+''' and PMActivity.ProcessDefId ='+@in_processDefId+' and PMCreateChildWI.ProcessDefId = '+@in_processDefId+' and PMTrigger.ProcessDefId = '+@in_processDefId)
		OPEN    v_ChildWICursor
		FETCH   v_ChildWICursor
		INTO    @v_ActivityName,@ActivityId,@v_RuleId,@v_TriggerName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN				
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_TriggerName,'Trigger','Global','Trigger Properties',@ActivityId,@v_RuleId,@v_TriggerName)                                                               
				FETCH NEXT FROM v_ChildWICursor INTO @v_ActivityName,@ActivityId,@v_RuleId,@v_TriggerName
			END 
		END
		CLOSE v_ChildWICursor 
		DEALLOCATE v_ChildWICursor

       set @InterfaceType='F'
		Execute ('DECLARE v_FormRulesActivityCursor CURSOR FAST_FORWARD FOR '+
		'select TOP 100 ActivityType,ActivityName,ActivitySubType from activitytable Activity WITH (NOLOCK), WFExtInterfaceConditionTable InterfaceConditionTable WITH (NOLOCK)  WHERE   Activity.ProcessDefId ='+@in_processDefId+' and InterfaceConditionTable.ProcessDefId = '+@in_processDefId+' and InterfaceConditionTable.InterFaceType='''+@InterfaceType+''' and InterfaceConditionTable.Param2=Activity.ActivityName
  and InterfaceConditionTable.param2 in (' +@in_ObjectName+')')	
		OPEN    v_FormRulesActivityCursor 
		FETCH   v_FormRulesActivityCursor  
		INTO    @v_ActivityType,@v_ActivityName,@v_MapType
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values ('FormRules','Form',@v_ActivityName,'Global',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_FormRulesActivityCursor INTO @v_ActivityType,@v_ActivityName,@v_MapType	
			END 
		END
		CLOSE v_FormRulesActivityCursor 
		DEALLOCATE v_FormRulesActivityCursor
		
		Execute ('DECLARE v_MaskActivityCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  VariableName
		FROM    WFActivityMaskingInfoTable  WITH (NOLOCK)  WHERE ActivityName in ('+@in_ObjectName+') and ProcessDefId ='+@in_processDefId)	
		OPEN    v_MaskActivityCursor 
		FETCH   v_MaskActivityCursor  
		INTO    @v_ActivityName
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@v_ActivityName,'Mask Data','Global','Mask Data Exceptions',@in_processDefId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_MaskActivityCursor INTO @v_ActivityName
			END 
		END
		CLOSE v_MaskActivityCursor 
		Deallocate v_MaskActivityCursor
		
	END		
	
	Else if(@in_ObjectType='TA')
		Begin
		set @InterfaceType='J'	
	
		Execute ('DECLARE v_TaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,ActivityId
		FROM    ActivityInterfaceAssocTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)

		OPEN    v_TaskCursor 
		FETCH   v_TaskCursor  
		INTO    @v_ActivityName,@ActivityId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'TaskTab',@ActivityId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TaskCursor INTO @v_ActivityName,@ActivityId
			END 
		END
		CLOSE v_TaskCursor 
		DEALLOCATE v_TaskCursor 				

		set @v_MapType='T'
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM  ActivityTable PMWActivity WITH (NOLOCK), WFTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and PMPreCondition.param1='''+@in_ObjectName+''' and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'Task_Preconditions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
		
	end 
	
	Else if(@in_ObjectType='RT')
		Begin
		set @InterfaceType='J'	
	
		Execute ('DECLARE v_TaskCursor CURSOR FAST_FORWARD FOR '+ 
		'SELECT  TOP 100  ActivityName,ActivityId
		FROM    ActivityInterfaceAssocTable WITH (NOLOCK)
		WHERE   ProcessDefId ='+@in_processDefId+' and InterfaceType='''+@InterfaceType+''' and InterfaceElementId='+@in_ObjectId)

		OPEN    v_TaskCursor 
		FETCH   v_TaskCursor  
		INTO    @v_ActivityName,@ActivityId
		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				insert into PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'TaskTab',@ActivityId,@in_processDefId,@in_processDefId)
				FETCH NEXT FROM v_TaskCursor INTO @v_ActivityName,@ActivityId
			END 
		END

		CLOSE v_TaskCursor 
		DEALLOCATE v_TaskCursor 		

		set @v_MapType='T'
		Execute ('DECLARE v_TaskCondCursor CURSOR FAST_FORWARD FOR '+
		'SELECT  TOP 100  ActivityType,ActivityName FROM  ActivityTable PMWActivity WITH (NOLOCK), WFTaskRulePreConditionTable PMPreCondition WITH (NOLOCK) WHERE   PMWActivity.ProcessDefId ='+@in_processDefId+' and PMWActivity.ActivityId=PMPreCondition.ActivityID and PMPreCondition.param1='''+@in_ObjectName+''' and  PMPreCondition.RuleType='''+@v_MapType+''' and PMPreCondition.ProcessDefId ='+@in_processDefId)		
		
		OPEN    v_TaskCondCursor 
		FETCH   v_TaskCondCursor  
		INTO    @v_ActivityType,@v_ActivityName
 		WHILE (@@FETCH_STATUS  <> -1) 
		BEGIN 
			IF (@@FETCH_STATUS <> -2) 
			BEGIN 
				INSERT INTO PMValidateObjectTemp (objectName ,objectType,Association,TabName,ActId,RuleId,OpOrderId) values (@in_ObjectName,'Task',@v_ActivityName,'Task_Preconditions',@in_processDefId,@in_processDefId,@in_processDefId)				
				FETCH NEXT FROM v_TaskCondCursor INTO @v_ActivityType,@v_ActivityName
			END 
		END
		CLOSE v_TaskCondCursor 
		DEALLOCATE v_TaskCondCursor
		
	end 
	
select objectName as "objName" ,objectType as "objType",TabName as "objTab", Association as "objAssociation", ActId as "ObjActId", RuleId as "ObjRuleId", OpOrderId as "ObjOpOrderId" from PMValidateObjectTemp order by objectName,objectType,Association
end		


go


go

/*-------------------------------------------------------------------------------------------------------------------
		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
	Group						: Genesis
	Product / Project			: BRMS
	File NAME					: create_cab_brms2.sql (MS Sql Server)
	Author						: Fateh Singh
	Date written (DD/MM/YYYY)	: 12/04/2017
	Description					: For creating a fresh cabinet for BRMS 2.0
--------------------------------------------------------------------------------------------------------------------
			CHANGE HISTORY
--------------------------------------------------------------------------------------------------------------------
Date		Change By		Change Description (Bug No. (If Any))
14/03/2018	   Amul Kumar		Changed size of RuleDesc column in BRRuleDataTable AND BRRuleDataTableDraft
--------------------------------------------------------------------------------------------------------------------*/
If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'create_cab_brms2_0' AND xType = 'P')
BEGIN
	Drop Procedure create_cab_brms2_0
	PRINT 'As Procedure create_cab_brms2_0 exists dropping old procedure ........... '
END
go

CREATE PROCEDURE create_cab_brms2_0 AS
BEGIN
	IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BREntityGroupTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BREntityGroupTable
				(
					ObjectId integer NOT NULL,
					EntityName nvarchar(255) NOT NULL,
					EntityDesc nvarchar(1024),
					SourcePath nvarchar(255),
					EntityAlias nvarchar(255) NOT NULL,
					CONSTRAINT pk_BREntityGroupTable Primary Key (ObjectID),
					CONSTRAINT uk_BREntityGroupTable Unique(EntityName)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BREntityClassTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BREntityClassTable
				(
					ObjectId integer NOT NULL,
					EntityName nvarchar(255) NOT NULL,
					EntityDesc nvarchar(1024),
					ParentID integer NOT NULL,
					SourcePath nvarchar(255),
					EntityAlias nvarchar(255) NOT NULL,
					CONSTRAINT pk_BREntityClassTable Primary Key (ObjectID),
					CONSTRAINT uk_BREntityClassTable Unique(ParentId,EntityName)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BREntityMemberTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BREntityMemberTable
				(
					ObjectId integer NOT NULL,
					EntityName nvarchar(255) NOT NULL,
					EntityDesc nvarchar(1024),
					EntityType integer NOT NULL,
					ParentID integer NOT NULL,
					EntityGroupId  integer NOT NULL,
					SourcePath nvarchar(255),
					ValueList nvarchar(1024),
					DefaultValue nvarchar(255),
					MINVALUE nvarchar(50) NOT NULL default '' '',
					MAXVALUE nvarchar(50) NOT NULL default '' '',
					PRECISIONVALUE integer NOT NULL default 2,
					ROUNDINGMODE integer NOT NULL default 0,
					EntityAlias nvarchar(255) NOT NULL,
					CONSTRAINT pk_BREntityMemberTable Primary Key (ObjectID),
					CONSTRAINT uk_BREntityMemberTable Unique(ParentId,EntityName),
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleSetDataTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleSetDataTable
				(
					RuleID int NOT NULL ,
					RuleName nvarchar(255) NOT NULL,
					RuleDesc nvarchar(1024) ,
					VersionNo numeric(3,1) NOT NULL,
					Status nvarchar(255) NOT NULL,
					Creator nvarchar(255) NOT NULL,
					LastModifiedBy nvarchar(255) NOT NULL,
					LastModificationDate DateTime NOT NULL,
					CreationDate DateTime NOT NULL,
					FDIndex integer NOT NULL,
					CheckedOutBy nvarchar(255) NOT NULL,
					CheckerName nvarchar(255),
					Comments nvarchar(1024),
					CheckOutFlag nvarchar(1) NOT NULL,
					LatestCount 	int DEFAULT 0,
					SetLatestBy 	nvarchar(255),
					RuleSetVersionCheckOutFlag 	nvarchar(255) NOT NULL default ''N'',
					DeployedAsWebservice nvarchar(1) NOT NULL default ''Y'',
					ENCRYPTION_KEY nvarchar(255) NOT NULL Default '' '',
					ENCRYPTED nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRRuleSetDataTable Primary Key (RuleID,VersionNo),
					CONSTRAINT uk_BRRuleSetDataTable Unique(RuleName, VersionNo)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRPackageDataTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRPackageDataTable
				(
					RuleID int NOT NULL ,
					RuleOrderID int NOT NULL,
					RuleName nvarchar(255) NOT NULL,
					RuleDesc nvarchar(1024) ,
					ParentID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					Creator nvarchar(255) NOT NULL,
					LastModifiedBy nvarchar(255) NOT NULL,
					LastModificationDate DateTime NOT NULL,
					CreationDate DateTime NOT NULL,
					FDIndex integer NOT NULL,
					ExecutionMode nvarchar(1) NOT NULL,
					ENCRYPTED nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRPackageDataTable Primary Key (RuleID,ParentID,VersionNo),
					CONSTRAINT uk_BRPackageDataTable Unique(RuleName,ParentID,VersionNo)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleDataTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleDataTable
				(
					RuleID int NOT NULL ,
					RuleOrderID int NOT NULL,
					RuleName nvarchar(255) NOT NULL,
					RuleDesc nvarchar(max) ,
					ParentID integer NOT NULL,
					RuleSetId integer NOT NULL,
					Type integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					EffectiveDate DateTime,
					ExpirationDate DateTime,
					Status nvarchar(255) NOT NULL,
					Creator nvarchar(255) NOT NULL,
					LastModifiedBy nvarchar(255) NOT NULL,
					LastModificationDate DateTime NOT NULL,
					CreationDate DateTime NOT NULL,
					CheckedOutBy nvarchar(255) NOT NULL,
					CheckerName nvarchar(255),
					Comments nvarchar(1024),
					CheckOutFlag nvarchar(1) NOT NULL,
					Priority integer NOT NULL,
					ActionPerformed nvarchar(255) NOT NULL,
					ISValid nvarchar(1) NOT NULL,
					OtherwiseRule nvarchar(1) NOT NULL,
					ElseExist nvarchar(1) NOT NULL,
					BreakRule nvarchar(1) NOT NULL,
					MaxElseIfID nvarchar(15) NOT NULL,
					NeverExpire nvarchar(1) NOT NULL default ''Y'',
					ENCRYPTED nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRRuleDataTable Primary Key (RuleSetId,ParentID,RuleID,VersionNo),
					CONSTRAINT uk_BRRuleDataTable Unique(RuleSetId,RuleName,VersionNo)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRDecisionRuleDataTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRDecisionRuleDataTable
				(
					RuleID int NOT NULL ,
					RuleOrderID int NOT NULL,
					RuleName nvarchar(255) NOT NULL,
					ParentID integer NOT NULL,
					PackageID integer NOT NULL,
					RulesetID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					OtherwiseRule nvarchar(1) NOT NULL,
					CONSTRAINT pk_BRDecisionRuleDataTable Primary Key (RuleID,VersionNo ),
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleSetDataTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleSetDataTableDraft
				(
					RuleID int NOT NULL ,
					RuleName nvarchar(255) NOT NULL,
					RuleDesc nvarchar(1024) ,
					VersionNo numeric(3,1) NOT NULL,
					Status nvarchar(255) NOT NULL,
					Creator nvarchar(255) NOT NULL,
					LastModifiedBy nvarchar(255) NOT NULL,
					LastModificationDate DateTime NOT NULL,
					CreationDate DateTime NOT NULL,
					FDIndex integer NOT NULL,
					CheckedOutBy nvarchar(255) NOT NULL,
					CheckerName nvarchar(255),
					Comments nvarchar(1024),
					CheckOutFlag nvarchar(1) NOT NULL,
					LatestCount 	int DEFAULT 0,
					SetLatestBy 	nvarchar(255),
					RuleSetVersionCheckOutFlag 	nvarchar(255) NOT NULL default ''N'',
					ENCRYPTION_KEY nvarchar(255) NOT NULL default '' '',
					ENCRYPTED nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRRuleSetDataTableDraft Primary Key (RuleID,VersionNo ),
					CONSTRAINT uk_BRRuleSetDataTableDraft Unique(RuleName, VersionNo ),
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRPackageDataTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRPackageDataTableDraft
				(
					RuleID int NOT NULL ,
					RuleOrderID int NOT NULL,
					RuleName nvarchar(255) NOT NULL,
					RuleDesc nvarchar(1024) ,
					ParentID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					Creator nvarchar(255) NOT NULL,
					LastModifiedBy nvarchar(255) NOT NULL,
					LastModificationDate DateTime NOT NULL,
					CreationDate DateTime NOT NULL,
					FDIndex integer NOT NULL,
					ExecutionMode nvarchar(1) NOT NULL,
					ENCRYPTED nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRPackageDataTableDraft Primary Key (RuleID,VersionNo ),
					CONSTRAINT uk_BRPackageDataTableDraft Unique(RuleName, ParentId, VersionNo ),
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleDataTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleDataTableDraft
				(		
					RuleID int NOT NULL ,
					RuleOrderID int NOT NULL,
					RuleName nvarchar(255) NOT NULL,
					RuleDesc nvarchar(max) ,
					ParentID integer NOT NULL,
					RuleSetId integer NOT NULL,
					Type integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					EffectiveDate DateTime,
					ExpirationDate DateTime,
					Status nvarchar(255) NOT NULL,
					Creator nvarchar(255) NOT NULL,
					LastModifiedBy nvarchar(255) NOT NULL,
					LastModificationDate DateTime NOT NULL,
					CreationDate DateTime NOT NULL,
					CheckedOutBy nvarchar(255) NOT NULL,
					CheckerName nvarchar(255),
					Comments nvarchar(1024),
					CheckOutFlag nvarchar(1) NOT NULL,
					Priority integer NOT NULL,
					ActionPerformed nvarchar(255) NOT NULL,
					RuleVersionNo numeric(3,1) NOT NULL,
					ISValid nvarchar(1) NOT NULL,
					ElseExist nvarchar(1) NOT NULL,
					OtherwiseRule nvarchar(1) NOT NULL,
					SingleCheckOut nvarchar(1) NOT NULL default ''N'',
					BreakRule nvarchar(1) NOT NULL,
					MaxElseIfID nvarchar(15) NOT NULL,
					NeverExpire nvarchar(1) NOT NULL default ''Y'',
					ENCRYPTED nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRRuleDataTableDraft Primary Key (RuleID,VersionNo,RuleVersionNo ),
					CONSTRAINT uk_BRRuleDataTableDraft Unique(RuleName,ParentId, VersionNo,RuleVersionNo ),
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRDecisionRuleDataTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRDecisionRuleDataTableDraft
				(
					RuleID int NOT NULL ,
					RuleOrderID int NOT NULL,
					RuleName nvarchar(255) NOT NULL,
					ParentID integer NOT NULL,
					PackageID integer NOT NULL,
					RulesetID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					RuleVersionNo numeric(3,1) NOT NULL,
					OtherwiseRule nvarchar(1) NOT NULL,
					MOVEDROW nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRDecisionRuleDataTableDraft Primary Key (RuleID,VersionNo,RuleVersionNo )
				)')
	END
	
IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRDecRulePlacehlderTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRDecRulePlacehlderTableDraft
				(
					RulesetID integer NOT NULL,
					ParentID integer NOT NULL,
					RuleID int NOT NULL ,
					VarType nvarchar(255),
					OrderID int NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					RuleVersionNo numeric(3,1) NOT NULL,
					DataValue nvarchar(2048) NOT NULL	
				)')
	END
IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRDecRulePlacehlderTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRDecRulePlacehlderTable
				(
					RulesetID integer NOT NULL,
					ParentID integer NOT NULL,
					RuleID int NOT NULL ,
					VarType nvarchar(255),
					OrderID int NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					DataValue nvarchar(2048) NOT NULL,
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleConditionTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleConditionTable
				(
					RulesetId int NOT NULL,
					ConditionOrderId int NOT NULL,
					RuleId integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					Param1 nvarchar(2048) NOT NULL,
					VarId1 integer NOT NULL,
					VarFieldId1 integer NOT NULL,
					Type1 nvarchar(5) NOT NULL,
					Param2 nvarchar(2048) NOT NULL,
					VarId2 integer NOT NULL,
					VarFieldId2 integer NOT NULL,
					Type2 nvarchar(5) NOT NULL,
					Operator integer NOT NULL,
					LogicalOperator integer NOT NULL,
					StartBrace integer NOT NULL,
					EndBrace integer NOT NULL,
					ElseIfOrderId integer NOT NULL,
					ElseIfId nvarchar(15),
					CONSTRAINT pk_BRRuleConditionTable Primary Key (RuleID,VersionNo, ConditionOrderId,ElseIfOrderId)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleConditionTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleConditionTableDraft
				(
					RulesetId int NOT NULL,
					ConditionOrderId int NOT NULL,
					RuleId integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					Param1 nvarchar(2048) NOT NULL,
					VarId1 integer NOT NULL,
					VarFieldId1 integer NOT NULL,
					Type1 nvarchar(5) NOT NULL,
					Param2 nvarchar(2048) NOT NULL,
					VarId2 integer NOT NULL,
					VarFieldId2 integer NOT NULL,
					Type2 nvarchar(5) NOT NULL,
					Operator integer NOT NULL,
					LogicalOperator integer NOT NULL,
					RuleVersionNo numeric(3,1) NOT NULL,
					StartBrace integer NOT NULL,
					EndBrace integer NOT NULL,
					ElseIfOrderId integer NOT NULL,
					ElseIfId nvarchar(15),
					CONSTRAINT pk_BRRuleConditionTableDraft Primary Key (RuleID,VersionNo, ConditionOrderId,RuleVersionNo,ElseIfOrderId)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleOperationTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleOperationTable
				(
					RulesetId int NOT NULL,
					OperationOrderId int NOT NULL,
					OperationType integer NOT NULL,
					RuleId integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					Param1 nvarchar(2048) NOT NULL,
					VarId1 integer NOT NULL,
					VarFieldId1 integer NOT NULL,
					Type1 nvarchar(5) NOT NULL,
					Param2 nvarchar(2048) NOT NULL,
					VarId2 integer NOT NULL,
					VarFieldId2 integer NOT NULL,
					Type2 nvarchar(5) NOT NULL,
					Operator integer NOT NULL,
					ElseAction nvarchar(1) NOT NULL,
					ElseIfOrderId integer NOT NULL,
					ElseIfId nvarchar(15),
					CONSTRAINT pk_BRRuleOperationTable Primary Key (RuleID,VersionNo, OperationOrderId,ElseAction,ElseIfOrderId)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleOperationTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleOperationTableDraft
				(
					RulesetId int NOT NULL,
					OperationOrderId int NOT NULL,
					OperationType integer NOT NULL,
					RuleId integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					Param1 nvarchar(2048) NOT NULL,
					VarId1 integer NOT NULL,
					VarFieldId1 integer NOT NULL,
					Type1 nvarchar(5) NOT NULL,
					Param2 nvarchar(2048) NOT NULL,
					VarId2 integer NOT NULL,
					VarFieldId2 integer NOT NULL,
					Type2 nvarchar(5) NOT NULL,
					Operator integer NOT NULL,
					RuleVersionNo numeric(3,1) NOT NULL,
					ElseAction nvarchar(1) NOT NULL,
					ElseIfOrderId integer NOT NULL,
					ElseIfId nvarchar(15),
					CONSTRAINT pk_BRRuleOperationTableDraft Primary Key (RuleID,VersionNo, OperationOrderId,RuleVersionNo,ElseAction,ElseIfOrderId)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRUserPreferenceTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRUserPreferenceTable
				(
					UserID Integer NOT NULL,
					NoOfRecordsToFetch integer NOT NULL,
					VersionFlag nvarchar(1)NOT NULL,
					DummyColumn1 	nvarchar(255),
					CONSTRAINT pk_UserPreference Primary Key (UserID),
					CONSTRAINT fk_UserPreference
					FOREIGN KEY (UserID)
					REFERENCES PDBUser(UserIndex)
					ON DELETE CASCADE
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRArgumentsTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRArgumentsTable
				(
					RuleID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					ObjectID integer NOT NULL,
					EntityName nvarchar(255) NOT NULL,
					ObjectParentID integer NOT NULL,
					EntityParentName nvarchar(255),
					Type nvarchar(10) NOT NULL
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRArgumentsTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('create table BRArgumentsTableDraft
				(
					RuleID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					ObjectID integer NOT NULL,
					EntityName nvarchar(255) NOT NULL,
					ObjectParentID integer NOT NULL,
					EntityParentName nvarchar(255),
					Type nvarchar(10) NOT NULL
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRMethodDefTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRMethodDefTable	
				(
					BRMethodIndex	int Not Null,
					BRAppName	nvarchar(255) Not Null,
					BRAppType	nvarchar(2) Not Null,
					BRMethodName	nvarchar(255) Not Null,
					ReturnType	smallint Not Null, 
					ActionOnly nvarchar(1) NOT NULL,
					CONSTRAINT pk_BRMETHODDEFTABLE Primary Key (BRMethodIndex)
				)')
				
				insert into brmethoddeftable values(1,'System','S','contains',12,'N')
				insert into brmethoddeftable values(2,'System','S','normalizeSpace',10,'N')
				insert into brmethoddeftable values(3,'System','S','stringValue',10,'N')
				insert into brmethoddeftable values(4,'System','S','stringValue',10,'N')
				insert into brmethoddeftable values(5,'System','S','stringValue',10,'N')
				insert into brmethoddeftable values(6,'System','S','stringValue',10,'N')
				insert into brmethoddeftable values(7,'System','S','stringValue',10,'N')
				insert into brmethoddeftable values(8,'System','S','stringValue',10,'N')
				insert into brmethoddeftable values(9,'System','S','booleanValue',12,'N')
				insert into brmethoddeftable values(10,'System','S','booleanValue',12,'N')
				insert into brmethoddeftable values(11,'System','S','startsWith',12,'N')
				insert into brmethoddeftable values(12,'System','S','stringLength',3,'N')
				insert into brmethoddeftable values(13,'System','S','subString',10,'N')
				insert into brmethoddeftable values(14,'System','S','subStringBefore',10,'N')
				insert into brmethoddeftable values(15,'System','S','subStringAfter',10,'N')
				insert into brmethoddeftable values(16,'System','S','translate',10,'N')
				insert into brmethoddeftable values(17,'System','S','concat',10,'N')
				insert into brmethoddeftable values(18,'System','S','numberValue',6,'N')
				insert into brmethoddeftable values(19,'System','S','numberValue',6,'N')
				insert into brmethoddeftable values(20,'System','S','numberValue',6,'N')
				insert into brmethoddeftable values(21,'System','S','numberValue',6,'N')
				insert into brmethoddeftable values(22,'System','S','numberValue',6,'N')
				insert into brmethoddeftable values(23,'System','S','round',4,'N')
				insert into brmethoddeftable values(24,'System','S','floor',4,'N')
				insert into brmethoddeftable values(25,'System','S','ceiling',4,'N')
				insert into brmethoddeftable values(28,'System','S','getCurrentDateTime',8,'N')
				insert into brmethoddeftable values(31,'System','S','roundToInt',3,'N')
				insert into brmethoddeftable values(32,'System','S','dateDiff',4,'N')
				insert into brmethoddeftable values(33,'System','S','dateAfter',12,'N')
				insert into brmethoddeftable values(34,'System','S','dateBefore',12,'N')
				insert into brmethoddeftable values(35,'System','S','dateEqual',12,'N')
				insert into brmethoddeftable values(36,'System','S','subtract',3,'N')
				insert into brmethoddeftable values(37,'System','S','subtract',6,'N')
				insert into brmethoddeftable values(38,'System','S','subtract',4,'N')
				insert into brmethoddeftable values(39,'System','S','sum',3,'N')
				insert into brmethoddeftable values(40,'System','S','sum',6,'N')
				insert into brmethoddeftable values(41,'System','S','sum',4,'N')
				insert into brmethoddeftable values(42,'System','S','division',6,'N')
				insert into brmethoddeftable values(43,'System','S','division',6,'N')
				insert into brmethoddeftable values(44,'System','S','division',6,'N')
				insert into brmethoddeftable values(45,'System','S','multiply',3,'N')
				insert into brmethoddeftable values(46,'System','S','multiply',6,'N')
				insert into brmethoddeftable values(47,'System','S','multiply',4,'N')
				insert into brmethoddeftable values(48,'System','S','mod',3,'N')
				insert into brmethoddeftable values(49,'System','S','mod',6,'N')
				insert into brmethoddeftable values(50,'System','S','mod',4,'N')
				insert into brmethoddeftable values(51,'System','S','negate',3,'N')
				insert into brmethoddeftable values(52,'System','S','negate',6,'N')
				insert into brmethoddeftable values(53,'System','S','negate',4,'N')
				insert into brmethoddeftable values(54,'System','S','max',3,'N')
				insert into brmethoddeftable values(55,'System','S','max',6,'N')
				insert into brmethoddeftable values(56,'System','S','max',4,'N')
				insert into brmethoddeftable values(57,'System','S','min',3,'N')
				insert into brmethoddeftable values(58,'System','S','min',6,'N')
				insert into brmethoddeftable values(59,'System','S','min',4,'N')
				insert into brmethoddeftable values(60,'System','S','absolute',3,'N')
				insert into brmethoddeftable values(61,'System','S','absolute',6,'N')
				insert into brmethoddeftable values(62,'System','S','absolute',4,'N')
				insert into brmethoddeftable values(63,'System','S','contains',12,'N')
				insert into brmethoddeftable values(64,'System','S','wildCardAst',12,'N')
				insert into brmethoddeftable values(65,'System','S','caseContains',12,'N')
				insert into brmethoddeftable values(66,'System','S','csvContains',12,'N')
				insert into brmethoddeftable values(67,'System','S','sum',30,'N')
				insert into brmethoddeftable values(68,'System','S','subtract',30,'N')
				insert into brmethoddeftable values(69,'System','S','multiply',30,'N')
				insert into brmethoddeftable values(70,'System','S','division',30,'N')
				insert into brmethoddeftable values(71,'System','S','mod',30,'N')
				insert into brmethoddeftable values(72,'System','S','negate',30,'N')
				insert into brmethoddeftable values(73,'System','S','max',30,'N')
				insert into brmethoddeftable values(74,'System','S','min',30,'N')
				insert into brmethoddeftable values(75,'System','S','getDurationInYears',3,'N')
				insert into brmethoddeftable values(76,'System','S','getDurationInMonths',3,'N')
				insert into brmethoddeftable values(77,'System','S','getDurationInDays',4,'N')
				insert into brmethoddeftable values(78,'System','S','getLogValue',30,'N')
				insert into brmethoddeftable values(79,'System','S','getLogValue',30,'N')
				insert into brmethoddeftable values(80,'System','S','getLogValue',30,'N')

				 insert into brmethoddeftable values(86,'Array','A','size',3,'N')
				 insert into brmethoddeftable values(87,'Array','A','size',3,'N')
				 insert into brmethoddeftable values(88,'Array','A','size',3,'N')
				 insert into brmethoddeftable values(89,'Array','A','size',3,'N')
				 insert into brmethoddeftable values(90,'Array','A','size',3,'N')
				 insert into brmethoddeftable values(91,'Array','A','size',3,'N')
				 
				  
				 insert into brmethoddeftable values(92,'Array','A','isEmpty',12,'N')
				 insert into brmethoddeftable values(93,'Array','A','isEmpty',12,'N')
				 insert into brmethoddeftable values(94,'Array','A','isEmpty',12,'N')
				 insert into brmethoddeftable values(95,'Array','A','isEmpty',12,'N')
				 insert into brmethoddeftable values(96,'Array','A','isEmpty',12,'N')
				 insert into brmethoddeftable values(97,'Array','A','isEmpty',12,'N')

				  insert into brmethoddeftable values(98,'Array','A','get',3,'N')
				 insert into brmethoddeftable values(99,'Array','A','get',4,'N')
				 insert into brmethoddeftable values(100,'Array','A','get',6,'N')
				 insert into brmethoddeftable values(101,'Array','A','get',8,'N')
				 insert into brmethoddeftable values(102,'Array','A','get',10,'N')
				 insert into brmethoddeftable values(103,'Array','A','get',30,'N')
				 
				 insert into brmethoddeftable values(104,'Array','A','set',12,'N')
				 insert into brmethoddeftable values(105,'Array','A','set',12,'N')
				 insert into brmethoddeftable values(106,'Array','A','set',12,'N')
				 insert into brmethoddeftable values(107,'Array','A','set',12,'N')
				 insert into brmethoddeftable values(108,'Array','A','set',12,'N')
				 insert into brmethoddeftable values(109,'Array','A','set',12,'N')
				  
				 insert into brmethoddeftable values(110,'Array','A','indexOf',3,'N')
				 insert into brmethoddeftable values(111,'Array','A','indexOf',3,'N')
				 insert into brmethoddeftable values(112,'Array','A','indexOf',3,'N')
				 insert into brmethoddeftable values(113,'Array','A','indexOf',3,'N')
				 insert into brmethoddeftable values(114,'Array','A','indexOf',3,'N')
				 insert into brmethoddeftable values(115,'Array','A','indexOf',3,'N')
				 
				 insert into brmethoddeftable values(116,'Array','A','lastIndexOf',3,'N')
				 insert into brmethoddeftable values(117,'Array','A','lastIndexOf',3,'N')
				 insert into brmethoddeftable values(118,'Array','A','lastIndexOf',3,'N')
				 insert into brmethoddeftable values(119,'Array','A','lastIndexOf',3,'N')
				 insert into brmethoddeftable values(120,'Array','A','lastIndexOf',3,'N')
				 insert into brmethoddeftable values(121,'Array','A','lastIndexOf',3,'N')
				 
				 insert into brmethoddeftable values(122,'Array','A','append',13,'Y')
				 insert into brmethoddeftable values(123,'Array','A','append',14,'Y')
				 insert into brmethoddeftable values(124,'Array','A','append',16,'Y')
				 insert into brmethoddeftable values(125,'Array','A','append',18,'Y')
				 insert into brmethoddeftable values(126,'Array','A','append',20,'Y')
				 insert into brmethoddeftable values(127,'Array','A','append',22,'Y')
				 insert into brmethoddeftable values(128,'Array','A','append',40,'Y')
				 
				 insert into brmethoddeftable values(129,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(130,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(131,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(132,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(133,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(134,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(135,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(136,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(137,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(138,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(139,'Array','A','contains',12,'N')
				 insert into brmethoddeftable values(140,'Array','A','contains',12,'N')
				 
				 insert into brmethoddeftable values(141,'Array','A','sum',3,'N')
				 insert into brmethoddeftable values(142,'Array','A','sum',4,'N')
				 insert into brmethoddeftable values(143,'Array','A','sum',6,'N')
				 insert into brmethoddeftable values(144,'Array','A','sum',30,'N')
				 insert into brmethoddeftable values(145,'Array','A','sum',3,'N')
				 insert into brmethoddeftable values(146,'Array','A','sum',4,'N')
				 insert into brmethoddeftable values(147,'Array','A','sum',6,'N')
				 insert into brmethoddeftable values(148,'Array','A','sum',30,'N')
				 
				 insert into brmethoddeftable values(149,'Array','A','average',3,'N')
				 insert into brmethoddeftable values(150,'Array','A','average',4,'N')
				 insert into brmethoddeftable values(151,'Array','A','average',6,'N')
				 insert into brmethoddeftable values(152,'Array','A','average',30,'N')
				 insert into brmethoddeftable values(153,'Array','A','average',3,'N')
				 insert into brmethoddeftable values(154,'Array','A','average',4,'N')
				 insert into brmethoddeftable values(155,'Array','A','average',6,'N')
				 insert into brmethoddeftable values(156,'Array','A','average',30,'N')
				 
				 insert into brmethoddeftable values(157,'Array','A','min',3,'N')
				 insert into brmethoddeftable values(158,'Array','A','min',4,'N')
				 insert into brmethoddeftable values(159,'Array','A','min',6,'N')
				 insert into brmethoddeftable values(160,'Array','A','min',30,'N')
				 insert into brmethoddeftable values(161,'Array','A','min',3,'N')
				 insert into brmethoddeftable values(162,'Array','A','min',4,'N')
				 insert into brmethoddeftable values(163,'Array','A','min',6,'N')
				 insert into brmethoddeftable values(164,'Array','A','min',30,'N')
				 
				 insert into brmethoddeftable values(165,'Array','A','max',3,'N')
				 insert into brmethoddeftable values(166,'Array','A','max',4,'N')
				 insert into brmethoddeftable values(167,'Array','A','max',6,'N')
				 insert into brmethoddeftable values(168,'Array','A','max',30,'N')
				 insert into brmethoddeftable values(169,'Array','A','max',3,'N')
				 insert into brmethoddeftable values(170,'Array','A','max',4,'N')
				 insert into brmethoddeftable values(171,'Array','A','max',6,'N')
				 insert into brmethoddeftable values(172,'Array','A','max',30,'N')
				 
				 insert into brmethoddeftable values(173,'Array','A','concatenate',20,'N')
				 insert into brmethoddeftable values(174,'Array','A','concatenate',20,'N')
				 
				 insert into brmethoddeftable values(201,'System','S','pickIntValuesFromDB',3,'N')
				 insert into brmethoddeftable values(202,'System','S','pickLongValuesFromDB',4,'N')
				 insert into brmethoddeftable values(203,'System','S','pickFloatValuesFromDB',6,'N')
				 insert into brmethoddeftable values(204,'System','S','pickDateValuesFromDB',8,'N')
				 insert into brmethoddeftable values(205,'System','S','pickStringValuesFromDB',10,'N')
				 insert into brmethoddeftable values(206,'System','S','pickBigDecimalValuesFromDB',30,'N')
	END
	
IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRMethodParamDefTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRMethodParamDefTable	
				(
					BRMethodParamIndex	int Not NULL,
					BRMethodIndex	int Not NULL,
					ParameterName	nvarchar(255) Not NULL,
					ParameterType	smallint Not NULL,
					ParameterOrder	smallint Not NULL,
					Unbounded	nvarchar(2) Not NULL,
					DummyColumn1 	nvarchar(255),
					CONSTRAINT pk_BRMETHODPARAMDEFTABLE Primary Key (BRMethodParamIndex, BRMethodIndex)
				)')
			insert into brmethodparamdeftable values (1,1,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,1,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,2,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (1,3,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (1,4,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (1,5,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,6,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (1,7,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (1,8,'Param1',12,1,'N',null)
			insert into brmethodparamdeftable values (1,9,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (1,10,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (1,11,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,11,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,12,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (1,13,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,13,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (3,13,'Param3',3,3,'N',null)
			insert into brmethodparamdeftable values (1,14,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,14,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,15,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,15,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,16,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,16,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (3,16,'Param3',10,3,'N',null)
			insert into brmethodparamdeftable values (1,17,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,17,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,18,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (1,19,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,20,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (1,21,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (1,22,'Param1',12,1,'N',null)
			insert into brmethodparamdeftable values (1,23,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,24,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,25,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,31,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,32,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (2,32,'Param2',8,2,'N',null)
			insert into brmethodparamdeftable values (1,33,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (2,33,'Param2',8,2,'N',null)
			insert into brmethodparamdeftable values (1,34,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (2,34,'Param2',8,2,'N',null)
			insert into brmethodparamdeftable values (1,35,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (2,35,'Param2',8,2,'N',null)
			insert into brmethodparamdeftable values (1,36,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (2,36,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (1,37,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (2,37,'Param2',6,2,'N',null)
			insert into brmethodparamdeftable values (1,38,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (2,38,'Param2',4,2,'N',null)
			insert into brmethodparamdeftable values (1,39,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (2,39,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (1,40,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (2,40,'Param2',6,2,'N',null)
			insert into brmethodparamdeftable values (1,41,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (2,41,'Param2',4,2,'N',null)
			insert into brmethodparamdeftable values (1,42,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (2,42,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (1,43,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (2,43,'Param2',6,2,'N',null)
			insert into brmethodparamdeftable values (1,44,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (2,44,'Param2',4,2,'N',null)
			insert into brmethodparamdeftable values (1,45,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (2,45,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (1,46,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (2,46,'Param2',6,2,'N',null)
			insert into brmethodparamdeftable values (1,47,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (2,47,'Param2',4,2,'N',null)
			insert into brmethodparamdeftable values (1,48,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (2,48,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (1,49,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (2,49,'Param2',6,2,'N',null)
			insert into brmethodparamdeftable values (1,50,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (2,50,'Param2',4,2,'N',null)
			insert into brmethodparamdeftable values (1,51,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (1,52,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,53,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (1,54,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (2,54,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (1,55,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (2,55,'Param2',6,2,'N',null)
			insert into brmethodparamdeftable values (1,56,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (2,56,'Param2',4,2,'N',null)
			insert into brmethodparamdeftable values (1,57,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (2,57,'Param2',3,2,'N',null)
			insert into brmethodparamdeftable values (1,58,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (2,58,'Param2',6,2,'N',null)
			insert into brmethodparamdeftable values (1,59,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (2,59,'Param2',4,2,'N',null)
			insert into brmethodparamdeftable values (1,60,'Param1',3,1,'N',null)
			insert into brmethodparamdeftable values (1,61,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,62,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (1,63,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,63,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (3,63,'Param3',12,3,'N',null)
			insert into brmethodparamdeftable values (1,64,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,64,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,65,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,65,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,66,'Param1',10,1,'N',null)
			insert into brmethodparamdeftable values (2,66,'Param2',10,2,'N',null)
			insert into brmethodparamdeftable values (1,67,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (2,67,'Param2',30,2,'N',null)
			insert into brmethodparamdeftable values (1,68,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (2,68,'Param2',30,2,'N',null)
			insert into brmethodparamdeftable values (1,69,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (2,69,'Param2',30,2,'N',null)
			insert into brmethodparamdeftable values (1,70,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (2,70,'Param2',30,2,'N',null)
			insert into brmethodparamdeftable values (1,71,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (2,71,'Param2',30,2,'N',null)
			insert into brmethodparamdeftable values (1,72,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (1,73,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (2,73,'Param2',30,2,'N',null)
			insert into brmethodparamdeftable values (1,74,'Param1',30,1,'N',null)
			insert into brmethodparamdeftable values (2,74,'Param2',30,2,'N',null)
			insert into brmethodparamdeftable values (1,75,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (1,76,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (1,77,'Param1',8,1,'N',null)
			insert into brmethodparamdeftable values (1,78,'Param1',6,1,'N',null)
			insert into brmethodparamdeftable values (1,79,'Param1',4,1,'N',null)
			insert into brmethodparamdeftable values (1,80,'Param1',3,1,'N',null)

			 insert into brmethodparamdeftable values (1,86,'Param1',13,1,'N',null) 
			 insert into brmethodparamdeftable values (1,87,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,88,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,89,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (1,90,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (1,91,'Param1',40,1,'N',null)

			  insert into brmethodparamdeftable values (1,92,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,93,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,94,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,95,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (1,96,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (1,97,'Param1',40,1,'N',null)

			  insert into brmethodparamdeftable values (1,98,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (2,98,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (1,99,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (2,99,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (1,100,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (2,100,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (1,101,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (2,101,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (1,102,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (2,102,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (1,103,'Param1',40,1,'N',null)
			 insert into brmethodparamdeftable values (2,103,'Param2',3,2,'N',null)

			  insert into brmethodparamdeftable values (1,104,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (2,104,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (3,104,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (1,105,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (2,105,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (3,105,'Param3',4,3,'N',null)
			 insert into brmethodparamdeftable values (1,106,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (2,106,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (3,106,'Param3',6,3,'N',null)
			 insert into brmethodparamdeftable values (1,107,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (2,107,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (3,107,'Param3',8,3,'N',null)
			 insert into brmethodparamdeftable values (1,108,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (2,108,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (3,108,'Param3',10,3,'N',null)
			 insert into brmethodparamdeftable values (1,109,'Param1',40,1,'N',null)
			 insert into brmethodparamdeftable values (2,109,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (3,109,'Param3',30,3,'N',null)
			 
			  
			 insert into brmethodparamdeftable values (1,110,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (2,110,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (1,111,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (2,111,'Param2',4,2,'N',null)
			 insert into brmethodparamdeftable values (1,112,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (2,112,'Param2',6,2,'N',null)
			 insert into brmethodparamdeftable values (1,113,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (2,113,'Param2',8,2,'N',null)
			 insert into brmethodparamdeftable values (1,114,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (2,114,'Param2',10,2,'N',null) 
			 insert into brmethodparamdeftable values (1,115,'Param1',40,1,'N',null)
			 insert into brmethodparamdeftable values (2,115,'Param2',30,2,'N',null) 

			 insert into brmethodparamdeftable values (1,116,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (2,116,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (1,117,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (2,117,'Param2',4,2,'N',null)
			 insert into brmethodparamdeftable values (1,118,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (2,118,'Param2',6,2,'N',null)
			 insert into brmethodparamdeftable values (1,119,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (2,119,'Param2',8,2,'N',null)
			 insert into brmethodparamdeftable values (1,120,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (2,120,'Param2',10,2,'N',null)
			 insert into brmethodparamdeftable values (1,121,'Param1',40,1,'N',null)
			 insert into brmethodparamdeftable values (2,121,'Param2',30,2,'N',null)

			 insert into brmethodparamdeftable values (1,122,'Param1',3,1,'N',null)
			 insert into brmethodparamdeftable values (1,123,'Param1',4,1,'N',null)
			 insert into brmethodparamdeftable values (1,124,'Param1',6,1,'N',null)
			 insert into brmethodparamdeftable values (1,125,'Param1',8,1,'N',null)
			 insert into brmethodparamdeftable values (1,126,'Param1',10,1,'N',null)
			 insert into brmethodparamdeftable values (1,127,'Param1',12,1,'N',null)
			 insert into brmethodparamdeftable values (1,128,'Param1',30,1,'N',null)
			 /* Added by Mahitha Kalyani for Array Functions */
			 insert into brmethodparamdeftable values (1,129,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,130,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,131,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,132,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (1,133,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (1,134,'Param1',40,1,'N',null)
			 
			 insert into brmethodparamdeftable values (2,129,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,130,'Param2',4,2,'N',null)
			 insert into brmethodparamdeftable values (2,131,'Param2',6,2,'N',null)
			 insert into brmethodparamdeftable values (2,132,'Param2',8,2,'N',null)
			 insert into brmethodparamdeftable values (2,133,'Param2',10,2,'N',null)
			 insert into brmethodparamdeftable values (2,134,'Param2',30,2,'N',null)
			 
			 insert into brmethodparamdeftable values (1,135,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,136,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,137,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,138,'Param1',18,1,'N',null)
			 insert into brmethodparamdeftable values (1,139,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (1,140,'Param1',40,1,'N',null)
			 
			 insert into brmethodparamdeftable values (2,135,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,136,'Param2',4,2,'N',null)
			 insert into brmethodparamdeftable values (2,137,'Param2',6,2,'N',null)
			 insert into brmethodparamdeftable values (2,138,'Param2',8,2,'N',null)
			 insert into brmethodparamdeftable values (2,139,'Param2',10,2,'N',null)
			 insert into brmethodparamdeftable values (2,140,'Param2',30,2,'N',null)
			 
			 insert into brmethodparamdeftable values (3,135,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,136,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,137,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,138,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,139,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,140,'Param3',3,3,'N',null)
			 
			 insert into brmethodparamdeftable values (4,135,'Param4',3,4,'N',null)
			 insert into brmethodparamdeftable values (4,136,'Param4',3,4,'N',null)
			 insert into brmethodparamdeftable values (4,137,'Param4',3,4,'N',null)
			 insert into brmethodparamdeftable values (4,138,'Param4',3,4,'N',null)
			 insert into brmethodparamdeftable values (4,139,'Param4',3,4,'N',null)
			 insert into brmethodparamdeftable values (4,140,'Param4',3,4,'N',null)
			 
			 insert into brmethodparamdeftable values (1,141,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,142,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,143,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,144,'Param1',40,1,'N',null)
			 
			 insert into brmethodparamdeftable values (1,145,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,146,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,147,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,148,'Param1',40,1,'N',null)

			 insert into brmethodparamdeftable values (2,145,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,146,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,147,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,148,'Param2',3,2,'N',null)
			 
			 insert into brmethodparamdeftable values (3,145,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,146,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,147,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,148,'Param3',3,3,'N',null)
			 
			 insert into brmethodparamdeftable values (1,149,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,150,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,151,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,152,'Param1',40,1,'N',null)
			 
			 insert into brmethodparamdeftable values (1,153,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,154,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,155,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,156,'Param1',40,1,'N',null)

			 insert into brmethodparamdeftable values (2,153,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,154,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,155,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,156,'Param2',3,2,'N',null)
			 
			 insert into brmethodparamdeftable values (3,153,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,154,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,155,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,156,'Param3',3,3,'N',null)
			 
			 insert into brmethodparamdeftable values (1,157,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,158,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,159,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,160,'Param1',40,1,'N',null)
			 
			 insert into brmethodparamdeftable values (1,161,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,162,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,163,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,164,'Param1',40,1,'N',null)

			 insert into brmethodparamdeftable values (2,161,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,162,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,163,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,164,'Param2',3,2,'N',null)
			 
			 insert into brmethodparamdeftable values (3,161,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,162,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,163,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,164,'Param3',3,3,'N',null)
			 
			 insert into brmethodparamdeftable values (1,165,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,166,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,167,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,168,'Param1',40,1,'N',null)
			 
			 insert into brmethodparamdeftable values (1,169,'Param1',13,1,'N',null)
			 insert into brmethodparamdeftable values (1,170,'Param1',14,1,'N',null)
			 insert into brmethodparamdeftable values (1,171,'Param1',16,1,'N',null)
			 insert into brmethodparamdeftable values (1,172,'Param1',40,1,'N',null)

			 insert into brmethodparamdeftable values (2,169,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,170,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,171,'Param2',3,2,'N',null)
			 insert into brmethodparamdeftable values (2,172,'Param2',3,2,'N',null)
			 
			 insert into brmethodparamdeftable values (3,169,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,170,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,171,'Param3',3,3,'N',null)
			 insert into brmethodparamdeftable values (3,172,'Param3',3,3,'N',null)
			 
			 insert into brmethodparamdeftable values (1,173,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (2,173,'Param2',20,2,'N',null)
			 insert into brmethodparamdeftable values (3,173,'Param3',10,3,'N',null)
			 
			 insert into brmethodparamdeftable values (1,174,'Param1',20,1,'N',null)
			 insert into brmethodparamdeftable values (2,174,'Param2',20,2,'N',null)
			 insert into brmethodparamdeftable values (3,174,'Param3',10,3,'N',null)
			 insert into brmethodparamdeftable values (4,174,'Param4',3,4,'N',null)
			 insert into brmethodparamdeftable values (5,174,'Param5',3,5,'N',null)
			 /*Till here Array Functions*/
			 insert into brmethodparamdeftable values (1,201,'Param1',10,1,'N',null)
			 insert into brmethodparamdeftable values (1,202,'Param1',10,1,'N',null)
			 insert into brmethodparamdeftable values (1,203,'Param1',10,1,'N',null)
			 insert into brmethodparamdeftable values (1,204,'Param1',10,1,'N',null)
			 insert into brmethodparamdeftable values (1,205,'Param1',10,1,'N',null)
			 insert into brmethodparamdeftable values (1,206,'Param1',10,1,'N',null)
	END
	
IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRMethodParamMappingTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRMethodParamMappingTable
				(
					RulesetId int NOT NULL,
					RuleId	int NOT NULL,
					VersionNo numeric(3,1) not null, 
					RuleOperationOrderId	smallint NOT NULL,
					RuleConditionOrderId	smallint NOT NULL,
					BRMethodIndex	int NOT NULL,
					BRMethodParamIndex	int NOT NULL,
					MappedField	nvarchar(2048) NOT NULL,
					MappedFieldType	nvarchar(6) NOT NULL,
					VariableId	int NOT NULL,
					VarFieldId	int NOT NULL,
					MethodSequenceId int,
					RefID int,
					ElseIfOrderId integer NOT NULL,
					ElseIfId nvarchar(15)
				)')
	END
--CREATE INDEX RuleIndex ON BRMethodParamMappingTable (RuleId)

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRMethodParamMappingTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('create table BRMethodParamMappingTableDraft
				(
					RulesetId int NOT NULL,
					RuleId	int NOT NULL,
					VersionNo numeric(3,1) not null, 
					RuleOperationOrderId	smallint NOT NULL,
					RuleConditionOrderId	smallint NOT NULL,
					BRMethodIndex	int NOT NULL,
					BRMethodParamIndex	int NOT NULL,
					MappedField	nvarchar(2048) NOT NULL,
					MappedFieldType	nvarchar(6) NOT NULL,
					VariableId	int NOT NULL,
					VarFieldId	int NOT NULL,
					RuleVersionNo 	numeric(3,1) NOT NULL,
					MethodSequenceId int,
					RefID int,
					ElseIfOrderId integer NOT NULL,
					ElseIfId nvarchar(15)
				)')
	END
--CREATE INDEX RuleIndexDraft ON BRMethodParamMappingTableDraft (RuleId)

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRHistoryRouteLogTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRHistoryRouteLogTable
				(
					LogId	int,
					UserId	int,
					UserName	nvarchar(255),
					RootID	int,
					RootName	nvarchar(255),
					RootVersionNo	numeric(3,1),
					FieldID	int,
					FieldName	nvarchar(255),
					ActionId	int,
					ActionName	nvarchar(255),
					ActionDateTime	datetime,
					AssociatedFieldId	int,
					AssociatedFieldName	nvarchar(255),
					NewValue	nvarchar(255),
					AssociatedDateTime	datetime,
					Type	int,
					ERFlag	nvarchar(1)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRCurrentRouteLogTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRCurrentRouteLogTable
				(
					LogId	int,
					UserId	int,
					UserName	nvarchar(255),
					RootID	int,
					RootName	nvarchar(255),
					RootVersionNo		numeric(3,1),
					FieldID		int,
					FieldName	nvarchar(255),
					ActionId	int,
					ActionName	nvarchar(255),
					ActionDateTime	datetime,
					AssociatedFieldId	int,
					AssociatedFieldName	nvarchar(255),
					NewValue	nvarchar(255),
					AssociatedDateTime	datetime,
					Type	int,
					ERFlag	nvarchar(1),
					DummyColumn1 nvarchar(255),
					DummyColumn2 int,
					OldData nvarchar(2000) default '' '',
					NewData nvarchar(2000) default '' ''
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRSummaryTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRSummaryTable
				(
					HostIP nvarchar(255),
					HostName nvarchar(255),
					UserId	int,
					UserName	nvarchar(255),
					RuleSetID	int,
					RuleSetName	nvarchar(255),
					RuleSetVersionNo	numeric(3,1),
					TotalExecutionCount	int,
					ActionId	int,
					ActionName	nvarchar(255),
					ActionDateTime	datetime,
					ReportType	nvarchar(1),
					TotalProcessingTime	bigint,
					AssociatedFieldId	int,
					AssociatedFieldName	nvarchar(255),
					DummyColumn1 	nvarchar(255),
					DummyColumn2 	int
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleFlowTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleFlowTable
				(
					[RulesetId] [int] NOT NULL,
					[VersionNo] [numeric](3, 1) NOT NULL,
					[RuleFlowId] [int] NOT NULL,
					[RuleFlowName] [varchar](255) NOT NULL,
					[Status] [varchar](255) NOT NULL,
					[Creator] [varchar](255) NOT NULL,
					[CreationDate] [datetime] NOT NULL,
					[LastModifiedBy] [varchar](255) NULL,
					[LastModificationDate] [datetime] NULL,
					[DummyColumn1] [int] NULL,
					[DummyColumn2] [nvarchar](255) NULL,
					[DummyColumn3] [nvarchar](255) NULL,
					CONSTRAINT pk_BRRuleFlowTable Primary Key (RulesetId,VersionNo,RuleFlowId),
					CONSTRAINT uk_BRRuleFlowTable Unique(RulesetId,VersionNo,RuleFlowName),
					--CONSTRAINT fk_BRRuleFlowTable FOREIGN KEY (RulesetId, VersionNo) REFERENCES BRRuleTable(RuleID,VersionNo)  ON DELETE CASCADE
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleFlowTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleFlowTableDraft
				(
					[RulesetId] [int] NOT NULL,
					[VersionNo] [numeric](3, 1) NOT NULL,
					[RuleFlowId] [int] NOT NULL,
					[RuleFlowName] [varchar](255) NOT NULL,
					[Status] [varchar](255) NOT NULL,
					[Creator] [varchar](255) NOT NULL,
					[CreationDate] [datetime] NOT NULL,
					[LastModifiedBy] [varchar](255) NULL,
					[LastModificationDate] [datetime] NULL,
					[CheckedOutBy] [varchar](255) NULL,
					[CheckerName] [varchar](255) NULL,
					[Comments] [varchar](255) NULL,
					[CheckOutFlag] [varchar](1) NOT NULL,
					[ActionPerformed] [varchar](255) NOT NULL,
					[IsValid] [varchar](1) NOT NULL,
					[RuleFlowVersionNo] [numeric](3, 1) NOT NULL,
					[DummyColumn1] [int] NULL,
					[DummyColumn2] [nvarchar](255) NULL,
					[DummyColumn3] [nvarchar](255) NULL,
					CONSTRAINT pk_BRRuleFlowTableDraft Primary Key (RulesetId,VersionNo,RuleFlowId,RuleFlowVersionNo ),
					CONSTRAINT uk_BRRuleFlowTableDraft Unique(RulesetId,VersionNo,RuleFlowName,RuleFlowVersionNo ),
				)')
	END


IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleFlowNodeTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleFlowNodeTable
				(
					[RulesetID] [int] NOT NULL,
					[VersionNo] [numeric](3, 1) NOT NULL,
					[RuleFlowId] [int] NOT NULL,
					[NodeId] [int] NOT NULL,
					[NodeName] [varchar](255) NOT NULL,
					[NodeType] [int] NOT NULL,
					[NodeValue] [int] NOT NULL,
					[XPosition] [int] NOT NULL,
					[YPosition] [int] NOT NULL,
					[Width] [int] NOT NULL,
					[Height] [int] NOT NULL,
					[DummyColumn1] [int] NULL,
					[DummyColumn2] [nvarchar](255) NULL,
					[DummyColumn3] [nvarchar](255) NULL,
					CONSTRAINT pk_BRRuleFlowNodeTable Primary Key (RulesetId,VersionNo, RuleFlowId, NodeId),
					CONSTRAINT fk_BRRuleFlowNodeTable 
					FOREIGN KEY (RulesetId,VersionNo,RuleFlowId)
					REFERENCES BRRuleFlowTable(RulesetId, VersionNo, RuleFlowId)
					on delete cascade
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleFlowNodeTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleFlowNodeTableDraft
				(
					[RulesetID] [int] NOT NULL,
					[VersionNo] [numeric](3, 1) NOT NULL,
					[RuleFlowId] [int] NOT NULL,
					[NodeId] [int] NOT NULL,
					[NodeName] [varchar](255) NOT NULL,
					[NodeType] [int] NOT NULL,
					[NodeValue] [int] NOT NULL,
					[XPosition] [int] NOT NULL,
					[YPosition] [int] NOT NULL,
					[Width] [int] NOT NULL,
					[Height] [int] NOT NULL,
					[RuleFlowVersionNo] [numeric](3, 1) NOT NULL,
					[DummyColumn1] [int] NULL,
					[DummyColumn2] [nvarchar](255) NULL,
					[DummyColumn3] [nvarchar](255) NULL,
					CONSTRAINT pk_BRRuleFlowNodeTableDraft Primary Key (RulesetId,VersionNo, RuleFlowId, NodeId,RuleFlowVersionNo)
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleFlowConnectionTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleFlowConnectionTable
				(
					[RulesetID] [int] NOT NULL,
					[VersionNo] [numeric](3, 1) NOT NULL,
					[RuleFlowId] [int] NOT NULL,
					[SourceNodeId] [int] NOT NULL,
					[TargetNodeId] [int] NOT NULL,
					[DummyColumn1] [int] NULL,
					[DummyColumn2] [nvarchar](255) NULL,
					[DummyColumn3] [nvarchar](255) NULL,
					CONSTRAINT fk_BRRuleFlowConnectionTable 
					FOREIGN KEY (RulesetID, VersionNo, RuleFlowId)
					REFERENCES BRRuleFlowTable(RulesetId, VersionNo, RuleFlowId)
					on delete cascade
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRRuleFlowConnectionTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRRuleFlowConnectionTableDraft
				(
					[RulesetID] [int] NOT NULL,
					[VersionNo] [numeric](3, 1) NOT NULL,
					[RuleFlowId] [int] NOT NULL,
					[SourceNodeId] [int] NOT NULL,
					[TargetNodeId] [int] NOT NULL,
					[RuleFlowVersionNo] [numeric](3, 1) NOT NULL,
					[DummyColumn1] [int] NULL,
					[DummyColumn2] [nvarchar](255) NULL,
					[DummyColumn3] [nvarchar](255) NULL
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRConfigTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRConfigTable(
				KeyName nvarchar(255) NOT NULL,
				value nvarchar(255) NOT NULL)')
	
				insert into BRConfigTable values ('EnabledSSO','Y')
				insert into BRConfigTable values ('EnableFunction','N')
				insert into BRConfigTable values ('EnableSessionExpireWarn','Y')
				insert into BRConfigTable values ('SessionExpireWarnTime','3')
				insert into BRConfigTable values ('DecisionBatchSize','100')
				insert into BRConfigTable values ('DuplicateRowFlag','C')
				insert into BRConfigTable values ('DuplicateRowCheck','N')
				INSERT into BRConfigTable values ('DefaultINT','0')
				INSERT into BRConfigTable values ('DefaultLONG','0')
				INSERT into BRConfigTable values ('DefaultFLOAT','0.0')
				INSERT into BRConfigTable values ('DefaultDATE',CONVERT(VARCHAR(255),GETDATE(),105))
				INSERT into BRConfigTable values ('DefaultSTRING','*')
				INSERT into BRConfigTable values ('Array_Delimiter',',')
	END
	
IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRPicklistAssocTable' AND type = 'U')
	BEGIN
		EXECUTE('create table BRPicklistAssocTable
				(
					RuleID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					ObjectID integer NOT NULL,
					EntityName nvarchar(255) NOT NULL,
					ObjectParentID integer NOT NULL,
					EntityParentName nvarchar(255),
					ObjectGroupID integer NOT NULL,
					EntityGroupName nvarchar(255),
					DataType integer NOT NULL,
					AssociatedListId integer NOT NULL,
					DefaultValue nvarchar(255),
					DefaultAlias nvarchar(255) NOT NULL default '' '',
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRPicklistAssocTableDraft' AND type = 'U')
	BEGIN
		EXECUTE('create table BRPicklistAssocTableDraft
				(
					RuleID integer NOT NULL,
					VersionNo numeric(3,1) NOT NULL,
					ObjectID integer NOT NULL,
					EntityName nvarchar(255) NOT NULL,
					ObjectParentID integer NOT NULL,
					EntityParentName nvarchar(255),
					ObjectGroupID integer NOT NULL,
					EntityGroupName nvarchar(255),
					DataType integer NOT NULL,
					AssociatedListId integer NOT NULL,
					DefaultValue nvarchar(255),
					DefaultAlias nvarchar(255) NOT NULL default '' '',
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRPicklistTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRPicklistTable
				(
					ObjectId integer NOT NULL,
					PicklistName nvarchar(50) NOT NULL,
					PicklistDesc nvarchar(1024),
					DataType integer NOT NULL,
					PicklistType nvarchar(1) NOT NULL,
					QueryString nvarchar(512),
					ShowAlias nvarchar(1) NOT NULL default ''N'',
					CONSTRAINT pk_BRPicklistTable Primary Key (ObjectID),
					CONSTRAINT uk_BRPicklistTable Unique(PicklistName),
				)')
	END

IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = N'BRStaticPickListTable' AND type = 'U')
	BEGIN
		EXECUTE('CREATE TABLE BRStaticPickListTable
				(
					ObjectId integer NOT NULL,
					OrderId integer NOT NULL,
					SValue nvarchar(50) NOT NULL,
					AliasValue nvarchar(255) NOT NULL default '' '',
				)')
	END

CREATE INDEX Indx_BREntityGroupTable ON BREntityGroupTable (ObjectId,EntityName)

CREATE INDEX Indx_BREntityClassTable ON BREntityClassTable (ParentId)

CREATE INDEX Indx_BREntityMemberTable ON BREntityMemberTable (ParentId,EntityType,EntityName)

CREATE INDEX Indx_BRRuleDataTable ON BRRuleDataTable (RuleName,ParentId,Status,ActionPerformed,VersionNo)

CREATE INDEX Indx_BRRuleDataTableDraft ON BRRuleDataTableDraft (RuleName,ParentId,Status,ActionPerformed,VersionNo,RuleVersionNo)

CREATE INDEX Indx_BRDecisionRuleDataTable ON BRDecisionRuleDataTable (RuleId,ParentId,RuleOrderId,VersionNo)

CREATE INDEX Indx_BRDecRuleDataTableDraft ON BRDecisionRuleDataTableDraft (RuleId,ParentId,RuleOrderId,VersionNo,RuleVersionNo)

CREATE INDEX Indx_BRDecRulePlacehlderTable ON BRDecRulePlacehlderTable (ParentId,RuleId,OrderId,VersionNo)

CREATE INDEX Indx_BRDecRulPlachlderTabDraft ON BRDecRulePlacehlderTableDraft (ParentId,RuleId,OrderId,VersionNo,RuleVersionNo)

CREATE INDEX Indx_BRRuleConditionTable ON BRRuleConditionTable (VarId1,VarFieldId1,Type1,VarId2,VarFieldId2,Type2,RuleId,ConditionOrderId,VersionNo)

CREATE INDEX Indx_BRRuleConditionTableDraft ON BRRuleConditionTableDraft (VarId1,VarFieldId1,Type1,VarId2,VarFieldId2,Type2,RuleId,ConditionOrderId,VersionNo,RuleVersionNo)

CREATE INDEX Indx_BRRuleOperationTable ON BRRuleOperationTable (VarFieldId1,VarFieldId2,RuleId,OperationOrderId,VersionNo)

CREATE INDEX Indx_BRRuleOperationTableDraft ON BRRuleOperationTableDraft (VarFieldId1,VarFieldId2,RuleId,OperationOrderId,VersionNo,RuleVersionNo)

CREATE INDEX Indx_BRArgumentsTable ON BRArgumentsTable (RuleID,Type)

CREATE INDEX Indx_BRArgumentsTableDraft ON BRArgumentsTableDraft (RuleID,Type)

CREATE INDEX Indx_BRMethodDefTable ON BRMethodDefTable (BRMethodIndex,ReturnType,BRAppName,ActionOnly,BRMethodName)

CREATE INDEX Indx_BRMethodParamDefTable ON BRMethodParamDefTable (BRMethodIndex,ParameterOrder)

CREATE INDEX Indx_BRCurrentRouteLogTable ON BRCurrentRouteLogTable (FieldID,Type,ActionId,ERFlag,LogID)

CREATE INDEX Indx_BRPicklistAssocTable ON BRPicklistAssocTable (RuleID,VersionNo)

CREATE INDEX Indx_BRPicklistAssocTableDraft ON BRPicklistAssocTableDraft (RuleID,VersionNo)

CREATE INDEX Indx_BRStaticPickListTable ON BRStaticPickListTable (ObjectId)

CREATE INDEX Indx_BRMethodParamMappingTable ON BRMethodParamMappingTable (VarFieldId,RuleId,VersionNo,RuleOperationOrderId,RuleConditionOrderId)

CREATE INDEX Indx_BRMethodParmMapTableDraft ON BRMethodParamMappingTableDraft (VarFieldId,RuleId,VersionNo,RuleOperationOrderId,RuleConditionOrderId,RuleVersionNo)

END

go

If Exists (SELECT 1 FROM SYSObjects WHERE NAME = 'updateRuleOrderIDs' AND xType = 'P')
BEGIN
	Drop Procedure updateRuleOrderIDs
	PRINT 'As Procedure updateRuleOrderIDs exists dropping old procedure ........... '
END
go

CREATE PROCEDURE updateRuleOrderIDs @parentId int,@ruleVersionNo float
AS
Declare     @ruleId int,
            @ruleOrderId int,
            @ruleName nvarchar(255),
            @counter int,
            @tempName nvarchar(255),
            @beginPos int,
			@endPos int,
			@ruleIdMoved int,
			@fetchStatusMoved int,
			@fetchStatusNormal int,
			@ruleOrderIdMoved int,
			@rulenameMoved nvarchar(255),
            @tempSubName nvarchar(255),
			@movedRowVal nvarchar(1)
SELECT
@counter = 1
SELECT @movedRowVal = 'N'
Declare curP cursor For
	SELECT RULEID,RULEORDERID,RULENAME from BRDECISIONRULEDATATABLEDRAFT where PARENTID = @parentId and RULEVERSIONNO=@ruleVersionNo and MovedRow='N' ORDER BY RULEORDERID,RuleId Desc	
OPEN curP 
Declare curMovedRows cursor For
	SELECT RULEID,RULEORDERID,RULENAME from BRDECISIONRULEDATATABLEDRAFT where PARENTID = @parentId and RULEVERSIONNO=@ruleVersionNo and MovedRow='Y' ORDER BY RULEORDERID,RuleId Desc	
OPEN curMovedRows 
Fetch Next From curMovedRows Into @ruleIdMoved, @ruleOrderIdMoved,@rulenameMoved
IF @@Fetch_Status = 0 BEGIN
	SELECT @fetchStatusMoved = 0
END
ELSE BEGIN
	SELECT @fetchStatusMoved = 1
END
Fetch Next From curP Into @ruleId, @ruleOrderId,@ruleName
IF @@Fetch_Status = 0 BEGIN
	SELECT @fetchStatusNormal = 0
END
ELSE BEGIN
	SELECT @fetchStatusNormal = 1
END
--While @@Fetch_Status = 0 Begin
While 1=1 Begin
	SELECT @tempName = Rulename FROM BRRULEDATATABLEDRAFT WHERE RULEID=@parentId and RULEVERSIONNO=@ruleVersionNo
	--SELECT @tempSubName ='SubRule' + @tempName + CONVERT(varchar(100),@counter - 1)
	SELECT @tempSubName ='SubRule' + @tempName + '_' + CONVERT(varchar(100),@counter - 1)--modified for bug id 70492 by mahitha kalyani
	IF (@fetchStatusMoved = 0 AND @ruleOrderIdMoved = @counter)
	BEGIN
			update BRDECISIONRULEDATATABLEDRAFT SET RuleOrderID = @ruleOrderIdMoved,RuleName=@tempSubName,MovedRow=@movedRowVal where RuleID = @ruleIdMoved and RuleVersionNo=@ruleVersionNo
			Fetch Next From curMovedRows Into @ruleIdMoved, @ruleOrderIdMoved,@rulenameMoved
			IF @@Fetch_Status = 0 BEGIN
				SELECT @fetchStatusMoved = 0
			END
			ELSE BEGIN
				SELECT @fetchStatusMoved = 1
			END
	END
	ELSE IF (@fetchStatusNormal = 0)
	BEGIN
			update BRDECISIONRULEDATATABLEDRAFT SET RuleOrderID = @counter,RuleName=@tempSubName,MovedRow=@movedRowVal where RuleID = @ruleId and RuleVersionNo=@ruleVersionNo	
			Fetch Next From curP Into @ruleId, @ruleOrderId,@ruleName
			IF @@Fetch_Status = 0 BEGIN
				SELECT @fetchStatusNormal = 0
			END
			ELSE BEGIN
				SELECT @fetchStatusNormal = 1
			END
	END
	IF(@fetchStatusNormal = 1 AND @fetchStatusMoved = 1)
		BREAK
SELECT
@counter = @counter + 1
End -- End of while
Close curP
Deallocate curP
Close curMovedRows
Deallocate curMovedRows

go

exec create_cab_brms2_0;

go

